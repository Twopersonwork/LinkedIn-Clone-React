"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TableBody = void 0;
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var config_1 = require("./config");
/**
 * Creates a `<tbody>` element that also allows for overriding all the child
 * `TableCell` components with additional styling behavior.
 */
exports.TableBody = react_1.forwardRef(function TableBody(_a, ref) {
    var className = _a.className, children = _a.children, propHAlign = _a.hAlign, propVAlign = _a.vAlign, propLineWrap = _a.lineWrap, propDisableHover = _a.disableHover, propDisableBorders = _a.disableBorders, props = __rest(_a, ["className", "children", "hAlign", "vAlign", "lineWrap", "disableHover", "disableBorders"]);
    // update the table configuration with the custom overrides for the `<thead>`
    var _b = config_1.useTableConfig({
        hAlign: propHAlign,
        vAlign: propVAlign,
        lineWrap: propLineWrap,
        disableHover: propDisableHover,
        disableBorders: propDisableBorders,
    }), hAlign = _b.hAlign, vAlign = _b.vAlign, lineWrap = _b.lineWrap, disableHover = _b.disableHover, disableBorders = _b.disableBorders;
    var configuration = react_1.useMemo(function () { return ({
        header: false,
        hAlign: hAlign,
        vAlign: vAlign,
        lineWrap: lineWrap,
        disableBorders: disableBorders,
        disableHover: disableHover,
    }); }, [hAlign, vAlign, lineWrap, disableBorders, disableHover]);
    return (react_1.default.createElement(config_1.TableConfigProvider, { value: configuration },
        react_1.default.createElement("tbody", __assign({}, props, { ref: ref, className: classnames_1.default("rmd-tbody", className) }), children)));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        exports.TableBody.propTypes = {
            className: PropTypes.string,
            children: PropTypes.node,
            lineWrap: PropTypes.oneOfType([
                PropTypes.bool,
                PropTypes.oneOf(["padded"]),
            ]),
            hAlign: PropTypes.oneOf(["left", "center", "right"]),
            vAlign: PropTypes.oneOf(["top", "middle", "bottom"]),
            disableHover: PropTypes.bool,
            disableBorders: PropTypes.bool,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=TableBody.js.map