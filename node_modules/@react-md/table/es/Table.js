var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useMemo } from "react";
import cn from "classnames";
import { bem } from "@react-md/utils";
import { TableConfigProvider } from "./config";
var block = bem("rmd-table");
/**
 * Creates a `<table>` element with some default styles and a quick way to
 * configure the other styles within a table. That being said, styling tables is
 * awful if you are used to flexbox and this component will not be helping with
 * layout styles of tables.
 *
 * The table will not be responsive by default, but you can easily create a
 * responsive table with overflow by wrapping with the `TableContainer`
 * component or just adding `overflow: auto` to a parent element. Note that
 * horizontal scrolling is still not one of the best user interactions and it
 * might be better to render a table in a different manner for mobile devices to
 * help display all the required data.
 */
export var Table = forwardRef(function Table(_a, ref) {
    var className = _a.className, children = _a.children, _b = _a.dense, dense = _b === void 0 ? false : _b, _c = _a.hAlign, hAlign = _c === void 0 ? "left" : _c, _d = _a.vAlign, vAlign = _d === void 0 ? "middle" : _d, _e = _a.lineWrap, lineWrap = _e === void 0 ? false : _e, _f = _a.fullWidth, fullWidth = _f === void 0 ? false : _f, _g = _a.disableHover, disableHover = _g === void 0 ? false : _g, _h = _a.disableBorders, disableBorders = _h === void 0 ? false : _h, props = __rest(_a, ["className", "children", "dense", "hAlign", "vAlign", "lineWrap", "fullWidth", "disableHover", "disableBorders"]);
    var configuration = useMemo(function () { return ({
        header: false,
        hAlign: hAlign,
        vAlign: vAlign,
        lineWrap: lineWrap,
        disableHover: disableHover,
        disableBorders: disableBorders,
    }); }, [hAlign, vAlign, lineWrap, disableHover, disableBorders]);
    return (React.createElement(TableConfigProvider, { value: configuration },
        React.createElement("table", __assign({}, props, { ref: ref, className: cn(block({
                dense: dense,
                "full-width": fullWidth,
            }), className) }), children)));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        Table.propTypes = {
            children: PropTypes.node,
            className: PropTypes.string,
            dense: PropTypes.bool,
            fullWidth: PropTypes.bool,
            disableHover: PropTypes.bool,
            disableBorders: PropTypes.bool,
            hAlign: PropTypes.oneOf(["left", "center", "right"]),
            vAlign: PropTypes.oneOf(["top", "middle", "bottom"]),
            lineWrap: PropTypes.oneOfType([
                PropTypes.bool,
                PropTypes.oneOf(["padded"]),
            ]),
        };
    }
    catch (e) { }
}
//# sourceMappingURL=Table.js.map