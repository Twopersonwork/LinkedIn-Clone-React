var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useMemo } from "react";
import cn from "classnames";
import { bem } from "@react-md/utils";
import { TableConfigProvider, useTableConfig } from "./config";
import { TableFooterProvider } from "./footer";
import { StickyTableProvider } from "./sticky";
var block = bem("rmd-foot");
/**
 * Creates a `<tfoot>` element with some basic styles. This component will
 * disable the hover effect and line wrapping by default, but the hover effect
 * and line-wrapping can be re-enabled if desired through the `hoverable` and
 * `disableNoWrap` props.
 */
export var TableFooter = forwardRef(function TableFooter(_a, ref) {
    var className = _a.className, _b = _a.hoverable, hoverable = _b === void 0 ? false : _b, propLineWrap = _a.lineWrap, children = _a.children, _c = _a.sticky, sticky = _c === void 0 ? false : _c, props = __rest(_a, ["className", "hoverable", "lineWrap", "children", "sticky"]);
    // update the table configuration with the custom overrides for the `<tfoot>`
    var _d = useTableConfig({
        lineWrap: propLineWrap,
        disableHover: !hoverable,
    }), hAlign = _d.hAlign, vAlign = _d.vAlign, lineWrap = _d.lineWrap, disableHover = _d.disableHover, disableBorders = _d.disableBorders;
    var configuration = useMemo(function () { return ({
        header: false,
        hAlign: hAlign,
        vAlign: vAlign,
        lineWrap: lineWrap,
        disableBorders: disableBorders,
        disableHover: disableHover,
    }); }, [hAlign, vAlign, lineWrap, disableBorders, disableHover]);
    return (React.createElement(TableConfigProvider, { value: configuration },
        React.createElement(TableFooterProvider, { value: true },
            React.createElement("tfoot", __assign({}, props, { ref: ref, className: cn(block(), className) }),
                React.createElement(StickyTableProvider, { value: sticky }, children)))));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        TableFooter.propTypes = {
            className: PropTypes.string,
            lineWrap: PropTypes.oneOfType([
                PropTypes.bool,
                PropTypes.oneOf(["padded"]),
            ]),
            hoverable: PropTypes.bool,
            sticky: PropTypes.bool,
            children: PropTypes.node,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=TableFooter.js.map