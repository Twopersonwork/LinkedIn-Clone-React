import { createContext, useContext } from "react";
var context = createContext({
    header: false,
    hAlign: "left",
    vAlign: "middle",
    lineWrap: false,
    disableHover: false,
    disableBorders: false,
});
/**
 * An internal hook for getting the current table configuration in child
 * components for the table. This will use the inherited table configuration
 * context if the prop value is `undefined`.
 *
 * @internal
 */
export function useTableConfig(options) {
    var _a, _b, _c, _d, _e, _f;
    var inherited = useContext(context);
    var header = (_a = options.header) !== null && _a !== void 0 ? _a : inherited.header;
    var hAlign = (_b = options.hAlign) !== null && _b !== void 0 ? _b : inherited.hAlign;
    var vAlign = (_c = options.vAlign) !== null && _c !== void 0 ? _c : inherited.vAlign;
    var lineWrap = (_d = options.lineWrap) !== null && _d !== void 0 ? _d : inherited.lineWrap;
    var disableHover = (_e = options.disableHover) !== null && _e !== void 0 ? _e : inherited.disableHover;
    var disableBorders = (_f = options.disableBorders) !== null && _f !== void 0 ? _f : inherited.disableBorders;
    return {
        header: header,
        hAlign: hAlign,
        vAlign: vAlign,
        lineWrap: lineWrap,
        disableHover: disableHover,
        disableBorders: disableBorders,
    };
}
/**
 * @internal
 */
export var TableConfigProvider = context.Provider;
//# sourceMappingURL=config.js.map