import React, { CSSProperties, HTMLAttributes } from "react";
import { ProgressProps } from "./types";
export interface CircularProgressProps extends Omit<HTMLAttributes<HTMLSpanElement>, "id">, ProgressProps {
    /**
     * An optional style to apply to the svg within the circular progress. The
     * values of this style object will be merged with the current determinate
     * style (if it exists).
     */
    svgStyle?: CSSProperties;
    /**
     * An optional className to apply to the svg within the circular progress.
     */
    svgClassName?: string;
    /**
     * An optional style to apply to the circle within the circular progress. The
     * values of this style object will be merged with the current determinate
     * style (if it exists).
     */
    circleStyle?: CSSProperties;
    /**
     * An optional className to apply to the circle within the cicular progress.
     */
    circleClassName?: string;
    /**
     * The radius for the circle. It is generally recommended to have the radius
     * be 1/2 of the viewbox and minus a few more pixels so that there is some
     * surrounding padding. You probably shouldn't really be changing this prop
     * though.
     */
    radius?: number;
    /**
     * The center point for the circle. This should be half of the `viewBox` prop
     * 99% of the time and probably won't be changed.
     */
    center?: number;
    /**
     * The viewbox for the child svg. I wouldn't recommend changing this value as
     * you will also need to update the `dashoffset` in both Sass and this prop to
     * get the animation to look nice again.
     */
    viewBox?: string;
    /**
     * The `stroke-dashoffset` for the circle within the SVG. You probably won't
     * be changing this value that much as it should match the
     * `$rmd-progress-circle-dashoffset` Sass variable. This is really just used
     * to help to create the determinite progress animation.
     */
    dashoffset?: number;
    /**
     * The max rotation value for the circular progress. If you set this value to
     * a number less than or equal to 0, the circular progress will no longer
     * rotate with the determinate progress type.
     */
    maxRotation?: number;
    /**
     * Boolean if the circular progress should be centered using left and right
     * margins.
     */
    centered?: boolean;
    /**
     * Boolean if the smaller size should be used instead.
     *
     * @remarks \@since 2.3.0
     */
    small?: boolean;
}
export declare const CircularProgress: React.ForwardRefExoticComponent<CircularProgressProps & React.RefAttributes<HTMLSpanElement>>;
