var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useMemo, } from "react";
import cn from "classnames";
import { bem, getPercentage } from "@react-md/utils";
var block = bem("rmd-linear-progress");
export var LinearProgress = forwardRef(function LinearProgress(_a, ref) {
    var propStyle = _a.style, className = _a.className, propBarStyle = _a.barStyle, barClassName = _a.barClassName, _b = _a.min, min = _b === void 0 ? 0 : _b, _c = _a.max, max = _c === void 0 ? 100 : _c, value = _a.value, _d = _a.reverse, reverse = _d === void 0 ? false : _d, _e = _a.animate, animate = _e === void 0 ? true : _e, _f = _a.vertical, vertical = _f === void 0 ? false : _f, _g = _a.verticalHeight, verticalHeight = _g === void 0 ? 240 : _g, props = __rest(_a, ["style", "className", "barStyle", "barClassName", "min", "max", "value", "reverse", "animate", "vertical", "verticalHeight"]);
    var style = useMemo(function () {
        if (!vertical || verticalHeight === null) {
            return propStyle;
        }
        return __assign(__assign({}, propStyle), { height: verticalHeight });
    }, [propStyle, vertical, verticalHeight]);
    var progress;
    if (typeof value === "number") {
        progress = getPercentage(min, max, value);
    }
    var barStyle = useMemo(function () {
        var _a;
        if (typeof progress !== "number") {
            return propBarStyle;
        }
        var key = vertical ? "height" : "width";
        return __assign(__assign({}, propBarStyle), (_a = {}, _a[key] = progress * 100 + "%", _a));
    }, [progress, propBarStyle, vertical]);
    var determinate = typeof progress === "number";
    var indeterminate = !determinate;
    return (React.createElement("span", __assign({}, props, { ref: ref, style: style, role: "progressbar", "aria-valuemin": min, "aria-valuemax": max, "aria-valuenow": value, className: cn(block({
            vertical: vertical,
            determinate: determinate,
            indeterminate: indeterminate,
        }), className) }),
        React.createElement("span", { style: barStyle, className: cn(block("bar", {
                vertical: vertical,
                "vertical-reverse": vertical && reverse,
                horizontal: !vertical,
                "horizontal-reverse": !vertical && reverse,
                animate: animate && determinate,
                determinate: determinate,
                indeterminate: indeterminate,
                "determinate-reverse": determinate && reverse && !vertical,
                "determinate-vertical-reverse": determinate && reverse && vertical,
                "indeterminate-reverse": indeterminate && reverse && !vertical,
                "indeterminate-vertical": indeterminate && vertical,
                "indeterminate-vertical-reverse": indeterminate && reverse && vertical,
            }), barClassName) })));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        LinearProgress.propTypes = {
            id: PropTypes.string.isRequired,
            style: PropTypes.object,
            className: PropTypes.string,
            min: PropTypes.number,
            max: PropTypes.number,
            value: PropTypes.number,
            animate: PropTypes.bool,
            barStyle: PropTypes.object,
            barClassName: PropTypes.string,
            reverse: PropTypes.bool,
            vertical: PropTypes.bool,
            verticalHeight: PropTypes.number,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=LinearProgress.js.map