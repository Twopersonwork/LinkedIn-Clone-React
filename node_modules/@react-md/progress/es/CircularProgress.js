var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useMemo, } from "react";
import cn from "classnames";
import { bem, getPercentage } from "@react-md/utils";
var block = bem("rmd-circular-progress");
export var CircularProgress = forwardRef(function CircularProgress(_a, ref) {
    var className = _a.className, propSvgStyle = _a.svgStyle, svgClassName = _a.svgClassName, propCircleStyle = _a.circleStyle, circleClassName = _a.circleClassName, value = _a.value, _b = _a.min, min = _b === void 0 ? 0 : _b, _c = _a.max, max = _c === void 0 ? 100 : _c, _d = _a.radius, radius = _d === void 0 ? 30 : _d, _e = _a.center, center = _e === void 0 ? 33 : _e, _f = _a.viewBox, viewBox = _f === void 0 ? "0 0 66 66" : _f, _g = _a.dashoffset, dashoffset = _g === void 0 ? 187 : _g, _h = _a.animate, animate = _h === void 0 ? true : _h, _j = _a.centered, centered = _j === void 0 ? true : _j, _k = _a.maxRotation, maxRotation = _k === void 0 ? 360 * 1.75 : _k, _l = _a.small, small = _l === void 0 ? false : _l, props = __rest(_a, ["className", "svgStyle", "svgClassName", "circleStyle", "circleClassName", "value", "min", "max", "radius", "center", "viewBox", "dashoffset", "animate", "centered", "maxRotation", "small"]);
    var progress;
    if (typeof value === "number") {
        progress = getPercentage(min, max, value);
    }
    var svgStyle = useMemo(function () {
        if (typeof progress !== "number") {
            return propSvgStyle;
        }
        var transform = propSvgStyle && propSvgStyle.transform;
        if (maxRotation > 0) {
            var rotate = "rotate(" + maxRotation * progress + "deg)";
            transform = "" + rotate + (transform ? " " + transform : "");
        }
        return __assign(__assign({}, propSvgStyle), { WebkitTransform: transform, transform: transform });
    }, [progress, maxRotation, propSvgStyle]);
    var circleStyle = useMemo(function () {
        if (typeof progress !== "number") {
            return propCircleStyle;
        }
        return __assign(__assign({}, propCircleStyle), { strokeDashoffset: dashoffset - dashoffset * progress });
    }, [progress, propCircleStyle, dashoffset]);
    var determinate = typeof progress === "number";
    var indeterminate = !determinate;
    return (React.createElement("span", __assign({}, props, { ref: ref, role: "progressbar", "aria-valuemin": min, "aria-valuemax": max, "aria-valuenow": value, className: cn(block({ centered: centered, small: small }), className) }),
        React.createElement("svg", { style: svgStyle, className: cn(block("svg", {
                animate: animate && determinate,
                determinate: determinate,
                indeterminate: indeterminate,
            }), svgClassName), viewBox: viewBox },
            React.createElement("circle", { style: circleStyle, className: cn(block("circle", {
                    animate: animate && determinate,
                    determinate: determinate,
                    indeterminate: indeterminate,
                }), circleClassName), r: radius, cx: center, cy: center }))));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        CircularProgress.propTypes = {
            id: PropTypes.string.isRequired,
            className: PropTypes.string,
            min: PropTypes.number,
            max: PropTypes.number,
            value: PropTypes.number,
            animate: PropTypes.bool,
            svgStyle: PropTypes.object,
            svgClassName: PropTypes.string,
            circleStyle: PropTypes.object,
            circleClassName: PropTypes.string,
            radius: PropTypes.number,
            center: PropTypes.number,
            centered: PropTypes.bool,
            maxRotation: PropTypes.number,
            dashoffset: PropTypes.number,
            small: PropTypes.bool,
            viewBox: PropTypes.string,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=CircularProgress.js.map