var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, } from "react";
import cn from "classnames";
import { bem } from "@react-md/utils";
var block = bem("rmd-fieldset");
/**
 * This is a simple wrapper for the `<fieldset>` that defaults to removing
 * the default styles of a border, padding, and margin and having a screen-reader
 * visible only legend element for added accessibility.
 */
export var Fieldset = forwardRef(function Fieldset(_a, ref) {
    var className = _a.className, legend = _a.legend, legendStyle = _a.legendStyle, legendClassName = _a.legendClassName, _b = _a.legendSROnly, legendSROnly = _b === void 0 ? false : _b, _c = _a.unstyled, unstyled = _c === void 0 ? true : _c, children = _a.children, props = __rest(_a, ["className", "legend", "legendStyle", "legendClassName", "legendSROnly", "unstyled", "children"]);
    return (React.createElement("fieldset", __assign({}, props, { ref: ref, className: cn(block({ unstyled: unstyled }), className) }),
        React.createElement("legend", { style: legendStyle, className: cn(block("legend", { "sr-only": legendSROnly }), legendClassName) }, legend),
        children));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        Fieldset.propTypes = {
            className: PropTypes.string,
            unstyled: PropTypes.bool,
            legend: PropTypes.node.isRequired,
            legendStyle: PropTypes.object,
            legendClassName: PropTypes.string,
            legendSROnly: PropTypes.bool,
            children: PropTypes.node,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=Fieldset.js.map