var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from "react";
import { FormMessageContainer, } from "../FormMessageContainer";
import { TextArea } from "./TextArea";
/**
 * This component is a simple wrapper for the `TextArea` and `FormMessage`
 * components that should be used along with the `useTextField` hook to
 * conditionally show help and error messages with a `TextArea`.
 *
 * Simple example:
 *
 * ```ts
 * const [value, areaProps] = useTextField({
 *   id: "area-id",
 * });
 *
 * return (
 *   <TextFieldWithMessage
 *     label="Label"
 *     placeholder="Placeholder"
 *     {...areaProps}
 *   />
 * );
 * ```
 *
 * @remarks \@since 2.5.0
 */
export var TextAreaWithMessage = forwardRef(function TextAreaWithMessage(_a, ref) {
    var messageProps = _a.messageProps, messageContainerProps = _a.messageContainerProps, props = __rest(_a, ["messageProps", "messageContainerProps"]);
    return (React.createElement(FormMessageContainer, __assign({}, messageContainerProps, { messageProps: messageProps }),
        React.createElement(TextArea, __assign({}, props, { ref: ref }))));
});
//# sourceMappingURL=TextAreaWithMessage.js.map