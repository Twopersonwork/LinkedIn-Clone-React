var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from "react";
import cn from "classnames";
import { bem } from "@react-md/utils";
var styles = bem("rmd-toggle");
/**
 * @remarks \@since 2.8.0
 */
export var InputToggleIcon = forwardRef(function InputToggleIcon(_a, ref) {
    var _b = _a.circle, circle = _b === void 0 ? false : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, _d = _a.overlay, overlay = _d === void 0 ? false : _d, _e = _a.checked, checked = _e === void 0 ? false : _e, _f = _a.indeterminate, indeterminate = _f === void 0 ? false : _f, className = _a.className, children = _a.children, props = __rest(_a, ["circle", "disabled", "overlay", "checked", "indeterminate", "className", "children"]);
    return (React.createElement("span", __assign({}, props, { ref: ref, className: cn(styles("icon", {
            circle: circle,
            disabled: disabled,
            overlay: overlay,
            checked: checked,
            indeterminate: indeterminate,
        }), className) }), children));
});
//# sourceMappingURL=InputToggleIcon.js.map