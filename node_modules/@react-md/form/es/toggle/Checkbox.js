var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from "react";
import { useIcon } from "@react-md/icon";
import { InputToggle } from "./InputToggle";
/**
 * The `Checkbox` component is just a wrapper for the `InputToggle` that
 * defaults to reasonable defaults for a checkbox input.
 */
export var Checkbox = forwardRef(function Checkbox(_a, ref) {
    var propIcon = _a.icon, _b = _a.indeterminate, indeterminate = _b === void 0 ? false : _b, props = __rest(_a, ["icon", "indeterminate"]);
    var icon = useIcon("checkbox", propIcon);
    return (React.createElement(InputToggle, __assign({}, props, { icon: icon, ref: ref, type: "checkbox", indeterminate: indeterminate })));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        Checkbox.propTypes = {
            indeterminate: PropTypes.bool,
            icon: PropTypes.node,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=Checkbox.js.map