var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, } from "react";
import cn from "classnames";
import { bem } from "@react-md/utils";
var styles = bem("rmd-switch");
/**
 * This is most likely an internal only component that is used to render the
 * switch element either as a checkbox or in the `MenuItemSwitch` component.
 *
 * @remarks \@since 2.8.0
 */
export var SwitchTrack = forwardRef(function SwitchTrack(_a, ref) {
    var id = _a.id, _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.checked, checked = _c === void 0 ? false : _c, className = _a.className, ballStyle = _a.ballStyle, ballClassName = _a.ballClassName, containerProps = _a.containerProps, children = _a.children, props = __rest(_a, ["id", "disabled", "checked", "className", "ballStyle", "ballClassName", "containerProps", "children"]);
    return (React.createElement("span", __assign({}, containerProps, { className: cn(styles(), className, containerProps === null || containerProps === void 0 ? void 0 : containerProps.className) }),
        id && (React.createElement(React.Fragment, null,
            React.createElement("input", __assign({}, props, { id: id, ref: ref, type: "checkbox", className: cn(styles("input")), disabled: disabled })),
            React.createElement("label", { htmlFor: id, "aria-hidden": true, style: ballStyle, className: cn(styles("ball"), ballClassName) }, children))),
        !id && (React.createElement("span", { style: ballStyle, className: cn(styles("ball", { checked: checked }), ballClassName) }))));
});
//# sourceMappingURL=SwitchTrack.js.map