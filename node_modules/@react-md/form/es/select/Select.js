var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useCallback, useMemo, } from "react";
import cn from "classnames";
import { useIcon } from "@react-md/icon";
import { useFixedPositioning } from "@react-md/transition";
import { BELOW_CENTER_ANCHOR, bem, DEFAULT_GET_ITEM_VALUE, tryToSubmitRelatedForm, useCloseOnOutsideClick, useEnsuredRef, useToggle, } from "@react-md/utils";
import { useFormTheme } from "../FormThemeProvider";
import { FloatingLabel } from "../label/FloatingLabel";
import { TextFieldContainer, } from "../text-field/TextFieldContainer";
import { useFocusState } from "../useFocusState";
import { Listbox } from "./Listbox";
import { defaultIsOptionDisabled, getDisplayLabel as DEFAULT_GET_DISPLAY_LABEL, getOptionId as DEFAULT_GET_OPTION_ID, getOptionLabel as DEFAULT_GET_OPTION_LABEL, } from "./utils";
var block = bem("rmd-select");
/**
 * This component is an accessible version of the `<select>` element that allows
 * for some more custom styles by using the `@react-md/list` package to render
 * the list of options.
 *
 * The `Select` component **must be controlled** with a `value` and `onChange`
 * handler.
 *
 * Note: Since this is not a native `<select>` component, the current value will
 * be rendered in an `<input type="hidden" />` element so that the value can be
 * sent along in forms. It is highly recommended to always provide a `name` prop
 * so this value is sent.
 */
export var Select = forwardRef(function Select(_a, forwardedRef) {
    var onBlur = _a.onBlur, onFocus = _a.onFocus, onKeyDown = _a.onKeyDown, onClick = _a.onClick, className = _a.className, label = _a.label, labelStyle = _a.labelStyle, labelClassName = _a.labelClassName, displayLabelStyle = _a.displayLabelStyle, displayLabelClassName = _a.displayLabelClassName, propListboxStyle = _a.listboxStyle, listboxClassName = _a.listboxClassName, _b = _a.anchor, anchor = _b === void 0 ? BELOW_CENTER_ANCHOR : _b, propTheme = _a.theme, _c = _a.dense, dense = _c === void 0 ? false : _c, _d = _a.inline, inline = _d === void 0 ? false : _d, _e = _a.error, error = _e === void 0 ? false : _e, _f = _a.disabled, disabled = _f === void 0 ? false : _f, _g = _a.isLeftAddon, isLeftAddon = _g === void 0 ? true : _g, _h = _a.isRightAddon, isRightAddon = _h === void 0 ? true : _h, propUnderlineDirection = _a.underlineDirection, _j = _a.listboxWidth, listboxWidth = _j === void 0 ? "equal" : _j, _k = _a.portal, portal = _k === void 0 ? true : _k, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, name = _a.name, options = _a.options, _l = _a.labelKey, labelKey = _l === void 0 ? "label" : _l, _m = _a.valueKey, valueKey = _m === void 0 ? "value" : _m, _o = _a.getOptionId, getOptionId = _o === void 0 ? DEFAULT_GET_OPTION_ID : _o, _p = _a.getOptionLabel, getOptionLabel = _p === void 0 ? DEFAULT_GET_OPTION_LABEL : _p, _q = _a.getOptionValue, getOptionValue = _q === void 0 ? DEFAULT_GET_ITEM_VALUE : _q, _r = _a.getDisplayLabel, getDisplayLabel = _r === void 0 ? DEFAULT_GET_DISPLAY_LABEL : _r, _s = _a.isOptionDisabled, isOptionDisabled = _s === void 0 ? defaultIsOptionDisabled : _s, _t = _a.disableLeftAddon, disableLeftAddon = _t === void 0 ? false : _t, _u = _a.disableMovementChange, disableMovementChange = _u === void 0 ? false : _u, _v = _a.closeOnResize, closeOnResize = _v === void 0 ? false : _v, _w = _a.closeOnScroll, closeOnScroll = _w === void 0 ? false : _w, readOnly = _a.readOnly, placeholder = _a.placeholder, value = _a.value, onChange = _a.onChange, propRightChildren = _a.rightChildren, props = __rest(_a, ["onBlur", "onFocus", "onKeyDown", "onClick", "className", "label", "labelStyle", "labelClassName", "displayLabelStyle", "displayLabelClassName", "listboxStyle", "listboxClassName", "anchor", "theme", "dense", "inline", "error", "disabled", "isLeftAddon", "isRightAddon", "underlineDirection", "listboxWidth", "portal", "portalInto", "portalIntoId", "name", "options", "labelKey", "valueKey", "getOptionId", "getOptionLabel", "getOptionValue", "getDisplayLabel", "isOptionDisabled", "disableLeftAddon", "disableMovementChange", "closeOnResize", "closeOnScroll", "readOnly", "placeholder", "value", "onChange", "rightChildren"]);
    var id = props.id;
    var rightChildren = useIcon("dropdown", propRightChildren);
    var _x = useFormTheme({
        theme: propTheme,
        underlineDirection: propUnderlineDirection,
    }), theme = _x.theme, underlineDirection = _x.underlineDirection;
    var valued = typeof value === "number" || !!value;
    var displayValue = useMemo(function () {
        var currentOption = options.find(function (option) { return getOptionValue(option, valueKey) === value; }) ||
            null;
        return getDisplayLabel(currentOption, labelKey, !disableLeftAddon);
    }, [
        options,
        getDisplayLabel,
        labelKey,
        disableLeftAddon,
        getOptionValue,
        valueKey,
        value,
    ]);
    var _y = useToggle(false), visible = _y[0], show = _y[1], hide = _y[2];
    var _z = useFocusState({ onBlur: onBlur, onFocus: onFocus }), focused = _z[0], handleFocus = _z[1], handleBlur = _z[2];
    var handleKeyDown = useCallback(function (event) {
        if (onKeyDown) {
            onKeyDown(event);
        }
        if (tryToSubmitRelatedForm(event)) {
            return;
        }
        switch (event.key) {
            case " ":
            case "ArrowUp":
            case "ArrowDown":
                // prevent page scroll
                event.preventDefault();
                show();
                break;
            // no default
        }
    }, [onKeyDown, show]);
    var _0 = useEnsuredRef(forwardedRef), ref = _0[0], refHandler = _0[1];
    useCloseOnOutsideClick({
        enabled: visible,
        element: ref.current,
        onOutsideClick: hide,
    });
    var _1 = useFixedPositioning({
        style: propListboxStyle,
        fixedTo: function () { return ref.current; },
        anchor: anchor,
        onScroll: closeOnScroll ? hide : undefined,
        onResize: closeOnResize ? hide : undefined,
        transformOrigin: true,
        width: listboxWidth,
        onEntering: function (node) {
            // can't do onEnter since the positioning styles haven't been applied to the
            // dom node at this time. this means the list is the last element in the DOM
            // when portalled, which causes the page to scroll to the end. Moving it to
            // onEntering will ensure the styles have been applied and won't cause page
            // scrolling
            node.focus();
        },
    }), listboxStyle = _1.style, onEnter = _1.onEnter, onEntering = _1.onEntering, onEntered = _1.onEntered, onExited = _1.onExited;
    var handleClick = useCallback(function (event) {
        if (onClick) {
            onClick(event);
        }
        show();
    }, [onClick, show]);
    var handleKeyboardClose = useCallback(function () {
        hide();
        if (ref.current) {
            ref.current.focus();
        }
    }, [hide, ref]);
    var labelId = id + "-label";
    var valueId = id + "-value";
    var listboxId = id + "-listbox";
    var displayValueId = id + "-display-value";
    return (React.createElement(React.Fragment, null,
        React.createElement(TextFieldContainer, __assign({}, props, { "aria-haspopup": "listbox", "aria-disabled": disabled || undefined, ref: refHandler, role: "button", dense: dense, tabIndex: disabled ? undefined : 0, label: !!label, onFocus: handleFocus, onBlur: handleBlur, onKeyDown: disabled ? undefined : handleKeyDown, onClick: disabled ? undefined : handleClick, theme: theme, error: error, active: focused || visible, inline: inline, disabled: disabled, underlineDirection: underlineDirection, isLeftAddon: isLeftAddon, isRightAddon: isRightAddon, rightChildren: rightChildren, className: cn(block({ disabled: disabled }), className) }),
            React.createElement(FloatingLabel, { id: labelId, style: labelStyle, className: cn(block("label"), labelClassName), htmlFor: id, error: error, active: valued && (focused || visible), valued: valued, floating: focused || valued || visible, dense: dense, disabled: disabled, component: "span" }, label),
            React.createElement("span", { id: displayValueId, style: displayLabelStyle, className: cn(block("value", {
                    disabled: disabled,
                    readonly: readOnly,
                    placeholder: !valued && placeholder,
                    "placeholder-active": !valued && placeholder && (focused || visible),
                }), displayLabelClassName) }, displayValue || (!valued && placeholder)),
            React.createElement("input", { id: valueId, type: "hidden", name: name, value: value })),
        React.createElement(Listbox, { id: listboxId, "aria-labelledby": id, style: listboxStyle, className: listboxClassName, name: name, readOnly: readOnly, portal: portal, portalInto: portalInto, portalIntoId: portalIntoId, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExited: onExited, value: value, onChange: onChange, visible: visible, temporary: true, onRequestClose: handleKeyboardClose, options: options, labelKey: labelKey, valueKey: valueKey, getOptionId: getOptionId, getOptionLabel: getOptionLabel, getOptionValue: getOptionValue, isOptionDisabled: isOptionDisabled, disableMovementChange: disableMovementChange })));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        Select.propTypes = {
            id: PropTypes.string.isRequired,
            style: PropTypes.object,
            className: PropTypes.string,
            labelStyle: PropTypes.object,
            labelClassName: PropTypes.string,
            listboxStyle: PropTypes.object,
            listboxClassName: PropTypes.string,
            displayLabelStyle: PropTypes.object,
            displayLabelClassName: PropTypes.string,
            label: PropTypes.node,
            portal: PropTypes.bool,
            portalInto: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.object,
                PropTypes.func,
            ]),
            portalIntoId: PropTypes.string,
            labelKey: PropTypes.string,
            valueKey: PropTypes.string,
            getOptionId: PropTypes.func,
            getOptionLabel: PropTypes.func,
            getOptionValue: PropTypes.func,
            getDisplayLabel: PropTypes.func,
            isOptionDisabled: PropTypes.func,
            disableLeftAddon: PropTypes.bool,
            disableMovementChange: PropTypes.bool,
            theme: PropTypes.oneOf(["none", "underline", "filled", "outline"]),
            dense: PropTypes.bool,
            error: PropTypes.bool,
            inline: PropTypes.bool,
            readOnly: PropTypes.bool,
            disabled: PropTypes.bool,
            placeholder: PropTypes.node,
            underlineDirection: PropTypes.oneOf(["left", "center", "right"]),
            leftChildren: PropTypes.node,
            rightChildren: PropTypes.node,
            isLeftAddon: PropTypes.bool,
            isRightAddon: PropTypes.bool,
            closeOnResize: PropTypes.bool,
            closeOnScroll: PropTypes.bool,
            anchor: PropTypes.shape({
                x: PropTypes.oneOf([
                    "inner-left",
                    "inner-right",
                    "center",
                    "left",
                    "right",
                ]),
                y: PropTypes.oneOf(["above", "below", "center", "top", "bottom"]),
            }),
            listboxWidth: PropTypes.oneOf(["equal", "min", "auto"]),
            name: PropTypes.string,
            options: PropTypes.arrayOf(PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.number,
                PropTypes.object,
            ])).isRequired,
            onBlur: PropTypes.func,
            onFocus: PropTypes.func,
            onKeyDown: PropTypes.func,
            onClick: PropTypes.func,
            value: PropTypes.string.isRequired,
            onChange: PropTypes.func.isRequired,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=Select.js.map