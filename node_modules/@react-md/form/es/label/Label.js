var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* eslint-disable jsx-a11y/label-has-associated-control */
import React, { forwardRef } from "react";
import cn from "classnames";
import { bem } from "@react-md/utils";
var styles = bem("rmd-label");
/**
 * A simple util that can generate all the "valid" styles for a label. This
 * shouldn't really be used, but it's useful if you want the label styles
 * without rendering a `<label>` element.
 *
 * @remarks \@since 2.5.0
 * @internal
 */
export var labelStyles = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.error, error = _c === void 0 ? false : _c, _d = _b.active, active = _d === void 0 ? false : _d, _e = _b.disabled, disabled = _e === void 0 ? false : _e;
    return styles({ error: error, active: active, disabled: disabled });
};
/**
 * The `Label` component should be used alongside any form elements but is
 * already built in to the majority of the `react-md` components by default.
 */
export var Label = forwardRef(function Label(_a, ref) {
    var htmlFor = _a.htmlFor, className = _a.className, _b = _a.error, error = _b === void 0 ? false : _b, _c = _a.active, active = _c === void 0 ? false : _c, _d = _a.disabled, disabled = _d === void 0 ? false : _d, _e = _a.component, Component = _e === void 0 ? "label" : _e, children = _a.children, props = __rest(_a, ["htmlFor", "className", "error", "active", "disabled", "component", "children"]);
    if (!children) {
        return null;
    }
    return (React.createElement(Component, __assign({}, props, { ref: ref, className: cn(labelStyles({ error: error, active: active, disabled: disabled }), className), htmlFor: Component === "label" ? htmlFor : undefined }), children));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        Label.propTypes = {
            htmlFor: PropTypes.string.isRequired,
            className: PropTypes.string,
            error: PropTypes.bool,
            active: PropTypes.bool,
            disabled: PropTypes.bool,
            component: PropTypes.oneOf(["label", "span"]),
            children: PropTypes.node,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=Label.js.map