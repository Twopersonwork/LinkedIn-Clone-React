import { useState } from "react";
/**
 * This hook allows you to toggle the state of multiple checkboxes in a single
 * place along with an indeterminate checkbox that can check/uncheck all
 * checkboxes at once.
 *
 * ### Examples:
 *
 * #### Simple value list with labels lookup:
 *
 * ```tsx
 * const values = ["a", "b", "c", "d"];
 * const LABELS = { a: "Label 1", b: "Label 2", c: "Label 3", d: "Label 4" };
 * const { getProps, rootProps } = useIndeterminateChecked(values);
 *
 * return (
 *   <>
 *     <Checkbox id="root-checkbox" {...rootProps} label="Root Checkbox" />
 *     {values.map((value, i) => (
 *       <Checkbox
 *         id={`child-checkbox-${i + 1}`}
 *         label={LABELS[value]}
 *         {...getProps(value)}
 *       />
 *     ))}
 *   </>
 * );
 * ```
 *
 * #### Fetch Data From Server and check first result
 * ```tsx
 * interface ServerFetchedData {
 *   id: Guid;
 *   name: string;
 * }
 *
 *
 * const [data, setData] = useState<ServerFetchedData[]>([]);
 * const { getProps, rootProps, setCheckedValues } = useIndeterminateChecked(
 *   data.map(({ id }) => id),
 * );
 *
 * useEffect(() => {
 *   let cancelled = false;
 *   (async function load() {
 *     const response = await fetch("/my-api");
 *     const json = await response.json();
 *     if (!cancelled) {
 *       // pretend validation and sanity checks
 *       setData(json as ServerFetchedData[]);
 *       setCheckedValues(json[0].id);
 *     }
 *   })();

 *   return () => {
 *     cancelled = true;
 *   };
 * }, []);
 *
 * return (
 *   <>
 *     <Checkbox id="root-checkbox" {...rootProps} label="Root Checkbox" />
 *     {data.map(({ id, name }, i) => (
 *       <Checkbox
 *         id={`child-checkbox-${i + 1}`}
 *         label={name}
 *         {...getProps(id)}
 *       />
 *     ))}
 *   </>
 * );
 * ```
 *
 * @param values - All the checkbox values that the indeterminate checkbox can
 * control. The values will **need** to be unique as they are passed to each
 * checkbox to determine if it is checked or not. This will directly map to
 * the `value` attribute for each checkbox.
 * @param defaultCheckedValues - An optional list of all the values that are
 * checked on first render. Changing this value will not update the checked
 * values.
 * @param onChange - An optional function to call whenever the checked values
 * list updates that will provide the next list of all the checked values. This
 * isn't a super helpful prop since this hook will always return the checked
 * values anyways.
 * @returns An object containing a function to get the props for each controlled
 * checkbox, the props for the root indeterminate checkbox, a list of all the
 * checked values, and a general `setCheckboxValues` function from `useState` if
 * the list of values can be changed from external sources as well.
 */
export function useIndeterminateChecked(values, defaultCheckedValues, onChange) {
    if (defaultCheckedValues === void 0) { defaultCheckedValues = []; }
    var _a = useState(defaultCheckedValues), checkedValues = _a[0], setCheckedValues = _a[1];
    var checked = checkedValues.length > 0;
    var indeterminate = checked && checkedValues.length < values.length;
    var updateCheckedValues = function (values) {
        if (onChange) {
            onChange(values);
        }
        setCheckedValues(values);
    };
    var rootProps = {
        "aria-checked": indeterminate ? "mixed" : undefined,
        checked: checked,
        indeterminate: indeterminate,
        onChange: function () {
            return updateCheckedValues(checkedValues.length === 0 || indeterminate ? values : []);
        },
    };
    var getProps = function (value) { return ({
        value: value,
        checked: checkedValues.includes(value),
        onChange: function () {
            var i = checkedValues.indexOf(value);
            var nextChecked = checkedValues.slice();
            if (i === -1) {
                nextChecked.push(value);
            }
            else {
                nextChecked.splice(i, 1);
            }
            updateCheckedValues(nextChecked);
        },
    }); };
    return {
        getProps: getProps,
        rootProps: rootProps,
        checkedValues: checkedValues,
        setCheckedValues: setCheckedValues,
    };
}
//# sourceMappingURL=useIndeterminateChecked.js.map