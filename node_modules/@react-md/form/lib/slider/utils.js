"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDragPercentage = exports.getDragValue = exports.isRangeSlider = exports.isTouchEvent = exports.isMouseEvent = exports.getJumpValue = exports.getSteps = void 0;
var utils_1 = require("@react-md/utils");
/**
 * Gets the number of steps in the allowed range of values.
 *
 * @internal
 * @remarks \@since 2.5.0
 */
var getSteps = function (min, max, step) {
    return Math.abs(max - min) / step;
};
exports.getSteps = getSteps;
/**
 *
 * @internal
 * @remarks \@since 2.5.0
 */
var getJumpValue = function (min, max, step, jump) {
    var steps = exports.getSteps(min, max, step);
    var value = jump !== null && jump !== void 0 ? jump : (steps / 10) * step;
    if (Number.isInteger(step)) {
        return Math.ceil(value);
    }
    return value;
};
exports.getJumpValue = getJumpValue;
/**
 * @internal
 * @remarks \@since 2.5.0
 */
var isMouseEvent = function (event) {
    return event.type === "mousedown" ||
        event.type === "mousemove" ||
        event.type === "mouseup";
};
exports.isMouseEvent = isMouseEvent;
/**
 * @internal
 * @remarks \@since 2.5.0
 */
var isTouchEvent = function (event) {
    return event.type === "touchstart" ||
        event.type === "touchmove" ||
        event.type === "touchend";
};
exports.isTouchEvent = isTouchEvent;
/**
 * @internal
 * @remarks \@since 2.5.0
 */
var isRangeSlider = function (controls) { return Array.isArray(controls.value); };
exports.isRangeSlider = isRangeSlider;
/**
 * This is used to get the next value for the slider while being dragged via
 * mouse or touch.
 *
 * @internal
 * @remarks \@since 2.5.0
 */
var getDragValue = function (_a) {
    var min = _a.min, max = _a.max, step = _a.step, vertical = _a.vertical, clientX = _a.clientX, clientY = _a.clientY, left = _a.left, top = _a.top, height = _a.height, width = _a.width, isRtl = _a.isRtl, minValue = _a.minValue, maxValue = _a.maxValue;
    var sliderSize = vertical ? height : width;
    var sliderPosition = vertical ? top + height : left;
    var cursorPosition = vertical ? clientY : clientX;
    var difference = vertical
        ? sliderPosition - cursorPosition
        : cursorPosition - sliderPosition;
    var distanceDragged = Math.min(Math.max(0, difference), sliderSize);
    var percentageDragged = distanceDragged / sliderSize;
    if (isRtl && !vertical) {
        percentageDragged = 1 - percentageDragged;
    }
    var range = max - min;
    var steps = exports.getSteps(min, max, step);
    var value = percentageDragged * range + min;
    var rounded = utils_1.nearest(value, minValue, maxValue, steps, range);
    return {
        value: rounded,
        current: percentageDragged,
    };
};
exports.getDragValue = getDragValue;
/**
 * Small util to get the drag percentage for the thumbs within a slider. This
 * makes sure to use the current `dragValue` when possible so that the thumb
 * moves with the mouse/touch instead of only for the current values. See
 * {@link getDragValue} for more examples.
 *
 * @remarks \@since 2.5.0
 * @internal
 */
var getDragPercentage = function (_a) {
    var min = _a.min, max = _a.max, dragging = _a.dragging, dragValue = _a.dragValue, draggingIndex = _a.draggingIndex, thumb1Value = _a.thumb1Value, thumb2Value = _a.thumb2Value;
    var thumb1Percentage = dragging && draggingIndex === 0
        ? dragValue
        : utils_1.getPercentage(min, max, thumb1Value);
    var thumb2Percentage;
    if (typeof thumb2Value === "number") {
        var percentage = utils_1.getPercentage(min, max, thumb2Value);
        thumb1Percentage = Math.min(thumb1Percentage, percentage);
        thumb2Percentage =
            dragging && draggingIndex === 1
                ? Math.max(thumb1Percentage, dragValue)
                : percentage;
    }
    return {
        thumb1Percentage: thumb1Percentage * 100 + "%",
        thumb2Percentage: typeof thumb2Percentage === "number"
            ? thumb2Percentage * 100 + "%"
            : undefined,
    };
};
exports.getDragPercentage = getDragPercentage;
//# sourceMappingURL=utils.js.map