"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormThemeProvider = exports.useFormTheme = void 0;
var react_1 = __importStar(require("react"));
var context = react_1.createContext({
    theme: "outline",
    underlineDirection: "left",
});
/**
 * Gets the current theme values for a form component by inheriting the current
 * form theme via context. If you provide an object of theme props, the returned
 * value will use any defined values from the theme props and fallback to the
 * context value.
 *
 * Example:
 * ```ts
 * // everything is inherited
 * const formTheme = useFormTheme();
 *
 * // theme will be set to "underline" while the others will be inherited
 * const formTheme = useFormTheme({ theme: "underline" });
 * ```
 */
function useFormTheme(options) {
    if (options === void 0) { options = {}; }
    var formTheme = react_1.useContext(context);
    var theme = options.theme, underlineDirection = options.underlineDirection;
    theme = theme !== null && theme !== void 0 ? theme : formTheme.theme;
    underlineDirection = underlineDirection !== null && underlineDirection !== void 0 ? underlineDirection : formTheme.underlineDirection;
    return {
        theme: theme,
        underlineDirection: underlineDirection,
    };
}
exports.useFormTheme = useFormTheme;
var Provider = context.Provider;
/**
 * Since you'll normally want all of your form components to use the same theme,
 * this is a simple way to provide the same theme to all components without
 * needing all the prop-drilling/copying.
 */
function FormThemeProvider(_a) {
    var _b = _a.theme, theme = _b === void 0 ? "outline" : _b, _c = _a.underlineDirection, underlineDirection = _c === void 0 ? "left" : _c, children = _a.children;
    var value = react_1.useMemo(function () { return ({ theme: theme, underlineDirection: underlineDirection }); }, [
        theme,
        underlineDirection,
    ]);
    return react_1.default.createElement(Provider, { value: value }, children);
}
exports.FormThemeProvider = FormThemeProvider;
//# sourceMappingURL=FormThemeProvider.js.map