"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputToggle = void 0;
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var states_1 = require("@react-md/states");
var utils_1 = require("@react-md/utils");
var Label_1 = require("../label/Label");
var useFocusState_1 = require("../useFocusState");
var ToggleContainer_1 = require("./ToggleContainer");
var InputToggleIcon_1 = require("./InputToggleIcon");
var block = utils_1.bem("rmd-toggle");
exports.InputToggle = react_1.forwardRef(function InputToggle(allProps, ref) {
    var _a = allProps, style = _a.style, className = _a.className, iconStyle = _a.iconStyle, iconClassName = _a.iconClassName, toggleStyle = _a.toggleStyle, propToggleClassName = _a.toggleClassName, inputStyle = _a.inputStyle, inputClassName = _a.inputClassName, icon = _a.icon, propOnFocus = _a.onFocus, propOnBlur = _a.onBlur, _b = _a.error, error = _b === void 0 ? false : _b, _c = _a.inline, inline = _c === void 0 ? false : _c, _d = _a.stacked, stacked = _d === void 0 ? false : _d, _e = _a.disabled, disabled = _e === void 0 ? false : _e, label = _a.label, labelStyle = _a.labelStyle, labelClassName = _a.labelClassName, labelDisabled = _a.labelDisabled, _f = _a.iconAfter, iconAfter = _f === void 0 ? false : _f, _g = _a.disableIconOverlay, disableIconOverlay = _g === void 0 ? false : _g, disableRipple = _a.disableRipple, disableProgrammaticRipple = _a.disableProgrammaticRipple, rippleTimeout = _a.rippleTimeout, rippleClassNames = _a.rippleClassNames, children = _a.children, indeterminate = _a.indeterminate, props = __rest(_a, ["style", "className", "iconStyle", "iconClassName", "toggleStyle", "toggleClassName", "inputStyle", "inputClassName", "icon", "onFocus", "onBlur", "error", "inline", "stacked", "disabled", "label", "labelStyle", "labelClassName", "labelDisabled", "iconAfter", "disableIconOverlay", "disableRipple", "disableProgrammaticRipple", "rippleTimeout", "rippleClassNames", "children", "indeterminate"]);
    var id = props.id, type = props.type;
    var _h = states_1.useInteractionStates({
        handlers: props,
        disabled: disabled,
        className: propToggleClassName,
        disableRipple: disableRipple,
        disableProgrammaticRipple: disableProgrammaticRipple,
        rippleTimeout: rippleTimeout,
        rippleClassNames: rippleClassNames,
    }), ripples = _h.ripples, handlers = _h.handlers, toggleClassName = _h.className;
    var _j = useFocusState_1.useFocusState({
        onFocus: propOnFocus,
        onBlur: propOnBlur,
    }), focused = _j[0], onFocus = _j[1], onBlur = _j[2];
    var labelEl = (react_1.default.createElement(Label_1.Label, { style: labelStyle, className: labelClassName, htmlFor: id, error: error, disabled: typeof labelDisabled === "boolean" ? labelDisabled : disabled }, label));
    return (react_1.default.createElement(ToggleContainer_1.ToggleContainer, { style: style, className: className, inline: inline, stacked: stacked },
        iconAfter && labelEl,
        react_1.default.createElement("span", { style: toggleStyle, className: classnames_1.default(block({
                focused: focused,
                disabled: disabled,
            }), toggleClassName) },
            react_1.default.createElement("input", __assign({}, props, handlers, { ref: ref, style: inputStyle, disabled: disabled, onFocus: onFocus, onBlur: onBlur, className: classnames_1.default(block("input"), inputClassName) })),
            react_1.default.createElement(InputToggleIcon_1.InputToggleIcon, { circle: !disableIconOverlay && type === "radio", disabled: disabled, overlay: !disableIconOverlay, indeterminate: indeterminate, style: iconStyle, className: iconClassName }, icon),
            ripples,
            children),
        !iconAfter && labelEl));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        exports.InputToggle.propTypes = {
            id: PropTypes.string.isRequired,
            style: PropTypes.object,
            className: PropTypes.string,
            type: PropTypes.oneOf(["radio", "checkbox"]).isRequired,
            icon: PropTypes.node,
            iconStyle: PropTypes.object,
            iconClassName: PropTypes.string,
            toggleStyle: PropTypes.object,
            toggleClassName: PropTypes.string,
            error: PropTypes.bool,
            label: PropTypes.node,
            labelStyle: PropTypes.object,
            labelClassName: PropTypes.string,
            labelDisabled: PropTypes.bool,
            inline: PropTypes.bool,
            stacked: PropTypes.bool,
            disabled: PropTypes.bool,
            iconAfter: PropTypes.bool,
            onBlur: PropTypes.func,
            onFocus: PropTypes.func,
            disableIconOverlay: PropTypes.bool,
            disableRipple: PropTypes.bool,
            disableProgrammaticRipple: PropTypes.bool,
            rippleTimeout: PropTypes.oneOfType([
                PropTypes.number,
                PropTypes.shape({
                    appear: PropTypes.number,
                    enter: PropTypes.number,
                    exit: PropTypes.number,
                }),
            ]),
            rippleClassNames: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.shape({
                    appear: PropTypes.string,
                    appearActive: PropTypes.string,
                    enter: PropTypes.string,
                    enterActive: PropTypes.string,
                    enterDone: PropTypes.string,
                    exit: PropTypes.string,
                    exitActive: PropTypes.string,
                    exitDone: PropTypes.string,
                }),
            ]),
            children: PropTypes.node,
            indeterminate: PropTypes.bool,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=InputToggle.js.map