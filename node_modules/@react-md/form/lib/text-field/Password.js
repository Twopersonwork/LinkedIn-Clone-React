"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Password = void 0;
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var button_1 = require("@react-md/button");
var icon_1 = require("@react-md/icon");
var utils_1 = require("@react-md/utils");
var TextField_1 = require("./TextField");
var block = utils_1.bem("rmd-password");
function isConfigurableIcon(icon) {
    return !!icon && !react_1.isValidElement(icon);
}
/**
 * This component is a simple wrapper of the `TextField` that can only be
 * rendered for password inputs. There is built-in functionality to be able to
 * temporarily show the password's value by swapping the `type` to `"text"`.
 */
exports.Password = react_1.forwardRef(function Password(_a, ref) {
    var className = _a.className, inputClassName = _a.inputClassName, propVisibilityIcon = _a.visibilityIcon, visibilityStyle = _a.visibilityStyle, visibilityClassName = _a.visibilityClassName, _b = _a.visibilityLabel, visibilityLabel = _b === void 0 ? "Show password" : _b, onVisibilityClick = _a.onVisibilityClick, getVisibilityIcon = _a.getVisibilityIcon, _c = _a.disableVisibility, disableVisibility = _c === void 0 ? false : _c, propRightChildren = _a.rightChildren, _d = _a.isRightAddon, isRightAddon = _d === void 0 ? disableVisibility : _d, props = __rest(_a, ["className", "inputClassName", "visibilityIcon", "visibilityStyle", "visibilityClassName", "visibilityLabel", "onVisibilityClick", "getVisibilityIcon", "disableVisibility", "rightChildren", "isRightAddon"]);
    var id = props.id;
    var _e = react_1.useState("password"), type = _e[0], setType = _e[1];
    var toggle = react_1.useCallback(function (event) {
        if (onVisibilityClick) {
            onVisibilityClick(event);
        }
        setType(function (prevType) { return (prevType === "password" ? "text" : "password"); });
    }, [onVisibilityClick]);
    var visible = type === "text";
    var visibilityIcon = icon_1.useIcon("password", propVisibilityIcon);
    if (isConfigurableIcon(propVisibilityIcon)) {
        visibilityIcon = visible
            ? propVisibilityIcon.visible
            : propVisibilityIcon.invisible;
    }
    var rightChildren = propRightChildren;
    if (!disableVisibility) {
        rightChildren = (react_1.default.createElement(button_1.Button, { id: id + "-password-toggle", "aria-label": visibilityLabel, "aria-pressed": visible, buttonType: "icon", onClick: toggle, style: visibilityStyle, className: classnames_1.default(block("toggle"), visibilityClassName) }, typeof getVisibilityIcon === "function"
            ? getVisibilityIcon(type)
            : visibilityIcon));
    }
    return (react_1.default.createElement(TextField_1.TextField, __assign({}, props, { className: classnames_1.default(block({ offset: !disableVisibility }), className), inputClassName: classnames_1.default(block("input", { offset: !disableVisibility }), inputClassName), ref: ref, type: type, isRightAddon: isRightAddon, rightChildren: rightChildren })));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        exports.Password.propTypes = {
            id: PropTypes.string.isRequired,
            className: PropTypes.string,
            inputClassName: PropTypes.string,
            visibilityIcon: PropTypes.oneOfType([
                PropTypes.node,
                PropTypes.shape({
                    visible: PropTypes.node,
                    invisible: PropTypes.node,
                }),
            ]),
            visibilityStyle: PropTypes.object,
            visibilityClassName: PropTypes.string,
            visibilityLabel: PropTypes.string,
            disableVisibility: PropTypes.bool,
            onVisibilityClick: PropTypes.func,
            getVisibilityIcon: PropTypes.func,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=Password.js.map