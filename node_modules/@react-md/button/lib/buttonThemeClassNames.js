"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buttonThemeClassNames = void 0;
var classnames_1 = __importDefault(require("classnames"));
var utils_1 = require("@react-md/utils");
var block = utils_1.bem("rmd-button");
/**
 * Creates a button theme based on the button theming props. This is really just
 * used so that other elements like clickable `<div>`s or `<input type="file">`
 * can look like buttons.
 *
 * @param props - An object containing the themeable button props to generate a
 * button theme className.
 * @returns a string of class names to create an element with a button theme.
 */
function buttonThemeClassNames(_a) {
    var _b;
    var _c = _a.theme, propTheme = _c === void 0 ? "clear" : _c, _d = _a.themeType, themeType = _d === void 0 ? "flat" : _d, _e = _a.buttonType, buttonType = _e === void 0 ? "text" : _e, _f = _a.disabled, propDisabled = _f === void 0 ? false : _f, className = _a.className;
    var theme = propTheme === "disabled" ? "clear" : propTheme;
    var disabled = propDisabled || propTheme === "disabled";
    var text = buttonType === "text";
    var icon = buttonType === "icon";
    var outline = themeType === "outline";
    var contained = themeType === "contained";
    var clear = theme === "clear";
    return classnames_1.default(block((_b = {
            text: text,
            icon: icon,
            disabled: disabled,
            contained: !disabled && contained,
            outline: outline
        },
        _b[theme] = !disabled && !clear && contained,
        _b["text-" + theme] = !disabled && !clear && !contained,
        _b["outline-" + theme] = !disabled && !clear && outline,
        _b)), className);
}
exports.buttonThemeClassNames = buttonThemeClassNames;
//# sourceMappingURL=buttonThemeClassNames.js.map