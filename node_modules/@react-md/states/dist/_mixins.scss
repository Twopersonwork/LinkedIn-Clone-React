////
/// @group states
////

@import '~@react-md/transition/dist/variables';
@import '~@react-md/transition/dist/mixins';
@import '~@react-md/theme/dist/color-palette';
@import '~@react-md/theme/dist/helpers';
@import '~@react-md/utils/dist/mixins';
@import './variables';
@import './functions';

/// Creates the styles for one of the states's theme values. This is mostly
/// going to be an internal helper mixin util.
///
/// @param {String} property - The property to set a `rmd-states-theme-values`
/// value to.
/// @param {String} theme-style - One of the keys of `rmd-states-theme-values`
/// to extract a value from.
/// @param {Color|String|Number} fallback [null] - A fallback value to use if
/// the css variable isn't set somehow. This will default to automatically
/// retrieving the default value from the `rmd-states-theme-values` map when
/// `null`.
@mixin rmd-states-theme($property, $theme-style: $property, $fallback: null) {
  @include rmd-theme-apply-rmd-var(
    $property,
    $theme-style,
    $rmd-states-theme-values,
    states
  );
}

/// Updates one of the states's theme variables with the new value for the
/// section of your app.
///
/// @param {String} theme-style - The states theme style type to update. This
/// should be one of the `$rmd-states-theme-values` keys.
/// @param {Color|String|Number} value - The new value to use.
@mixin rmd-states-theme-update-var($theme-style, $value) {
  @include rmd-theme-update-rmd-var(
    $value,
    $theme-style,
    $rmd-states-theme-values,
    states
  );
}

/// Generates all the base styles for an interaction "surface". This should
/// normally be applied to a `::before` or `::after` pseudo element.
@mixin rmd-states-surface-base {
  @include rmd-transition(standard);
  @include rmd-utils-pseudo-element;
  @include rmd-states-theme(background-color);

  transition: background-color $rmd-transition-standard-time;
}

/// A simple mixin that allows you to add custom pressed state styles to an
/// element.
///
/// @param {String} pressed-class-name [$rmd-states-pressed-class-name] - The
/// class name to use to indicate that the element is currently being pressed.
/// @param {Boolean} css-modules [false] - Boolean if this is being used within
/// CSS Modules which will update the selector to work correctly by wrapping
/// different parts with `:global` and `:local`.
@mixin rmd-states-pressed-styles(
  $pressed-class-name: $rmd-states-pressed-class-name,
  $css-modules: false
) {
  @include rmd-utils-optional-css-modules(
    '&#{$pressed-class-name}',
    $css-modules
  ) {
    @content;
  }
}

/// This mixin will add the focus shadow color to your current element only
/// during keyboard focus events. Your element must also have included the
/// `rmd-states-surface-base` mixin for this to work.
///
/// Note: If you used the `rmd-states-surface` mixin, this functionality will be
/// included by default. In addition this only works for non-inline elements due
/// to how positioning works for them. You'll either need to update it to be
/// `display: inline-block` or fallbac to the `outline-style`s.
///
/// @example scss - Example Usage SCSS
///   .my-custom-component {
///      @include rmd-states-focus-shadow;
///
///      position: relative;
///
///      &::before {
///        @include rmd-states-surface-base;
///
///        // omit this margin if your component adds its own padding
///        // so that there is some space between the focus effect and
///        // content.
///        margin: -0.25rem;
///      }
///   }
///
/// @example scss - Automatically Creating the pseudo Element
///   .my-custom-component {
///      @include rmd-states-focus-shadow($create-pseudo: true);
///
///      position: relative;
///   }
///
/// @param {String} focus-selector ['&:focus'] - A selector to use for the focus
/// effect. This should normally stay as the default value, but can be used if
/// the focus state is only triggered by class name changes since the element
/// isn't truely focusable.
/// @param {Boolean} create-pseudo [false] - Boolean if the pseudo element
/// should also be created with only the `rmd-utils-psuedo-element` mixin. This
/// is useful if you don't want the full states styles that come with the
/// `rmd-states-surface-base` mixin.
/// @param {Boolean} after [false] - Boolean if the `::after` pseudo element
/// should be used instead of the `::before`.
/// @param {Boolean} css-modules [false] - Boolean if this is being used within
/// CSS Modules which will update the selector to work correctly by wrapping
/// different parts with `:global` and `:local`.
@mixin rmd-states-focus-shadow(
  $focus-selector: '&:focus',
  $create-pseudo: false,
  $after: false,
  $css-modules: false
) {
  $pseudo-selector: if($after, '&::after', '&::before');

  @if $create-pseudo {
    #{$pseudo-selector} {
      @include rmd-utils-pseudo-element;
    }
  }

  @if $rmd-states-use-focus-shadow {
    @include rmd-utils-keyboard-only($css-modules) {
      #{$focus-selector} {
        #{$pseudo-selector} {
          @include rmd-states-theme(box-shadow, focus-shadow);
        }
      }
    }
  }
}

/// This is the main interaction states creator. It will apply all the styles to
/// an element so that it will:
/// - gain the pointer cursor when it is not disabled (also works for
///   aria-disabled)
/// - create a `::before` element for transitioning between the different
///   interaction states
/// - apply the hover opacity when not disabled **and for non-touch devices**
///   (see more below)
/// - apply the focused opacity after a **keyboard** focus event (see more
///   below)
/// - apply the pressed opacity if not using the ripple effect (see more below)
///
/// ###### Hover Opacity
///
/// This requires the usage of a `COMPONENT_TO_MAKE` to work correctly. If
/// `COMPONENT_TO_MAKE` is not used in your application, the hover effect will
/// be applied on mobile devices after touch events. This is because a touch
/// event still goes through the mouse events and applies the hover state after
/// being touched.
///
/// ###### Focused Opacity
///
/// This requires the usage of the `KeyboardTracker` component to work
/// correctly. If the `KeyboardTracker` is not used in your application and not
/// near the root of the React render tree, you most likely will not have any
/// focus states. This is actually one of the "biggest" features of react-md
/// until the `:focus-visible` css selector has gained traction and browser
/// support.
///
/// ###### Pressed Opacity
///
/// If you are using the ripple effect for pressed states, this will be ignored
/// as a ripple element will be created instead to show the pressed state. When
/// the ripple effect is disabled, pressing an element will just trigger a
/// background opacity change like the over interaction states.
///
/// @param {String} focus-selector ['&:focus'] - A selector to use for the focus
/// effect. This should normally stay as the default value, but can be used if
/// the focus state is only triggered by class name changes since the element
/// isn't truely focusable.
/// @param {Boolean} clickable [true] - Boolean if the surface element should
/// gain the pointer cursor when hovered.
/// @param {Boolean} no-focus-state [false] - Boolean if the keyboard focus
/// background color change should be disabled.
/// @param {Boolean} css-modules [false] - Boolean if this is being used within
/// CSS Modules which will update the selector to work correctly by wrapping
/// different parts with `:global` and `:local`.
@mixin rmd-states-surface(
  $focus-selector: '&:focus',
  $clickable: true,
  $no-focus-state: false,
  $css-modules: false
) {
  @include rmd-utils-hide-focus-outline;
  @include rmd-states-focus-shadow($focus-selector, $css-modules: $css-modules);

  &::before {
    @include rmd-states-surface-base;
  }

  &:disabled,
  &[aria-disabled='true'] {
    @include rmd-states-theme-update-var(hover-color, transparent);
  }

  @if $clickable {
    &:not(:disabled):not([aria-disabled='true']):hover {
      cursor: pointer;
    }
  }

  &:hover {
    @include rmd-states-theme-update-var(
      background-color,
      rmd-states-theme-var(hover-color)
    );
  }

  @if $rmd-states-use-focus-background and not $no-focus-state {
    @include rmd-utils-keyboard-only($css-modules) {
      #{$focus-selector} {
        @include rmd-states-theme-update-var(
          background-color,
          rmd-states-theme-var(focus-color)
        );

        &:hover {
          @include rmd-states-theme-update-var(
            background-color,
            rmd-states-theme-var(hover-color)
          );
        }
      }
    }
  }

  @include rmd-utils-touch-only($css-modules) {
    &:focus,
    &:hover {
      @include rmd-states-theme-update-var(background-color, transparent);
    }
  }

  @if $rmd-states-use-pressed-states-fallback {
    @include rmd-states-pressed-styles($css-modules) {
      @include rmd-states-theme-update-var(
        background-color,
        rmd-states-theme-var(pressed-color)
      );
      @include rmd-utils-keyboard-only($css-modules) {
        @include rmd-states-theme-update-var(
          background-color,
          rmd-states-theme-var(pressed-color)
        );
      }
    }
  }
}

/// This is a mixin that should be used along with the `rmd-states-surface`
/// mixin if you'd also like to be able to add a selected state to an element.
/// This really just adds another opacity background change when the element is
/// considered selected. This is not apart of the main surface mixin since
/// selection states are a bit less used and it might be better to do different
/// styles than just a background change to show selection.
///
/// @param {String} selector ['&--selected'] - The selector to use when a
/// surface is considered selected. The selected state will be applied when this
/// class is active.
/// @param {Boolean} css-modules [false] - Boolean if this is being used within
/// CSS Modules which will update the selector to work correctly by wrapping
/// different parts with `:global` and `:local`.
@mixin rmd-states-surface-selected(
  $selector: '&--selected',
  $css-modules: false
) {
  #{$selector} {
    @include rmd-states-theme-update-var(
      background-color,
      rmd-states-theme-var(selected-color)
    );

    // since the base states disables the additional hover and focus states in touch mode,
    // they have to be re-enabled for the selected state or else the background color won't
    // appear until the user blurs the selected item.
    @include rmd-utils-touch-only($css-modules) {
      &:hover,
      &:focus {
        @include rmd-states-theme-update-var(
          background-color,
          rmd-states-theme-var(selected-color)
        );
      }
    }
  }
}

/// @access private
@mixin rmd-states-ripple-container {
  border-radius: inherit;
  bottom: 0;
  left: 0;
  overflow: hidden;
  pointer-events: none;
  position: absolute;
  right: 0;
  top: 0;
  z-index: 0;
}

/// @access private
@mixin rmd-states-ripple {
  @include rmd-states-theme(background-color, ripple-background-color);

  border-radius: 50%;
  position: absolute;
  transform: scale(0);

  &--animating {
    transition: transform $rmd-states-ripple-transform-duration
        $rmd-transition-deceleration,
      opacity $rmd-states-ripple-opacity-duration $rmd-transition-acceleration;
  }

  &--scaling {
    transform: scale(1);
  }

  &--fading {
    opacity: 0;
  }
}

/// Creates all the root styles for the states package as well as the themeable
/// css variables and their default values.
@mixin react-md-states {
  $ignored: background-color hover-color focus-color selected-color;
  @include rmd-theme-create-root-theme(
    $rmd-states-theme-values,
    states,
    $ignored
  );

  @if $rmd-states-use-ripple {
    .rmd-ripple-container {
      @include rmd-states-ripple-container;
    }

    .rmd-ripple {
      @include rmd-states-ripple;
    }
  }
}
