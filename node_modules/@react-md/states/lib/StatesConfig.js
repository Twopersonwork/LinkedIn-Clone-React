"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatesConfig = exports.useStatesConfigContext = exports.StatesConfigContext = void 0;
var react_1 = __importStar(require("react"));
var constants_1 = require("./ripples/constants");
exports.StatesConfigContext = react_1.createContext({
    rippleTimeout: constants_1.DEFAULT_RIPPLE_TIMEOUT,
    rippleClassNames: constants_1.DEFAULT_RIPPLE_CLASSNAMES,
    disableRipple: false,
    disableProgrammaticRipple: false,
});
/**
 * A simple hook that can be used to get the Ripple context. This is used behind
 * the scenes for the Ripple component and _probably_ shouldn't be used anywhere
 * else. It's mostly used to just use the context defaults when the timeout or
 * classNames are undefined.
 */
function useStatesConfigContext() {
    return react_1.useContext(exports.StatesConfigContext);
}
exports.useStatesConfigContext = useStatesConfigContext;
/**
 * The `StatesConfig` component is a top-level context provider for the states
 * context configuration. It'll keep track of:
 *
 * - the current interaction mode of your user
 * - configuration for ripple effects
 * - disabling or enabling the ripple effects
 * - disabling or enabling the fix for color pollution
 */
function StatesConfig(_a) {
    var _b = _a.rippleTimeout, rippleTimeout = _b === void 0 ? constants_1.DEFAULT_RIPPLE_TIMEOUT : _b, _c = _a.rippleClassNames, rippleClassNames = _c === void 0 ? constants_1.DEFAULT_RIPPLE_CLASSNAMES : _c, _d = _a.disableRipple, disableRipple = _d === void 0 ? false : _d, _e = _a.disableProgrammaticRipple, disableProgrammaticRipple = _e === void 0 ? false : _e, children = _a.children;
    var value = react_1.useMemo(function () { return ({
        rippleTimeout: rippleTimeout,
        rippleClassNames: rippleClassNames,
        disableRipple: disableRipple,
        disableProgrammaticRipple: disableProgrammaticRipple,
    }); }, [rippleTimeout, rippleClassNames, disableRipple, disableProgrammaticRipple]);
    return (react_1.default.createElement(exports.StatesConfigContext.Provider, { value: value }, children));
}
exports.StatesConfig = StatesConfig;
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        StatesConfig.propTypes = {
            rippleTimeout: PropTypes.oneOfType([
                PropTypes.number,
                PropTypes.shape({
                    enter: PropTypes.number,
                    exit: PropTypes.number,
                }),
            ]),
            rippleClassNames: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.shape({
                    enter: PropTypes.string,
                    enterActive: PropTypes.string,
                    enterDone: PropTypes.string,
                    exit: PropTypes.string,
                    exitActive: PropTypes.string,
                }),
            ]),
            disableRipple: PropTypes.bool,
            disableProgrammaticRipple: PropTypes.bool,
            children: PropTypes.node.isRequired,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=StatesConfig.js.map