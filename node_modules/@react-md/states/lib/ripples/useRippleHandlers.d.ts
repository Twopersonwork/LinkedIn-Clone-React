import { MergableRippleHandlers, RippleEvent } from "./types";
interface Options<E extends HTMLElement> {
    create: (event: RippleEvent<E>) => void;
    release: (event: RippleEvent<E>) => void;
    cancel: (ease: boolean) => void;
    handlers?: MergableRippleHandlers<E>;
    disabled?: boolean;
    disableRipple?: boolean;
    disableProgrammaticRipple?: boolean;
}
/**
 * This hook is used to create all the event handlers required for
 * creating ripples on an element. Each handler will be memoized and
 * merged with any provided event handlers of the same type. If the
 * ripple effect is disabled, the provided event handlers will be
 * returned instead.
 */
export declare function useRippleHandlers<E extends HTMLElement>({ create, release, cancel, handlers, disabled: propDisabled, disableRipple, disableProgrammaticRipple, }: Options<E>): MergableRippleHandlers<E>;
export {};
