import { RippleEvent, RipplesState, RippleState } from "./types";
export declare const CREATE = "CREATE";
export declare const CANCEL = "CANCEL";
export declare const RELEASE = "RELEASE";
export declare const ENTERED = "ENTERED";
export declare const REMOVE = "REMOVE";
export interface CreateAction<E extends HTMLElement> {
    type: typeof CREATE;
    event: RippleEvent<E>;
    disableSpacebarClick: boolean;
}
export interface ReleaseAction<E extends HTMLElement> {
    type: typeof RELEASE;
    event: RippleEvent<E>;
}
export interface EnteredAction {
    type: typeof ENTERED;
    ripple: RippleState;
}
export interface RemoveAction {
    type: typeof REMOVE;
    ripple: RippleState;
}
export interface CancelAction {
    type: typeof CANCEL;
    ease: boolean;
}
declare type RippleStateAction<E extends HTMLElement> = CreateAction<E> | ReleaseAction<E> | CancelAction | EnteredAction | RemoveAction;
/**
 * This function will create a simplified version of the create event
 * that only includes the parts that are needed to trigger a ripple.
 * This is really only required since `event.persist()` crashed a lot
 * when spamming the trigger events and it threw warnings when not
 * persisting the event.
 */
export declare function createRippleAction<E extends HTMLElement>(event: RippleEvent<E>, disableSpacebarClick: boolean): CreateAction<E>;
export declare function reducer<E extends HTMLElement>(state: RipplesState | undefined, action: RippleStateAction<E>): RipplesState;
interface ReturnValue<E extends HTMLElement> {
    state: RipplesState;
    create: (event: RippleEvent<E>) => void;
    release: (event: RippleEvent<E>) => void;
    entered: (ripple: RippleState) => void;
    cancel: (ease?: boolean) => void;
    remove: (ripple: RippleState) => void;
}
/**
 * This hook creates memoized callbacks for each part of the ripple transition
 * as well as returning the current list of ripples.
 */
export declare function useRippleTransition<E extends HTMLElement = HTMLElement>(disableSpacebarClick?: boolean): ReturnValue<E>;
export {};
