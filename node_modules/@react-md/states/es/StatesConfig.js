import React, { createContext, useContext, useMemo, } from "react";
import { DEFAULT_RIPPLE_CLASSNAMES, DEFAULT_RIPPLE_TIMEOUT, } from "./ripples/constants";
export var StatesConfigContext = createContext({
    rippleTimeout: DEFAULT_RIPPLE_TIMEOUT,
    rippleClassNames: DEFAULT_RIPPLE_CLASSNAMES,
    disableRipple: false,
    disableProgrammaticRipple: false,
});
/**
 * A simple hook that can be used to get the Ripple context. This is used behind
 * the scenes for the Ripple component and _probably_ shouldn't be used anywhere
 * else. It's mostly used to just use the context defaults when the timeout or
 * classNames are undefined.
 */
export function useStatesConfigContext() {
    return useContext(StatesConfigContext);
}
/**
 * The `StatesConfig` component is a top-level context provider for the states
 * context configuration. It'll keep track of:
 *
 * - the current interaction mode of your user
 * - configuration for ripple effects
 * - disabling or enabling the ripple effects
 * - disabling or enabling the fix for color pollution
 */
export function StatesConfig(_a) {
    var _b = _a.rippleTimeout, rippleTimeout = _b === void 0 ? DEFAULT_RIPPLE_TIMEOUT : _b, _c = _a.rippleClassNames, rippleClassNames = _c === void 0 ? DEFAULT_RIPPLE_CLASSNAMES : _c, _d = _a.disableRipple, disableRipple = _d === void 0 ? false : _d, _e = _a.disableProgrammaticRipple, disableProgrammaticRipple = _e === void 0 ? false : _e, children = _a.children;
    var value = useMemo(function () { return ({
        rippleTimeout: rippleTimeout,
        rippleClassNames: rippleClassNames,
        disableRipple: disableRipple,
        disableProgrammaticRipple: disableProgrammaticRipple,
    }); }, [rippleTimeout, rippleClassNames, disableRipple, disableProgrammaticRipple]);
    return (React.createElement(StatesConfigContext.Provider, { value: value }, children));
}
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        StatesConfig.propTypes = {
            rippleTimeout: PropTypes.oneOfType([
                PropTypes.number,
                PropTypes.shape({
                    enter: PropTypes.number,
                    exit: PropTypes.number,
                }),
            ]),
            rippleClassNames: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.shape({
                    enter: PropTypes.string,
                    enterActive: PropTypes.string,
                    enterDone: PropTypes.string,
                    exit: PropTypes.string,
                    exitActive: PropTypes.string,
                }),
            ]),
            disableRipple: PropTypes.bool,
            disableProgrammaticRipple: PropTypes.bool,
            children: PropTypes.node.isRequired,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=StatesConfig.js.map