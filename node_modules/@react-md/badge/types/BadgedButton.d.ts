import React, { CSSProperties, ReactNode, Ref } from "react";
import { ButtonProps } from "@react-md/button";
import { BadgeProps, BadgeTheme } from "./Badge";
export interface BadgedButtonProps extends ButtonProps, Pick<BadgeProps, "disableNullOnZero"> {
    /**
     * An id to use for the button. Either this prop or the `badgeId` are required
     * for a11y when the `badgeChildren` is provided. If the `badgeId` is omitted,
     * the badge's id will be set to `${id}-badge`
     */
    id?: string;
    /**
     * An optional id for the badge. Either this prop or the `id` prop is required
     * for a11y when the `badgeChildren` is provided to create the
     * `aria-describedby` value on the button.
     */
    badgeId?: string;
    /**
     * An optional ref for the badge. The main `ref` will be forwarded to the
     * `button` element.
     */
    badgeRef?: Ref<HTMLSpanElement>;
    /**
     * The theme to use for the badge.
     */
    badgeTheme?: BadgeTheme;
    /**
     * An optional style to apply to the badge since the `style` prop is passed
     * down to the `Button` component instead.
     */
    badgeStyle?: CSSProperties;
    /**
     * An optional className to apply to the badge since the `className` prop is
     * passed down to the `Button` component instead.
     */
    badgeClassName?: string;
    /**
     * The content to display within the button since the `children` prop is
     * passed down to the `Badge` component instead.
     */
    buttonChildren?: ReactNode;
}
/**
 * This is a small wrapper for the `Button` component that will automatically
 * apply the `aria-describedby` attribute when it has been "badged". It also
 * adds some reasonable defaults for the most common use-case for badges:
 * notifications.
 */
export declare const BadgedButton: React.ForwardRefExoticComponent<BadgedButtonProps & React.RefAttributes<HTMLButtonElement>>;
