var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from "react";
import cn from "classnames";
import { Button } from "@react-md/button";
import { useIcon } from "@react-md/icon";
import { Badge } from "./Badge";
import { isEmpty } from "./isEmpty";
/**
 * This is a small wrapper for the `Button` component that will automatically
 * apply the `aria-describedby` attribute when it has been "badged". It also
 * adds some reasonable defaults for the most common use-case for badges:
 * notifications.
 */
export var BadgedButton = forwardRef(function BadgedButton(_a, ref) {
    var _b = _a["aria-label"], ariaLabel = _b === void 0 ? "Notifications" : _b, badgeStyle = _a.badgeStyle, badgeClassName = _a.badgeClassName, badgeRef = _a.badgeRef, propBadgeId = _a.badgeId, propButtonChildren = _a.buttonChildren, _c = _a.buttonType, buttonType = _c === void 0 ? "icon" : _c, badgeTheme = _a.badgeTheme, _d = _a.children, children = _d === void 0 ? null : _d, _e = _a.disableNullOnZero, disableNullOnZero = _e === void 0 ? false : _e, propDescribedBy = _a["aria-describedby"], props = __rest(_a, ["aria-label", "badgeStyle", "badgeClassName", "badgeRef", "badgeId", "buttonChildren", "buttonType", "badgeTheme", "children", "disableNullOnZero", "aria-describedby"]);
    var id = props.id;
    var buttonChildren = useIcon("notification", propButtonChildren);
    var badgeId = propBadgeId || "";
    if (!badgeId && id) {
        badgeId = id + "-badge";
    }
    var describedBy = propDescribedBy;
    if (!isEmpty(children, disableNullOnZero)) {
        describedBy = cn(describedBy, badgeId);
    }
    return (React.createElement(Button, __assign({}, props, { "aria-label": ariaLabel, "aria-describedby": describedBy, ref: ref, buttonType: buttonType }),
        buttonChildren,
        React.createElement(Badge, { id: badgeId, ref: badgeRef, theme: badgeTheme, style: badgeStyle, className: badgeClassName, disableNullOnZero: disableNullOnZero }, children)));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        BadgedButton.propTypes = {
            id: PropTypes.string,
            "aria-label": PropTypes.string,
            "aria-describedby": PropTypes.string,
            buttonType: PropTypes.oneOf(["text", "icon"]),
            children: PropTypes.node,
            disableNullOnZero: PropTypes.bool,
            badgeId: PropTypes.string,
            badgeRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
            badgeStyle: PropTypes.object,
            badgeClassName: PropTypes.string,
            badgeTheme: PropTypes.oneOf(["primary", "secondary", "default", "clear"]),
            buttonChildren: PropTypes.node,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=BadgedButton.js.map