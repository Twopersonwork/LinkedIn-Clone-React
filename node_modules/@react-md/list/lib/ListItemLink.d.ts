import React, { AnchorHTMLAttributes, ElementType } from "react";
import { InteractionStatesOptions } from "@react-md/states";
import { SimpleListItemProps } from "./getListItemHeight";
import { ListItemChildrenProps } from "./ListItemChildren";
export interface ListItemLinkProps extends AnchorHTMLAttributes<HTMLAnchorElement>, ListItemChildrenProps, Pick<SimpleListItemProps, "threeLines" | "height">, InteractionStatesOptions<HTMLAnchorElement> {
    /**
     * An optional component to render as. This should really only be used if you
     * are using a router library like
     * {@link https://github.com/ReactTraining/react-router|react-router} or
     * {@link https://github.com/reach/router|@reach/router}. This will call
     * `createElement` with this value and provide all props and class name.
     */
    component?: ElementType;
}
export interface ListItemLinkWithComponentProps extends ListItemLinkProps {
    component: ElementType;
    /**
     * I'm not really sure of a good way to implement this, but when the
     * `component` prop is provided, all valid props from that component should
     * also be allowed.
     */
    [key: string]: unknown;
}
/**
 * This component is a really bad attempt at creating a `Link` within a `List`
 * that has the main `ListItem` styles. It will probably be better to just use
 * the `ListItemChildren` within your `Link` component instead.
 */
export declare const ListItemLink: React.ForwardRefExoticComponent<(ListItemLinkProps | ListItemLinkWithComponentProps) & React.RefAttributes<HTMLAnchorElement | React.ElementType<any>>>;
