"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListItemAddon = void 0;
var react_1 = __importDefault(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var icon_1 = require("@react-md/icon");
var utils_1 = require("@react-md/utils");
var base = utils_1.bem("rmd-list-item");
/**
 * The `ListItemAddon` is used to create an addon to the left or right of the
 * text/children of a `ListItem`.
 */
function ListItemAddon(_a) {
    var _b;
    var className = _a.className, children = _a.children, addon = _a.addon, _c = _a.addonAfter, addonAfter = _c === void 0 ? false : _c, _d = _a.type, type = _d === void 0 ? "icon" : _d, _e = _a.position, position = _e === void 0 ? "middle" : _e, forceAddonWrap = _a.forceAddonWrap, props = __rest(_a, ["className", "children", "addon", "addonAfter", "type", "position", "forceAddonWrap"]);
    var isMedia = type === "media" || type === "large-media";
    var isAvatar = type === "avatar";
    return (react_1.default.createElement(icon_1.TextIconSpacing, __assign({}, props, { icon: addon, forceIconWrap: forceAddonWrap !== null && forceAddonWrap !== void 0 ? forceAddonWrap : isMedia, className: classnames_1.default(base("addon", (_b = {},
            _b[position] = position !== "middle",
            _b.before = !addonAfter,
            _b["avatar-before"] = !addonAfter && isAvatar,
            _b.media = isMedia,
            _b["media-large"] = type === "large-media",
            _b)), className), iconAfter: addonAfter }), children));
}
exports.ListItemAddon = ListItemAddon;
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        ListItemAddon.propTypes = {
            className: PropTypes.string,
            children: PropTypes.node,
            addon: PropTypes.node,
            addonAfter: PropTypes.bool,
            type: PropTypes.oneOf(["icon", "avatar", "media", "large-media"]),
            position: PropTypes.oneOf(["top", "middle", "bottom"]),
            forceAddonWrap: PropTypes.bool,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=ListItemAddon.js.map