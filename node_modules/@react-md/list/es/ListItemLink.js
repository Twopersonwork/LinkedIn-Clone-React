var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from "react";
import cn from "classnames";
import { useInteractionStates, } from "@react-md/states";
import { getListItemHeight } from "./getListItemHeight";
import { ListItemChildren } from "./ListItemChildren";
/**
 * This component is a really bad attempt at creating a `Link` within a `List`
 * that has the main `ListItem` styles. It will probably be better to just use
 * the `ListItemChildren` within your `Link` component instead.
 */
export var ListItemLink = forwardRef(function ListItemLink(_a, ref) {
    var _b;
    var propClassName = _a.className, textClassName = _a.textClassName, secondaryTextClassName = _a.secondaryTextClassName, textChildren = _a.textChildren, primaryText = _a.primaryText, secondaryText = _a.secondaryText, children = _a.children, leftAddon = _a.leftAddon, _c = _a.leftAddonType, leftAddonType = _c === void 0 ? "icon" : _c, _d = _a.leftAddonPosition, leftAddonPosition = _d === void 0 ? "middle" : _d, rightAddon = _a.rightAddon, _e = _a.rightAddonType, rightAddonType = _e === void 0 ? "icon" : _e, _f = _a.rightAddonPosition, rightAddonPosition = _f === void 0 ? "middle" : _f, forceAddonWrap = _a.forceAddonWrap, _g = _a.height, propHeight = _g === void 0 ? "auto" : _g, _h = _a.threeLines, threeLines = _h === void 0 ? false : _h, _j = _a.component, Component = _j === void 0 ? "a" : _j, disableSpacebarClick = _a.disableSpacebarClick, disableRipple = _a.disableRipple, disableProgrammaticRipple = _a.disableProgrammaticRipple, disablePressedFallback = _a.disablePressedFallback, rippleTimeout = _a.rippleTimeout, rippleClassNames = _a.rippleClassNames, rippleClassName = _a.rippleClassName, rippleContainerClassName = _a.rippleContainerClassName, props = __rest(_a, ["className", "textClassName", "secondaryTextClassName", "textChildren", "primaryText", "secondaryText", "children", "leftAddon", "leftAddonType", "leftAddonPosition", "rightAddon", "rightAddonType", "rightAddonPosition", "forceAddonWrap", "height", "threeLines", "component", "disableSpacebarClick", "disableRipple", "disableProgrammaticRipple", "disablePressedFallback", "rippleTimeout", "rippleClassNames", "rippleClassName", "rippleContainerClassName"]);
    var height = getListItemHeight({
        height: propHeight,
        leftAddon: leftAddon,
        leftAddonType: leftAddonType,
        rightAddon: rightAddon,
        rightAddonType: rightAddonType,
        secondaryText: secondaryText,
    });
    var _k = useInteractionStates({
        className: propClassName,
        handlers: props,
        disableRipple: disableRipple,
        disableProgrammaticRipple: disableProgrammaticRipple,
        rippleTimeout: rippleTimeout,
        rippleClassNames: rippleClassNames,
        rippleClassName: rippleClassName,
        rippleContainerClassName: rippleContainerClassName,
        disableSpacebarClick: disableSpacebarClick,
        disablePressedFallback: disablePressedFallback,
    }), ripples = _k.ripples, className = _k.className, handlers = _k.handlers;
    return (React.createElement(Component, __assign({}, props, handlers, { ref: ref, className: cn("rmd-list-item rmd-list-item--clickable rmd-list-item--link", (_b = {},
            _b["rmd-list-item--" + height] = height !== "auto" && height !== "normal",
            _b["rmd-list-item--three-lines"] = !!secondaryText && threeLines,
            _b), className) }),
        React.createElement(ListItemChildren, { textClassName: textClassName, secondaryTextClassName: secondaryTextClassName, textChildren: textChildren, primaryText: primaryText, secondaryText: secondaryText, leftAddon: leftAddon, leftAddonType: leftAddonType, leftAddonPosition: leftAddonPosition, rightAddon: rightAddon, rightAddonType: rightAddonType, rightAddonPosition: rightAddonPosition, forceAddonWrap: forceAddonWrap }, children),
        ripples));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        ListItemLink.propTypes = {
            component: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.func,
                PropTypes.object,
            ]),
            height: PropTypes.oneOf([
                "auto",
                "normal",
                "medium",
                "large",
                "extra-large",
            ]),
            children: PropTypes.node,
            className: PropTypes.string,
            textClassName: PropTypes.string,
            secondaryTextClassName: PropTypes.string,
            primaryText: PropTypes.node,
            secondaryText: PropTypes.node,
            forceAddonWrap: PropTypes.bool,
            leftAddon: PropTypes.node,
            leftAddonType: PropTypes.oneOf([
                "icon",
                "avatar",
                "media",
                "large-media",
            ]),
            leftAddonPosition: PropTypes.oneOf(["top", "middle", "bottom"]),
            rightAddon: PropTypes.node,
            rightAddonType: PropTypes.oneOf([
                "icon",
                "avatar",
                "media",
                "large-media",
            ]),
            rightAddonPosition: PropTypes.oneOf(["top", "middle", "bottom"]),
            disabled: PropTypes.bool,
            disableRipple: PropTypes.bool,
            disableProgrammaticRipple: PropTypes.bool,
            rippleTimeout: PropTypes.oneOfType([
                PropTypes.number,
                PropTypes.shape({
                    appear: PropTypes.number,
                    enter: PropTypes.number,
                    exit: PropTypes.number,
                }),
            ]),
            rippleClassNames: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.shape({
                    appear: PropTypes.string,
                    appearActive: PropTypes.string,
                    enter: PropTypes.string,
                    enterActive: PropTypes.string,
                    enterDone: PropTypes.string,
                    exit: PropTypes.string,
                    exitActive: PropTypes.string,
                    exitDone: PropTypes.string,
                }),
            ]),
            rippleClassName: PropTypes.string,
            rippleContainerClassName: PropTypes.string,
            enablePressedAndRipple: PropTypes.bool,
            disableSpacebarClick: PropTypes.bool,
            disablePressedFallback: PropTypes.bool,
            textChildren: PropTypes.bool,
            threeLines: PropTypes.bool,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=ListItemLink.js.map