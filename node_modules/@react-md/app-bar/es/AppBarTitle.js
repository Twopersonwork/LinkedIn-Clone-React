var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from "react";
import cn from "classnames";
import { bem } from "@react-md/utils";
import { useInheritContext } from "./useInheritContext";
var block = bem("rmd-app-bar");
/**
 * This component is used to create a title for your application. If your app is
 * not using the `AppBarNav` component, you can enable the `keyline` prop to
 * ensure that your title aligns with the keyline of your navigation element.
 */
export var AppBarTitle = forwardRef(function AppBarTitle(_a, ref) {
    var _b = _a.noWrap, noWrap = _b === void 0 ? true : _b, _c = _a.keyline, keyline = _c === void 0 ? false : _c, className = _a.className, children = _a.children, inheritColor = _a.inheritColor, props = __rest(_a, ["noWrap", "keyline", "className", "children", "inheritColor"]);
    return (React.createElement("h6", __assign({}, props, { ref: ref, className: cn(block("title", {
            "no-wrap": noWrap,
            keyline: keyline,
            inherit: useInheritContext(inheritColor),
        }), className) }), children));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        AppBarTitle.propTypes = {
            className: PropTypes.string,
            children: PropTypes.node,
            keyline: PropTypes.bool,
            noWrap: PropTypes.bool,
            inheritColor: PropTypes.bool,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=AppBarTitle.js.map