import cn from "classnames";
import { ENTER, ENTERED, ENTERING, EXIT, EXITED, EXITING, } from "./constants";
import { getClassNames } from "./getClassNames";
import { getTimeout } from "./getTimeout";
import { useTransition } from "./useTransition";
/**
 * This hook is heavily inspired by the `CSSTransition` component from
 * `react-transition-group` since it's really just a hook version for it.
 *
 * This hook allows you to transition class names for an element for enter and
 * exit transitions.
 *
 * There are two different ways to create an "appear-only"/"on-mount-only"
 * transition: use the `onEntered` callback to reset the `transitionIn` to
 * false, or manually fire the `ENTERED` action with the returned `dispatch`
 * function when it should be fired again.
 *
 * Example changing `transitionIn` for pathname changes:
 * ```ts
 * const [transitionIn, setTransitionIn] = useState(true);
 * const [rendered, transitionProps] = useCSSTransition({
 *   appear: true,
 *   timeout: { enter: 200 },
 *   transitionIn,
 *   onEntered: () => setTransitionIn(false),
 * });
 *
 * const prevPathname = useRef(pathname);
 * if (pathname !== prevPathname.current) {
 *   prevPathname.current = pathname;
 *   setTransitionIn(true)
 * }
 *
 * return (
 *   <div {...transitionProps}>
 *     <Switch>
 *       <Route path="/" component={Home} />
 *       <Route path="/other" component={Other} />
 *    </Switch>
 *   </div>
 * );
 * ```
 *
 * Example with `dispatch` for pathname changes:
 * ```ts
 * const [rendered, transitionProps, dispatch] = useCSSTransition({
 *   appear: true,
 *   timeout: { enter: 200 },
 *   transitionIn: true,
 * });
 *
 * const prevPathname = useRef(pathname);
 * if (pathname !== prevPathname.current) {
 *   prevPathname.current = pathname;
 *   dispatch(ENTERED);
 * }
 *
 * return (
 *   <div {...transitionProps}>
 *     <Switch>
 *       <Route path="/" component={Home} />
 *       <Route path="/other" component={Other} />
 *    </Switch>
 *   </div>
 * );
 * ```
 *
 * @see useCrossFade The `useCrossFade` is a good example of using this hook for
 * a custom CSS Transition.
 * @param options - The transition options
 * @returns An ordered list of a boolean if the component should be rendered,
 * transition props to provide to the transitioning element, a dispatch function
 * for triggering the transition manually (should not be used much), and the
 * current transition stage.
 */
export function useCSSTransition(_a) {
    var _b = _a.appear, appear = _b === void 0 ? false : _b, _c = _a.temporary, temporary = _c === void 0 ? false : _c, timeout = _a.timeout, transitionIn = _a.transitionIn, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, className = _a.className, propClassNames = _a.classNames, propRef = _a.ref;
    var _d = useTransition({
        ref: propRef,
        appear: appear,
        repaint: true,
        timeout: timeout,
        temporary: temporary,
        transitionIn: transitionIn,
        onEnter: onEnter,
        onEntering: onEntering,
        onEntered: onEntered,
        onExit: onExit,
        onExiting: onExiting,
        onExited: onExited,
    }), rendered = _d.rendered, stage = _d.stage, ref = _d.ref, appearing = _d.appearing, dispatch = _d.dispatch;
    var classNames = getClassNames(propClassNames, getTimeout(timeout, appear));
    var isEntering = stage === ENTERING;
    var isEnter = isEntering || stage === ENTER;
    var isEntered = stage === ENTERED;
    var isExiting = stage === EXITING;
    var isExit = isExiting || stage === EXIT;
    var isExited = stage === EXITED;
    return [
        rendered,
        {
            ref: ref,
            className: cn(className, 
            // Note: can't use the object syntax for classNames since it'll fail
            // if the same classes are used for different phases since they'd have
            // the same key in the object...
            appearing && classNames.appear, appearing && isEntering && classNames.appearActive, appearing && isEntered && classNames.appearDone, !appearing && isEnter && classNames.enter, !appearing && isEntering && classNames.enterActive, !appearing && isEntered && classNames.enterDone, isExit && classNames.exit, isExiting && classNames.exitActive, isExited && classNames.exitDone) || undefined,
        },
        dispatch,
        stage,
    ];
}
//# sourceMappingURL=useCSSTransition.js.map