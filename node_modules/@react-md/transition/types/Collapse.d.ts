import { ReactElement } from "react";
import { CollapseOptions } from "./types";
export interface CollapseProps extends CollapseOptions<HTMLElement> {
    /**
     * Boolean if the the child is currently collapsed.
     */
    collapsed: boolean;
    /**
     * The child element to trigger an animation for. This child **must**
     * either be an HTMLElement or a component that:
     *
     * - forwards the ref to a DOM element
     * - applies the `style`, `className`, and `hidden` attributes correctly.
     */
    children: ReactElement;
}
/**
 * The `Collapse` component is used to transition a child element in and
 * out of view by animating it's `max-height`. This means that the child must
 * either be an HTMLElement or a component that forwards the `ref` to an
 * HTMLElement and applies the `style`, `className`, and `hidden` props to an
 * HTMLElement.
 *
 * Note: This component **should not be used for `position: absolute` or
 * `position: fixed` elements**. Instead, the `ScaleTransition` or just a simple
 * `transform` transition should be used instead. Animating `max-height`,
 * `padding-top`, and `padding-bottom` is much less performant than `transform`
 * transition since it forces DOM repaints.
 */
export declare function Collapse({ children, collapsed, className, appear, timeout, onEnter, onEntering, onEntered, onExit, onExiting, onExited, minHeight, minPaddingTop, minPaddingBottom, temporary, }: CollapseProps): ReactElement | null;
export declare namespace Collapse {
    var propTypes: {
        style: any;
        className: any;
        collapsed: any;
        minHeight: any;
        minPaddingTop: any;
        minPaddingBottom: any;
        timeout: any;
        temporary: any;
        children: any;
        onEnter: any;
        onEntering: any;
        onEntered: any;
        onExit: any;
        onExiting: any;
        onExited: any;
    };
}
