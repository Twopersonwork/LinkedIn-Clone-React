import { ReactElement, ReactNode } from "react";
import { RenderConditionalPortalProps } from "@react-md/portal";
import { OverridableCSSTransitionProps } from "./types";
export interface ScaleTransitionProps extends OverridableCSSTransitionProps, RenderConditionalPortalProps {
    /**
     * Boolean if the vertical scale animation should be used instead of the
     * normal scale animation.
     */
    vertical?: boolean;
    /**
     * Boolean if the animation should be triggered. Enabling this will trigger
     * the appear/enter animations while disabling it will trigger the exit
     * animation.
     */
    visible: boolean;
    /**
     * The children to render.
     */
    children?: ReactNode;
}
/**
 * This `ScaleTransition` component is used to trigger an animation that
 * switches between an opacity of `0` and `1` and using a `transform: scale(0)`
 * to `transform: scale(1)`. It is recommended to also manually apply a
 * `transform-origin` style or use the `useFixedPositioning` hook to generate
 * for you so that the animation starts from a specific point.
 *
 * Since the default scale animation is X and Y, you can enable the `vertical`
 * prop which will update the transition to use `transform: scaleY(0)` to
 * `transform: scaleY(1)` instead.
 */
export declare function ScaleTransition({ visible, children, classNames: propClassNames, vertical, timeout, portal, portalInto, portalIntoId, mountOnEnter, unmountOnExit, ...props }: ScaleTransitionProps): ReactElement;
export declare namespace ScaleTransition {
    var propTypes: {
        portal: any;
        portalInto: any;
        portalIntoId: any;
        mountOnEnter: any;
        unmountOnExit: any;
        visible: any;
        vertical: any;
        timeout: any;
        classNames: any;
        children: any;
    };
}
