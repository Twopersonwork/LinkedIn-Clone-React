import { Dispatch, RefCallback } from "react";
import { TransitionAction, TransitionStage } from "./constants";
import { TransitionOptions } from "./types";
export interface TransitionState {
    /**
     * The current stage for the transition. This probably won't be used too much
     * unless you want to apply custom classnames based on the stage.
     */
    stage: TransitionStage;
    /**
     * Boolean if the component should be rendered in the DOM. This will always be
     * `true` if the `temporary` option is omitted or `false`. Otherwise, it will
     * be `true` during the transitions and entered.
     */
    rendered: boolean;
    /**
     * Boolean if the transition is in the initial mounting/appearing stage while
     * entering. This will be `false` if the `appear` option is `false` and
     * automatically set to `false` after the first transition if `appear` was
     * `true`.
     */
    appearing: boolean;
}
export interface TransitionReturnValue<E extends HTMLElement> extends TransitionState {
    /**
     * A ref that must be passed to a DOM node for the transition to work. This
     * _technically_ should not need to be passed to a DOM node for non-css
     * transitions or transitions that do not require access to a DOM node, but it
     * it seems like too much work to make it conditional for those types for
     * transitions.
     */
    ref: RefCallback<E>;
    /**
     * A dispatch function that cna update the transition state manually. This
     * should really not be used too much unless your transition is for appear
     * only transitions. For those cases, you can watch for a value change and
     * just trigger the ENTER transition again:
     *
     * ```ts
     * const prevThing = useRef(thing);
     * if (thing !== prevThing.current) {
     *   prevThing.current = thing;
     *   dispatch(ENTER);
     * }
     * ```
     *
     * Note: This **should be dispatched during the render** to get the correct
     * timing.
     */
    dispatch: Dispatch<TransitionAction>;
}
/**
 * This is heavily inspired by the `Transition` component from
 * `react-transition-group` since it's really just a hook version of it.
 *
 * This hook allows you to transition between an enter and exit state with
 * defined timeouts, but you'll most likely be looking for the
 * `useCSSTransition` instead.
 *
 * @param options - All the options used for the transition.
 * @returns An object describing the current transition stage and props that
 * should be passed to a component.
 */
export declare function useTransition<E extends HTMLElement = HTMLDivElement>({ appear, repaint, temporary, transitionIn, timeout: propTimeout, onEnter, onEntering, onEntered, onExit, onExiting, onExited, ref: propRef, }: TransitionOptions<E>): TransitionReturnValue<E>;
