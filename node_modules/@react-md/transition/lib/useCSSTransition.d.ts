import { Dispatch } from "react";
import { TransitionAction, TransitionStage } from "./constants";
import { CSSTransitionOptions, CSSTransitionProvidedProps } from "./types";
declare type Rendered = boolean;
export declare type CSSTransitionReturnValue<E extends HTMLElement> = [
    Rendered,
    CSSTransitionProvidedProps<E>,
    Dispatch<TransitionAction>,
    TransitionStage
];
/**
 * This hook is heavily inspired by the `CSSTransition` component from
 * `react-transition-group` since it's really just a hook version for it.
 *
 * This hook allows you to transition class names for an element for enter and
 * exit transitions.
 *
 * There are two different ways to create an "appear-only"/"on-mount-only"
 * transition: use the `onEntered` callback to reset the `transitionIn` to
 * false, or manually fire the `ENTERED` action with the returned `dispatch`
 * function when it should be fired again.
 *
 * Example changing `transitionIn` for pathname changes:
 * ```ts
 * const [transitionIn, setTransitionIn] = useState(true);
 * const [rendered, transitionProps] = useCSSTransition({
 *   appear: true,
 *   timeout: { enter: 200 },
 *   transitionIn,
 *   onEntered: () => setTransitionIn(false),
 * });
 *
 * const prevPathname = useRef(pathname);
 * if (pathname !== prevPathname.current) {
 *   prevPathname.current = pathname;
 *   setTransitionIn(true)
 * }
 *
 * return (
 *   <div {...transitionProps}>
 *     <Switch>
 *       <Route path="/" component={Home} />
 *       <Route path="/other" component={Other} />
 *    </Switch>
 *   </div>
 * );
 * ```
 *
 * Example with `dispatch` for pathname changes:
 * ```ts
 * const [rendered, transitionProps, dispatch] = useCSSTransition({
 *   appear: true,
 *   timeout: { enter: 200 },
 *   transitionIn: true,
 * });
 *
 * const prevPathname = useRef(pathname);
 * if (pathname !== prevPathname.current) {
 *   prevPathname.current = pathname;
 *   dispatch(ENTERED);
 * }
 *
 * return (
 *   <div {...transitionProps}>
 *     <Switch>
 *       <Route path="/" component={Home} />
 *       <Route path="/other" component={Other} />
 *    </Switch>
 *   </div>
 * );
 * ```
 *
 * @see useCrossFade The `useCrossFade` is a good example of using this hook for
 * a custom CSS Transition.
 * @param options - The transition options
 * @returns An ordered list of a boolean if the component should be rendered,
 * transition props to provide to the transitioning element, a dispatch function
 * for triggering the transition manually (should not be used much), and the
 * current transition stage.
 */
export declare function useCSSTransition<E extends HTMLElement = HTMLDivElement>({ appear, temporary, timeout, transitionIn, onEnter, onEntering, onEntered, onExit, onExiting, onExited, className, classNames: propClassNames, ref: propRef, }: CSSTransitionOptions<E>): CSSTransitionReturnValue<E>;
export {};
