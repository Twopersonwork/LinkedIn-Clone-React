import { CollapseOptions, CollapseTransitionProvidedProps } from "./types";
declare type Rendered = boolean;
declare type ReturnValue<E extends HTMLElement> = [
    Rendered,
    CollapseTransitionProvidedProps<E>
];
/**
 * The `useCollapse` hook is used to transition a child element in and
 * out of view by animating it's `max-height`. This means that the child
 * must either be an HTMLElement or a component that forwards the `ref`
 * to an HTMLElement and applies the `style`, `className`, and `hidden`
 * props to an HTMLElement.
 *
 * Simple Example:
 *
 * ```tsx
 * const Example = () => {
 *   const [collapsed, setCollapsed] = useState(true);
 *   const [rendered, transitionProps] = useCollapse(collapsed);
 *
 *   return (
 *     <>
 *       <Button onClick={() => setCollapsed(!collapsed)}>Toggle</Button>
 *       {rendered && (
 *         <div {...transitionProps}>
 *          <Text>Stuff that should be animated</Text>
 *          <div>Whatever content...</div>
 *         </div>
 *       )}
 *     </>
 *   );
 * }
 * ```
 *
 * Note: This **should not be used for `position: absolute` or `position: fixed`
 * elements**. Instead, the `ScaleTransition` or just a simple `transform`
 * transition should be used instead. Animating `max-height`, `padding-top`, and
 * `padding-bottom` is much less performant than `transform` transition since it
 * forces the DOM to repaint during the
 *
 * @param collapsed - Boolean if the element is currently collapsed. Changing
 * this value will cause the animation to trigger.
 * @param options - All the additional options available for the collapse
 * transition.
 * @returns An ordered list containing a boolean if the collapse should be
 * rendered in the DOM followed by an object of props to pass to the collapsible
 * element to handle the transition.
 */
export declare function useCollapse<E extends HTMLElement = HTMLDivElement>(collapsed: boolean, { className, appear, timeout, onEnter, onEntering, onEntered, onExit, onExiting, onExited, minHeight, minPaddingTop, minPaddingBottom, temporary, }?: CollapseOptions<E>): ReturnValue<E>;
export {};
