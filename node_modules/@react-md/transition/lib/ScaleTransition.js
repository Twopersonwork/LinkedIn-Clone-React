"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ScaleTransition = void 0;
var react_1 = __importDefault(require("react"));
var CSSTransition_1 = __importDefault(require("react-transition-group/CSSTransition"));
var portal_1 = require("@react-md/portal");
var constants_1 = require("./constants");
/**
 * This `ScaleTransition` component is used to trigger an animation that
 * switches between an opacity of `0` and `1` and using a `transform: scale(0)`
 * to `transform: scale(1)`. It is recommended to also manually apply a
 * `transform-origin` style or use the `useFixedPositioning` hook to generate
 * for you so that the animation starts from a specific point.
 *
 * Since the default scale animation is X and Y, you can enable the `vertical`
 * prop which will update the transition to use `transform: scaleY(0)` to
 * `transform: scaleY(1)` instead.
 */
function ScaleTransition(_a) {
    var visible = _a.visible, children = _a.children, propClassNames = _a.classNames, _b = _a.vertical, vertical = _b === void 0 ? false : _b, _c = _a.timeout, timeout = _c === void 0 ? constants_1.SCALE_TIMEOUT : _c, _d = _a.portal, portal = _d === void 0 ? false : _d, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, _e = _a.mountOnEnter, mountOnEnter = _e === void 0 ? true : _e, _f = _a.unmountOnExit, unmountOnExit = _f === void 0 ? true : _f, props = __rest(_a, ["visible", "children", "classNames", "vertical", "timeout", "portal", "portalInto", "portalIntoId", "mountOnEnter", "unmountOnExit"]);
    var classNames = propClassNames;
    if (!classNames) {
        classNames = vertical ? constants_1.SCALE_Y_CLASSNAMES : constants_1.SCALE_CLASSNAMES;
    }
    return (react_1.default.createElement(portal_1.ConditionalPortal, { portal: portal, portalInto: portalInto, portalIntoId: portalIntoId },
        react_1.default.createElement(CSSTransition_1.default, __assign({}, props, { in: visible, timeout: timeout, classNames: classNames, mountOnEnter: mountOnEnter, unmountOnExit: unmountOnExit }), children)));
}
exports.ScaleTransition = ScaleTransition;
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        ScaleTransition.propTypes = {
            portal: PropTypes.bool,
            portalInto: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
            portalIntoId: PropTypes.string,
            mountOnEnter: PropTypes.bool,
            unmountOnExit: PropTypes.bool,
            visible: PropTypes.bool.isRequired,
            vertical: PropTypes.bool,
            timeout: PropTypes.oneOfType([
                PropTypes.number,
                PropTypes.shape({
                    enter: PropTypes.number,
                    exit: PropTypes.number,
                }),
            ]),
            classNames: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.shape({
                    appear: PropTypes.string,
                    appearActive: PropTypes.string,
                    enter: PropTypes.string,
                    enterActive: PropTypes.string,
                    enterDone: PropTypes.string,
                    exit: PropTypes.string,
                    exitActive: PropTypes.string,
                    exitDone: PropTypes.string,
                }),
            ]),
            children: PropTypes.node,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=ScaleTransition.js.map