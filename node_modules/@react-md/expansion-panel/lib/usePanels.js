"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePanels = void 0;
var react_1 = require("react");
var utils_1 = require("@react-md/utils");
/**
 * @internal
 */
var attemptFocus = function (index, panels) {
    var _a;
    var panel = (_a = panels[index]) === null || _a === void 0 ? void 0 : _a.headerRef.current;
    if (panel) {
        panel.focus();
    }
};
/**
 * This hook is used to control the expansion of a list of panels along with
 * providing some of the required props for each panel. This hook will provide
 * an ordered list of:
 *
 * - the list of panel props that include the `id`, `key`, `expanded`, and
 *   `onExpandChange`.
 * - a keydown event handler to pass to a parent component (normally the
 *   ExpansionList) to allow keyboard movement with the arrow keys, and home+end
 *   keys. This should only be used when there are multiple panels.
 * - the current list of panel ids that are expanded
 * - the React setState dispatcher for controlling the expanded list of ids
 *   manually if desired
 * - a function to create a handler for toggling the expansion of a specific
 *   panel
 *
 * This hook is usually used to control a list of expansion panels, but can also
 * control a single panel if desired.
 *
 * Examples:
 *
 * Single panel:
 *
 * ```tsx
 * const [panels] = usePanels({ count: 1, idPrefix: "my-panel" });
 * // since the count is one, it'll just be a list of only one panel props
 * const [panelProps] = panels;
 *
 * return (
 *   <ExpansionPanel {...panelProps}>
 *     Content within the panel...
 *   </ExpansionPanel>
 * );
 * ```
 *
 * Multiple Panels:
 *
 * ```tsx
 * const [panels, onKeyDown] = usePanels({ count: 3, idPrefix: "panel-list" });
 *
 * const [panel1Props, panel2Props, panel3Props] = panels;
 *
 * return (
 *   <ExpansionList onKeyDown={onKeyDown}>
 *     <ExpansionPanel {...panel1Props}>
 *       Panel 1 Content...
 *     </ExpansionPanel>
 *     <ExpansionPanel {...panel2Props}>
 *       Panel 2 Content...
 *     </ExpansionPanel>
 *     <ExpansionPanel {...panel3Props}>
 *       Panel 3 Content...
 *     </ExpansionPanel>
 *   </ExpansionList>
 * );
 * ```
 */
function usePanels(_a) {
    var idPrefix = _a.idPrefix, count = _a.count, _b = _a.multiple, multiple = _b === void 0 ? false : _b, _c = _a.preventAllClosed, preventAllClosed = _c === void 0 ? false : _c, defaultExpandedIndex = _a.defaultExpandedIndex;
    if (process.env.NODE_ENV !== "production") {
        if (count < 1) {
            throw new RangeError("The `count` must be greater than `0`");
        }
        if (typeof defaultExpandedIndex === "number" &&
            defaultExpandedIndex >= count) {
            throw new RangeError("The `defaultExpandedIndex` must be less than or equal to the `count`");
        }
        if (typeof defaultExpandedIndex === "number" && defaultExpandedIndex < -1) {
            throw new RangeError("The `defaultExpandedIndex` must be greater than or equal to `-1`");
        }
        if (Array.isArray(defaultExpandedIndex)) {
            var greater = defaultExpandedIndex.filter(function (i) { return i > count; });
            if (greater.length) {
                throw new RangeError("The `defaultExpandedIndex` array must contain numbers less than the `count`");
            }
            var lessThan = defaultExpandedIndex.filter(function (i) { return i < 0; });
            if (lessThan.length) {
                throw new RangeError("The `defaultExpandedIndex` array must contain numbers greater than or equal to `0`");
            }
        }
    }
    var panels = react_1.useMemo(function () {
        return Array.from({ length: count }, function (_, i) { return ({
            id: idPrefix + "-" + (i + 1),
            headerRef: react_1.createRef(),
        }); });
    }, [idPrefix, count]);
    var _d = react_1.useState(function () {
        if (typeof defaultExpandedIndex === "undefined") {
            return preventAllClosed ? [panels[0].id] : [];
        }
        if (typeof defaultExpandedIndex === "number") {
            return defaultExpandedIndex === -1
                ? panels.map(function (_a) {
                    var id = _a.id;
                    return id;
                })
                : [panels[Math.min(defaultExpandedIndex, panels.length)].id];
        }
        return panels
            .filter(function (_, i) { return defaultExpandedIndex.includes(i); })
            .map(function (_a) {
            var id = _a.id;
            return id;
        });
    }), expandedIds = _d[0], setExpandedIds = _d[1];
    var createExpandClick = function (panelId) { return function () {
        setExpandedIds(function (prevIds) {
            var i = prevIds.indexOf(panelId);
            if (!multiple) {
                if (prevIds[0] === panelId && prevIds.length === 1) {
                    return preventAllClosed ? prevIds : [];
                }
                return [panelId];
            }
            var nextSelectedIds = prevIds.slice();
            if (i === -1) {
                nextSelectedIds.push(panelId);
            }
            else {
                nextSelectedIds.splice(i, 1);
            }
            if (preventAllClosed && nextSelectedIds.length === 0) {
                return [panelId];
            }
            return nextSelectedIds;
        });
    }; };
    var previousExpanded = false;
    var panelPropList = panels.map(function (_a, i) {
        var id = _a.id, headerRef = _a.headerRef;
        var expanded = expandedIds.includes(id);
        var marginTop = i > 0 && (expanded || previousExpanded);
        previousExpanded = expanded;
        return {
            id: id,
            disabled: expanded && preventAllClosed && expandedIds.length === 1,
            expanded: expanded,
            headerRef: headerRef,
            marginTop: marginTop,
            onExpandClick: createExpandClick(id),
        };
    });
    var onKeyDown = react_1.useCallback(function (event) {
        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {
            return;
        }
        var key = event.key;
        var increment = key === "ArrowDown";
        var decrement = key === "ArrowUp";
        var jumpToFirst = key === "Home";
        var jumpToLast = key === "End";
        if (!increment && !decrement && !jumpToFirst && !jumpToLast) {
            return;
        }
        var currentIndex = panels.findIndex(function (_a) {
            var headerRef = _a.headerRef;
            return event.target === headerRef.current;
        });
        if (currentIndex === -1) {
            return;
        }
        // don't want page scroll behavior
        event.preventDefault();
        if (jumpToFirst) {
            attemptFocus(0, panels);
            return;
        }
        if (jumpToLast) {
            attemptFocus(panels.length - 1, panels);
            return;
        }
        attemptFocus(utils_1.loop({
            value: currentIndex,
            max: panels.length - 1,
            increment: increment,
        }), panels);
    }, [panels]);
    return [
        panelPropList,
        onKeyDown,
        expandedIds,
        setExpandedIds,
        createExpandClick,
    ];
}
exports.usePanels = usePanels;
//# sourceMappingURL=usePanels.js.map