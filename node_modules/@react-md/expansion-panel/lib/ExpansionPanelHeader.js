"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExpansionPanelHeader = void 0;
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var button_1 = require("@react-md/button");
var icon_1 = require("@react-md/icon");
var utils_1 = require("@react-md/utils");
var block = utils_1.bem("rmd-expansion-panel");
/**
 * The header for a panel that controls the expansion state. This is really just
 * a simple button that displays the children before an expander icon.
 *
 * Reminder: Since this is a `<button>`, only `inline` elements should be
 * rendered within (so use `<span>` instead of `<div>` for children).
 */
exports.ExpansionPanelHeader = react_1.forwardRef(function ExpansionPanelHeader(_a, ref) {
    var propIcon = _a.icon, expanded = _a.expanded, children = _a.children, className = _a.className, _b = _a.disableTransition, disableTransition = _b === void 0 ? false : _b, props = __rest(_a, ["icon", "expanded", "children", "className", "disableTransition"]);
    var icon = icon_1.useIcon("expander", propIcon);
    return (react_1.default.createElement(button_1.UnstyledButton, __assign({}, props, { ref: ref, "aria-expanded": expanded || undefined, className: classnames_1.default(block("header"), className) }),
        children,
        icon && (react_1.default.createElement("span", { className: block("icon") },
            react_1.default.createElement(icon_1.IconRotator, { animate: !disableTransition, rotated: expanded }, icon)))));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        exports.ExpansionPanelHeader.propTypes = {
            id: PropTypes.string.isRequired,
            icon: PropTypes.node,
            expanded: PropTypes.bool.isRequired,
            onClick: PropTypes.func.isRequired,
            children: PropTypes.node.isRequired,
            className: PropTypes.string,
            disableTransition: PropTypes.bool,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=ExpansionPanelHeader.js.map