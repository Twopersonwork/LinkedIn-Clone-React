var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, } from "react";
import cn from "classnames";
import { UnstyledButton } from "@react-md/button";
import { IconRotator, useIcon } from "@react-md/icon";
import { bem } from "@react-md/utils";
var block = bem("rmd-expansion-panel");
/**
 * The header for a panel that controls the expansion state. This is really just
 * a simple button that displays the children before an expander icon.
 *
 * Reminder: Since this is a `<button>`, only `inline` elements should be
 * rendered within (so use `<span>` instead of `<div>` for children).
 */
export var ExpansionPanelHeader = forwardRef(function ExpansionPanelHeader(_a, ref) {
    var propIcon = _a.icon, expanded = _a.expanded, children = _a.children, className = _a.className, _b = _a.disableTransition, disableTransition = _b === void 0 ? false : _b, props = __rest(_a, ["icon", "expanded", "children", "className", "disableTransition"]);
    var icon = useIcon("expander", propIcon);
    return (React.createElement(UnstyledButton, __assign({}, props, { ref: ref, "aria-expanded": expanded || undefined, className: cn(block("header"), className) }),
        children,
        icon && (React.createElement("span", { className: block("icon") },
            React.createElement(IconRotator, { animate: !disableTransition, rotated: expanded }, icon)))));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        ExpansionPanelHeader.propTypes = {
            id: PropTypes.string.isRequired,
            icon: PropTypes.node,
            expanded: PropTypes.bool.isRequired,
            onClick: PropTypes.func.isRequired,
            children: PropTypes.node.isRequired,
            className: PropTypes.string,
            disableTransition: PropTypes.bool,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=ExpansionPanelHeader.js.map