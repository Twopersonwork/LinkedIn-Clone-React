var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Children, cloneElement, forwardRef, isValidElement, } from "react";
import cn from "classnames";
export var TextContainer = forwardRef(function TextContainer(_a, ref) {
    var propClassName = _a.className, _b = _a.component, Component = _b === void 0 ? "div" : _b, _c = _a.size, size = _c === void 0 ? "auto" : _c, children = _a.children, clone = _a.clone, props = __rest(_a, ["className", "component", "size", "children", "clone"]);
    var className = cn("rmd-text-container rmd-text-container--" + size, propClassName);
    if (clone && isValidElement(children)) {
        var child = Children.only(children);
        return cloneElement(child, {
            className: cn(child.props.className, className),
        });
    }
    if (typeof children === "function") {
        return children({ className: className });
    }
    return (React.createElement(Component, __assign({}, props, { className: className, ref: ref }), children));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        TextContainer.propTypes = {
            className: PropTypes.string,
            size: PropTypes.oneOf(["auto", "mobile", "desktop"]),
            component: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.func,
                PropTypes.object,
            ]),
            children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
            clone: PropTypes.bool,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=TextContainer.js.map