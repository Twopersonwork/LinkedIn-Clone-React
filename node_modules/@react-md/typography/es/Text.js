var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { createElement, forwardRef, } from "react";
import cn from "classnames";
import { bem } from "@react-md/utils";
function getComponent(component, type) {
    if (component) {
        return component;
    }
    switch (type) {
        case "headline-1":
            return "h1";
        case "headline-2":
            return "h2";
        case "headline-3":
            return "h3";
        case "headline-4":
            return "h4";
        case "headline-5":
            return "h5";
        case "headline-6":
        case "subtitle-1":
        case "subtitle-2":
            return "h6";
        case "body-1":
        case "body-2":
            return "p";
        case "caption":
            return "caption";
        case "button":
            return "button";
        default:
            return "span";
    }
}
var block = bem("rmd-typography");
/**
 * The `Text` component is used to render text with the material design
 * typography styles applied.  By default, everything will be rendered in a
 * `<p>` tag with the normal paragraph styles.
 *
 * When the `type` prop is changed to another typography style, this component
 * will determine the "best" element to render the text in *unless* the
 * `component` prop is provided. The default mapping is:
 *
 * - `"headline-1" -> <h1>`
 * - `"headline-2" -> <h2>`
 * - `"headline-3" -> <h3>`
 * - `"headline-4" -> <h4>`
 * - `"headline-5" -> <h5>`
 * - `"headline-6" -> <h6>`
 * - `"subtitle-1" -> <h5>`
 * - `"subtitle-2" -> <h6>`
 * - `"body-1"     -> <p>`
 * - `"body-2"     -> <p>`
 * - `"caption"    -> <caption>`
 * - `"overline"   -> <span>`
 * - `"button"     -> <button>`
 *
 * NOTE: if the `component` prop is not `null`, this logic will be ignored and
 * the provided `component` will be used instead.
 */
export var Text = forwardRef(function Text(_a, ref) {
    var _b;
    var propClassName = _a.className, children = _a.children, _c = _a.type, type = _c === void 0 ? "body-1" : _c, _d = _a.component, component = _d === void 0 ? null : _d, align = _a.align, color = _a.color, decoration = _a.decoration, transform = _a.transform, weight = _a.weight, fontStyle = _a.fontStyle, _e = _a.margin, margin = _e === void 0 ? "initial" : _e, props = __rest(_a, ["className", "children", "type", "component", "align", "color", "decoration", "transform", "weight", "fontStyle", "margin"]);
    var className = cn(block((_b = {},
        _b[type] = true,
        _b["no-margin"] = margin === "none",
        _b["no-margin-top"] = margin === "bottom",
        _b["no-margin-bottom"] = margin === "top",
        _b[align || ""] = align,
        _b[decoration || ""] = decoration && decoration !== "overline",
        _b[color || ""] = color,
        // only because "overline" is technically one of the valid material design types :/
        _b["overline-decoration"] = decoration === "overline",
        _b[transform || ""] = transform,
        _b[weight || ""] = weight,
        _b[fontStyle || ""] = fontStyle,
        _b)), propClassName);
    if (typeof children === "function") {
        return children({ className: className });
    }
    return createElement(getComponent(component, type), __assign(__assign({}, props), { className: className, ref: ref }), children);
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        Text.propTypes = {
            className: PropTypes.string,
            type: PropTypes.oneOf([
                "headline-1",
                "headline-2",
                "headline-3",
                "headline-4",
                "headline-5",
                "headline-6",
                "subtitle-1",
                "subtitle-2",
                "body-1",
                "body-2",
                "caption",
                "overline",
                "button",
            ]),
            component: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.func,
                PropTypes.object,
            ]),
            children: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),
            align: PropTypes.oneOf(["", "left", "center", "right"]),
            decoration: PropTypes.oneOf(["underline", "overline", "line-through"]),
            weight: PropTypes.oneOf([
                "thin",
                "light",
                "regular",
                "medium",
                "bold",
                "semi-bold",
                "black",
            ]),
            transform: PropTypes.oneOf(["", "capitalize", "uppercase", "lowercase"]),
            color: PropTypes.oneOf([
                "secondary",
                "hint",
                "theme-primary",
                "theme-secondary",
                "theme-warning",
                "theme-error",
            ]),
            margin: PropTypes.oneOf(["initial", "none", "top", "bottom"]),
            fontStyle: PropTypes.oneOf(["normal", "italic", "oblique"]),
        };
    }
    catch (e) { }
}
//# sourceMappingURL=Text.js.map