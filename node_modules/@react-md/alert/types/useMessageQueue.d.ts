import { AddMessage, DuplicateBehavior, Message, MessageQueueActions, ToastMessage } from "./MessageQueueContext";
export declare const ADD_MESSAGE = "ADD_MESSAGE";
export declare const POP_MESSAGE = "POP_MESSAGE";
export declare const RESET_QUEUE = "RESET_QUEUE";
/**
 * @internal
 */
export interface AddMessageAction<M extends Message = ToastMessage> {
    type: typeof ADD_MESSAGE;
    message: M;
    duplicates: DuplicateBehavior;
}
/**
 * @internal
 */
export declare function addMessage<M extends Message = ToastMessage>(message: M, duplicates: DuplicateBehavior): AddMessageAction;
/**
 * @internal
 */
export interface PopMessageAction {
    type: typeof POP_MESSAGE;
}
/**
 * @internal
 */
export declare const popMessage: () => PopMessageAction;
/**
 * @internal
 */
export interface ResetQueueAction {
    type: typeof RESET_QUEUE;
}
/**
 * @internal
 */
export declare const resetQueue: () => ResetQueueAction;
/**
 * @internal
 */
export declare type MessageActions<M extends Message = ToastMessage> = AddMessageAction<M> | PopMessageAction | ResetQueueAction;
/**
 * This function is used to update the message queue state by adding a new
 * message when needed.
 *
 * @internal
 */
export declare function handleAddMessage<M extends Message = ToastMessage>(state: M[], message: M, duplicates: DuplicateBehavior): M[];
/**
 * @internal
 */
export declare function reducer<M extends Message = ToastMessage>(state: M[], action: MessageActions<M>): M[];
export interface MessageQueueOptions<M extends Message = ToastMessage> {
    timeout?: number;
    duplicates?: DuplicateBehavior;
    defaultQueue?: M[];
}
export interface MessageQueueResult<M extends Message = ToastMessage> extends MessageQueueActions<M> {
    queue: M[];
    visible: boolean;
    addMessage: AddMessage<M>;
}
/**
 * This is the main logic for the message queue behavior that will handle:
 *
 * - creating timeouts as needed to show/hide toasts within the `SnackbarQueue`
 *   component
 * - create a way to push messages with optional priority onto the queue
 *
 * @internal
 */
export declare function useMessageQueue<M extends Message = ToastMessage>({ timeout, duplicates, defaultQueue, }: MessageQueueOptions<M>): MessageQueueResult<M>;
