"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useQueue = exports.MessageQueueContext = exports.useMessageQueueActions = exports.MessageQueueActionsContext = exports.useMessageVisibility = exports.useAddMessage = exports.MessageVisibilityContext = exports.AddMessageContext = exports.DEFAULT_MESSAGE_QUEUE_TIMEOUT = void 0;
var react_1 = require("react");
exports.DEFAULT_MESSAGE_QUEUE_TIMEOUT = 5000;
/**
 * @internal
 */
exports.AddMessageContext = react_1.createContext(function () {
    throw new Error("Attempted to create a message without initializing the MessageQueue component.");
});
/**
 * @internal
 */
exports.MessageVisibilityContext = react_1.createContext(false);
/**
 * This hook is used to add a message to the queue from anywhere in your app.
 * This should normally be used from click event handlers, but can also be
 * triggered with custom logic within components.
 */
function useAddMessage() {
    return react_1.useContext(exports.AddMessageContext);
}
exports.useAddMessage = useAddMessage;
/**
 * Gets the current message visibility to provide to the toast.
 *
 * @internal
 */
function useMessageVisibility() {
    return react_1.useContext(exports.MessageVisibilityContext);
}
exports.useMessageVisibility = useMessageVisibility;
/**
 * @internal
 */
exports.MessageQueueActionsContext = react_1.createContext({
    popMessage: function () {
        throw new Error("Attempted to pop a message without initializing the MessageQueue component.");
    },
    hideMessage: function () {
        throw new Error("Attempted to hide a message within initializing the MessageQueue component.");
    },
    startTimer: function () {
        throw new Error("Attempted to start a message queue timer without initializing the MessageQueue component.");
    },
    stopTimer: function () {
        throw new Error("Attempted to stop a message queue timer without initializing the MessageQueue component.");
    },
    restartTimer: function () {
        throw new Error("Attempted to restart a message queue timer without initializing the MessageQueue component.");
    },
    resetQueue: function () {
        throw new Error("Attempted to reset the message queue timer without initializing the MessageQueue component.");
    },
});
/**
 * This hook exposes some of the lower level actions for handling a message
 * queue if advanced behavior is desired.
 */
function useMessageQueueActions() {
    // I don't know how to type the createContext for a generic
    return react_1.useContext(exports.MessageQueueActionsContext);
}
exports.useMessageQueueActions = useMessageQueueActions;
/**
 * @internal
 */
exports.MessageQueueContext = react_1.createContext([]);
/**
 * This hook will allow you to get the current queue. This probably shouldn't be
 * used that much.
 */
function useQueue() {
    return react_1.useContext(exports.MessageQueueContext);
}
exports.useQueue = useQueue;
//# sourceMappingURL=MessageQueueContext.js.map