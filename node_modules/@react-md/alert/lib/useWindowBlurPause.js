"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useWindowBlurPause = void 0;
var react_1 = require("react");
/**
 * This hook is used to pause the exit timeout if the user blurs the window
 * while a toast is visible and the autohide functionality is not disabled. If
 * this functionality is not added, messages and alerts might be missed by the
 * user since they minimized the browser or viewing something on a second
 * screen.
 *
 * @internal
 */
function useWindowBlurPause(_a) {
    var startTimer = _a.startTimer, stopTimer = _a.stopTimer, visible = _a.visible, message = _a.message, _b = _a.disabled, disabled = _b === void 0 ? false : _b;
    react_1.useEffect(function () {
        if (disabled || !visible || !message || message.disableAutohide) {
            return;
        }
        var handleFocusEvent = function (event) {
            if (event.type === "focus") {
                startTimer();
            }
            else {
                stopTimer();
            }
        };
        window.addEventListener("blur", handleFocusEvent);
        window.addEventListener("focus", handleFocusEvent);
        return function () {
            window.removeEventListener("blur", handleFocusEvent);
            window.removeEventListener("focus", handleFocusEvent);
        };
    }, [disabled, startTimer, stopTimer, visible, message]);
}
exports.useWindowBlurPause = useWindowBlurPause;
//# sourceMappingURL=useWindowBlurPause.js.map