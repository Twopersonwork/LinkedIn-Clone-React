import { createContext, useContext } from "react";
export var DEFAULT_MESSAGE_QUEUE_TIMEOUT = 5000;
/**
 * @internal
 */
export var AddMessageContext = createContext(function () {
    throw new Error("Attempted to create a message without initializing the MessageQueue component.");
});
/**
 * @internal
 */
export var MessageVisibilityContext = createContext(false);
/**
 * This hook is used to add a message to the queue from anywhere in your app.
 * This should normally be used from click event handlers, but can also be
 * triggered with custom logic within components.
 */
export function useAddMessage() {
    return useContext(AddMessageContext);
}
/**
 * Gets the current message visibility to provide to the toast.
 *
 * @internal
 */
export function useMessageVisibility() {
    return useContext(MessageVisibilityContext);
}
/**
 * @internal
 */
export var MessageQueueActionsContext = createContext({
    popMessage: function () {
        throw new Error("Attempted to pop a message without initializing the MessageQueue component.");
    },
    hideMessage: function () {
        throw new Error("Attempted to hide a message within initializing the MessageQueue component.");
    },
    startTimer: function () {
        throw new Error("Attempted to start a message queue timer without initializing the MessageQueue component.");
    },
    stopTimer: function () {
        throw new Error("Attempted to stop a message queue timer without initializing the MessageQueue component.");
    },
    restartTimer: function () {
        throw new Error("Attempted to restart a message queue timer without initializing the MessageQueue component.");
    },
    resetQueue: function () {
        throw new Error("Attempted to reset the message queue timer without initializing the MessageQueue component.");
    },
});
/**
 * This hook exposes some of the lower level actions for handling a message
 * queue if advanced behavior is desired.
 */
export function useMessageQueueActions() {
    // I don't know how to type the createContext for a generic
    return useContext(MessageQueueActionsContext);
}
/**
 * @internal
 */
export var MessageQueueContext = createContext([]);
/**
 * This hook will allow you to get the current queue. This probably shouldn't be
 * used that much.
 */
export function useQueue() {
    return useContext(MessageQueueContext);
}
//# sourceMappingURL=MessageQueueContext.js.map