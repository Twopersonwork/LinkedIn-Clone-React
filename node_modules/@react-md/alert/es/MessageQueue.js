var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useMemo } from "react";
import { AddMessageContext, MessageQueueActionsContext, MessageQueueContext, MessageVisibilityContext, } from "./MessageQueueContext";
import { SnackbarQueue } from "./SnackbarQueue";
import { useMessageQueue } from "./useMessageQueue";
/**
 * This component is used to be able to create a queue of messages with the
 * `Snackbar` and `Toast` components with a _fairly_ decent API out of the box.
 */
export function MessageQueue(_a) {
    var _b = _a.timeout, timeout = _b === void 0 ? 5000 : _b, _c = _a.duplicates, duplicates = _c === void 0 ? "allow" : _c, _d = _a.defaultQueue, defaultQueue = _d === void 0 ? [] : _d, children = _a.children, props = __rest(_a, ["timeout", "duplicates", "defaultQueue", "children"]);
    var _e = useMessageQueue({ timeout: timeout, duplicates: duplicates, defaultQueue: defaultQueue }), queue = _e.queue, visible = _e.visible, hideMessage = _e.hideMessage, startTimer = _e.startTimer, stopTimer = _e.stopTimer, restartTimer = _e.restartTimer, addMessage = _e.addMessage, popMessage = _e.popMessage, resetQueue = _e.resetQueue;
    var actions = useMemo(function () { return ({
        popMessage: popMessage,
        hideMessage: hideMessage,
        startTimer: startTimer,
        stopTimer: stopTimer,
        resetQueue: resetQueue,
        restartTimer: restartTimer,
    }); }, [popMessage, hideMessage, startTimer, stopTimer, restartTimer, resetQueue]);
    return (React.createElement(AddMessageContext.Provider, { value: addMessage },
        React.createElement(MessageQueueActionsContext.Provider, { value: actions },
            React.createElement(MessageVisibilityContext.Provider, { value: visible },
                React.createElement(MessageQueueContext.Provider, { value: queue }, children),
                React.createElement(SnackbarQueue, __assign({}, props, { queue: queue }))))));
}
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        MessageQueue.propTypes = {
            timeout: PropTypes.number,
            duplicates: PropTypes.oneOf(["allow", "restart", "prevent"]),
            defaultQueue: PropTypes.array,
            onActionClick: PropTypes.func,
            children: PropTypes.node.isRequired,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=MessageQueue.js.map