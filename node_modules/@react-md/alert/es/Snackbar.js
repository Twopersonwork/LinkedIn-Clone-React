var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from "react";
import cn from "classnames";
import { ConditionalPortal, } from "@react-md/portal";
import { bem } from "@react-md/utils";
var block = bem("rmd-snackbar");
export var Snackbar = forwardRef(function Snackbar(_a, ref) {
    var _b;
    var className = _a.className, children = _a.children, _c = _a.portal, portal = _c === void 0 ? false : _c, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, _d = _a.position, position = _d === void 0 ? "bottom" : _d, props = __rest(_a, ["className", "children", "portal", "portalInto", "portalIntoId", "position"]);
    return (React.createElement(ConditionalPortal, { portal: portal, portalInto: portalInto, portalIntoId: portalIntoId },
        React.createElement("div", __assign({}, props, { role: "status", ref: ref, className: cn(block((_b = {}, _b[position] = true, _b)), className) }), children)));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        Snackbar.propTypes = {
            id: PropTypes.string.isRequired,
            className: PropTypes.string,
            children: PropTypes.node,
            position: PropTypes.oneOf(["bottom", "top"]),
            portal: PropTypes.bool,
            portalInto: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),
            portalIntoId: PropTypes.string,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=Snackbar.js.map