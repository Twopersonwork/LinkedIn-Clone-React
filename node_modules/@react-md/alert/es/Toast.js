var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from "react";
import cn from "classnames";
import CSSTransition from "react-transition-group/CSSTransition";
import { bem } from "@react-md/utils";
import { DEFAULT_TOAST_CLASSNAMES, DEFAULT_TOAST_TIMEOUT } from "./constants";
var block = bem("rmd-toast");
/**
 * This is a very low-level component that can be used to animate a new toast in
 * to a `Snackbar` as it is mainly just a wrapper of the `CSSTransition`
 * component. If you are using this component, it is generally recommended to
 * provide the `onEntered` callback as a function to start the hide visibility
 * timer and the `onExited` callback to remove the current toast from your
 * queue.
 */
export var Toast = forwardRef(function Toast(_a, ref) {
    var className = _a.className, children = _a.children, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, _b = _a.timeout, timeout = _b === void 0 ? DEFAULT_TOAST_TIMEOUT : _b, _c = _a.classNames, classNames = _c === void 0 ? DEFAULT_TOAST_CLASSNAMES : _c, _d = _a.action, action = _d === void 0 ? null : _d, _e = _a.stacked, stacked = _e === void 0 ? false : _e, _f = _a.twoLines, twoLines = _f === void 0 ? false : _f, visible = _a.visible, props = __rest(_a, ["className", "children", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "timeout", "classNames", "action", "stacked", "twoLines", "visible"]);
    return (React.createElement(CSSTransition, { in: visible, appear: true, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited, timeout: timeout, classNames: classNames, mountOnEnter: true, unmountOnExit: true },
        React.createElement("div", __assign({}, props, { ref: ref, className: cn(block({
                stacked: stacked,
                padded: !action || twoLines,
                "two-lines": twoLines,
                action: action,
                "action-2": action && twoLines,
            }), className) }),
            React.createElement("span", { className: block("message", { action: action }) }, children),
            action && (React.createElement("span", { className: block("action", { stacked: stacked }) }, action)))));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        Toast.propTypes = {
            visible: PropTypes.bool.isRequired,
            action: PropTypes.element,
            stacked: PropTypes.bool,
            twoLines: PropTypes.bool,
            className: PropTypes.string,
            classNames: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.shape({
                    appear: PropTypes.string,
                    appearActive: PropTypes.string,
                    enter: PropTypes.string,
                    enterActive: PropTypes.string,
                    enterDone: PropTypes.string,
                    exit: PropTypes.string,
                    exitActive: PropTypes.string,
                    exitDone: PropTypes.string,
                }),
            ]),
            timeout: PropTypes.oneOfType([
                PropTypes.number,
                PropTypes.shape({
                    enter: PropTypes.number,
                    exit: PropTypes.number,
                }),
            ]),
            children: PropTypes.node,
            onEnter: PropTypes.func,
            onEntering: PropTypes.func,
            onEntered: PropTypes.func,
            onExit: PropTypes.func,
            onExiting: PropTypes.func,
            onExited: PropTypes.func,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=Toast.js.map