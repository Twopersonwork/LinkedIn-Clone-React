var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useCallback, } from "react";
import cn from "classnames";
import { bem } from "@react-md/utils";
import { Link } from "./Link";
var block = bem("rmd-link-skip");
/**
 * This component allows you to create a screen-reader only/keyboard focusable
 * only link that allows a user to skip to the main content of the page. This is
 * extremely useful when you have a lot of navigation items that must be tabbed
 * through before the main content can be focused and this component should
 * normally be the first focusable element on your page.
 */
export var SkipToMainContent = forwardRef(function SkipToMainContent(_a, ref) {
    var _b = _a.id, id = _b === void 0 ? "skip-to-main-content" : _b, _c = _a.children, children = _c === void 0 ? "Skip to main content" : _c, _d = _a.unstyled, unstyled = _d === void 0 ? false : _d, mainId = _a.mainId, className = _a.className, onClick = _a.onClick, props = __rest(_a, ["id", "children", "unstyled", "mainId", "className", "onClick"]);
    var handleClick = useCallback(function (event) {
        if (onClick) {
            onClick(event);
        }
        event.preventDefault();
        var main = document.getElementById(mainId);
        if (!main) {
            if (process.env.NODE_ENV !== "production") {
                /* eslint-disable no-console */
                var foundMain = document.querySelector("main");
                var foundMainId = foundMain && foundMain.id;
                console.error("Unable to find a main element to focus with an id of: \"" + mainId + "\".");
                if (foundMainId) {
                    console.error("However, a \"<main>\" element was found with an id: \"" + foundMainId + "\". Should this be the \"mainId\" prop for the \"SkipToMainContent\" component?");
                }
            }
            return;
        }
        main.focus();
    }, [mainId, onClick]);
    return (React.createElement(Link, __assign({}, props, { id: id, ref: ref, href: "#" + mainId, onClick: handleClick, className: cn(block({ styled: !unstyled }), className) }), children));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        SkipToMainContent.propTypes = {
            id: PropTypes.string,
            mainId: PropTypes.string.isRequired,
            onClick: PropTypes.func,
            className: PropTypes.string,
            children: PropTypes.node,
            unstyled: PropTypes.bool,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=SkipToMainContent.js.map