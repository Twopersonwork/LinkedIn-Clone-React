/* eslint-disable react/prop-types */
import React, { createContext, useCallback, useContext, useMemo, useState, } from "react";
var noop = function () {
    // do nothing
};
var context = createContext({
    stack: [],
    add: noop,
    remove: noop,
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    context.displayName = "NestedDialogContext";
}
var Provider = context.Provider;
/**
 * This component is used to help with handling nested dialogs by:
 * - preventing all dialogs to be closed when the escape key is pressed
 * - hiding the overlays for dialogs that are not the top-most focus
 *
 * This should be added to the root of your app if you would like to enable this
 * feature.
 */
export function NestedDialogContextProvider(_a) {
    var children = _a.children;
    var _b = useState([]), stack = _b[0], setStack = _b[1];
    var add = useCallback(function (dialogId) {
        setStack(function (prevStack) {
            /* istanbul ignore next */
            if (process.env.NODE_ENV !== "production" &&
                prevStack.includes(dialogId)) {
                /* eslint-disable no-console */
                console.warn("Tried to add a duplicate dialog id to the `NestedDialogContext`.");
                console.warn("This means that you have two dialogs with the same id: `" + dialogId + "`.");
                console.warn("This should be fixed before moving to production since this will break accessibility and is technically invalid.");
            }
            return prevStack.concat(dialogId);
        });
    }, []);
    var remove = useCallback(function (dialogId) {
        setStack(function (prevStack) { return prevStack.filter(function (id) { return id !== dialogId; }); });
    }, []);
    var value = useMemo(function () { return ({ stack: stack, add: add, remove: remove }); }, [add, remove, stack]);
    return React.createElement(Provider, { value: value }, children);
}
/**
 * Gets the current nested dialog context. This shouldn't really be used
 * externally and is a private context hook.
 *
 * @internal
 */
export function useNestedDialogContext() {
    return useContext(context);
}
//# sourceMappingURL=NestedDialogContext.js.map