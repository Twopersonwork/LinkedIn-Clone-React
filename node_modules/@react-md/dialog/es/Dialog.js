var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, } from "react";
import cn from "classnames";
import CSSTransition from "react-transition-group/CSSTransition";
import { Overlay } from "@react-md/overlay";
import { ConditionalPortal, } from "@react-md/portal";
import { bem, FocusContainer, useCloseOnEscape, useScrollLock, } from "@react-md/utils";
import { useNestedDialogFixes } from "./useNestedDialogFixes";
// used to disable the overlay click-to-close functionality when the `modal` prop is enabled.
var noop = function () {
    // do nothing
};
var block = bem("rmd-dialog");
var DEFAULT_DIALOG_CLASSNAMES = {
    appear: "rmd-dialog--enter",
    appearActive: "rmd-dialog--enter-active",
    enter: "rmd-dialog--enter",
    enterActive: "rmd-dialog--enter-active",
    exit: "rmd-dialog--exit",
    exitActive: "rmd-dialog--exit-active",
};
var DEFAULT_DIALOG_TIMEOUT = {
    enter: 200,
    exit: 150,
};
export var Dialog = forwardRef(function Dialog(_a, ref) {
    var _b = _a.component, component = _b === void 0 ? "div" : _b, _c = _a.tabIndex, tabIndex = _c === void 0 ? -1 : _c, children = _a.children, className = _a.className, containerStyle = _a.containerStyle, containerClassName = _a.containerClassName, propOverlay = _a.overlay, overlayStyle = _a.overlayStyle, overlayClassName = _a.overlayClassName, _d = _a.overlayHidden, overlayHidden = _d === void 0 ? false : _d, visible = _a.visible, onRequestClose = _a.onRequestClose, _e = _a.forceContainer, forceContainer = _e === void 0 ? false : _e, _f = _a.defaultFocus, defaultFocus = _f === void 0 ? "first" : _f, _g = _a.portal, portal = _g === void 0 ? true : _g, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, _h = _a.appear, appear = _h === void 0 ? false : _h, _j = _a.enter, enter = _j === void 0 ? true : _j, _k = _a.exit, exit = _k === void 0 ? true : _k, _l = _a.disableTransition, disableTransition = _l === void 0 ? false : _l, _m = _a.classNames, classNames = _m === void 0 ? DEFAULT_DIALOG_CLASSNAMES : _m, _o = _a.timeout, timeout = _o === void 0 ? DEFAULT_DIALOG_TIMEOUT : _o, _p = _a.mountOnEnter, mountOnEnter = _p === void 0 ? true : _p, _q = _a.unmountOnExit, unmountOnExit = _q === void 0 ? true : _q, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, _r = _a.modal, modal = _r === void 0 ? false : _r, _s = _a.role, role = _s === void 0 ? "dialog" : _s, _t = _a.type, type = _t === void 0 ? "centered" : _t, _u = _a.disableScrollLock, disableScrollLock = _u === void 0 ? false : _u, _v = _a.disableEscapeClose, propDisableEscapeClose = _v === void 0 ? false : _v, _w = _a.disableFocusContainer, disableFocusContainer = _w === void 0 ? false : _w, _x = _a.disableTabFocusWrap, disableTabFocusWrap = _x === void 0 ? false : _x, _y = _a.disableFocusOnMount, disableFocusOnMount = _y === void 0 ? false : _y, _z = _a.disableFocusOnUnmount, disableFocusOnUnmount = _z === void 0 ? false : _z, _0 = _a.disableNestedDialogFixes, disableNestedDialogFixes = _0 === void 0 ? false : _0, onKeyDown = _a.onKeyDown, props = __rest(_a, ["component", "tabIndex", "children", "className", "containerStyle", "containerClassName", "overlay", "overlayStyle", "overlayClassName", "overlayHidden", "visible", "onRequestClose", "forceContainer", "defaultFocus", "portal", "portalInto", "portalIntoId", "appear", "enter", "exit", "disableTransition", "classNames", "timeout", "mountOnEnter", "unmountOnExit", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "modal", "role", "type", "disableScrollLock", "disableEscapeClose", "disableFocusContainer", "disableTabFocusWrap", "disableFocusOnMount", "disableFocusOnUnmount", "disableNestedDialogFixes", "onKeyDown"]);
    var id = props.id;
    var isNoneRole = role === "none";
    var isFullPage = type === "full-page";
    var isCentered = type === "centered";
    var _1 = useNestedDialogFixes({
        id: id,
        visible: visible,
        disabled: disableNestedDialogFixes,
        disableEscapeClose: propDisableEscapeClose,
    }), disableOverlay = _1.disableOverlay, disableEscapeClose = _1.disableEscapeClose;
    useScrollLock(visible && !isNoneRole && !disableScrollLock);
    var overlayEl = null;
    if (typeof propOverlay === "boolean" ? propOverlay : !isFullPage) {
        // do not add the portal props to the overlay element since the portalling
        // is handled in here. With how portals work, this would be rendered **after**
        // the dialog instead of before which breaks some dialog styles
        overlayEl = (React.createElement(Overlay, { id: id + "-overlay", style: overlayStyle, className: cn("rmd-dialog-overlay", overlayClassName), hidden: overlayHidden || disableOverlay, visible: visible, clickable: !modal, onRequestClose: modal ? noop : onRequestClose }));
    }
    var dialog = (React.createElement(FocusContainer, __assign({}, props, { ref: ref, role: isNoneRole ? undefined : role, "aria-modal": (!isNoneRole && !!overlayEl) || undefined, tabIndex: tabIndex, component: component, defaultFocus: defaultFocus, disableTabFocusWrap: isNoneRole || disableTabFocusWrap || disableFocusContainer, disableFocusOnMount: isNoneRole || disableFocusContainer || disableFocusOnMount, disableFocusOnMountScroll: true, disableFocusOnUnmount: isNoneRole || disableFocusContainer || disableFocusOnUnmount, onKeyDown: useCloseOnEscape(onRequestClose, disableEscapeClose || isNoneRole, onKeyDown), className: cn(block({
            centered: isCentered,
            "full-page": isFullPage,
        }), className) }), children));
    if (isCentered || forceContainer) {
        // the additional container is only required when we don't have a full page dialog. it's just
        // used to apply flex center to the dialog and add some margin
        dialog = (React.createElement("span", { id: id + "-container", style: containerStyle, className: cn("rmd-dialog-container", containerClassName) }, dialog));
    }
    return (React.createElement(ConditionalPortal, { portal: !isNoneRole && portal, portalInto: portalInto, portalIntoId: portalIntoId },
        React.createElement(React.Fragment, null,
            overlayEl,
            React.createElement(CSSTransition, { appear: !disableTransition && appear, enter: !disableTransition && enter, exit: !disableTransition && exit, in: visible, classNames: classNames, timeout: timeout, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited, mountOnEnter: mountOnEnter, unmountOnExit: unmountOnExit }, dialog))));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        Dialog.propTypes = {
            id: PropTypes.string.isRequired,
            role: PropTypes.oneOf(["dialog", "alertdialog", "menu", "none"]),
            "aria-label": PropTypes.string,
            "aria-labelledby": PropTypes.string,
            className: PropTypes.string,
            type: PropTypes.oneOf(["custom", "centered", "full-page"]),
            tabIndex: PropTypes.number,
            modal: PropTypes.bool,
            visible: PropTypes.bool.isRequired,
            onRequestClose: PropTypes.func.isRequired,
            mountOnEnter: PropTypes.bool,
            unmountOnExit: PropTypes.bool,
            overlay: PropTypes.bool,
            overlayStyle: PropTypes.object,
            overlayClassName: PropTypes.string,
            overlayHidden: PropTypes.bool,
            containerStyle: PropTypes.object,
            containerClassName: PropTypes.string,
            forceContainer: PropTypes.bool,
            onKeyDown: PropTypes.func,
            component: PropTypes.oneOf(["div", "nav"]),
            children: PropTypes.node,
            classNames: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.shape({
                    appear: PropTypes.string,
                    appearActive: PropTypes.string,
                    enter: PropTypes.string,
                    enterActive: PropTypes.string,
                    enterDone: PropTypes.string,
                    exit: PropTypes.string,
                    exitActive: PropTypes.string,
                    exitDone: PropTypes.string,
                }),
            ]),
            timeout: PropTypes.oneOfType([
                PropTypes.number,
                PropTypes.shape({
                    enter: PropTypes.number,
                    exit: PropTypes.number,
                }),
            ]),
            appear: PropTypes.bool,
            enter: PropTypes.bool,
            exit: PropTypes.bool,
            disableTransition: PropTypes.bool,
            onEnter: PropTypes.func,
            onEntering: PropTypes.func,
            onEntered: PropTypes.func,
            onExit: PropTypes.func,
            onExiting: PropTypes.func,
            onExited: PropTypes.func,
            portal: PropTypes.bool,
            portalInto: PropTypes.oneOfType([
                PropTypes.func,
                PropTypes.string,
                PropTypes.object,
            ]),
            portalIntoId: PropTypes.string,
            defaultFocus: PropTypes.oneOfType([
                PropTypes.oneOf(["first", "last"]),
                PropTypes.string,
            ]),
            disableScrollLock: PropTypes.bool,
            disableEscapeClose: PropTypes.bool,
            disableFocusContainer: PropTypes.bool,
            disableNestedDialogFixes: PropTypes.bool,
            disableTabFocusWrap: PropTypes.bool,
            disableFocusOnMount: PropTypes.bool,
            disableFocusOnUnmount: PropTypes.bool,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=Dialog.js.map