import { useEffect, useMemo } from "react";
import { useNestedDialogContext } from "./NestedDialogContext";
/**
 * This hook is used to fix the nested overlays and the escape keypress when
 * multiple dialogs are rendered at the same time on a page. All it really does
 * is keep a stack of the dialog ids that are current visible. If there is more
 * than 1 dialog visible and the dialog is not at the top of the stack, the
 * overlay and escape keypress will be disabled.
 *
 * NOTE: This will not work if you nest dialogs together and have them become
 * visible at the same time because the ids will get added from child to parent
 * instead of parent -&gt; child. This flow shouldn't really happen though so it
 * isn't planned on being fixed.
 */
export function useNestedDialogFixes(_a) {
    var id = _a.id, visible = _a.visible, disabled = _a.disabled, propDisableEscapeClose = _a.disableEscapeClose;
    var _b = useNestedDialogContext(), add = _b.add, remove = _b.remove, stack = _b.stack;
    useEffect(function () {
        if (disabled || !visible) {
            return;
        }
        add(id);
        return function () {
            remove(id);
        };
    }, [visible, disabled, id, add, remove]);
    return useMemo(function () {
        var disableOverlay = false;
        var disableEscapeClose = propDisableEscapeClose;
        if (!disabled && visible && stack.length > 1) {
            var lastIndex = stack.length - 1;
            var i = stack.findIndex(function (dialogId) { return id === dialogId; });
            disableOverlay = i < lastIndex;
            if (!propDisableEscapeClose) {
                disableEscapeClose = i < lastIndex;
            }
        }
        return {
            disableOverlay: disableOverlay,
            disableEscapeClose: disableEscapeClose,
        };
    }, [id, propDisableEscapeClose, disabled, visible, stack]);
}
//# sourceMappingURL=useNestedDialogFixes.js.map