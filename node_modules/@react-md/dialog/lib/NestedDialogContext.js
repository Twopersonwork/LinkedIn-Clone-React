"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useNestedDialogContext = exports.NestedDialogContextProvider = void 0;
/* eslint-disable react/prop-types */
var react_1 = __importStar(require("react"));
var noop = function () {
    // do nothing
};
var context = react_1.createContext({
    stack: [],
    add: noop,
    remove: noop,
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    context.displayName = "NestedDialogContext";
}
var Provider = context.Provider;
/**
 * This component is used to help with handling nested dialogs by:
 * - preventing all dialogs to be closed when the escape key is pressed
 * - hiding the overlays for dialogs that are not the top-most focus
 *
 * This should be added to the root of your app if you would like to enable this
 * feature.
 */
function NestedDialogContextProvider(_a) {
    var children = _a.children;
    var _b = react_1.useState([]), stack = _b[0], setStack = _b[1];
    var add = react_1.useCallback(function (dialogId) {
        setStack(function (prevStack) {
            /* istanbul ignore next */
            if (process.env.NODE_ENV !== "production" &&
                prevStack.includes(dialogId)) {
                /* eslint-disable no-console */
                console.warn("Tried to add a duplicate dialog id to the `NestedDialogContext`.");
                console.warn("This means that you have two dialogs with the same id: `" + dialogId + "`.");
                console.warn("This should be fixed before moving to production since this will break accessibility and is technically invalid.");
            }
            return prevStack.concat(dialogId);
        });
    }, []);
    var remove = react_1.useCallback(function (dialogId) {
        setStack(function (prevStack) { return prevStack.filter(function (id) { return id !== dialogId; }); });
    }, []);
    var value = react_1.useMemo(function () { return ({ stack: stack, add: add, remove: remove }); }, [add, remove, stack]);
    return react_1.default.createElement(Provider, { value: value }, children);
}
exports.NestedDialogContextProvider = NestedDialogContextProvider;
/**
 * Gets the current nested dialog context. This shouldn't really be used
 * externally and is a private context hook.
 *
 * @internal
 */
function useNestedDialogContext() {
    return react_1.useContext(context);
}
exports.useNestedDialogContext = useNestedDialogContext;
//# sourceMappingURL=NestedDialogContext.js.map