////
/// @group dialog
////

@import '~@react-md/elevation/dist/mixins';
@import '~@react-md/theme/dist/mixins';
@import '~@react-md/overlay/dist/mixins'; // have to import mixins since base styles are required
@import '~@react-md/typography/dist/mixins';
@import '~@react-md/transition/dist/mixins';
@import '~@react-md/utils/dist/mixins';
@import './variables';
@import './functions';

/// Creates the styles for one of the dialog's theme values. This is mostly
/// going to be an internal helper mixin util.
///
/// @param {String} property - The property to set a `rmd-dialog-theme-values`
/// value to.
/// @param {String} theme-style - One of the keys of `rmd-dialog-theme-values`
/// to extract a value from.
/// @param {Color|String|Number} fallback [null] - A fallback value to use if
/// the css variable isn't set somehow. This will default to automatically
/// retrieving the default value from the `rmd-dialog-theme-values` map when
/// `null`.
@mixin rmd-dialog-theme($property, $theme-style: $property, $fallback: null) {
  @include rmd-theme-apply-rmd-var(
    $property,
    $theme-style,
    $rmd-dialog-theme-values,
    dialog
  );
}

/// Updates one of the dialog's theme variables with the new value for the
/// section of your app.
///
/// @param {String} theme-style - The dialog theme style type to update. This
/// should be one of the `$rmd-dialog-theme-values` keys.
/// @param {Color|String|Number} value - The new value to use.
@mixin rmd-dialog-theme-update-var($theme-style, $value) {
  @include rmd-theme-update-rmd-var(
    $value,
    $theme-style,
    $rmd-dialog-theme-values,
    dialog
  );
}

/// Creates the styles for the base dialog element.
/// @access private
@mixin rmd-dialog {
  @include rmd-elevation($rmd-dialog-elevation);
  @include rmd-dialog-theme(background-color);
  @include rmd-theme-update-var(
    background,
    rmd-dialog-theme-var(background-color)
  );
  @include rmd-theme(color, text-primary-on-background);
  @include rmd-utils-hide-focus-outline;
  @if mixin-exists(rmd-app-bar-theme-update-var) {
    @include rmd-app-bar-theme-update-var(
      color,
      rmd-theme-var(text-primary-on-background)
    );
  }

  display: flex;
  flex-direction: column;
  max-height: 100%;
  max-width: 100%;

  &--centered {
    @include rmd-dialog-theme(min-width);

    pointer-events: auto;
  }

  &--full-page {
    // this is applied here since there is no longer a container element for
    // full page dialogs.
    @include rmd-utils-full-screen;
    @include rmd-utils-scroll;
    @include rmd-dialog-theme(z-index);
  }

  &--enter {
    transform: translateY($rmd-dialog-transition-distance);
  }

  &--enter-active {
    @include rmd-transition(deceleration);

    transform: translateY(0);
    transition: transform $rmd-dialog-enter-duration;
  }

  &--exit {
    @include rmd-transition(acceleration);

    opacity: 1;
    transform: translateY(0);
    transition: transform $rmd-dialog-leave-duration,
      opacity $rmd-dialog-leave-duration;
  }

  &--exit-active {
    opacity: 0;
    transform: translateY($rmd-dialog-transition-distance);
  }

  &--fixed {
    @include rmd-dialog-theme(z-index);
  }

  &--fixed-enter {
    transform: scale(0);
  }

  &--fixed-enter-active {
    @include rmd-transition(deceleration);

    transform: scale(1);
    transition: transform $rmd-dialog-enter-duration;
  }

  &--fixed-exit {
    @include rmd-transition(deceleration);

    opacity: 1;
    transform: scale(1);
    transition: transform $rmd-dialog-leave-duration,
      opacity $rmd-dialog-leave-duration;
  }

  &--fixed-exit-active {
    opacity: 0;
    transform: scale(0);
  }
}

/// Creates the styles for the `DialogHeader` component.
/// @access private
@mixin rmd-dialog-header {
  @include rmd-dialog-theme(padding, header-padding);
  @include rmd-dialog-theme(padding-bottom, header-padding-bottom);

  align-items: center;
  display: flex;
  flex: 0 0 auto;
}

/// Creates the minimal required styles for the `DialogTitle` component.
/// @access private
@mixin rmd-dialog-title {
  @include rmd-typography(headline-4);

  margin: 0;
}

/// Creates the styles for the `DialogContent` component. It is set up so that
/// it will grow to fill the remaining space within the `Dialog` and the
/// `DialogHeader` and `DialogFooter` components will be fixed to the top and
/// bottom edges respectively. It will also include scrolling by default.
/// @access private
@mixin rmd-dialog-content {
  @include rmd-utils-scroll;

  flex: 1 1 auto;

  &--padded {
    @include rmd-dialog-theme(padding, content-padding);
  }
}

/// Creates the styles for the `DialogFooter` component. It has styles built-in
/// to position the actions in different locations.
/// @access private
@mixin rmd-dialog-footer {
  @include rmd-dialog-theme(padding, footer-padding);

  flex: 0 0 auto;

  &--flex {
    display: flex;
  }

  &--flex-v {
    flex-direction: column;
  }

  &--start {
    justify-content: flex-start;
  }

  &--between {
    justify-content: space-between;
  }

  &--end {
    justify-content: flex-end;
  }
}

/// When the dialog is not set to be full page, the dialog gets wrapped in this
/// container component so that it can be centered within the page using
/// flexbox.
///
/// In the past versions, I did some old-school centering logic with `left`,
/// `top`, and `transform`, but unfortunately this adds text blur in some
/// browsers and made the transitions harder to customize since you would always
/// need to apply the transforms at each stage of the transition. Using a
/// flexbox approach fixes this.
/// @access private
@mixin rmd-dialog-container {
  @include rmd-utils-full-screen;
  @include rmd-dialog-theme(z-index);

  align-items: center;
  display: flex;
  justify-content: center;
  margin: rmd-dialog-theme-var(vertical-margin)
    rmd-dialog-theme-var(horizontal-margin);
  pointer-events: none;
}

/// Creates the styles for the dialog's overlay. This really requires the base
/// styles and component from the overlay package and adds a few changes to help
/// with nested dialogs.
/// @access private
@mixin rmd-dialog-overlay {
  // update the z-index to be the same as the dialog so that the last defined
  // dialog with overlay with cover all the others.
  @include rmd-dialog-theme(z-index);
}

/// Creates all the styles for the dialog package.
@mixin react-md-dialog {
  @include rmd-theme-create-root-theme($rmd-dialog-theme-values, dialog);

  .rmd-dialog-container {
    @include rmd-dialog-container;
  }

  .rmd-dialog-overlay {
    @include rmd-dialog-overlay;
  }

  .rmd-dialog {
    @include rmd-dialog;

    &__header {
      @include rmd-dialog-header;
    }

    &__content {
      @include rmd-dialog-content;
    }

    &__footer {
      @include rmd-dialog-footer;
    }

    &__title {
      @include rmd-dialog-title;
    }
  }
}
