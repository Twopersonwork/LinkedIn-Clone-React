var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from "react";
import cn from "classnames";
import { TextIconSpacing } from "@react-md/icon";
import { bem } from "@react-md/utils";
import { CardHeaderAddon } from "./CardHeaderAddon";
var block = bem("rmd-card");
/**
 * The header for a `Card`. There should only be up to 1 `CardHeader` within a
 * card and normally contains the `CardTitle` and optionally `CardSubtitle`
 * components. There is also additional functionality built in to render items
 * before or after the main children with some additional spacing.
 */
export var CardHeader = forwardRef(function CardHeader(_a, ref) {
    var _b;
    var _c = _a.align, align = _c === void 0 ? "center" : _c, className = _a.className, contentClassName = _a.contentClassName, children = _a.children, beforeChildren = _a.beforeChildren, afterChildren = _a.afterChildren, props = __rest(_a, ["align", "className", "contentClassName", "children", "beforeChildren", "afterChildren"]);
    return (React.createElement("header", __assign({}, props, { ref: ref, className: cn(block("header", (_b = {},
            _b[align] = align !== "none",
            _b)), className) }),
        React.createElement(TextIconSpacing, { icon: React.createElement(CardHeaderAddon, null, beforeChildren) },
            React.createElement(TextIconSpacing, { icon: React.createElement(CardHeaderAddon, null, afterChildren), iconAfter: true },
                React.createElement("span", { className: cn(block("header-content"), contentClassName) }, children)))));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        CardHeader.propTypes = {
            align: PropTypes.oneOf(["top", "center", "bottom", "none"]),
            className: PropTypes.string,
            beforeChildren: PropTypes.node,
            afterChildren: PropTypes.node,
            contentClassName: PropTypes.string,
            children: PropTypes.node,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=CardHeader.js.map