var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Children, cloneElement, forwardRef, isValidElement, useCallback, useEffect, useRef, useState, } from "react";
import cn from "classnames";
import { bem, useEnsuredRef } from "@react-md/utils";
import { PanelGroup } from "./PanelGroup";
import { useTabs } from "./TabsManager";
var block = bem("rmd-tab-panels");
/**
 * This component allows you to control the visibility of the `TabPanel`
 * components and animating the next and current panels as needed. This works by
 * looping over all the children and getting the current `TabPanel` by the
 * `activeIndex`. This is why the children for this component can only be
 * `TabPanel` and should not be conditional.
 */
export var TabPanels = forwardRef(function TabPanels(_a, forwardedRef) {
    var className = _a.className, children = _a.children, _b = _a.disableScrollFix, disableScrollFix = _b === void 0 ? false : _b, _c = _a.disableTransition, disableTransition = _c === void 0 ? false : _c, _d = _a.persistent, persistent = _d === void 0 ? false : _d, props = __rest(_a, ["className", "children", "disableScrollFix", "disableTransition", "persistent"]);
    var _e = useTabs(), tabsId = _e.tabsId, tabs = _e.tabs, activeIndex = _e.activeIndex;
    var prevIndex = useRef(activeIndex);
    var _f = useState({
        previous: activeIndex,
        incrementing: true,
    }), _g = _f[0], previous = _g.previous, incrementing = _g.incrementing, setState = _f[1];
    // have to set these in refs since changing these might cause mounting
    // and unmounting in the Transition group component :/ they should only
    // be re-evaluated when the activeIndex changes.
    var transitionable = useRef(!persistent && !disableTransition);
    var animimatable = useRef(persistent && !disableTransition);
    if (prevIndex.current !== activeIndex) {
        prevIndex.current = activeIndex;
        transitionable.current = !persistent && !disableTransition;
        animimatable.current = persistent && !disableTransition;
    }
    useEffect(function () {
        setState(function (_a) {
            var previous = _a.previous;
            return ({
                incrementing: previous < activeIndex,
                previous: disableTransition ? activeIndex : previous,
            });
        });
        // this is for only updating the incrementing state and should not be fired
        // again if the disableTransition prop is changed
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [activeIndex]);
    var onEntered = useCallback(function () {
        setState(function (_a) {
            var incrementing = _a.incrementing;
            return ({ incrementing: incrementing, previous: activeIndex });
        });
    }, [activeIndex]);
    var _h = useEnsuredRef(forwardedRef), ref = _h[0], refHandler = _h[1];
    useEffect(function () {
        if (!ref.current || disableScrollFix) {
            return;
        }
        ref.current.scrollTop = 0;
        // don't want it to be triggered if only the disableScrollFix prop has changed
        // since it might be independent from active indexes
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [activeIndex]);
    return (React.createElement("div", __assign({}, props, { ref: refHandler, className: cn(block({
            "slide-left": incrementing && !persistent,
            "slide-left-persistent": incrementing && persistent,
            "slide-right": !incrementing,
        }), className) }),
        React.createElement(PanelGroup, { persistent: persistent, disableTransition: disableTransition }, Children.map(children, function (child, index) {
            if (!persistent && index !== activeIndex) {
                return null;
            }
            if (!isValidElement(child)) {
                return child;
            }
            var panel = Children.only(child);
            var labelledBy = panel.props["aria-labelledby"];
            if (!labelledBy && !panel.props["aria-label"] && tabs[index]) {
                // generally guaranteed to be defined by this point since the TabsManager
                // will add ids if missing.
                labelledBy = tabs[index].id;
            }
            var key = panel.key || undefined;
            if (index === activeIndex && transitionable.current) {
                key = "" + activeIndex;
            }
            var animateIn = panel.props.in;
            if (animimatable.current) {
                // when the persistent flag is in, I have too handle the TransitionGroup
                // `in` behavior manually based on activeIndex
                animateIn = index === activeIndex;
            }
            var hidden = index !== activeIndex;
            if (persistent) {
                hidden = hidden && index !== previous;
            }
            return cloneElement(child, {
                key: key,
                in: animateIn,
                id: tabsId + "-panel-" + (index + 1),
                "aria-labelledby": labelledBy,
                hidden: hidden,
                onEntered: disableTransition ? undefined : onEntered,
            });
        }))));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        TabPanels.propTypes = {
            className: PropTypes.string,
            children: PropTypes.node,
            disableScrollFix: PropTypes.bool,
            disableTransition: PropTypes.bool,
            persistent: PropTypes.bool,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=TabPanels.js.map