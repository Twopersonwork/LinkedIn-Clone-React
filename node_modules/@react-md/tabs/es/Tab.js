var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from "react";
import cn from "classnames";
import { TextIconSpacing } from "@react-md/icon";
import { useInteractionStates, } from "@react-md/states";
import { bem, useResizeObserver } from "@react-md/utils";
import { useUpdateIndicatorStyles } from "./useTabIndicatorStyle";
var block = bem("rmd-tab");
/**
 * The `Tab` is a low-level component that just renders an accessible tab widget
 * along with some general styles and an optional icon.
 */
export var Tab = forwardRef(function Tab(_a, propRef) {
    var propClassName = _a.className, contentStyle = _a.contentStyle, contentClassName = _a.contentClassName, _b = _a.disabled, disabled = _b === void 0 ? false : _b, icon = _a.icon, _c = _a.stacked, stacked = _c === void 0 ? false : _c, _d = _a.iconAfter, iconAfter = _d === void 0 ? false : _d, children = _a.children, active = _a.active, panelId = _a.panelId, disableRipple = _a.disableRipple, disableProgrammaticRipple = _a.disableProgrammaticRipple, rippleTimeout = _a.rippleTimeout, rippleClassNames = _a.rippleClassNames, rippleClassName = _a.rippleClassName, rippleContainerClassName = _a.rippleContainerClassName, enablePressedAndRipple = _a.enablePressedAndRipple, props = __rest(_a, ["className", "contentStyle", "contentClassName", "disabled", "icon", "stacked", "iconAfter", "children", "active", "panelId", "disableRipple", "disableProgrammaticRipple", "rippleTimeout", "rippleClassNames", "rippleClassName", "rippleContainerClassName", "enablePressedAndRipple"]);
    var _e = useInteractionStates({
        handlers: props,
        className: propClassName,
        disabled: disabled,
        disableRipple: disableRipple,
        disableProgrammaticRipple: disableProgrammaticRipple,
        rippleTimeout: rippleTimeout,
        rippleClassNames: rippleClassNames,
        rippleClassName: rippleClassName,
        rippleContainerClassName: rippleContainerClassName,
        enablePressedAndRipple: enablePressedAndRipple,
    }), ripples = _e.ripples, className = _e.className, handlers = _e.handlers;
    // TODO: Look into removing this resize observer. This is only required if
    // someone manually updates the width of the tab (dev utils) or if the width
    // was not changed due to the tabs container element resizing (iffy)
    var updateIndicatorStyles = useUpdateIndicatorStyles();
    var _f = useResizeObserver(updateIndicatorStyles, {
        ref: propRef,
    }), refHandler = _f[1];
    return (React.createElement("button", __assign({}, props, handlers, { ref: active ? refHandler : propRef, "aria-selected": active, "aria-controls": panelId, type: "button", role: "tab", disabled: disabled, className: cn(block({ active: active, stacked: icon && stacked }), className), tabIndex: active ? undefined : -1 }),
        React.createElement(TextIconSpacing, { icon: icon, stacked: stacked, iconAfter: iconAfter },
            React.createElement("span", { style: contentStyle, className: cn(block("content"), contentClassName) }, children)),
        ripples));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        Tab.propTypes = {
            id: PropTypes.string.isRequired,
            panelId: PropTypes.string,
            active: PropTypes.bool.isRequired,
            className: PropTypes.string,
            contentStyle: PropTypes.object,
            contentClassName: PropTypes.string,
            children: PropTypes.node,
            icon: PropTypes.node,
            stacked: PropTypes.bool,
            iconAfter: PropTypes.bool,
            disabled: PropTypes.bool,
            onKeyDown: PropTypes.func,
            disableRipple: PropTypes.bool,
            disableProgrammaticRipple: PropTypes.bool,
            rippleTimeout: PropTypes.oneOfType([
                PropTypes.number,
                PropTypes.shape({
                    appear: PropTypes.number,
                    enter: PropTypes.number,
                    exit: PropTypes.number,
                }),
            ]),
            rippleClassNames: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.shape({
                    appear: PropTypes.string,
                    appearActive: PropTypes.string,
                    enter: PropTypes.string,
                    enterActive: PropTypes.string,
                    enterDone: PropTypes.string,
                    exit: PropTypes.string,
                    exitActive: PropTypes.string,
                    exitDone: PropTypes.string,
                }),
            ]),
            rippleClassName: PropTypes.string,
            rippleContainerClassName: PropTypes.string,
            enablePressedAndRipple: PropTypes.bool,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=Tab.js.map