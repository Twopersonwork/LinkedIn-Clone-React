import React, { HTMLAttributes } from "react";
export interface TabPanelsProps extends HTMLAttributes<HTMLDivElement> {
    /**
     * Boolean if this component should no longer automatically reset the scrolling
     * to the top when the panel changes.
     */
    disableScrollFix?: boolean;
    /**
     * Boolean if the swiping transition should be disabled. If you want to add
     * a custom transition, you'll need to wrap the `TabPanel`'s children in a
     * custom component that does appear and exit animations.
     */
    disableTransition?: boolean;
    /**
     * Boolean if the conditional rendering for the active tab panel only should
     * be disabled. This means that all the children will be visible in the DOM
     * instead of mounting and unmounting when their active state changes. The
     * panels will also be updated to ensure that inactive panels can not be
     * tab focusable.
     */
    persistent?: boolean;
}
/**
 * This component allows you to control the visibility of the `TabPanel`
 * components and animating the next and current panels as needed. This works by
 * looping over all the children and getting the current `TabPanel` by the
 * `activeIndex`. This is why the children for this component can only be
 * `TabPanel` and should not be conditional.
 */
export declare const TabPanels: React.ForwardRefExoticComponent<TabPanelsProps & React.RefAttributes<HTMLDivElement>>;
