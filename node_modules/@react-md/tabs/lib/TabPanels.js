"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TabPanels = void 0;
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var utils_1 = require("@react-md/utils");
var PanelGroup_1 = require("./PanelGroup");
var TabsManager_1 = require("./TabsManager");
var block = utils_1.bem("rmd-tab-panels");
/**
 * This component allows you to control the visibility of the `TabPanel`
 * components and animating the next and current panels as needed. This works by
 * looping over all the children and getting the current `TabPanel` by the
 * `activeIndex`. This is why the children for this component can only be
 * `TabPanel` and should not be conditional.
 */
exports.TabPanels = react_1.forwardRef(function TabPanels(_a, forwardedRef) {
    var className = _a.className, children = _a.children, _b = _a.disableScrollFix, disableScrollFix = _b === void 0 ? false : _b, _c = _a.disableTransition, disableTransition = _c === void 0 ? false : _c, _d = _a.persistent, persistent = _d === void 0 ? false : _d, props = __rest(_a, ["className", "children", "disableScrollFix", "disableTransition", "persistent"]);
    var _e = TabsManager_1.useTabs(), tabsId = _e.tabsId, tabs = _e.tabs, activeIndex = _e.activeIndex;
    var prevIndex = react_1.useRef(activeIndex);
    var _f = react_1.useState({
        previous: activeIndex,
        incrementing: true,
    }), _g = _f[0], previous = _g.previous, incrementing = _g.incrementing, setState = _f[1];
    // have to set these in refs since changing these might cause mounting
    // and unmounting in the Transition group component :/ they should only
    // be re-evaluated when the activeIndex changes.
    var transitionable = react_1.useRef(!persistent && !disableTransition);
    var animimatable = react_1.useRef(persistent && !disableTransition);
    if (prevIndex.current !== activeIndex) {
        prevIndex.current = activeIndex;
        transitionable.current = !persistent && !disableTransition;
        animimatable.current = persistent && !disableTransition;
    }
    react_1.useEffect(function () {
        setState(function (_a) {
            var previous = _a.previous;
            return ({
                incrementing: previous < activeIndex,
                previous: disableTransition ? activeIndex : previous,
            });
        });
        // this is for only updating the incrementing state and should not be fired
        // again if the disableTransition prop is changed
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [activeIndex]);
    var onEntered = react_1.useCallback(function () {
        setState(function (_a) {
            var incrementing = _a.incrementing;
            return ({ incrementing: incrementing, previous: activeIndex });
        });
    }, [activeIndex]);
    var _h = utils_1.useEnsuredRef(forwardedRef), ref = _h[0], refHandler = _h[1];
    react_1.useEffect(function () {
        if (!ref.current || disableScrollFix) {
            return;
        }
        ref.current.scrollTop = 0;
        // don't want it to be triggered if only the disableScrollFix prop has changed
        // since it might be independent from active indexes
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [activeIndex]);
    return (react_1.default.createElement("div", __assign({}, props, { ref: refHandler, className: classnames_1.default(block({
            "slide-left": incrementing && !persistent,
            "slide-left-persistent": incrementing && persistent,
            "slide-right": !incrementing,
        }), className) }),
        react_1.default.createElement(PanelGroup_1.PanelGroup, { persistent: persistent, disableTransition: disableTransition }, react_1.Children.map(children, function (child, index) {
            if (!persistent && index !== activeIndex) {
                return null;
            }
            if (!react_1.isValidElement(child)) {
                return child;
            }
            var panel = react_1.Children.only(child);
            var labelledBy = panel.props["aria-labelledby"];
            if (!labelledBy && !panel.props["aria-label"] && tabs[index]) {
                // generally guaranteed to be defined by this point since the TabsManager
                // will add ids if missing.
                labelledBy = tabs[index].id;
            }
            var key = panel.key || undefined;
            if (index === activeIndex && transitionable.current) {
                key = "" + activeIndex;
            }
            var animateIn = panel.props.in;
            if (animimatable.current) {
                // when the persistent flag is in, I have too handle the TransitionGroup
                // `in` behavior manually based on activeIndex
                animateIn = index === activeIndex;
            }
            var hidden = index !== activeIndex;
            if (persistent) {
                hidden = hidden && index !== previous;
            }
            return react_1.cloneElement(child, {
                key: key,
                in: animateIn,
                id: tabsId + "-panel-" + (index + 1),
                "aria-labelledby": labelledBy,
                hidden: hidden,
                onEntered: disableTransition ? undefined : onEntered,
            });
        }))));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        exports.TabPanels.propTypes = {
            className: PropTypes.string,
            children: PropTypes.node,
            disableScrollFix: PropTypes.bool,
            disableTransition: PropTypes.bool,
            persistent: PropTypes.bool,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=TabPanels.js.map