import React, { HTMLAttributes } from "react";
import { RenderConditionalPortalProps } from "@react-md/portal";
import { OverridableCSSTransitionProps } from "@react-md/transition";
export interface OverlayProps extends OverridableCSSTransitionProps, RenderConditionalPortalProps, HTMLAttributes<HTMLSpanElement> {
    /**
     * Boolean if the overlay is currently visible. When this prop changes, the
     * overlay will enter/exit with an opacity transition.
     */
    visible: boolean;
    /**
     * A function that should change the `visible` prop to `false`. This is used
     * so that clicking the overlay can hide the overlay.
     */
    onRequestClose: () => void;
    /**
     * Boolean if the overlay should still be "hidden" from the user while
     * visible. This will just make it so the opacity stays at 0. This is really
     * just helpful if you'd like to create a simple close on outside click
     * feature since you can hook into the `onRequestClose` prop since the overlay
     * will be clicked.
     */
    hidden?: boolean;
    /**
     * Boolean if the overlay should gain the pointer cursor while it's visible.
     * You normally want this enabled by default except when used as a modal's
     * overlay.
     */
    clickable?: boolean;
}
/**
 * The `Overlay` component is a simple component used to render a full page
 * overlay in the page with an enter and exit animation. If there are overflow
 * issues or you need to portal the overlay to a different area within your app,
 * you should use the `OverlayPortal` component instead.
 */
export declare const Overlay: React.ForwardRefExoticComponent<OverlayProps & React.RefAttributes<HTMLDivElement>>;
