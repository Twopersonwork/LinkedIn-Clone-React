"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Overlay = void 0;
/* eslint-disable jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events */
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var CSSTransition_1 = __importDefault(require("react-transition-group/CSSTransition"));
var portal_1 = require("@react-md/portal");
var utils_1 = require("@react-md/utils");
var constants_1 = require("./constants");
var block = utils_1.bem("rmd-overlay");
/**
 * The `Overlay` component is a simple component used to render a full page
 * overlay in the page with an enter and exit animation. If there are overflow
 * issues or you need to portal the overlay to a different area within your app,
 * you should use the `OverlayPortal` component instead.
 */
exports.Overlay = react_1.forwardRef(function Overlay(_a, ref) {
    var className = _a.className, visible = _a.visible, _b = _a.hidden, hidden = _b === void 0 ? false : _b, _c = _a.clickable, clickable = _c === void 0 ? true : _c, _d = _a.timeout, timeout = _d === void 0 ? constants_1.DEFAULT_OVERLAY_TIMEOUT : _d, _e = _a.classNames, classNames = _e === void 0 ? constants_1.DEFAULT_OVERLAY_CLASSNAMES : _e, children = _a.children, _f = _a.mountOnEnter, mountOnEnter = _f === void 0 ? true : _f, _g = _a.unmountOnExit, unmountOnExit = _g === void 0 ? true : _g, onRequestClose = _a.onRequestClose, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, portal = _a.portal, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, _h = _a.tabIndex, tabIndex = _h === void 0 ? -1 : _h, props = __rest(_a, ["className", "visible", "hidden", "clickable", "timeout", "classNames", "children", "mountOnEnter", "unmountOnExit", "onRequestClose", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "portal", "portalInto", "portalIntoId", "tabIndex"]);
    return (react_1.default.createElement(portal_1.ConditionalPortal, { portal: portal, portalInto: portalInto, portalIntoId: portalIntoId },
        react_1.default.createElement(CSSTransition_1.default, { appear: true, in: visible, classNames: hidden ? "" : classNames, timeout: hidden ? 0 : timeout, mountOnEnter: mountOnEnter, unmountOnExit: unmountOnExit, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited }, function (state) { return (react_1.default.createElement("span", __assign({}, props, { ref: ref, className: classnames_1.default(block({
                // have to manually set the active state here since react-transition-group doesn't
                // clone in the transition `classNames` and if the overlay re-renders while the
                // animation has finished, the active className will disappear
                active: !hidden && state === "entered",
                visible: visible,
                clickable: clickable,
            }), className), onClick: onRequestClose, tabIndex: tabIndex }), children)); })));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        exports.Overlay.propTypes = {
            className: PropTypes.string,
            classNames: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.shape({
                    appear: PropTypes.string,
                    appearActive: PropTypes.string,
                    enter: PropTypes.string,
                    enterActive: PropTypes.string,
                    enterDone: PropTypes.string,
                    exit: PropTypes.string,
                    exitActive: PropTypes.string,
                    exitDone: PropTypes.string,
                }),
            ]),
            timeout: PropTypes.oneOfType([
                PropTypes.number,
                PropTypes.shape({
                    enter: PropTypes.number,
                    exit: PropTypes.number,
                }),
            ]),
            mountOnEnter: PropTypes.bool,
            unmountOnExit: PropTypes.bool,
            onEnter: PropTypes.func,
            onEntering: PropTypes.func,
            onEntered: PropTypes.func,
            onExit: PropTypes.func,
            onExiting: PropTypes.func,
            onExited: PropTypes.func,
            portal: PropTypes.bool,
            portalInto: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.func,
                PropTypes.object,
            ]),
            portalIntoId: PropTypes.string,
            children: PropTypes.node,
            tabIndex: PropTypes.number,
            visible: PropTypes.bool.isRequired,
            onRequestClose: PropTypes.func.isRequired,
            hidden: PropTypes.bool,
            clickable: PropTypes.bool,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=Overlay.js.map