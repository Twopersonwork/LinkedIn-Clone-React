////
/// @group media
////

@import '~@react-md/theme/dist/mixins';
@import '~@react-md/utils/dist/functions';
@import './variables';

/// Used to enforce a specific aspect ratio for a media item by using the
/// `padding-bottom` trick/hack. This should normally be used with the
/// `rmd-media-aspect-ratio-container` mixin.
///
/// Note: You can just use the `rmd-media-aspect-ratio` mixin if you only need
/// to support a single aspect ratio.
///
/// @example scss - Simple Example
///   .container {
///     @include rmd-media-aspect-ratio-container;
///
///     &--16-9 {
///       @include rmd-media-aspect-ratio(16, 9);
///     }
///   }
///
/// @param {Number} width - The width to enforce for the responsive media
/// @param {Number} height - The height to enforce for the responsive media
@mixin rmd-media-aspect-ratio($width, $height) {
  padding-bottom: percentage($height / $width);
}

/// Creates the styles for a media container that should enforce a specific
/// aspect ratio. If the `$width` and `$height` parameters are provide, the
/// container will be updated to also enforce that specific aspect ratio.
///
/// @example scss - Example Usage with `rmd-media-aspect-ratio`
///   .container {
///     @include rmd-media-aspect-ratio-container;
///
///     &--16-9 {
///       @include rmd-media-aspect-ratio(16, 9);
///     }
///   }
///
/// @example scss - Example Usage for single aspect ratio
///   .container {
///     @include rmd-media-aspect-ratio-container(16, 9);
///   }
///
/// @param {Number} width - The width to enforce for the responsive media
/// @param {Number} height - The height to enforce for the responsive media
@mixin rmd-media-aspect-ratio-container($width: null, $height: null) {
  display: block;
  height: 0;
  overflow: hidden;
  padding: 0;

  @if $width and $height {
    @include rmd-media-aspect-ratio($width, $height);
  }
}

/// Creates the styles for a responsive media item that should have a specific
/// aspect ratio. This should be applied to the child of the aspect ratio
/// container.
///
/// @example scss - Example Usage
///   .container {
///     @include rmd-media-aspect-ratio-container;
///     @include rmd-media-aspect-ratio(16, 9);
///
///     &__media {
///       @include rmd-media-forced-aspect-ratio-item;
///     }
///   }
@mixin rmd-media-forced-aspect-ratio-item {
  bottom: 0;
  height: 100%;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  width: 100%;
}

/// Creates the styles for a responsive media item that will update its height
/// and width based on the parent element.
///
/// @example scss - Example Usage
///   .container {
///     height: 20rem;
///     width: 30rem;
///
///     &__media {
///       @include rmd-media-responsive-item;
///     }
///   }
@mixin rmd-media-responsive-item {
  height: auto;
  width: 100%;
}

/// Creates the base positioning styles for the media overlay element.
///
/// @param {String} position - One of the `rmd-media-overlay-positions` values
@mixin rmd-media-overlay-position($position) {
  $position: rmd-utils-validate(
    $rmd-media-overlay-positions,
    $position,
    'rmd-media-overlay-positions'
  );

  @if $position == left or $position == right or $position == center {
    bottom: 0;
    top: 0;
    width: $rmd-media-overlay-horizontal-width;

    @if $position == left {
      left: 0;
    } @else if $position == right {
      right: 0;
    } @else if $position == center {
      left: 50%;
      transform: translateX(-50%);
    }
  } @else if $position == top or $position == bottom or $position == middle {
    left: 0;
    right: 0;

    @if $position == top {
      top: 0;
    } @else if $position == bottom {
      bottom: 0;
    } @else if $position == middle {
      top: 50%;
      transform: translateY(-50%);
    }
  } @else if $position == absolute-center {
    left: 50%;
    top: 50%;
    transform: translateX(-50%) translateY(-50%);
  }
}

/// Creates the media overlay styles. All this really does is update the theme
/// background and text colors based on the provided background color for the
/// overlay element.
///
/// @param {Color} background-color [$rmd-media-overlay-background-color] - The
/// background color for the media overlay.
/// @param {Color} color [null] - An optional color to use for the overlay. If
/// this is `null`, it will determine the contrast tone of the background color
/// and use either the light or dark theme variables instead.
@mixin rmd-media-overlay(
  $background-color: $rmd-media-overlay-background-color,
  $color: null
) {
  @if $color == null {
    $light: rmd-theme-tone($background-color) == 'light';
    $color: rmd-theme-var(
      if($light, text-primary-on-light, text-primary-on-dark)
    );
    $secondary-color: rmd-theme-var(
      if($light, text-secondary-on-light, text-secondary-on-dark)
    );

    @include rmd-theme-update-var(
      text-secondary-on-background,
      $secondary-color
    );
  }

  @include rmd-theme-update-var(background, $background-color);
  @include rmd-theme-update-var(text-primary-on-background, $color);
  @include rmd-theme(background-color, background);
  @include rmd-theme(color, text-primary-on-background);

  padding: $rmd-media-overlay-padding;
  position: absolute;
  z-index: 1;

  @if $rmd-media-overlay-positions != null {
    @each $position in $rmd-media-overlay-positions {
      &--#{$position} {
        @include rmd-media-overlay-position($position);
      }
    }
  }
}

/// Creates the styles for a responsive media container. This probably won't be
/// used by users of this library.
@mixin rmd-media-container {
  display: inline-block;
  position: relative;

  @each $selector in $rmd-media-selectors {
    &--auto #{$selector} {
      @include rmd-media-responsive-item;
    }

    &--aspect-ratio #{$selector} {
      @include rmd-media-forced-aspect-ratio-item;
    }
  }

  &--aspect-ratio {
    @include rmd-media-aspect-ratio-container;
  }

  @each $key, $value in $rmd-media-default-aspect-ratios {
    &--#{$key} {
      @include rmd-media-aspect-ratio(nth($value, 1), nth($value, 2));
    }
  }

  &--full-width {
    display: block;
    width: 100%;
  }
}

/// Creates all the styles for the media package.
@mixin react-md-media {
  .rmd-media-container {
    @include rmd-media-container;
  }

  .rmd-media {
    @include rmd-media-responsive-item;
  }

  .rmd-media-overlay {
    @include rmd-media-overlay;
  }
}
