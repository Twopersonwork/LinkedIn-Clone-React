"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Portal = void 0;
var react_1 = require("react");
var react_dom_1 = require("react-dom");
var getContainer_1 = require("./getContainer");
/**
 * This component is a simple wrapper for the `createPortal` API from ReactDOM
 * that will just ensure that `null` is always returned for server side
 * rendering as well as a "nice" way to choose specific portal targets or just
 * falling back to the `document.body`.
 */
function Portal(_a) {
    var into = _a.into, intoId = _a.intoId, children = _a.children;
    var _b = react_1.useState(null), container = _b[0], setContainer = _b[1];
    // setting the container via useEffect instead of immediately in the render
    // just so that it doesn't throw an error immediately if the dom hasn't fully
    // painted after a SSR
    react_1.useEffect(function () {
        var nextContainer = getContainer_1.getContainer(into, intoId);
        if (container !== nextContainer) {
            setContainer(nextContainer);
        }
    }, [into, intoId, container]);
    if (!container) {
        return null;
    }
    return react_dom_1.createPortal(children, container);
}
exports.Portal = Portal;
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        Portal.propTypes = {
            into: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.func,
                PropTypes.object,
            ]),
            intoId: PropTypes.string,
            children: PropTypes.node,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=Portal.js.map