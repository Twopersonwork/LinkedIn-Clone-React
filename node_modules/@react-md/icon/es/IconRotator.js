var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Children, cloneElement, forwardRef, isValidElement, } from "react";
import cn from "classnames";
import { bem } from "@react-md/utils";
var block = bem("rmd-icon-rotator");
/**
 * The `IconRotator` is a simple component that is used to rotate an icon from a
 * one degrees to another.
 */
export var IconRotator = forwardRef(function IconRotator(_a, ref) {
    var style = _a.style, propClassName = _a.className, _b = _a.animate, animate = _b === void 0 ? true : _b, rotated = _a.rotated, children = _a.children, _c = _a.forceIconWrap, forceIconWrap = _c === void 0 ? false : _c, props = __rest(_a, ["style", "className", "animate", "rotated", "children", "forceIconWrap"]);
    var className = cn(block({ animate: animate, rotated: rotated }), propClassName);
    if (!forceIconWrap && isValidElement(children)) {
        var child = Children.only(children);
        return cloneElement(child, {
            className: cn(className, child.props.className),
        });
    }
    return (React.createElement("span", __assign({}, props, { style: style, className: className, ref: ref }), children));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        IconRotator.propTypes = {
            style: PropTypes.object,
            className: PropTypes.string,
            animate: PropTypes.bool,
            rotated: PropTypes.bool,
            forceIconWrap: PropTypes.bool,
            children: PropTypes.node,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=IconRotator.js.map