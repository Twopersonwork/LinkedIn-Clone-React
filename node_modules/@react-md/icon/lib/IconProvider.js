"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IconProvider = exports.useIcon = void 0;
var react_1 = __importStar(require("react"));
var FontIcon_1 = require("./FontIcon");
var DEFAULT_ICONS = {
    back: react_1.default.createElement(FontIcon_1.FontIcon, null, "keyboard_arrow_left"),
    checkbox: react_1.default.createElement(FontIcon_1.FontIcon, null, "check_box"),
    download: react_1.default.createElement(FontIcon_1.FontIcon, null, "file_download"),
    dropdown: react_1.default.createElement(FontIcon_1.FontIcon, null, "arrow_drop_down"),
    error: react_1.default.createElement(FontIcon_1.FontIcon, null, "error_outline"),
    expander: react_1.default.createElement(FontIcon_1.FontIcon, null, "keyboard_arrow_down"),
    forward: react_1.default.createElement(FontIcon_1.FontIcon, null, "keyboard_arrow_right"),
    menu: react_1.default.createElement(FontIcon_1.FontIcon, null, "menu"),
    notification: react_1.default.createElement(FontIcon_1.FontIcon, null, "notifications"),
    password: react_1.default.createElement(FontIcon_1.FontIcon, null, "remove_red_eye"),
    radio: react_1.default.createElement(FontIcon_1.FontIcon, null, "radio_button_checked"),
    selected: react_1.default.createElement(FontIcon_1.FontIcon, null, "check"),
    sort: react_1.default.createElement(FontIcon_1.FontIcon, null, "arrow_upward"),
};
var context = react_1.createContext(DEFAULT_ICONS);
var Provider = context.Provider;
/**
 * Gets one of the configured icons from the `IconProvider`. This is probably
 * just for use within `react-md`, but might be helpful outside if you want to
 * reuse the existing icon configuration for other custom components.
 *
 * If te second argument is provided and it is not `undefined`, that value will
 * be used instead of the inherited icon type.
 *
 * @param name - The name of the icon you want to use.
 * @param override - An optional override to use instead of the inherited icon.
 * @returns The overridden icon value or the inherited icon.
 */
function useIcon(name, override) {
    var icons = react_1.useContext(context);
    if (typeof override !== "undefined") {
        return override;
    }
    return icons[name];
}
exports.useIcon = useIcon;
/**
 * The `IconProvider` component is used to override all the default icons within
 * `react-md` with a newly defined set of icons. This is super nice since you
 * won't need to create new component wrappers for all the components within
 * `react-md` if you want to switch to SVG icons instead of the default font
 * icons.
 */
function IconProvider(_a) {
    var children = _a.children, _b = _a.back, back = _b === void 0 ? DEFAULT_ICONS.back : _b, _c = _a.checkbox, checkbox = _c === void 0 ? DEFAULT_ICONS.checkbox : _c, _d = _a.download, download = _d === void 0 ? DEFAULT_ICONS.download : _d, _e = _a.dropdown, dropdown = _e === void 0 ? DEFAULT_ICONS.dropdown : _e, _f = _a.expander, expander = _f === void 0 ? DEFAULT_ICONS.expander : _f, _g = _a.error, error = _g === void 0 ? DEFAULT_ICONS.error : _g, _h = _a.forward, forward = _h === void 0 ? DEFAULT_ICONS.forward : _h, _j = _a.menu, menu = _j === void 0 ? DEFAULT_ICONS.menu : _j, _k = _a.notification, notification = _k === void 0 ? DEFAULT_ICONS.notification : _k, _l = _a.password, password = _l === void 0 ? DEFAULT_ICONS.password : _l, _m = _a.radio, radio = _m === void 0 ? DEFAULT_ICONS.radio : _m, _o = _a.selected, selected = _o === void 0 ? DEFAULT_ICONS.selected : _o, _p = _a.sort, sort = _p === void 0 ? DEFAULT_ICONS.sort : _p;
    var value = react_1.useMemo(function () { return ({
        back: back,
        checkbox: checkbox,
        download: download,
        dropdown: dropdown,
        error: error,
        expander: expander,
        forward: forward,
        menu: menu,
        notification: notification,
        password: password,
        radio: radio,
        selected: selected,
        sort: sort,
    }); }, [
        back,
        checkbox,
        download,
        dropdown,
        error,
        expander,
        forward,
        menu,
        notification,
        password,
        radio,
        selected,
        sort,
    ]);
    return react_1.default.createElement(Provider, { value: value }, children);
}
exports.IconProvider = IconProvider;
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        IconProvider.propTypes = {
            children: PropTypes.node,
            back: PropTypes.node,
            checkbox: PropTypes.node,
            download: PropTypes.node,
            dropdown: PropTypes.node,
            error: PropTypes.node,
            expander: PropTypes.node,
            forward: PropTypes.node,
            menu: PropTypes.node,
            notification: PropTypes.node,
            password: PropTypes.node,
            radio: PropTypes.node,
            selected: PropTypes.node,
            sort: PropTypes.node,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=IconProvider.js.map