import { ReactNode, ReactElement } from "react";
import { LayoutConfiguration, SupportedWideLayout } from "./types";
export interface LayoutContext {
    /**
     * The root `id` that was passed to the `Layout` component so that `id`s can
     * be generated for child components.
     */
    baseId: string;
    /**
     * The current layout that is being used based on the app's size.
     */
    layout: SupportedWideLayout;
    /**
     * Boolean if the navigation panel is currently visible. This will always be
     * `true` for persist layout types on desktop.
     */
    visible: boolean;
    /**
     * A function that will set the `visible` state to `true`.
     */
    showNav(): void;
    /**
     * A function that will set the `visible` state to `false`.
     */
    hideNav(): void;
    /**
     * Boolean if the layout is currently using a fixed app bar which can be
     * useful for determining specific scroll or layout behavior.
     *
     * @remarks \@since 2.8.3
     */
    fixedAppBar: boolean;
}
/**
 * Gets the current layout state and configuration.
 */
export declare function useLayoutConfig(): LayoutContext;
export interface LayoutProviderProps extends LayoutConfiguration {
    /**
     * The base id for the layout component. This is required since all the child
     * components use this to generate their ids.
     */
    baseId: string;
    /**
     * The children to render that can inherit the current layout.
     */
    children: ReactNode;
    /** {@inheritDoc LayoutContext.fixedAppBar} */
    fixedAppBar?: boolean;
}
/**
 * Determines the current layout based on the `LayoutConfiguration` and hooks
 * into the `AppSizeListener` to update on resize. This also initializes the
 * `LayLayoutContext` so that a custom layout implementation can be used along
 * with the `useLayoutConfig()` hook and the multiple `Layout` components.
 */
export declare function LayoutProvider({ baseId, phoneLayout, tabletLayout, landscapeTabletLayout, desktopLayout, largeDesktopLayout, defaultToggleableVisible, fixedAppBar, children, }: LayoutProviderProps): ReactElement;
export declare namespace LayoutProvider {
    var propTypes: {
        baseId: any;
        children: any;
        phoneLayout: any;
        tabletLayout: any;
        landscapeTabletLayout: any;
        desktopLayout: any;
        largeDesktopLayout: any;
    };
}
