import React, { ReactNode } from "react";
import { CSSTransitionClassNames } from "react-transition-group/CSSTransition";
import { AppBarNavProps } from "@react-md/app-bar";
import { TransitionTimeout } from "@react-md/transition";
import { PropsWithRef } from "@react-md/utils";
export interface LayoutNavToggleProps extends AppBarNavProps {
    /**
     * An optional `aria-label` to provide to the nav toggle button that can be
     * used instead of the `aria-labelledby` prop to describe the button for
     * screen readers. When this and the `aria-labelledby` props are undefined, it
     * will default to:
     *
     * - `"Show Navigation"` for temporary layouts so that it will be read as
     *   `"Show Navigation Button"` by screen readers
     * - `"Navigation"` for toggleable layouts so that it will be read as
     *   `"Navigation Toggle Button"` by screen readers
     */
    "aria-label"?: string;
    /**
     * Boolean if the button should offset the rest of the components in the
     * `AppBar` by the current size of the navigation panel. When this is
     * `undefined`, it will be `true` when a toggleable layout is visible.
     */
    offset?: boolean;
    /**
     * Boolean if this component should be rendered. When this is `undefined`, it
     * will not be rendered for temporary layouts as well as when the toggleable
     * navigation panel is not visible.
     */
    rendered?: boolean;
    /**
     * The transition timeout to use for the toggleable `LayoutNavigation` either
     * comes into view or expands from mini to full-width. The transition can be
     * disabled by setting this value to `0`.
     */
    timeout?: TransitionTimeout;
    /**
     * The transition classnames to use for the toggleable `LayoutNavigation`
     * either comes into view or expands from mini to full-width.
     */
    classNames?: CSSTransitionClassNames;
}
export interface LayoutWithNavToggle {
    /**
     * An optional custom nav toggle to use within the `Layout` or `LayoutAppBar`
     * instead of the default implementation.
     */
    navToggle?: ReactNode;
    /**
     * Any optional props to provide to the default `LayoutNavToggle`
     * implementation.
     */
    navToggleProps?: PropsWithRef<LayoutNavToggleProps, HTMLButtonElement>;
}
/**
 * This is the default implementation for the navigation toggle button within
 * the `Layout` component and should normally be the first child for the
 * `LayoutAppBar`. In addition, this component will automatically update itself
 * to provide an accessible `aria-label` for screen readers and change to a
 * toggle button for toggleable layouts.
 */
export declare const LayoutNavToggle: React.ForwardRefExoticComponent<LayoutNavToggleProps & React.RefAttributes<HTMLButtonElement>>;
