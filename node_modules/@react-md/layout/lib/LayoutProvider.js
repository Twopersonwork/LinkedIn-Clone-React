"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayoutProvider = exports.useLayoutConfig = void 0;
var react_1 = __importStar(require("react"));
var utils_1 = require("@react-md/utils");
var constants_1 = require("./constants");
var utils_2 = require("./utils");
/**
 * @internal
 */
var notInitialized = function (name) { return function () {
    /* istanbul ignore next */
    if (process.env.NODE_ENV !== "production") {
        /* eslint-disable no-console */
        console.warn("Uh oh, something went wrong. Somehow the `LayoutNavigationConfiguration` context has not been initialized. " +
            ("This caused the \"" + name + "\" callback to do nothing."));
    }
}; };
var context = react_1.createContext({
    baseId: "layout",
    layout: "temporary",
    visible: false,
    showNav: notInitialized("showNav"),
    hideNav: notInitialized("hideNav"),
    fixedAppBar: true,
});
/**
 * Gets the current layout state and configuration.
 */
function useLayoutConfig() {
    return react_1.useContext(context);
}
exports.useLayoutConfig = useLayoutConfig;
var Provider = context.Provider;
/**
 * @remarks \@since 2.6.0
 * @internal
 */
function isToggleableVisible(behavior, layout) {
    return typeof behavior === "string"
        ? behavior === layout
        : behavior && utils_2.isToggleableLayout(layout);
}
/**
 * Determines the current layout based on the `LayoutConfiguration` and hooks
 * into the `AppSizeListener` to update on resize. This also initializes the
 * `LayLayoutContext` so that a custom layout implementation can be used along
 * with the `useLayoutConfig()` hook and the multiple `Layout` components.
 */
function LayoutProvider(_a) {
    var baseId = _a.baseId, _b = _a.phoneLayout, phoneLayout = _b === void 0 ? constants_1.DEFAULT_PHONE_LAYOUT : _b, _c = _a.tabletLayout, tabletLayout = _c === void 0 ? constants_1.DEFAULT_TABLET_LAYOUT : _c, _d = _a.landscapeTabletLayout, landscapeTabletLayout = _d === void 0 ? constants_1.DEFAULT_LANDSCAPE_TABLET_LAYOUT : _d, _e = _a.desktopLayout, desktopLayout = _e === void 0 ? constants_1.DEFAULT_DESKTOP_LAYOUT : _e, largeDesktopLayout = _a.largeDesktopLayout, _f = _a.defaultToggleableVisible, defaultToggleableVisible = _f === void 0 ? false : _f, _g = _a.fixedAppBar, fixedAppBar = _g === void 0 ? true : _g, children = _a.children;
    var appSize = utils_1.useAppSize();
    var layout = utils_2.getLayoutType({
        appSize: appSize,
        phoneLayout: phoneLayout,
        tabletLayout: tabletLayout,
        landscapeTabletLayout: landscapeTabletLayout,
        desktopLayout: desktopLayout,
        largeDesktopLayout: largeDesktopLayout,
    });
    var isPersistent = utils_2.isPersistentLayout(layout);
    var isDesktop = appSize.isDesktop;
    var _h = react_1.useState((isPersistent && isDesktop) ||
        isToggleableVisible(defaultToggleableVisible, layout)), visible = _h[0], setVisible = _h[1];
    var prevLayout = react_1.useRef(layout);
    if (prevLayout.current !== layout) {
        prevLayout.current = layout;
        var nextVisible = isPersistent || isToggleableVisible(defaultToggleableVisible, layout);
        if (visible !== nextVisible) {
            setVisible(nextVisible);
        }
    }
    var showNav = react_1.useCallback(function () {
        setVisible(true);
    }, []);
    var hideNav = react_1.useCallback(function () {
        if (!utils_2.isPersistentLayout(layout)) {
            setVisible(false);
        }
    }, [layout]);
    var value = react_1.useMemo(function () { return ({
        baseId: baseId,
        layout: layout,
        visible: visible,
        showNav: showNav,
        hideNav: hideNav,
        fixedAppBar: fixedAppBar,
    }); }, [baseId, layout, visible, showNav, hideNav, fixedAppBar]);
    return react_1.default.createElement(Provider, { value: value }, children);
}
exports.LayoutProvider = LayoutProvider;
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        context.displayName = "Layout";
        var PropTypes = require("prop-types");
        var phoneLayouts = ["temporary", "temporary-mini"];
        var tabletLayouts = __spreadArray(__spreadArray([], phoneLayouts), ["toggleable", "toggleable-mini"]);
        var wideLayouts = __spreadArray(__spreadArray([], tabletLayouts), [
            "clipped",
            "floating",
            "full-height",
        ]);
        LayoutProvider.propTypes = {
            baseId: PropTypes.string.isRequired,
            children: PropTypes.node.isRequired,
            phoneLayout: PropTypes.oneOf(phoneLayouts),
            tabletLayout: PropTypes.oneOf(tabletLayouts),
            landscapeTabletLayout: PropTypes.oneOf(wideLayouts),
            desktopLayout: PropTypes.oneOf(wideLayouts),
            largeDesktopLayout: PropTypes.oneOf(wideLayouts),
        };
    }
    catch (error) { }
}
//# sourceMappingURL=LayoutProvider.js.map