"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayoutCloseNavigationButton = void 0;
var react_1 = __importStar(require("react"));
var app_bar_1 = require("@react-md/app-bar");
var icon_1 = require("@react-md/icon");
var LayoutProvider_1 = require("./LayoutProvider");
var utils_1 = require("./utils");
/**
 * The `LayoutCloseNavigationButton` is used to close the navigation panel for
 * toggleable layouts.
 */
exports.LayoutCloseNavigationButton = react_1.forwardRef(function LayoutCloseNavigationButton(_a, ref) {
    var propId = _a.id, ariaLabelledBy = _a["aria-labelledby"], _b = _a["aria-label"], ariaLabel = _b === void 0 ? ariaLabelledBy ? undefined : "Hide Navigation" : _b, onClick = _a.onClick, _c = _a.first, first = _c === void 0 ? true : _c, _d = _a.last, last = _d === void 0 ? true : _d, _e = _a.buttonType, buttonType = _e === void 0 ? "icon" : _e, propChildren = _a.children, rendered = _a.rendered, props = __rest(_a, ["id", "aria-labelledby", "aria-label", "onClick", "first", "last", "buttonType", "children", "rendered"]);
    var children = icon_1.useIcon("back", propChildren);
    var _f = LayoutProvider_1.useLayoutConfig(), baseId = _f.baseId, layout = _f.layout, hideNav = _f.hideNav;
    var handleClick = react_1.useCallback(function (event) {
        if (onClick) {
            onClick(event);
        }
        hideNav();
    }, [onClick, hideNav]);
    var id = propId !== null && propId !== void 0 ? propId : baseId + "-nav-x";
    var isRendered = rendered !== null && rendered !== void 0 ? rendered : utils_1.isToggleableLayout(layout);
    if (!isRendered) {
        return null;
    }
    return (react_1.default.createElement(app_bar_1.AppBarAction, __assign({}, props, { id: id, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, ref: ref, first: first, last: last, buttonType: buttonType, onClick: handleClick }), children));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        exports.LayoutCloseNavigationButton.propTypes = {
            id: PropTypes.string,
            "aria-label": PropTypes.string,
            "aria-labelledby": PropTypes.string,
            first: PropTypes.bool,
            last: PropTypes.bool,
            onClick: PropTypes.func,
            children: PropTypes.node,
            buttonType: PropTypes.oneOf(["icon", "text"]),
            rendered: PropTypes.bool,
        };
    }
    catch (error) { }
}
//# sourceMappingURL=LayoutCloseNavigationButton.js.map