"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayoutNavToggle = void 0;
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var app_bar_1 = require("@react-md/app-bar");
var icon_1 = require("@react-md/icon");
var sheet_1 = require("@react-md/sheet");
var transition_1 = require("@react-md/transition");
var constants_1 = require("./constants");
var LayoutProvider_1 = require("./LayoutProvider");
var utils_1 = require("./utils");
/**
 * This is the default implementation for the navigation toggle button within
 * the `Layout` component and should normally be the first child for the
 * `LayoutAppBar`. In addition, this component will automatically update itself
 * to provide an accessible `aria-label` for screen readers and change to a
 * toggle button for toggleable layouts.
 */
exports.LayoutNavToggle = react_1.forwardRef(function LayoutNavToggle(_a, forwardedRef) {
    var propAriaLabel = _a["aria-label"], propAriaPressed = _a["aria-pressed"], propChildren = _a.children, propClassName = _a.className, _b = _a.buttonType, buttonType = _b === void 0 ? "icon" : _b, onClick = _a.onClick, propOffset = _a.offset, rendered = _a.rendered, propTabIndex = _a.tabIndex, _c = _a.timeout, timeout = _c === void 0 ? sheet_1.DEFAULT_SHEET_TIMEOUT : _c, _d = _a.classNames, classNames = _d === void 0 ? constants_1.DEFFAULT_LAYOUT_NAV_TOGGLE_CLASSNAMES : _d, props = __rest(_a, ["aria-label", "aria-pressed", "children", "className", "buttonType", "onClick", "offset", "rendered", "tabIndex", "timeout", "classNames"]);
    var icon = icon_1.useIcon("menu");
    var _e = LayoutProvider_1.useLayoutConfig(), baseId = _e.baseId, layout = _e.layout, showNav = _e.showNav, hideNav = _e.hideNav, visible = _e.visible;
    var isToggleable = utils_1.isToggleableLayout(layout);
    var isTemporary = utils_1.isTemporaryLayout(layout);
    var isRendered = rendered;
    if (typeof isRendered === "undefined") {
        isRendered = isTemporary || isToggleable;
    }
    var offset = propOffset;
    if (typeof offset === "undefined") {
        offset = isToggleable && visible;
    }
    var _f = transition_1.useCSSTransition({
        ref: forwardedRef,
        transitionIn: offset,
        temporary: false,
        className: propClassName,
        timeout: timeout,
        classNames: classNames,
    }), _g = _f[1], ref = _g.ref, className = _g.className;
    if (!isRendered) {
        return null;
    }
    var children = propChildren;
    if (buttonType === "icon" && typeof children === "undefined") {
        children = icon;
    }
    var tabIndex = propTabIndex;
    if (typeof tabIndex === "undefined" && visible && isToggleable) {
        // set to -1 so it isn't tab focusable but is still programmatically
        // focusable for temporary navigation drawers to re-focus once closed
        tabIndex = -1;
    }
    var ariaPressed = propAriaPressed;
    if (typeof ariaPressed === "undefined" && isToggleable) {
        ariaPressed = visible;
    }
    var ariaLabel = propAriaLabel;
    if (typeof ariaLabel === "undefined" &&
        typeof props["aria-labelledby"] === "undefined") {
        ariaLabel = isToggleable ? "Navigation" : "Show Navigation";
    }
    return (react_1.default.createElement(app_bar_1.AppBarNav, __assign({ id: baseId + "-nav-toggle" }, props, { "aria-label": ariaLabel, "aria-pressed": ariaPressed, ref: ref, onClick: function (event) {
            if (onClick) {
                onClick(event);
            }
            if (!visible) {
                showNav();
            }
            else {
                hideNav();
            }
        }, buttonType: buttonType, tabIndex: tabIndex, className: classnames_1.default("rmd-layout-nav-toggle", className) }), children));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        exports.LayoutNavToggle.propTypes = {
            "aria-label": PropTypes.string,
            "aria-labelledby": PropTypes.string,
            "aria-pressed": PropTypes.bool,
            className: PropTypes.string,
            children: PropTypes.node,
            onClick: PropTypes.func,
            rendered: PropTypes.bool,
            tabIndex: PropTypes.number,
            buttonType: PropTypes.oneOf(["text", "icon"]),
            offset: PropTypes.bool,
            timeout: PropTypes.oneOfType([
                PropTypes.number,
                PropTypes.shape({
                    appear: PropTypes.number,
                    enter: PropTypes.number,
                    exit: PropTypes.number,
                }),
            ]),
            classNames: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.shape({
                    appear: PropTypes.string,
                    appearActive: PropTypes.string,
                    enter: PropTypes.string,
                    enterActive: PropTypes.string,
                    enterDone: PropTypes.string,
                    exit: PropTypes.string,
                    exitActive: PropTypes.string,
                    exitDone: PropTypes.string,
                }),
            ]),
        };
    }
    catch (error) { }
}
//# sourceMappingURL=LayoutNavToggle.js.map