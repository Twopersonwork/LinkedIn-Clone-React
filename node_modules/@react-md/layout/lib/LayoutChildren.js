"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayoutChildren = void 0;
var react_1 = __importStar(require("react"));
var link_1 = require("@react-md/link");
var LayoutAppBar_1 = require("./LayoutAppBar");
var LayoutMain_1 = require("./LayoutMain");
var LayoutNavigation_1 = require("./LayoutNavigation");
var LayoutProvider_1 = require("./LayoutProvider");
var MiniLayoutWrapper_1 = require("./MiniLayoutWrapper");
var utils_1 = require("./utils");
/**
 * The only purpose of this component is to render the children and different
 * parts of the `Layout` depending on the current layout that is active. Since
 * the `Layout` component defines the provider itself, this has to be a child
 * component to get the resolved `layout` type.
 *
 * @remarks \@since 2.7.0
 * @internal
 */
function LayoutChildren(_a) {
    var _b = _a.id, id = _b === void 0 ? "layout" : _b, propAppBar = _a.appBar, appBarProps = _a.appBarProps, customTitle = _a.customTitle, title = _a.title, titleProps = _a.titleProps, navToggle = _a.navToggle, navToggleProps = _a.navToggleProps, _c = _a.navAfterAppBar, navAfterAppBar = _c === void 0 ? false : _c, propNav = _a.nav, miniNav = _a.miniNav, miniNavItems = _a.miniNavItems, miniWrapperProps = _a.miniWrapperProps, navHeader = _a.navHeader, navHeaderProps = _a.navHeaderProps, navHeaderTitle = _a.navHeaderTitle, navHeaderTitleProps = _a.navHeaderTitleProps, closeNav = _a.closeNav, closeNavProps = _a.closeNavProps, treeProps = _a.treeProps, navProps = _a.navProps, skipProps = _a.skipProps, mainProps = _a.mainProps, children = _a.children;
    var mainId = (mainProps === null || mainProps === void 0 ? void 0 : mainProps.id) || id + "-main";
    var _d = LayoutProvider_1.useLayoutConfig(), layout = _d.layout, visible = _d.visible, fixedAppBar = _d.fixedAppBar;
    var mini = utils_1.isMiniLayout(layout);
    var _e = react_1.useState(visible), miniHidden = _e[0], setMiniHidden = _e[1];
    // when the layout changes, the hidden state for the mini drawer must also be
    // updated
    react_1.useEffect(function () {
        setMiniHidden(visible);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [layout]);
    var appBar = propAppBar;
    if (typeof appBar === "undefined") {
        appBar = (react_1.default.createElement(LayoutAppBar_1.LayoutAppBar, __assign({}, appBarProps, { customTitle: customTitle, title: title, titleProps: titleProps, navToggle: navToggle, navToggleProps: navToggleProps })));
    }
    var nav = propNav;
    if (typeof nav === "undefined") {
        nav = (react_1.default.createElement(LayoutNavigation_1.LayoutNavigation, __assign({ header: navHeader, headerProps: navHeaderProps, headerTitle: navHeaderTitle, headerTitleProps: navHeaderTitleProps, closeNav: closeNav, closeNavProps: closeNavProps, treeProps: treeProps }, navProps, { onEntered: function (node, isAppearing) {
                var _a;
                (_a = navProps === null || navProps === void 0 ? void 0 : navProps.onEntered) === null || _a === void 0 ? void 0 : _a.call(navProps, node, isAppearing);
                setMiniHidden(true);
            }, onExit: function (node) {
                var _a;
                (_a = navProps === null || navProps === void 0 ? void 0 : navProps.onExit) === null || _a === void 0 ? void 0 : _a.call(navProps, node);
                setMiniHidden(false);
            } })));
    }
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(link_1.SkipToMainContent, __assign({}, skipProps, { mainId: mainId })),
        navAfterAppBar && appBar,
        nav,
        !navAfterAppBar && appBar,
        react_1.default.createElement(MiniLayoutWrapper_1.MiniLayoutWrapper, { mini: mini, miniNav: miniNav, miniHidden: miniHidden, containerProps: miniWrapperProps, miniNavItems: miniNavItems, treeProps: treeProps, header: navHeader, headerProps: navHeaderProps, headerTitle: navHeaderTitle, headerTitleProps: navHeaderTitleProps, closeNav: closeNav, closeNavProps: closeNavProps },
            react_1.default.createElement(LayoutMain_1.LayoutMain, __assign({ headerOffset: fixedAppBar, mini: mini, miniHidden: miniHidden }, mainProps, { id: mainId }), children))));
}
exports.LayoutChildren = LayoutChildren;
//# sourceMappingURL=LayoutChildren.js.map