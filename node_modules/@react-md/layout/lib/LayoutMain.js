"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayoutMain = void 0;
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var sheet_1 = require("@react-md/sheet");
var transition_1 = require("@react-md/transition");
var utils_1 = require("@react-md/utils");
var constants_1 = require("./constants");
var LayoutProvider_1 = require("./LayoutProvider");
var utils_2 = require("./utils");
var styles = utils_1.bem("rmd-layout-main");
/**
 * This is the `<main>` element for your app that has some built in styles to be
 * able to update based on the current layout types.
 */
exports.LayoutMain = react_1.forwardRef(function LayoutMain(_a, forwardedRef) {
    var propClassName = _a.className, propTabIndex = _a.tabIndex, _b = _a.component, Component = _b === void 0 ? "main" : _b, propNavOffset = _a.navOffset, _c = _a.headerOffset, headerOffset = _c === void 0 ? false : _c, _d = _a.timeout, propTimeout = _d === void 0 ? sheet_1.DEFAULT_SHEET_TIMEOUT : _d, _e = _a.classNames, classNames = _e === void 0 ? constants_1.DEFAULT_LAYOUT_MAIN_CLASSNAMES : _e, _f = _a.mini, mini = _f === void 0 ? false : _f, _g = _a.miniHidden, miniHidden = _g === void 0 ? false : _g, props = __rest(_a, ["className", "tabIndex", "component", "navOffset", "headerOffset", "timeout", "classNames", "mini", "miniHidden"]);
    // this makes it so that the SkipToMainContent button can still
    // focus the `<main>` element, but the `<main>` will no longer be
    // focused if the user clicks inside. This is super nice since one
    // of my bigger patterns is to click somewhere then press tab to
    // focus a specific element. Without this fix, the first element in
    // the `<main>` tag would be focused instead of the closest focusable
    // element to the click area.
    var tabIndex = propTabIndex;
    if (utils_1.useIsUserInteractionMode("keyboard") &&
        typeof propTabIndex === "undefined") {
        tabIndex = -1;
    }
    var _h = LayoutProvider_1.useLayoutConfig(), layout = _h.layout, visible = _h.visible, fixedAppBar = _h.fixedAppBar;
    var navOffset = propNavOffset;
    if (typeof navOffset === "undefined") {
        navOffset = visible && !utils_2.isTemporaryLayout(layout);
    }
    var timeout = propTimeout;
    var prevLayout = react_1.useRef(layout);
    if (prevLayout.current !== layout) {
        // this is kind of weird and hacky, but this will allow for the required
        // classnames to be applied to the main element based on the current
        // layout type without needing a unique `key` for the main content. this
        // is super nice since we really don't want to remount the full app each
        // time the layout changes.
        timeout = 0;
    }
    var _j = transition_1.useCSSTransition({
        ref: forwardedRef,
        transitionIn: !!navOffset,
        temporary: false,
        className: propClassName,
        timeout: timeout,
        classNames: classNames,
        onEntered: function () {
            prevLayout.current = layout;
        },
        onExited: function () {
            prevLayout.current = layout;
        },
    }), _k = _j[1], ref = _k.ref, className = _k.className;
    var isMini = mini && (fixedAppBar || miniHidden);
    var isMiniOffset = mini &&
        navOffset &&
        !fixedAppBar &&
        visible &&
        utils_2.isToggleableLayout(layout);
    return (react_1.default.createElement(Component, __assign({}, props, { ref: ref, tabIndex: tabIndex, className: classnames_1.default(styles({
            mini: isMini && (utils_2.isTemporaryLayout(layout) || !visible),
            "nav-offset": isMini,
            "mini-offset": isMiniOffset,
            "header-offset": headerOffset,
        }), className) })));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        exports.LayoutMain.propTypes = {
            component: PropTypes.oneOf(["div", "main"]),
            className: PropTypes.string,
            tabIndex: PropTypes.number,
            navOffset: PropTypes.bool,
            headerOffset: PropTypes.bool,
            timeout: PropTypes.oneOfType([
                PropTypes.number,
                PropTypes.shape({
                    appear: PropTypes.number,
                    enter: PropTypes.number,
                    exit: PropTypes.number,
                }),
            ]),
            classNames: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.shape({
                    appear: PropTypes.string,
                    appearActive: PropTypes.string,
                    enter: PropTypes.string,
                    enterActive: PropTypes.string,
                    enterDone: PropTypes.string,
                    exit: PropTypes.string,
                    exitActive: PropTypes.string,
                    exitDone: PropTypes.string,
                }),
            ]),
        };
    }
    catch (error) { }
}
//# sourceMappingURL=LayoutMain.js.map