import React, { HTMLAttributes } from "react";
import { CSSTransitionClassNames } from "react-transition-group/CSSTransition";
import { TransitionTimeout } from "@react-md/transition";
export interface LayoutMainProps extends HTMLAttributes<HTMLDivElement> {
    /**
     * The component to render the main element as. This should normally stay as
     * the default of `"main"`, but if you want to have multiple `Layout` on the
     * page for some reason, you'll need to use `"div"` for the other `Layout`s
     * since you can only have one `<main>` per page (unless you set the `hidden`
     * attribute on all the others).
     */
    component?: "div" | "main";
    /**
     * Boolean if the main element should be offset by the current navigation
     * tree's width.
     */
    navOffset?: boolean;
    /**
     * Boolean if the main element should be ofset by the `AppBar`'s height
     */
    headerOffset?: boolean;
    /**
     * Boolean of there is a mini nav visible within the layout. This makes sure
     * that the content if offset by the current nav's width when needed.
     *
     * @remarks \@since 2.7.0
     */
    mini?: boolean;
    /**
     * Boolean if the mini layout is currently hidden to help determine if
     * specific mini styles should be applied when the {@link LayoutContext.fixedAppBar}
     * config is `false`.
     *
     * @internal
     * @remarks \@since 2.8.3
     */
    miniHidden?: boolean;
    /**
     * The transition timeout to use for the toggleable `LayoutNavigation` either
     * comes into view or expands from mini to full-width. The transition can be
     * disabled by setting this value to `0`.
     */
    timeout?: TransitionTimeout;
    /**
     * The transition classnames to use for the toggleable `LayoutNavigation`
     * either comes into view or expands from mini to full-width.
     */
    classNames?: CSSTransitionClassNames;
}
/**
 * This is the `<main>` element for your app that has some built in styles to be
 * able to update based on the current layout types.
 */
export declare const LayoutMain: React.ForwardRefExoticComponent<LayoutMainProps & React.RefAttributes<HTMLDivElement>>;
