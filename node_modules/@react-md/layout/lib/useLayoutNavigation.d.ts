import { ElementType } from "react";
import { BaseTreeItem, TreeItemExpansion, TreeItemSelection } from "@react-md/tree";
import { LayoutNavigationItem, LayoutNavigationTree } from "./types";
export interface LayoutNavigationState<T extends BaseTreeItem = LayoutNavigationItem> extends TreeItemSelection, TreeItemExpansion {
    /**
     * The navigation items to use that will be passed to the `Tree` component
     * from `@react-md/tree`
     */
    navItems: LayoutNavigationTree<T>;
    /**
     * The link component to use when a nav item is clicked. This defaults to the
     * `Link` component from `@react-md/link`, but can also be a `Link` from
     * `react-router` or another routing library.
     */
    linkComponent: ElementType;
}
/**
 * This is a pretty reasonable default implementation for having a navigation
 * tree within the Layout component. The way it'll work is that the current
 * route will be the only selected item within the tree. When the pathname
 * changes, the selectedIds will be updated to only be the current pathname once
 * again.
 *
 * This means that you can use whatever routing library or history provider that
 * ensures that your layout re-renders on a path change.
 *
 * @see LayoutNavigationTree for description of the navItems
 * @param navItems - All the navigation items within your layout. This is used
 * for determining which parent tree items should be expanded when the route
 * changes so the current route won't be hidden from view. This sort of flow
 * happens if you have a link outside of the navigation tree.
 * @param pathname - The current pathname
 * @param linkComponent - The link component to use within the navigation tree
 * for any item that has a `to` or `href` attribute. This defaults to the `Link`
 * from `@react-md/link` but should be changed to whatever link component you
 * need if using a routing library like `react-router`.
 * @returns the required `Tree` selection and expansion state and handlers that
 * should be passed to the `Layout` component.
 */
export declare function useLayoutNavigation<T extends BaseTreeItem = LayoutNavigationItem>(navItems: LayoutNavigationTree<T>, pathname: string, linkComponent?: ElementType): LayoutNavigationState<T>;
