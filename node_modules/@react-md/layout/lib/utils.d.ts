import { AppSize } from "@react-md/utils";
import { LayoutConfiguration, SupportedWideLayout } from "./types";
export interface GetLayoutOptions extends LayoutConfiguration {
    /**
     * The current app size which is used to determine which layout type to
     * return.
     */
    appSize: AppSize;
}
/**
 * Gets the current layout based on the app size and layout configuration.
 *
 * @returns The current layout type
 */
export declare function getLayoutType({ appSize, phoneLayout, tabletLayout, landscapeTabletLayout, desktopLayout, largeDesktopLayout, }: GetLayoutOptions): SupportedWideLayout;
/**
 * Checks if the current `layout` is one of the temporary types
 *
 * @param layout - The layout to check against
 * @returns true if the current layout has a temporary navigation.
 */
export declare function isTemporaryLayout(layout: SupportedWideLayout): boolean;
/**
 * Checks if the current `layout` is one of the toggleable types
 *
 * @param layout - The layout to check against
 * @returns true if the current layout is toggleable.
 */
export declare function isToggleableLayout(layout: SupportedWideLayout): boolean;
/**
 * Checks if the current `layout` is `"clipped"`, `"floating"`, or
 * `"full-height"`.
 *
 * @param layout - The layout to check against
 * @returns true if the current layout is persistent.
 */
export declare function isPersistentLayout(layout: SupportedWideLayout): boolean;
/**
 * Checks if the current `layout` is the `"full-height"` variant.
 *
 * @param layout - The layout to check against
 * @returns true if the current layout is the full height variant.
 */
export declare function isFullHeightLayout(layout: SupportedWideLayout): boolean;
/**
 * Checks if the current `layout` is either `"temporary-mini"` or
 * `"toggleable-mini"`.
 *
 * @param layout - The layout to check against
 * @returns true if the current layout is the mini variant.
 * @remarks \@since 2.7.0
 */
export declare function isMiniLayout(layout: SupportedWideLayout): boolean;
