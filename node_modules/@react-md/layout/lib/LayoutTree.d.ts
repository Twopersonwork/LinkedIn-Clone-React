import React, { CSSProperties } from "react";
import { BaseTreeItem, TreeData, TreeItemRenderer, TreeProps } from "@react-md/tree";
import { LayoutNavigationItem } from "./types";
export declare type BaseLayoutTreeProps<T extends BaseTreeItem = LayoutNavigationItem> = Omit<TreeProps<T>, "id" | "data" | "aria-label" | "aria-labelledby">;
export interface LayoutTreeProps<T extends BaseTreeItem = LayoutNavigationItem> extends BaseLayoutTreeProps<T> {
    /**
     * The id to use for the tree. When this is omitted, it will be set to
     * `${baseId}-navigation-tree` where the `baseId` is the `id` provided to the
     * parent `Layout` component.
     */
    id?: string;
    /**
     * An optional `aria-label` to provide to the tree. This will be defaulted to
     * `"Navigation"`.
     */
    "aria-label"?: string;
    /**
     * An optional space-delimited list of ids that help describe this tree. This
     * can be used instead of an `aria-label` or alongside for additional screen
     * reader description.
     */
    "aria-labelledby"?: string;
    /**
     * Boolean if the `LayoutTree` is being rendered as the mini variant. This
     * will update the `itemRenderer` to default to the
     * `defaultMiniNavigationItemRenderer` instead of the
     * `defaultNavigationItemRenderer`.
     *
     * @remarks \@since 2.7.0
     */
    mini?: boolean;
    /**
     * Boolean if the mini navigation should be treated as a "sticky" element.
     * This should really only be `true` if disabling the fixed `AppBar` behavior
     * in the `Layout`.
     *
     * @remarks \@since 2.8.3
     */
    sticky?: boolean;
    /**
     * The {@link TreeItemRenderer} to use if the `mini` prop is enabled.
     *
     * @remarks \@since 2.8.3
     */
    miniItemRenderer?: TreeItemRenderer<T>;
    /**
     * Optional style to provide to the `<nav>` element surrounding the tree
     */
    navStyle?: CSSProperties;
    /**
     * Optional className to provide to the `<nav>` element surrounding the tree
     */
    navClassName?: string;
    /**
     * The navigation items to render.
     */
    navItems: TreeData<T>;
    /**
     * Boolean if the temporary navigation type should no longer automatically
     * close when the `selectedIds` updates to contain a new route when using the
     * `useLayoutNavigation` hook.  This makes it so when a user on mobile clicks
     * a route within your app in the main navigation pane, it will automatically
     * close if it was a link.
     */
    disableTemporaryAutoclose?: boolean;
}
/**
 * Renders the navigation tree for the Layout component that adds some
 * reasonable defaults to work with navigation items.
 */
export declare const LayoutTree: React.ForwardRefExoticComponent<LayoutTreeProps<LayoutNavigationItem> & React.RefAttributes<HTMLUListElement>>;
