"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isMiniLayout = exports.isFullHeightLayout = exports.isPersistentLayout = exports.isToggleableLayout = exports.isTemporaryLayout = exports.getLayoutType = void 0;
var constants_1 = require("./constants");
/**
 * Gets the current layout based on the app size and layout configuration.
 *
 * @returns The current layout type
 */
function getLayoutType(_a) {
    var appSize = _a.appSize, _b = _a.phoneLayout, phoneLayout = _b === void 0 ? constants_1.DEFAULT_PHONE_LAYOUT : _b, _c = _a.tabletLayout, tabletLayout = _c === void 0 ? constants_1.DEFAULT_TABLET_LAYOUT : _c, _d = _a.landscapeTabletLayout, landscapeTabletLayout = _d === void 0 ? constants_1.DEFAULT_LANDSCAPE_TABLET_LAYOUT : _d, _e = _a.desktopLayout, desktopLayout = _e === void 0 ? constants_1.DEFAULT_DESKTOP_LAYOUT : _e, _f = _a.largeDesktopLayout, largeDesktopLayout = _f === void 0 ? desktopLayout : _f;
    var isPhone = appSize.isPhone, isTablet = appSize.isTablet, isLargeDesktop = appSize.isLargeDesktop, isLandscape = appSize.isLandscape;
    if (isPhone) {
        return phoneLayout;
    }
    if (isTablet) {
        return isLandscape ? landscapeTabletLayout : tabletLayout;
    }
    if (isLargeDesktop) {
        return largeDesktopLayout;
    }
    return desktopLayout;
}
exports.getLayoutType = getLayoutType;
/**
 * Checks if the current `layout` is one of the temporary types
 *
 * @param layout - The layout to check against
 * @returns true if the current layout has a temporary navigation.
 */
function isTemporaryLayout(layout) {
    return layout === "temporary" || layout === "temporary-mini";
}
exports.isTemporaryLayout = isTemporaryLayout;
/**
 * Checks if the current `layout` is one of the toggleable types
 *
 * @param layout - The layout to check against
 * @returns true if the current layout is toggleable.
 */
function isToggleableLayout(layout) {
    return layout === "toggleable" || layout === "toggleable-mini";
}
exports.isToggleableLayout = isToggleableLayout;
/**
 * Checks if the current `layout` is `"clipped"`, `"floating"`, or
 * `"full-height"`.
 *
 * @param layout - The layout to check against
 * @returns true if the current layout is persistent.
 */
function isPersistentLayout(layout) {
    return (layout === "clipped" || layout === "floating" || layout === "full-height");
}
exports.isPersistentLayout = isPersistentLayout;
/**
 * Checks if the current `layout` is the `"full-height"` variant.
 *
 * @param layout - The layout to check against
 * @returns true if the current layout is the full height variant.
 */
function isFullHeightLayout(layout) {
    return layout === "full-height";
}
exports.isFullHeightLayout = isFullHeightLayout;
/**
 * Checks if the current `layout` is either `"temporary-mini"` or
 * `"toggleable-mini"`.
 *
 * @param layout - The layout to check against
 * @returns true if the current layout is the mini variant.
 * @remarks \@since 2.7.0
 */
function isMiniLayout(layout) {
    return layout === "temporary-mini" || layout === "toggleable-mini";
}
exports.isMiniLayout = isMiniLayout;
//# sourceMappingURL=utils.js.map