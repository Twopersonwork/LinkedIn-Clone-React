var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from "react";
import { AppBar } from "@react-md/app-bar";
import { LayoutAppBarTitle } from "./LayoutAppBarTitle";
import { LayoutNavToggle } from "./LayoutNavToggle";
import { useLayoutConfig } from "./LayoutProvider";
/**
 * This is the default implementation for an `AppBar` within the `Layout` that
 * will conditionally render the default `LayoutNavToggle` button and
 * `AppBarTitle` depending on specific props that were provided.
 */
export var LayoutAppBar = forwardRef(function LayoutAppBar(_a, ref) {
    var children = _a.children, _b = _a.fixed, fixed = _b === void 0 ? true : _b, propNavToggle = _a.navToggle, navToggleProps = _a.navToggleProps, customTitle = _a.customTitle, titleChildren = _a.title, titleProps = _a.titleProps, props = __rest(_a, ["children", "fixed", "navToggle", "navToggleProps", "customTitle", "title", "titleProps"]);
    var _c = useLayoutConfig(), baseId = _c.baseId, layout = _c.layout;
    var nav = propNavToggle;
    if (typeof nav === "undefined") {
        // set the key to the current layout since we want the button to re-mount
        // on layout changes so the transition does not occur
        nav = React.createElement(LayoutNavToggle, __assign({ key: layout }, navToggleProps));
    }
    var title = customTitle;
    if (typeof title === "undefined") {
        title = (React.createElement(LayoutAppBarTitle, __assign({}, titleProps), titleChildren));
    }
    return (React.createElement(AppBar, __assign({ id: baseId + "-header" }, props, { ref: ref, fixed: fixed }),
        nav,
        title,
        children));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        LayoutAppBar.propTypes = {
            fixed: PropTypes.bool,
            navToggle: PropTypes.node,
            navToggleProps: PropTypes.object,
            className: PropTypes.string,
            customTitle: PropTypes.node,
            title: PropTypes.node,
            titleProps: PropTypes.object,
            children: PropTypes.node,
        };
    }
    catch (error) { }
}
//# sourceMappingURL=LayoutAppBar.js.map