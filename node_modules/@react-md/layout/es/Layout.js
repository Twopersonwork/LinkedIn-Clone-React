var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import React from "react";
import { DEFAULT_DESKTOP_LAYOUT, DEFAULT_LANDSCAPE_TABLET_LAYOUT, DEFAULT_PHONE_LAYOUT, DEFAULT_TABLET_LAYOUT, } from "./constants";
import { LayoutChildren } from "./LayoutChildren";
import { LayoutProvider } from "./LayoutProvider";
/**
 * The layout to use for your app. There are 9 different types of layouts
 * supported out of the box that work for a decent amount of apps out of the
 * box.
 *
 * Note: You will need to ensure that the base `Configuration` component is a
 * parent of this `Layout` component to work since it relies on the
 * `AppSizeContext` for automatically updating the layout based on media
 * queries.
 */
export function Layout(_a) {
    var _b, _c;
    var _d = _a.id, id = _d === void 0 ? "layout" : _d, _e = _a.phoneLayout, phoneLayout = _e === void 0 ? DEFAULT_PHONE_LAYOUT : _e, _f = _a.tabletLayout, tabletLayout = _f === void 0 ? DEFAULT_TABLET_LAYOUT : _f, _g = _a.landscapeTabletLayout, landscapeTabletLayout = _g === void 0 ? DEFAULT_LANDSCAPE_TABLET_LAYOUT : _g, _h = _a.desktopLayout, desktopLayout = _h === void 0 ? DEFAULT_DESKTOP_LAYOUT : _h, largeDesktopLayout = _a.largeDesktopLayout, _j = _a.defaultToggleableVisible, defaultToggleableVisible = _j === void 0 ? false : _j, props = __rest(_a, ["id", "phoneLayout", "tabletLayout", "landscapeTabletLayout", "desktopLayout", "largeDesktopLayout", "defaultToggleableVisible"]);
    return (React.createElement(LayoutProvider, { baseId: id, fixedAppBar: (_c = (_b = props.appBarProps) === null || _b === void 0 ? void 0 : _b.fixed) !== null && _c !== void 0 ? _c : typeof props.appBar === "undefined", phoneLayout: phoneLayout, tabletLayout: tabletLayout, landscapeTabletLayout: landscapeTabletLayout, desktopLayout: desktopLayout, largeDesktopLayout: largeDesktopLayout, defaultToggleableVisible: defaultToggleableVisible },
        React.createElement(LayoutChildren, __assign({ id: id }, props))));
}
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        var phoneLayouts = ["temporary", "temporary-mini"];
        var tabletLayouts = __spreadArray(__spreadArray([], phoneLayouts), ["toggleable", "toggleable-mini"]);
        var wideLayouts = __spreadArray(__spreadArray([], tabletLayouts), [
            "clipped",
            "floating",
            "full-height",
        ]);
        Layout.propTypes = {
            id: PropTypes.string,
            children: PropTypes.node,
            phoneLayout: PropTypes.oneOf(phoneLayouts),
            tabletLayout: PropTypes.oneOf(tabletLayouts),
            landscapeTabletLayout: PropTypes.oneOf(wideLayouts),
            desktopLayout: PropTypes.oneOf(wideLayouts),
            largeDesktopLayout: PropTypes.oneOf(wideLayouts),
            appBar: PropTypes.node,
            appBarProps: PropTypes.object,
            navAfterAppBar: PropTypes.bool,
            customTitle: PropTypes.node,
            title: PropTypes.node,
            titleProps: PropTypes.object,
            navToggle: PropTypes.node,
            navToggleProps: PropTypes.object,
            skipProps: PropTypes.object,
            nav: PropTypes.node,
            navProps: PropTypes.object,
            navHeader: PropTypes.node,
            navHeaderProps: PropTypes.object,
            navHeaderTitle: PropTypes.node,
            navHeaderTitleProps: PropTypes.object,
            closeNav: PropTypes.node,
            closeNavProps: PropTypes.object,
            treeProps: PropTypes.object,
            mainProps: PropTypes.object,
        };
    }
    catch (error) { }
}
//# sourceMappingURL=Layout.js.map