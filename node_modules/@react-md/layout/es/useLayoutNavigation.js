var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import { useRef } from "react";
import { Link } from "@react-md/link";
import { getItemsFrom, useTreeItemExpansion, } from "@react-md/tree";
/**
 * @internal
 */
var getParentIds = function (itemId, navItems) { return getItemsFrom(navItems, itemId).map(function (_a) {
    var itemId = _a.itemId;
    return itemId;
}); };
/**
 * This is used to disable the item select and multi item select functionality
 * since only one id can be selected at a time, and it'll always be the current
 * pathname's itemId
 *
 * @internal
 */
var noop = function () {
    // do nothing
};
/**
 * This is a pretty reasonable default implementation for having a navigation
 * tree within the Layout component. The way it'll work is that the current
 * route will be the only selected item within the tree. When the pathname
 * changes, the selectedIds will be updated to only be the current pathname once
 * again.
 *
 * This means that you can use whatever routing library or history provider that
 * ensures that your layout re-renders on a path change.
 *
 * @see LayoutNavigationTree for description of the navItems
 * @param navItems - All the navigation items within your layout. This is used
 * for determining which parent tree items should be expanded when the route
 * changes so the current route won't be hidden from view. This sort of flow
 * happens if you have a link outside of the navigation tree.
 * @param pathname - The current pathname
 * @param linkComponent - The link component to use within the navigation tree
 * for any item that has a `to` or `href` attribute. This defaults to the `Link`
 * from `@react-md/link` but should be changed to whatever link component you
 * need if using a routing library like `react-router`.
 * @returns the required `Tree` selection and expansion state and handlers that
 * should be passed to the `Layout` component.
 */
export function useLayoutNavigation(navItems, pathname, linkComponent) {
    if (linkComponent === void 0) { linkComponent = Link; }
    var itemId = pathname.replace(/\?.*$/, "");
    var _a = useTreeItemExpansion(function () { return getParentIds(itemId, navItems); }), expandedIds = _a.expandedIds, onItemExpansion = _a.onItemExpansion, onMultiItemExpansion = _a.onMultiItemExpansion;
    var prevItemId = useRef(itemId);
    var prevNavItems = useRef(navItems);
    if (prevItemId.current !== itemId || prevNavItems.current !== navItems) {
        prevItemId.current = itemId;
        prevNavItems.current = navItems;
        onMultiItemExpansion(Array.from(new Set(__spreadArray(__spreadArray([], expandedIds), getParentIds(itemId, navItems)))));
    }
    return {
        navItems: navItems,
        multiSelect: false,
        selectedIds: [itemId],
        onItemSelect: noop,
        onMultiItemSelect: noop,
        expandedIds: expandedIds,
        onItemExpansion: onItemExpansion,
        onMultiItemExpansion: onMultiItemExpansion,
        linkComponent: linkComponent,
    };
}
//# sourceMappingURL=useLayoutNavigation.js.map