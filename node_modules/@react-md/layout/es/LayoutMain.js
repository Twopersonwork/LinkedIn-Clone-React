var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useRef } from "react";
import cn from "classnames";
import { DEFAULT_SHEET_TIMEOUT } from "@react-md/sheet";
import { useCSSTransition } from "@react-md/transition";
import { bem, useIsUserInteractionMode } from "@react-md/utils";
import { DEFAULT_LAYOUT_MAIN_CLASSNAMES } from "./constants";
import { useLayoutConfig } from "./LayoutProvider";
import { isTemporaryLayout, isToggleableLayout } from "./utils";
var styles = bem("rmd-layout-main");
/**
 * This is the `<main>` element for your app that has some built in styles to be
 * able to update based on the current layout types.
 */
export var LayoutMain = forwardRef(function LayoutMain(_a, forwardedRef) {
    var propClassName = _a.className, propTabIndex = _a.tabIndex, _b = _a.component, Component = _b === void 0 ? "main" : _b, propNavOffset = _a.navOffset, _c = _a.headerOffset, headerOffset = _c === void 0 ? false : _c, _d = _a.timeout, propTimeout = _d === void 0 ? DEFAULT_SHEET_TIMEOUT : _d, _e = _a.classNames, classNames = _e === void 0 ? DEFAULT_LAYOUT_MAIN_CLASSNAMES : _e, _f = _a.mini, mini = _f === void 0 ? false : _f, _g = _a.miniHidden, miniHidden = _g === void 0 ? false : _g, props = __rest(_a, ["className", "tabIndex", "component", "navOffset", "headerOffset", "timeout", "classNames", "mini", "miniHidden"]);
    // this makes it so that the SkipToMainContent button can still
    // focus the `<main>` element, but the `<main>` will no longer be
    // focused if the user clicks inside. This is super nice since one
    // of my bigger patterns is to click somewhere then press tab to
    // focus a specific element. Without this fix, the first element in
    // the `<main>` tag would be focused instead of the closest focusable
    // element to the click area.
    var tabIndex = propTabIndex;
    if (useIsUserInteractionMode("keyboard") &&
        typeof propTabIndex === "undefined") {
        tabIndex = -1;
    }
    var _h = useLayoutConfig(), layout = _h.layout, visible = _h.visible, fixedAppBar = _h.fixedAppBar;
    var navOffset = propNavOffset;
    if (typeof navOffset === "undefined") {
        navOffset = visible && !isTemporaryLayout(layout);
    }
    var timeout = propTimeout;
    var prevLayout = useRef(layout);
    if (prevLayout.current !== layout) {
        // this is kind of weird and hacky, but this will allow for the required
        // classnames to be applied to the main element based on the current
        // layout type without needing a unique `key` for the main content. this
        // is super nice since we really don't want to remount the full app each
        // time the layout changes.
        timeout = 0;
    }
    var _j = useCSSTransition({
        ref: forwardedRef,
        transitionIn: !!navOffset,
        temporary: false,
        className: propClassName,
        timeout: timeout,
        classNames: classNames,
        onEntered: function () {
            prevLayout.current = layout;
        },
        onExited: function () {
            prevLayout.current = layout;
        },
    }), _k = _j[1], ref = _k.ref, className = _k.className;
    var isMini = mini && (fixedAppBar || miniHidden);
    var isMiniOffset = mini &&
        navOffset &&
        !fixedAppBar &&
        visible &&
        isToggleableLayout(layout);
    return (React.createElement(Component, __assign({}, props, { ref: ref, tabIndex: tabIndex, className: cn(styles({
            mini: isMini && (isTemporaryLayout(layout) || !visible),
            "nav-offset": isMini,
            "mini-offset": isMiniOffset,
            "header-offset": headerOffset,
        }), className) })));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        LayoutMain.propTypes = {
            component: PropTypes.oneOf(["div", "main"]),
            className: PropTypes.string,
            tabIndex: PropTypes.number,
            navOffset: PropTypes.bool,
            headerOffset: PropTypes.bool,
            timeout: PropTypes.oneOfType([
                PropTypes.number,
                PropTypes.shape({
                    appear: PropTypes.number,
                    enter: PropTypes.number,
                    exit: PropTypes.number,
                }),
            ]),
            classNames: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.shape({
                    appear: PropTypes.string,
                    appearActive: PropTypes.string,
                    enter: PropTypes.string,
                    enterActive: PropTypes.string,
                    enterDone: PropTypes.string,
                    exit: PropTypes.string,
                    exitActive: PropTypes.string,
                    exitDone: PropTypes.string,
                }),
            ]),
        };
    }
    catch (error) { }
}
//# sourceMappingURL=LayoutMain.js.map