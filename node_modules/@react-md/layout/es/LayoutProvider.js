var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import React, { createContext, useCallback, useContext, useMemo, useState, useRef, } from "react";
import { useAppSize } from "@react-md/utils";
import { DEFAULT_DESKTOP_LAYOUT, DEFAULT_LANDSCAPE_TABLET_LAYOUT, DEFAULT_PHONE_LAYOUT, DEFAULT_TABLET_LAYOUT, } from "./constants";
import { getLayoutType, isPersistentLayout, isToggleableLayout } from "./utils";
/**
 * @internal
 */
var notInitialized = function (name) { return function () {
    /* istanbul ignore next */
    if (process.env.NODE_ENV !== "production") {
        /* eslint-disable no-console */
        console.warn("Uh oh, something went wrong. Somehow the `LayoutNavigationConfiguration` context has not been initialized. " +
            ("This caused the \"" + name + "\" callback to do nothing."));
    }
}; };
var context = createContext({
    baseId: "layout",
    layout: "temporary",
    visible: false,
    showNav: notInitialized("showNav"),
    hideNav: notInitialized("hideNav"),
    fixedAppBar: true,
});
/**
 * Gets the current layout state and configuration.
 */
export function useLayoutConfig() {
    return useContext(context);
}
var Provider = context.Provider;
/**
 * @remarks \@since 2.6.0
 * @internal
 */
function isToggleableVisible(behavior, layout) {
    return typeof behavior === "string"
        ? behavior === layout
        : behavior && isToggleableLayout(layout);
}
/**
 * Determines the current layout based on the `LayoutConfiguration` and hooks
 * into the `AppSizeListener` to update on resize. This also initializes the
 * `LayLayoutContext` so that a custom layout implementation can be used along
 * with the `useLayoutConfig()` hook and the multiple `Layout` components.
 */
export function LayoutProvider(_a) {
    var baseId = _a.baseId, _b = _a.phoneLayout, phoneLayout = _b === void 0 ? DEFAULT_PHONE_LAYOUT : _b, _c = _a.tabletLayout, tabletLayout = _c === void 0 ? DEFAULT_TABLET_LAYOUT : _c, _d = _a.landscapeTabletLayout, landscapeTabletLayout = _d === void 0 ? DEFAULT_LANDSCAPE_TABLET_LAYOUT : _d, _e = _a.desktopLayout, desktopLayout = _e === void 0 ? DEFAULT_DESKTOP_LAYOUT : _e, largeDesktopLayout = _a.largeDesktopLayout, _f = _a.defaultToggleableVisible, defaultToggleableVisible = _f === void 0 ? false : _f, _g = _a.fixedAppBar, fixedAppBar = _g === void 0 ? true : _g, children = _a.children;
    var appSize = useAppSize();
    var layout = getLayoutType({
        appSize: appSize,
        phoneLayout: phoneLayout,
        tabletLayout: tabletLayout,
        landscapeTabletLayout: landscapeTabletLayout,
        desktopLayout: desktopLayout,
        largeDesktopLayout: largeDesktopLayout,
    });
    var isPersistent = isPersistentLayout(layout);
    var isDesktop = appSize.isDesktop;
    var _h = useState((isPersistent && isDesktop) ||
        isToggleableVisible(defaultToggleableVisible, layout)), visible = _h[0], setVisible = _h[1];
    var prevLayout = useRef(layout);
    if (prevLayout.current !== layout) {
        prevLayout.current = layout;
        var nextVisible = isPersistent || isToggleableVisible(defaultToggleableVisible, layout);
        if (visible !== nextVisible) {
            setVisible(nextVisible);
        }
    }
    var showNav = useCallback(function () {
        setVisible(true);
    }, []);
    var hideNav = useCallback(function () {
        if (!isPersistentLayout(layout)) {
            setVisible(false);
        }
    }, [layout]);
    var value = useMemo(function () { return ({
        baseId: baseId,
        layout: layout,
        visible: visible,
        showNav: showNav,
        hideNav: hideNav,
        fixedAppBar: fixedAppBar,
    }); }, [baseId, layout, visible, showNav, hideNav, fixedAppBar]);
    return React.createElement(Provider, { value: value }, children);
}
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        context.displayName = "Layout";
        var PropTypes = require("prop-types");
        var phoneLayouts = ["temporary", "temporary-mini"];
        var tabletLayouts = __spreadArray(__spreadArray([], phoneLayouts), ["toggleable", "toggleable-mini"]);
        var wideLayouts = __spreadArray(__spreadArray([], tabletLayouts), [
            "clipped",
            "floating",
            "full-height",
        ]);
        LayoutProvider.propTypes = {
            baseId: PropTypes.string.isRequired,
            children: PropTypes.node.isRequired,
            phoneLayout: PropTypes.oneOf(phoneLayouts),
            tabletLayout: PropTypes.oneOf(tabletLayouts),
            landscapeTabletLayout: PropTypes.oneOf(wideLayouts),
            desktopLayout: PropTypes.oneOf(wideLayouts),
            largeDesktopLayout: PropTypes.oneOf(wideLayouts),
        };
    }
    catch (error) { }
}
//# sourceMappingURL=LayoutProvider.js.map