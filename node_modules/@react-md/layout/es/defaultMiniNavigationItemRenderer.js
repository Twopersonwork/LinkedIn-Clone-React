var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from "react";
import cn from "classnames";
import { Divider } from "@react-md/divider";
import { TreeItem } from "@react-md/tree";
import { SrOnly } from "@react-md/typography";
/**
 * This is the default mini navigation item renderer provided by the layout
 * package that has some reasonable defaults for creating a navigation tree.
 *
 * This renderer behaves a bit differently than the
 * `defaultNavigationItemRenderer` since it will only render the tree item if:
 *
 * - the item is at the root -- `parentId === null`
 * - the item is a divider at the root
 * - the item is not a subheader -- there isn't enough space
 * - the item does not have any child items -- not enough space to show nesting
 * - the item has a `leftAddon` -- the mini variant only renders icons
 *
 * This rendered `TreeItem` will only display the `leftAddon` as the children
 * but will also render the tree item's label in the `SrOnly` component so an
 * accessible label still exists for the icon `TreeItem`.
 *
 * @see {@link TreeItemRenderer}
 * @see {@link defaultNavigationItemRenderer}
 */
export var defaultMiniNavigationItemRenderer = function (itemProps, item, _a) {
    var _b, _c, _d, _e;
    var linkComponent = _a.linkComponent, getItemProps = _a.getItemProps, getItemLabel = _a.getItemLabel, labelKey = _a.labelKey;
    var key = itemProps.key, renderChildItems = itemProps.renderChildItems, props = __rest(itemProps, ["key", "renderChildItems"]);
    var divider = item.divider, subheader = item.subheader, leftAddon = item.leftAddon, parentId = item.parentId, style = item.style, className = item.className, liStyle = item.liStyle, liClassName = item.liClassName, as = item.as, to = item.to, href = item.href, isLink = item.isLink, propContentComponent = item.contentComponent;
    if (divider && parentId === null) {
        return React.createElement(Divider, { key: key });
    }
    if (subheader || parentId !== null || !leftAddon || renderChildItems) {
        return null;
    }
    var contentComponent = propContentComponent;
    if (!contentComponent && isLink !== false && (to || href || isLink)) {
        contentComponent = linkComponent;
    }
    var focused = itemProps.focused, selected = itemProps.selected, expanded = itemProps.expanded;
    var overrides = getItemProps(__assign(__assign({}, item), { focused: focused,
        selected: selected,
        expanded: expanded }));
    var children = (overrides && overrides.children) || undefined;
    if (typeof children === "undefined") {
        children = getItemLabel(item, labelKey);
    }
    return (React.createElement(TreeItem, __assign({ key: key }, props, { as: as, to: to, href: href, isLink: isLink, contentComponent: contentComponent, style: (_b = overrides === null || overrides === void 0 ? void 0 : overrides.style) !== null && _b !== void 0 ? _b : style, className: cn("rmd-layout-nav__mini-item", (_c = overrides === null || overrides === void 0 ? void 0 : overrides.className) !== null && _c !== void 0 ? _c : className), liStyle: (_d = overrides === null || overrides === void 0 ? void 0 : overrides.liStyle) !== null && _d !== void 0 ? _d : liStyle, liClassName: (_e = overrides === null || overrides === void 0 ? void 0 : overrides.liClassName) !== null && _e !== void 0 ? _e : liClassName, textChildren: false }),
        leftAddon,
        React.createElement(SrOnly, null, children)));
};
//# sourceMappingURL=defaultMiniNavigationItemRenderer.js.map