var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from "react";
import cn from "classnames";
import { AppBar, AppBarTitle } from "@react-md/app-bar";
import { bem } from "@react-md/utils";
import { LayoutCloseNavigationButton, } from "./LayoutCloseNavigationButton";
import { useLayoutConfig } from "./LayoutProvider";
var styles = bem("rmd-layout-nav-header");
/**
 * The default implementation for the `AppBar` within the `LayoutNavigation`
 * that allows for rendering a title along with the `LayoutCloseNavigationButton`.
 */
export var LayoutNavigationHeader = forwardRef(function LayoutNavigationHeader(_a, ref) {
    var _b = _a.theme, theme = _b === void 0 ? "clear" : _b, children = _a.children, className = _a.className, closeNav = _a.closeNav, closeNavProps = _a.closeNavProps, propTitle = _a.title, titleProps = _a.titleProps, _c = _a.disableBorderBottom, disableBorderBottom = _c === void 0 ? false : _c, props = __rest(_a, ["theme", "children", "className", "closeNav", "closeNavProps", "title", "titleProps", "disableBorderBottom"]);
    var layout = useLayoutConfig().layout;
    if (layout === "clipped" || layout === "floating") {
        return null;
    }
    var title = null;
    if (propTitle) {
        title = React.createElement(AppBarTitle, __assign({}, titleProps), propTitle);
    }
    var action = closeNav;
    if (typeof action === "undefined") {
        action = React.createElement(LayoutCloseNavigationButton, __assign({}, closeNavProps));
    }
    return (React.createElement(AppBar, __assign({}, props, { ref: ref, theme: theme, className: cn(styles({ bordered: !disableBorderBottom }), className) }),
        title,
        children,
        action));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        LayoutNavigationHeader.propTypes = {
            disableBorderBottom: PropTypes.bool,
            className: PropTypes.string,
            closeNav: PropTypes.node,
            closeNavProps: PropTypes.object,
            theme: PropTypes.oneOf(["clear", "primary", "secondary", "default"]),
            children: PropTypes.node,
            title: PropTypes.node,
            titleProps: PropTypes.object,
        };
    }
    catch (error) { }
}
//# sourceMappingURL=LayoutNavigationHeader.js.map