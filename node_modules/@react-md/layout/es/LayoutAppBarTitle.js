var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from "react";
import cn from "classnames";
import { AppBarTitle } from "@react-md/app-bar";
import { bem } from "@react-md/utils";
import { useLayoutConfig } from "./LayoutProvider";
import { isFullHeightLayout } from "./utils";
var styles = bem("rmd-layout-title");
/**
 * An extremely simple wrapper for the `AppBarTitle` that will automatically
 * apply an `id` and apply the correct margin for full-height layouts.
 */
export var LayoutAppBarTitle = forwardRef(function LayoutAppBarTitle(_a, ref) {
    var propId = _a.id, className = _a.className, children = _a.children, props = __rest(_a, ["id", "className", "children"]);
    var _b = useLayoutConfig(), baseId = _b.baseId, layout = _b.layout;
    var id = propId !== null && propId !== void 0 ? propId : baseId + "-title";
    return (React.createElement(AppBarTitle, __assign({}, props, { id: id, ref: ref, className: cn(styles({ offset: isFullHeightLayout(layout) }), className) }), children));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        LayoutAppBarTitle.propTypes = {
            id: PropTypes.string,
            className: PropTypes.string,
            children: PropTypes.node,
        };
    }
    catch (error) { }
}
//# sourceMappingURL=LayoutAppBarTitle.js.map