import React, { HTMLAttributes, Ref } from "react";
export interface VerticalDividerProps extends HTMLAttributes<HTMLDivElement> {
    /**
     * The max height for the vertical divider. This number **must** be greater
     * than 0 to work correctly.
     *
     * When the value is between 0 and 1, it will be used as a multiplier with the
     * parent element's height. When the value is greater than 1, it will be used
     * in `Math.min(parentElementHeight, maxHeight)`.
     */
    maxHeight?: number;
}
interface VerticalDividerHeight {
    ref: (instance: HTMLDivElement | null) => void;
    height: number | undefined;
}
/**
 * This is a small hook that is used to automatically create a vertical divider
 * based on the computed height of its parent element.
 *
 * @param maxHeight - The max height for the vertical divider. When the value is
 * between 0 and 1, it will be used as a percentage. Otherwise the smaller value
 * of parent element height and this will be used.
 */
export declare function useVerticalDividerHeight(maxHeight: number, forwardedRef?: Ref<HTMLDivElement | null> | undefined): VerticalDividerHeight;
/**
 * This component is used to create a vertical divider based on a parent
 * element's height. This is really only needed when the parent element **has no
 * defined height**.  If there is a defined height, this component is not worth
 * much as the height can be computed in css as normal. This really just fixes
 * the issue that the height would be set to `auto` (which computes to 0 most of
 * the time) when it is not set on a parent element.
 */
export declare const VerticalDivider: React.ForwardRefExoticComponent<VerticalDividerProps & React.RefAttributes<HTMLDivElement>>;
export {};
