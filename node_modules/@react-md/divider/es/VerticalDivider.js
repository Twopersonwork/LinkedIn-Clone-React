var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useCallback, useState, } from "react";
import { applyRef } from "@react-md/utils";
import { Divider } from "./Divider";
/**
 * This is a small hook that is used to automatically create a vertical divider
 * based on the computed height of its parent element.
 *
 * @param maxHeight - The max height for the vertical divider. When the value is
 * between 0 and 1, it will be used as a percentage. Otherwise the smaller value
 * of parent element height and this will be used.
 */
export function useVerticalDividerHeight(maxHeight, forwardedRef) {
    if (process.env.NODE_ENV !== "production" && maxHeight < 0) {
        throw new Error("The `maxHeight` for a vertical divider height must be greater than 0");
    }
    var _a = useState(undefined), height = _a[0], setHeight = _a[1];
    var ref = useCallback(function (instance) {
        applyRef(instance, forwardedRef);
        if (!instance || !instance.parentElement) {
            return;
        }
        var height = instance.parentElement.offsetHeight;
        if (maxHeight <= 1) {
            setHeight(height * maxHeight);
        }
        else {
            setHeight(Math.min(height, maxHeight));
        }
    }, [maxHeight, forwardedRef]);
    return { ref: ref, height: height };
}
/**
 * This component is used to create a vertical divider based on a parent
 * element's height. This is really only needed when the parent element **has no
 * defined height**.  If there is a defined height, this component is not worth
 * much as the height can be computed in css as normal. This really just fixes
 * the issue that the height would be set to `auto` (which computes to 0 most of
 * the time) when it is not set on a parent element.
 */
export var VerticalDivider = forwardRef(function VerticalDivider(_a, forwardedRef) {
    var style = _a.style, _b = _a.maxHeight, maxHeight = _b === void 0 ? 1 : _b, props = __rest(_a, ["style", "maxHeight"]);
    var _c = useVerticalDividerHeight(maxHeight, forwardedRef), ref = _c.ref, height = _c.height;
    return (React.createElement(Divider, __assign({}, props, { style: __assign(__assign({}, style), { height: height }), ref: ref, vertical: true })));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        VerticalDivider.propTypes = {
            style: PropTypes.object,
            maxHeight: PropTypes.number,
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            _validateMaxHeight: function (_a, _, componentName) {
                var _b = _a.maxHeight, maxHeight = _b === void 0 ? 1 : _b;
                if (maxHeight < 0) {
                    return new Error("The maxHeight prop for `" + componentName + "` must be a number greater " +
                        ("than 0, but received `" + maxHeight + "`."));
                }
                return null;
            },
        };
    }
    catch (e) { }
}
//# sourceMappingURL=VerticalDivider.js.map