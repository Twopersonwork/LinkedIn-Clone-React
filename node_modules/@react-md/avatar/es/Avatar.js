var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from "react";
import cn from "classnames";
import { bem } from "@react-md/utils";
var block = bem("rmd-avatar");
/**
 * An `Avatar` is generally used to represent objects or people within your app.
 * The avatar can consist of an image, an icon, or some text to display. When
 * the avatar is not an image, different themes can be applied to make the
 * avatar more unique.
 */
export var Avatar = forwardRef(function Avatar(_a, ref) {
    var _b;
    var className = _a.className, children = _a.children, src = _a.src, _c = _a.alt, alt = _c === void 0 ? "" : _c, _d = _a.color, color = _d === void 0 ? "" : _d, imgProps = _a.imgProps, referrerPolicy = _a.referrerPolicy, props = __rest(_a, ["className", "children", "src", "alt", "color", "imgProps", "referrerPolicy"]);
    var img;
    if (src || imgProps) {
        img = (React.createElement("img", __assign({ src: src, alt: alt, referrerPolicy: referrerPolicy }, imgProps, { className: cn(block("image"), imgProps === null || imgProps === void 0 ? void 0 : imgProps.className) })));
    }
    return (React.createElement("span", __assign({}, props, { ref: ref, className: cn(block((_b = {}, _b[color] = color, _b)), className) }),
        img,
        children));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        Avatar.propTypes = {
            alt: PropTypes.string,
            src: PropTypes.string,
            color: PropTypes.string,
            className: PropTypes.string,
            children: PropTypes.node,
            // Note: The MDN website has a lot more values, but this is what Typescript
            // says is valid at the time of writing this
            referrerPolicy: PropTypes.oneOf(["no-referrer", "origin", "unsafe-url"]),
            imgProps: PropTypes.object,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=Avatar.js.map