/**
 * Creates the `left` style value for an element that should be fixed to the
 * (outer) left of the container element. So the right bounds of the fixed
 * element will be equal to the left bounds of the container element (before the
 * xMargin is applied).
 * @internal
 */
export function getLeftCoord(_a) {
    var xMargin = _a.xMargin, elWidth = _a.elWidth, initialX = _a.initialX, containerRect = _a.containerRect;
    return (initialX !== null && initialX !== void 0 ? initialX : containerRect.left) - elWidth - xMargin;
}
/**
 * Creates the `left` style value for an element that should be fixed to the
 * inner-left of the container element. So the left bounds of both the container
 * and fixed elements will overlap (before the xMargin is applied)
 * @internal
 */
export function getInnerLeftCoord(_a) {
    var xMargin = _a.xMargin, initialX = _a.initialX, containerRect = _a.containerRect;
    return (initialX !== null && initialX !== void 0 ? initialX : containerRect.left) + xMargin;
}
/**
 * Creates the `left` style value for an element that should be fixed to the
 * center of the container element. So the center point of the fixed element
 * should be the center point of the container element.
 *
 * Note: Unlike all the other horizontal positioning logic, the center position
 * does not use the xMargin.
 * @internal
 */
export function getCenterXCoord(_a) {
    var elWidth = _a.elWidth, initialX = _a.initialX, containerRect = _a.containerRect;
    var containerCenter = containerRect.width / 2;
    var elementCenter = elWidth / 2;
    return (initialX !== null && initialX !== void 0 ? initialX : containerRect.left + containerCenter) - elementCenter;
}
/**
 * Creates the `left` style value for an element that should be fixed to the
 * inner-right of the container element. So the right bounds for both the
 * container and fixed elements will overlap (before the xMargin is applied).
 * @internal
 */
export function getInnerRightCoord(_a) {
    var xMargin = _a.xMargin, elWidth = _a.elWidth, initialX = _a.initialX, containerRect = _a.containerRect;
    return ((initialX !== null && initialX !== void 0 ? initialX : containerRect.left + containerRect.width) - elWidth - xMargin);
}
/**
 * Creates the `left` style value for an element that should be fixed to the
 * (outer) right of the container element. So the left bounds of the fixed
 * element will overlap with the right bounds of the container element (before
 * the xMargin is applied).
 * @internal
 */
export function getRightCoord(_a) {
    var xMargin = _a.xMargin, initialX = _a.initialX, containerRect = _a.containerRect;
    return (initialX !== null && initialX !== void 0 ? initialX : containerRect.left + containerRect.width) + xMargin;
}
/**
 * Creates the `top` style value for an element that should be fixed above the
 * container element. So the bottom bounds of the fixed element will overlap
 * with the top bounds of the container element (before the yMargin is applied).
 * @internal
 */
export function getAboveCoord(_a) {
    var yMargin = _a.yMargin, initialY = _a.initialY, elHeight = _a.elHeight, containerRect = _a.containerRect;
    return (initialY !== null && initialY !== void 0 ? initialY : containerRect.top) - elHeight - yMargin;
}
/**
 * Creates the `top` style value for an element that should be fixed to the top
 * of the container element. So the top bounds for both the container and fixed
 * elements will overlap (before the yMargin is applied).
 * @internal
 */
export function getTopCoord(_a) {
    var yMargin = _a.yMargin, initialY = _a.initialY, containerRect = _a.containerRect;
    return (initialY !== null && initialY !== void 0 ? initialY : containerRect.top) + yMargin;
}
/**
 * Creates the `top` style value for an element that should be fixed vertically
 * centered relative to the container element. So the vertical center point for
 * the fixed element should overlap the vertical center point of the container
 * element.
 *
 * Note: Unlike all the other vertical positioning logic, the center position
 * does not use the yMargin.
 */
export function getCenterYCoord(_a) {
    var elHeight = _a.elHeight, initialY = _a.initialY, containerRect = _a.containerRect;
    var containerCenter = containerRect.height / 2;
    var elementCenter = elHeight / 2;
    return (initialY !== null && initialY !== void 0 ? initialY : containerRect.top + containerCenter) - elementCenter;
}
/**
 * Creates the `top` style value for an element that should be fixed to the
 * bottom of the container element. So the top bounds of the fixed element
 * should overlap the bottom bounds of the container element (before the yMargin
 * is applied).
 * @internal
 */
export function getBottomCoord(_a) {
    var yMargin = _a.yMargin, initialY = _a.initialY, elHeight = _a.elHeight, containerRect = _a.containerRect;
    return ((initialY !== null && initialY !== void 0 ? initialY : containerRect.top + containerRect.height) - elHeight - yMargin);
}
/**
 * Creates the `top` style value for an element that should be fixed to the
 * bottom of the container element. So the bottom bounds of both the container
 * and fixed elements should overlap (before the yMargin is applied).
 * @internal
 */
export function getBelowCoord(_a) {
    var yMargin = _a.yMargin, initialY = _a.initialY, containerRect = _a.containerRect;
    return (initialY !== null && initialY !== void 0 ? initialY : containerRect.top + containerRect.height) + yMargin;
}
//# sourceMappingURL=getCoord.js.map