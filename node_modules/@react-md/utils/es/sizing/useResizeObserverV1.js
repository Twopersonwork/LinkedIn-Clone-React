var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { useEffect } from "react";
import { ResizeObserver } from "@juggle/resize-observer";
/**
 * @internal
 */
var isRefTarget = function (target) {
    return !!target &&
        typeof target.current !==
            "undefined";
};
/**
 * @internal
 */
var isFunctionTarget = function (target) {
    return typeof target === "function";
};
/**
 * A utility function to get the current resize observer element.
 *
 * @internal
 */
export function getResizeObserverTarget(target) {
    if (isRefTarget(target)) {
        return target.current;
    }
    if (isFunctionTarget(target)) {
        return target();
    }
    if (typeof target === "string") {
        return document.querySelector(target);
    }
    return target;
}
/**
 *
 * @internal
 */
export function isHeightChange(prevSize, nextSize) {
    return (!prevSize ||
        prevSize.height !== nextSize.height ||
        prevSize.scrollHeight !== nextSize.scrollHeight);
}
/**
 *
 * @internal
 */
export function isWidthChange(prevSize, nextSize) {
    return (!prevSize ||
        prevSize.width !== nextSize.width ||
        prevSize.scrollWidth !== nextSize.scrollWidth);
}
/**
 * @internal
 */
export var warnedOnce = {
    hook: false,
    comp: false,
};
/**
 * A hook that is used to trigger esize events when a target element is resized
 * via CSS or other changes.
 *
 * @param options - The resize observer options.
 * @deprecated 2.3.0 Use the new ref API instead
 */
export function useResizeObserverV1(_a) {
    var _b;
    var _c = _a.disableHeight, disableHeight = _c === void 0 ? false : _c, _d = _a.disableWidth, disableWidth = _d === void 0 ? false : _d, onResize = _a.onResize, target = _a.target;
    if (process.env.NODE_ENV !== "production") {
        var stack = (_b = new Error().stack) !== null && _b !== void 0 ? _b : "";
        var isComp = stack.includes("at ResizeObserver ");
        var key = (isComp ? "comp" : "hook");
        if (!warnedOnce[key]) {
            warnedOnce[key] = true;
            var message = void 0;
            if (isComp) {
                message = "The `ResizeObserver` component has been deprecated in favor of the new `useResizeObserver` hook using the `ref` API.";
            }
            else {
                message = "The `useResizeObserver` hook has deprecated the ability to use an object containing a `target` and `onResize` callback.";
                message = message + " Switch to the new `ref` API by setting the `onResize` callback as the first argument.";
            }
            // eslint-disable-next-line no-console
            console.warn(message + " Please see https://github.com/mlaursen/react-md/pull/940 for more details.");
        }
    }
    useEffect(function () {
        if (disableHeight && disableWidth) {
            return;
        }
        var resizeTarget = getResizeObserverTarget(target);
        if (!resizeTarget) {
            return;
        }
        var prevSize;
        var observer = new ResizeObserver(function (entries) {
            for (var i = 0; i < entries.length; i += 1) {
                var entry = entries[i];
                var target_1 = entry.target;
                var _a = entry.contentRect, height = _a.height, width = _a.width;
                var scrollHeight = target_1.scrollHeight, scrollWidth = target_1.scrollWidth;
                var nextSize = {
                    height: height,
                    width: width,
                    scrollHeight: scrollHeight,
                    scrollWidth: scrollWidth,
                };
                var isNewHeight = isHeightChange(prevSize, nextSize);
                var isNewWidth = isWidthChange(prevSize, nextSize);
                prevSize = nextSize;
                if ((isNewHeight && !disableHeight) || (isNewWidth && !disableWidth)) {
                    onResize(__assign(__assign({}, nextSize), { element: target_1 }));
                }
            }
        });
        observer.observe(resizeTarget);
        return function () {
            observer.unobserve(resizeTarget);
            observer.disconnect();
        };
    }, [target, onResize, disableHeight, disableWidth]);
}
//# sourceMappingURL=useResizeObserverV1.js.map