import React, { useCallback, useState } from "react";
import { useResizeObserver } from "./useResizeObserver";
/**
 * The resize observer is used to track the size changes for a single element in
 * a page. This is a bit different than a normal `ResizeListener` since it does
 * not rely on entire page size changes.
 *
 * @deprecated 2.3.0 You should really use the `useResizeObserver` hook instead
 * since it offers a lot more flexibility and functionality than this component.
 */
export function ResizeObserver(_a) {
    var _b = _a.disableHeight, disableHeight = _b === void 0 ? false : _b, _c = _a.disableWidth, disableWidth = _c === void 0 ? false : _c, className = _a.className, _d = _a.component, Component = _d === void 0 ? "span" : _d, target = _a.target, onResize = _a.onResize;
    var _e = useState(null), element = _e[0], setElement = _e[1];
    useResizeObserver({
        disableHeight: disableHeight,
        disableWidth: disableWidth,
        target: target || element,
        onResize: onResize,
    });
    var ref = useCallback(function (instance) {
        if (!instance) {
            setElement(null);
            return;
        }
        setElement(instance.parentElement);
    }, []);
    if (target === null || target) {
        return null;
    }
    return React.createElement(Component, { className: className, "aria-hidden": "true", ref: ref });
}
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        ResizeObserver.propTypes = {
            disableHeight: PropTypes.bool,
            disableWidth: PropTypes.bool,
            className: PropTypes.string,
            component: PropTypes.oneOfType([
                // workaround for Typescript since PropTypes.string throws WeakValidationMap error
                // but this component only supports string components
                PropTypes.string,
            ]),
            target: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.func,
                PropTypes.object,
            ]),
        };
    }
    catch (e) { }
}
//# sourceMappingURL=ResizeObserver.js.map