var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { IncrementMovementKey, JumpMovementKey } from "./types";
/**
 * A keyboard movement configuration preset for handling vertical menu
 * movements.
 */
export var VERTICAL_MENU = {
    loopable: true,
    searchable: true,
    incrementKeys: [IncrementMovementKey.ArrowDown],
    decrementKeys: [IncrementMovementKey.ArrowUp],
    jumpToFirstKeys: [JumpMovementKey.Home],
    jumpToLastKeys: [JumpMovementKey.End],
};
/**
 * A keyboard movement configuration preset for handling horizontal menu
 * movements.
 */
export var HORIZONTAL_MENU = __assign(__assign({}, VERTICAL_MENU), { incrementKeys: [IncrementMovementKey.ArrowRight], decrementKeys: [IncrementMovementKey.ArrowLeft] });
/**
 * A keyboard movement configuration preset for handling vertical listbox
 * movements.
 */
export var VERTICAL_LISTBOX = __assign(__assign({}, VERTICAL_MENU), { loopable: false });
/**
 * A keyboard movement configuration preset for handling horizontal listbox
 * movements.
 */
export var HORIZONTAL_LISTBOX = __assign(__assign({}, HORIZONTAL_MENU), { loopable: false });
/**
 * A keyboard movement configuration preset for handling vertical combobox
 * movements.
 */
export var VERTICAL_COMBOBOX = {
    incrementKeys: [IncrementMovementKey.ArrowDown],
    decrementKeys: [IncrementMovementKey.ArrowUp],
    // don't want to be able to jump since home and end should do default behavior
    // in text field
    jumpToFirstKeys: [],
    jumpToLastKeys: [],
    searchable: false,
};
/**
 * A keyboard movement configuration preset for handling horizontal combobox
 * movements.
 */
export var HORIZONTAL_COMBOBOX = {
    incrementKeys: [IncrementMovementKey.ArrowRight],
    decrementKeys: [IncrementMovementKey.ArrowLeft],
    // don't want to be able to jump since home and end should do default behavior
    // in text field
    jumpToFirstKeys: [],
    jumpToLastKeys: [],
    searchable: false,
};
export var VERTICAL_TREE = {
    incrementKeys: [IncrementMovementKey.ArrowDown],
    decrementKeys: [IncrementMovementKey.ArrowUp],
    jumpToFirstKeys: [JumpMovementKey.Home, JumpMovementKey.ControlShiftHome],
    jumpToLastKeys: [JumpMovementKey.End, JumpMovementKey.ControlShiftEnd],
    loopable: true,
    searchable: true,
};
export var HORIZONTAL_TREE = {
    incrementKeys: [IncrementMovementKey.ArrowRight],
    decrementKeys: [IncrementMovementKey.ArrowLeft],
    jumpToFirstKeys: [JumpMovementKey.Home, JumpMovementKey.ControlShiftHome],
    jumpToLastKeys: [JumpMovementKey.End, JumpMovementKey.ControlShiftEnd],
    loopable: true,
    searchable: true,
};
export var HORIZONTAL_TABS = {
    incrementKeys: [IncrementMovementKey.ArrowRight],
    decrementKeys: [IncrementMovementKey.ArrowLeft],
    jumpToFirstKeys: [JumpMovementKey.Home],
    jumpToLastKeys: [JumpMovementKey.End],
    loopable: true,
    searchable: false,
};
export var VERTICAL_TABS = {
    incrementKeys: [IncrementMovementKey.ArrowDown],
    decrementKeys: [IncrementMovementKey.ArrowUp],
    jumpToFirstKeys: [JumpMovementKey.Home],
    jumpToLastKeys: [JumpMovementKey.End],
    loopable: true,
    searchable: false,
};
//# sourceMappingURL=presets.js.map