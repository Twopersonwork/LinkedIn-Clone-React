import { MutableRefObject } from "react";
/**
 * A function that will return the resize observer target element. This should
 * return an HTMLElement or null.
 */
declare type GetTarget<E extends HTMLElement = HTMLElement> = () => E | null;
declare type RefTarget<E extends HTMLElement = HTMLElement> = MutableRefObject<E | null>;
/**
 * The target element for the resize obsever. This can be one of:
 *
 * - null
 * - HTMLElement
 * - a document.querySelector string
 * - a ref with `{ current: null | HTMLElement }`
 * - a function that returns
 *   - null
 *   - HTMLElement
 *
 * Whenever the target is resolved as `null`, the observer will be disabled.
 */
export declare type ResizeObserverTarget<E extends HTMLElement = HTMLElement> = null | HTMLElement | string | RefTarget<E> | GetTarget<E>;
/**
 * A utility function to get the current resize observer element.
 *
 * @internal
 */
export declare function getResizeObserverTarget(target: ResizeObserverTarget): HTMLElement | null;
/**
 *
 * @internal
 */
export declare function isHeightChange(prevSize: ElementSize | undefined, nextSize: ElementSize): boolean;
/**
 *
 * @internal
 */
export declare function isWidthChange(prevSize: ElementSize | undefined, nextSize: ElementSize): boolean;
interface ElementSize {
    /**
     * The height for the element that was changed.
     */
    height: number;
    /**
     * The width for the element that was changed.
     */
    width: number;
    /**
     * The scroll height for the element that was changed.
     */
    scrollHeight: number;
    /**
     * The scroll height for the element that was changed.
     */
    scrollWidth: number;
}
/**
 * The data that is provided whenever an observed element changes size.
 */
export interface ObservedResizeData extends ElementSize {
    /**
     * The element that was changed due to an observered resize event.
     */
    element: HTMLElement;
}
/**
 * A type that can be used to strongly type a callback function for a resize
 * observe onResize function. It's really just a wrapper for the main
 * `ObserverableResizeEvent`
 */
export declare type ObservedResizeEventHandler = (event: ObservedResizeData) => void;
export interface UseResizeObserverV1Options<E extends HTMLElement = HTMLElement> {
    target: ResizeObserverTarget<E>;
    onResize: ObservedResizeEventHandler;
    disableHeight?: boolean;
    disableWidth?: boolean;
}
/**
 * @internal
 */
export declare const warnedOnce: {
    hook: boolean;
    comp: boolean;
};
/**
 * A hook that is used to trigger esize events when a target element is resized
 * via CSS or other changes.
 *
 * @param options - The resize observer options.
 * @deprecated 2.3.0 Use the new ref API instead
 */
export declare function useResizeObserverV1<E extends HTMLElement>({ disableHeight, disableWidth, onResize, target, }: UseResizeObserverV1Options<E>): void;
export {};
