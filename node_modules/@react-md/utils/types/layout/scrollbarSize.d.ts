declare type SizingType = "height" | "width";
/**
 * This is used to reset the cached value for each test and verify the cached
 * behavior is working
 * @internal
 */
export declare const reset: () => void;
/**
 * This will return the scrollbar size for a specific OS by creating a
 * temporary element to compare the height/width between it's inner element and
 * it's own height/width when scrollbars are enabled. This is useful when your
 * height/width calculations need to exclude scrollbars since they are included
 * by default but content can't be shown underneath them for for static
 * elements.
 *
 * Note: This will return `0` on Mac OS with the default "Only show scrollbars
 * when scrolling" which is to be expected. These scrollbars overlay the content
 * and actually don't take up height/width real estate.
 *
 * @see https://stackoverflow.com/a/13382873
 * @param type - Either the string "height" or "width" to determine which size
 * to get
 * @param forced - Boolean if the scrollbar height/width should be force
 * updated. When this is false, the "cached" value will be returned immediately
 * instead
 * @returns the current scrollbar width or -1 if running this on the server
 */
export declare function scrollbarSize(type?: SizingType, forced?: boolean): number;
export {};
