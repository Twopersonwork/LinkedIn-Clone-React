import { MutableRefObject } from "react";
declare type CurrentValueRef<T> = MutableRefObject<T>;
declare type SetValue<T> = (nextValue: T) => void;
declare type ResetValue = () => void;
declare type ReturnValue<T> = [CurrentValueRef<T>, SetValue<T>, ResetValue];
/**
 * Creates a temporary value that gets reset every `x`ms back to the provided
 * default value. This is useful when doing keyboard searching or other
 * interactions.
 *
 * NOTE: This does not force a re-render when the value changes and instead uses
 * a ref value instead.
 *
 * @typeParam T - the type for the value
 * @param defaultValue - The default value to use. Each time the reset timeout
 * is triggered, this value will be set again.
 * @param resetTime - The amount of time before the value is reset back to the
 * default value
 */
export declare function useTempValue<T>(defaultValue: T, resetTime?: number): ReturnValue<T>;
export {};
