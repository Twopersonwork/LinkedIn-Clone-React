"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InteractionModeListener = exports.UserInteractionModeListener = exports.useIsUserInteractionMode = exports.useUserInteractionMode = void 0;
var react_1 = __importStar(require("react"));
var useInteractionMode_1 = require("./useInteractionMode");
/**
 * @internal
 */
var modeContext = react_1.createContext("mouse");
/**
 * @internal
 */
var parentContext = react_1.createContext(false);
/**
 * @internal
 */
var UserInteractionModeProvider = modeContext.Provider;
/**
 * @internal
 */
var ParentProvider = parentContext.Provider;
/**
 * Returns the current user interaction mode.
 *
 * @returns {@link UserInteractionMode}
 */
function useUserInteractionMode() {
    return react_1.useContext(modeContext);
}
exports.useUserInteractionMode = useUserInteractionMode;
/**
 * Example:
 *
 * ```ts
 * const isKeyboard = useIsUserInteractionMode("keyboard");
 * // do stuff if keyboard only
 * ```
 *
 * @param mode - The {@link UserInteractionMode} to check against.
 * @returns `true` if the current user interaction mode matches the provided
 * mode.
 */
function useIsUserInteractionMode(mode) {
    return useInteractionMode_1.useInteractionMode() === mode;
}
exports.useIsUserInteractionMode = useIsUserInteractionMode;
/**
 * This component is used to determine how the user is current interacting with
 * your app as well as modifying the `document.body`'s `className` with the
 * current mode. This is what allows the `rmd-utils-phone-only`,
 * `rmd-utils-keyboard-only`, and `rmd-utils-mouse-only` mixins to work.
 *
 * @remarks \@since 2.6.0 Renamed from `InteractionModeListener`
 * @throws When this component has been mounted multiple times in your app.
 */
function UserInteractionModeListener(_a) {
    var children = _a.children;
    var mode = useInteractionMode_1.useInteractionMode();
    if (react_1.useContext(parentContext)) {
        throw new Error("Mounted multiple `UserInteractionModeListener` components.");
    }
    return (react_1.default.createElement(UserInteractionModeProvider, { value: mode },
        react_1.default.createElement(ParentProvider, { value: true }, children)));
}
exports.UserInteractionModeListener = UserInteractionModeListener;
/**
 * @deprecated Use the `UserInteractionModeListener` component instead.
 * @remarks \@since 2.6.0
 */
exports.InteractionModeListener = UserInteractionModeListener;
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    modeContext.displayName = "UserInteractionMode";
    parentContext.displayName = "MultiUserInteractionMode";
    try {
        var PropTypes = require("prop-types");
        UserInteractionModeListener.propTypes = {
            children: PropTypes.node.isRequired,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=UserInteractionModeListener.js.map