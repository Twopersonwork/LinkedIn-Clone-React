"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useEnsuredRef = void 0;
var react_1 = require("react");
var applyRef_1 = require("./applyRef");
/**
 * This is mostly an enternal hook that allows for an optional ref (normally
 * from props or hook options) to be merged with a hook's required `ref`. This
 * will return a MutableRefObject used for DOM manipulation in a custom hook
 * followed by a ref callback function that should be passed to the DOM node
 * that will ensure that both the optional `propRef` and hook ref are updated.
 *
 * @remarks \@since 2.3.0
 */
function useEnsuredRef(propRef) {
    var ref = react_1.useRef(null);
    var refHandler = react_1.useCallback(function (instance) {
        applyRef_1.applyRef(instance, propRef);
        ref.current = instance;
    }, [propRef]);
    return [ref, refHandler];
}
exports.useEnsuredRef = useEnsuredRef;
//# sourceMappingURL=useEnsuredRef.js.map