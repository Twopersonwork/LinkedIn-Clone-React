"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTempValue = void 0;
var react_1 = require("react");
/**
 * Creates a temporary value that gets reset every `x`ms back to the provided
 * default value. This is useful when doing keyboard searching or other
 * interactions.
 *
 * NOTE: This does not force a re-render when the value changes and instead uses
 * a ref value instead.
 *
 * @typeParam T - the type for the value
 * @param defaultValue - The default value to use. Each time the reset timeout
 * is triggered, this value will be set again.
 * @param resetTime - The amount of time before the value is reset back to the
 * default value
 */
function useTempValue(defaultValue, resetTime) {
    if (resetTime === void 0) { resetTime = 500; }
    var value = react_1.useRef(defaultValue);
    var timeout = react_1.useRef();
    var resetValue = react_1.useCallback(function () {
        window.clearTimeout(timeout.current);
        value.current = defaultValue;
    }, [defaultValue]);
    var setValue = react_1.useCallback(function (nextValue) {
        value.current = nextValue;
        window.clearTimeout(timeout.current);
        timeout.current = window.setTimeout(resetValue, resetTime);
    }, [resetTime, resetValue]);
    return [value, setValue, resetValue];
}
exports.useTempValue = useTempValue;
//# sourceMappingURL=useTempValue.js.map