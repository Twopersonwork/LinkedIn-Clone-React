"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCloseOnOutsideClick = exports.getElement = void 0;
var react_1 = require("react");
var containsElement_1 = require("./containsElement");
/**
 * Gets the HTMLElement or null from a provided RefObject or HTMLElement/null
 * @internal
 */
function getElement(element) {
    if (!element) {
        return null;
    }
    if (typeof element.current !== "undefined") {
        return element.current;
    }
    return element;
}
exports.getElement = getElement;
/**
 * Triggers a callback function when another element in the page is clicked that
 * is outside of the provided element. This is generally used for closing
 * temporary elements when something else within the page has been clicked.
 *
 * The callback will be provided the current `element` as well as the click
 * target if additional logic should be applied before closing.
 *
 * @typeParam E - The type of element
 */
function useCloseOnOutsideClick(_a) {
    var enabled = _a.enabled, element = _a.element, onOutsideClick = _a.onOutsideClick;
    react_1.useEffect(function () {
        if (!enabled) {
            return;
        }
        function handleClick(event) {
            var target = event.target;
            var el = getElement(element);
            if (!containsElement_1.containsElement(el, target)) {
                onOutsideClick(el, target, containsElement_1.containsElement);
            }
        }
        window.addEventListener("click", handleClick);
        return function () {
            window.removeEventListener("click", handleClick);
        };
    }, [enabled, element, onOutsideClick]);
}
exports.useCloseOnOutsideClick = useCloseOnOutsideClick;
//# sourceMappingURL=useCloseOnOutsideClick.js.map