"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.VERTICAL_TABS = exports.HORIZONTAL_TABS = exports.HORIZONTAL_TREE = exports.VERTICAL_TREE = exports.HORIZONTAL_COMBOBOX = exports.VERTICAL_COMBOBOX = exports.HORIZONTAL_LISTBOX = exports.VERTICAL_LISTBOX = exports.HORIZONTAL_MENU = exports.VERTICAL_MENU = void 0;
var types_1 = require("./types");
/**
 * A keyboard movement configuration preset for handling vertical menu
 * movements.
 */
exports.VERTICAL_MENU = {
    loopable: true,
    searchable: true,
    incrementKeys: [types_1.IncrementMovementKey.ArrowDown],
    decrementKeys: [types_1.IncrementMovementKey.ArrowUp],
    jumpToFirstKeys: [types_1.JumpMovementKey.Home],
    jumpToLastKeys: [types_1.JumpMovementKey.End],
};
/**
 * A keyboard movement configuration preset for handling horizontal menu
 * movements.
 */
exports.HORIZONTAL_MENU = __assign(__assign({}, exports.VERTICAL_MENU), { incrementKeys: [types_1.IncrementMovementKey.ArrowRight], decrementKeys: [types_1.IncrementMovementKey.ArrowLeft] });
/**
 * A keyboard movement configuration preset for handling vertical listbox
 * movements.
 */
exports.VERTICAL_LISTBOX = __assign(__assign({}, exports.VERTICAL_MENU), { loopable: false });
/**
 * A keyboard movement configuration preset for handling horizontal listbox
 * movements.
 */
exports.HORIZONTAL_LISTBOX = __assign(__assign({}, exports.HORIZONTAL_MENU), { loopable: false });
/**
 * A keyboard movement configuration preset for handling vertical combobox
 * movements.
 */
exports.VERTICAL_COMBOBOX = {
    incrementKeys: [types_1.IncrementMovementKey.ArrowDown],
    decrementKeys: [types_1.IncrementMovementKey.ArrowUp],
    // don't want to be able to jump since home and end should do default behavior
    // in text field
    jumpToFirstKeys: [],
    jumpToLastKeys: [],
    searchable: false,
};
/**
 * A keyboard movement configuration preset for handling horizontal combobox
 * movements.
 */
exports.HORIZONTAL_COMBOBOX = {
    incrementKeys: [types_1.IncrementMovementKey.ArrowRight],
    decrementKeys: [types_1.IncrementMovementKey.ArrowLeft],
    // don't want to be able to jump since home and end should do default behavior
    // in text field
    jumpToFirstKeys: [],
    jumpToLastKeys: [],
    searchable: false,
};
exports.VERTICAL_TREE = {
    incrementKeys: [types_1.IncrementMovementKey.ArrowDown],
    decrementKeys: [types_1.IncrementMovementKey.ArrowUp],
    jumpToFirstKeys: [types_1.JumpMovementKey.Home, types_1.JumpMovementKey.ControlShiftHome],
    jumpToLastKeys: [types_1.JumpMovementKey.End, types_1.JumpMovementKey.ControlShiftEnd],
    loopable: true,
    searchable: true,
};
exports.HORIZONTAL_TREE = {
    incrementKeys: [types_1.IncrementMovementKey.ArrowRight],
    decrementKeys: [types_1.IncrementMovementKey.ArrowLeft],
    jumpToFirstKeys: [types_1.JumpMovementKey.Home, types_1.JumpMovementKey.ControlShiftHome],
    jumpToLastKeys: [types_1.JumpMovementKey.End, types_1.JumpMovementKey.ControlShiftEnd],
    loopable: true,
    searchable: true,
};
exports.HORIZONTAL_TABS = {
    incrementKeys: [types_1.IncrementMovementKey.ArrowRight],
    decrementKeys: [types_1.IncrementMovementKey.ArrowLeft],
    jumpToFirstKeys: [types_1.JumpMovementKey.Home],
    jumpToLastKeys: [types_1.JumpMovementKey.End],
    loopable: true,
    searchable: false,
};
exports.VERTICAL_TABS = {
    incrementKeys: [types_1.IncrementMovementKey.ArrowDown],
    decrementKeys: [types_1.IncrementMovementKey.ArrowUp],
    jumpToFirstKeys: [types_1.JumpMovementKey.Home],
    jumpToLastKeys: [types_1.JumpMovementKey.End],
    loopable: true,
    searchable: false,
};
//# sourceMappingURL=presets.js.map