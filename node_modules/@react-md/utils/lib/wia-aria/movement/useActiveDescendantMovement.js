"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useActiveDescendantMovement = void 0;
var react_1 = require("react");
var scrollIntoView_1 = require("../../scrollIntoView");
var utils_1 = require("../../search/utils");
var useKeyboardMovement_1 = require("./useKeyboardMovement");
var utils_2 = require("./utils");
/**
 * This hook allows for custom keyboard "focus" movement using the
 * `aria-activedescendant` movement pattern. This is generally used when the DOM
 * focus shouldn't actually change from the container element (like listboxes)
 * but you still need to indicate that another element is "focused" due to a key
 * press.
 *
 * To use this hook, you'll want to update the container element of all the
 * items to have an `aria-activedescendant={activeId}` attribute and
 * `onKeyDown={onKeyDown}` that are provided by this hook. The
 * `aria-activedescendant` will help screen readers known what element is
 * "focused" since the container element should never really lose focus during
 * these keyboard movement events.  Finally, you'll want to update each item
 * have an id that is the result of `getItem(baseId, index)` so that it matches
 * the `aria-activedescendant` value and then apply `ref={itemRefs[i]}`.
 * Unfortunately, this means that all the child items **must** either be an
 * HTMLElement or the ref is forwarded down to the HTMLElement.
 *
 * The `itemRefs` **must** be applied so that a new "focused" item can be
 * scrolled into view as needed.
 *
 * @typeParam D - The type of each data item within the items list.
 * @typeParam CE - The HTMLElement type of the container element that handles
 * the custom keyboard movement.
 * @typeParam IE - The HTMLElement type of each item within the container
 * element that can be focusable.
 */
function useActiveDescendantMovement(_a) {
    var baseId = _a.baseId, _b = _a.getId, getId = _b === void 0 ? utils_2.getItemId : _b, _c = _a.defaultFocusedIndex, defaultFocusedIndex = _c === void 0 ? -1 : _c, items = _a.items, onChange = _a.onChange, _d = _a.getItemValue, getItemValue = _d === void 0 ? utils_1.DEFAULT_GET_ITEM_VALUE : _d, _e = _a.valueKey, valueKey = _e === void 0 ? utils_1.DEFAULT_VALUE_KEY : _e, onKeyDown = _a.onKeyDown, onEnter = _a.onEnter, onSpace = _a.onSpace, options = __rest(_a, ["baseId", "getId", "defaultFocusedIndex", "items", "onChange", "getItemValue", "valueKey", "onKeyDown", "onEnter", "onSpace"]);
    var _f = react_1.useState(defaultFocusedIndex), focusedIndex = _f[0], setFocusedIndex = _f[1];
    var activeId = focusedIndex !== -1 ? getId(baseId, focusedIndex) : "";
    var _g = useKeyboardMovement_1.useKeyboardMovement(__assign(__assign({}, options), { valueKey: valueKey,
        getItemValue: getItemValue,
        focusedIndex: focusedIndex,
        items: items,
        onChange: function (data, itemRefs) {
            if (onChange) {
                onChange(data, itemRefs);
            }
            var index = data.index, target = data.target;
            var item = itemRefs[index] && itemRefs[index].current;
            if (item && target && target.scrollHeight > target.offsetHeight) {
                scrollIntoView_1.scrollIntoView(target, item);
            }
            setFocusedIndex(index);
        },
        onKeyDown: function (event) {
            if (onKeyDown) {
                onKeyDown(event);
            }
            var ref = (itemRefs[focusedIndex] && itemRefs[focusedIndex].current) || null;
            if (onEnter && event.key === "Enter") {
                onEnter(focusedIndex, ref);
            }
            else if (onSpace && event.key === " ") {
                event.preventDefault();
                onSpace(focusedIndex, ref);
            }
        } })), itemRefs = _g[0], handleKeyDown = _g[1];
    return {
        activeId: activeId,
        itemRefs: itemRefs,
        onKeyDown: handleKeyDown,
        focusedIndex: focusedIndex,
        setFocusedIndex: setFocusedIndex,
    };
}
exports.useActiveDescendantMovement = useActiveDescendantMovement;
//# sourceMappingURL=useActiveDescendantMovement.js.map