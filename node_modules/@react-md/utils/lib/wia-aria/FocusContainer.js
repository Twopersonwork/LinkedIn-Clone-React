"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FocusContainer = void 0;
var react_1 = __importStar(require("react"));
var useEnsuredRef_1 = require("../useEnsuredRef");
var useFocusOnMount_1 = require("./useFocusOnMount");
var usePreviousFocus_1 = require("./usePreviousFocus");
var useTabFocusWrap_1 = require("./useTabFocusWrap");
/**
 * The `FocusContainer` is a wrapper for a few of the accessibility hooks to
 * maintain focus within an element.
 */
exports.FocusContainer = react_1.forwardRef(function FocusContainer(_a, forwardedRef) {
    var children = _a.children, onKeyDown = _a.onKeyDown, _b = _a.component, Component = _b === void 0 ? "div" : _b, _c = _a.defaultFocus, defaultFocus = _c === void 0 ? "first" : _c, _d = _a.disableFocusCache, disableFocusCache = _d === void 0 ? false : _d, _e = _a.disableFocusOnMount, disableFocusOnMount = _e === void 0 ? false : _e, _f = _a.disableFocusOnMountScroll, disableFocusOnMountScroll = _f === void 0 ? false : _f, _g = _a.disableFocusOnUnmount, disableFocusOnUnmount = _g === void 0 ? false : _g, _h = _a.disableTabFocusWrap, disableTabFocusWrap = _h === void 0 ? false : _h, _j = _a.unmountFocusFallback, unmountFocusFallback = _j === void 0 ? "" : _j, props = __rest(_a, ["children", "onKeyDown", "component", "defaultFocus", "disableFocusCache", "disableFocusOnMount", "disableFocusOnMountScroll", "disableFocusOnUnmount", "disableTabFocusWrap", "unmountFocusFallback"]);
    var _k = useEnsuredRef_1.useEnsuredRef(forwardedRef), ref = _k[0], refHandler = _k[1];
    usePreviousFocus_1.usePreviousFocus(disableFocusOnUnmount, unmountFocusFallback);
    useFocusOnMount_1.useFocusOnMount(ref, defaultFocus, disableFocusOnMountScroll, false, disableFocusOnMount);
    var handleKeyDown = useTabFocusWrap_1.useTabFocusWrap({
        disabled: disableTabFocusWrap,
        disableFocusCache: disableFocusCache,
        onKeyDown: onKeyDown,
    });
    return (react_1.default.createElement(Component, __assign({}, props, { onKeyDown: handleKeyDown, ref: refHandler }), children));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        exports.FocusContainer.propTypes = {
            disableFocusCache: PropTypes.bool,
            disableFocusOnMount: PropTypes.bool,
            disableFocusOnUnmount: PropTypes.bool,
            disableTabFocusWrap: PropTypes.bool,
            defaultFocus: PropTypes.oneOfType([
                PropTypes.oneOf(["first", "last"]),
                PropTypes.string,
            ]),
            component: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.func,
                PropTypes.object,
            ]),
            unmountFocusFallback: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.func,
                PropTypes.object,
            ]),
            children: PropTypes.node,
            onKeyDown: PropTypes.func,
            disableFocusOnMountScroll: PropTypes.bool,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=FocusContainer.js.map