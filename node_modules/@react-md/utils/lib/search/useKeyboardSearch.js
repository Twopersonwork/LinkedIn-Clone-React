"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useKeyboardSearch = void 0;
var react_1 = require("react");
var useTempValue_1 = require("../useTempValue");
var findMatchIndex_1 = require("./findMatchIndex");
var utils_1 = require("./utils");
/**
 * Adds the accessibility functionality to search a list of items as the user
 * types to trigger `aria-activedescendant` focus or manual DOM focus events.
 */
function useKeyboardSearch(_a) {
    var items = _a.items, onChange = _a.onChange, onKeyDown = _a.onKeyDown, _b = _a.resetTime, resetTime = _b === void 0 ? utils_1.DEFAULT_SEARCH_RESET_TIME : _b, searchIndex = _a.searchIndex, _c = _a.valueKey, valueKey = _c === void 0 ? utils_1.DEFAULT_VALUE_KEY : _c, _d = _a.getItemValue, getItemValue = _d === void 0 ? utils_1.DEFAULT_GET_ITEM_VALUE : _d, _e = _a.findMatchIndex, findMatchIndex = _e === void 0 ? findMatchIndex_1.findMatchIndex : _e;
    var _f = useTempValue_1.useTempValue("", resetTime), value = _f[0], setValue = _f[1];
    var values = react_1.useMemo(function () { return items.map(function (item) { return getItemValue(item, valueKey); }); }, [items, getItemValue, valueKey]);
    var handleKeyDown = react_1.useCallback(function (event) {
        if (onKeyDown) {
            onKeyDown(event);
        }
        var key = event.key, altKey = event.altKey, ctrlKey = event.ctrlKey, metaKey = event.metaKey;
        if (altKey ||
            ctrlKey ||
            metaKey ||
            key.length > 1 ||
            (!value.current && key === " ")) {
            // might need to change this later if other languages have non-meta keys
            // that are more than 1 letter
            return;
        }
        var nextValue = key;
        if (value.current !== key) {
            nextValue = "" + value.current + key;
        }
        setValue(nextValue);
        var index = findMatchIndex(nextValue, values, searchIndex, true);
        // don't want to trigger change events if the search didn't match anything
        // since you normally don't really care about failed matches
        if (index === searchIndex || index === -1) {
            return;
        }
        var data = {
            index: index,
            item: items[index],
            items: items,
            query: nextValue,
            target: event.currentTarget,
        };
        onChange(data);
    }, [
        searchIndex,
        findMatchIndex,
        items,
        onChange,
        onKeyDown,
        setValue,
        value,
        values,
    ]);
    return handleKeyDown;
}
exports.useKeyboardSearch = useKeyboardSearch;
//# sourceMappingURL=useKeyboardSearch.js.map