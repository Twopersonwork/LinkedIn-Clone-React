"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppSizeListener = void 0;
var react_1 = __importStar(require("react"));
var constants_1 = require("./constants");
var useAppSize_1 = require("./useAppSize");
var useAppSizeMedia_1 = require("./useAppSizeMedia");
/**
 * This component should be mounted near the top of your app as it will keep
 * track of the current app size based on the provided breakpoint widths.
 */
function AppSizeListener(_a) {
    var children = _a.children, onChange = _a.onChange, _b = _a.phoneMaxWidth, phoneMaxWidth = _b === void 0 ? constants_1.DEFAULT_PHONE_MAX_WIDTH : _b, _c = _a.tabletMinWidth, tabletMinWidth = _c === void 0 ? constants_1.DEFAULT_TABLET_MIN_WIDTH : _c, _d = _a.tabletMaxWidth, tabletMaxWidth = _d === void 0 ? constants_1.DEFAULT_TABLET_MAX_WIDTH : _d, _e = _a.desktopMinWidth, desktopMinWidth = _e === void 0 ? constants_1.DEFAULT_DESKTOP_MIN_WIDTH : _e, _f = _a.desktopLargeMinWidth, desktopLargeMinWidth = _f === void 0 ? constants_1.DEFAULT_DESKTOP_LARGE_MIN_WIDTH : _f, _g = _a.defaultSize, defaultSize = _g === void 0 ? useAppSizeMedia_1.DEFAULT_APP_SIZE : _g;
    var appSize = useAppSizeMedia_1.useAppSizeMedia({
        phoneMaxWidth: phoneMaxWidth,
        tabletMaxWidth: tabletMaxWidth,
        tabletMinWidth: tabletMinWidth,
        desktopMinWidth: desktopMinWidth,
        desktopLargeMinWidth: desktopLargeMinWidth,
        defaultSize: defaultSize,
    });
    var lastValue = react_1.useRef(appSize);
    react_1.useEffect(function () {
        // trigger the onChange prop on mount only if there is a difference between
        // the defaultSize and the mounted size.
        if (onChange &&
            (defaultSize.isPhone !== appSize.isPhone ||
                defaultSize.isTablet !== appSize.isTablet ||
                defaultSize.isDesktop !== appSize.isDesktop ||
                defaultSize.isLargeDesktop !== appSize.isLargeDesktop ||
                defaultSize.isLandscape !== appSize.isLandscape)) {
            onChange(appSize, defaultSize);
        }
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);
    react_1.useEffect(function () {
        if (lastValue.current !== appSize) {
            if (onChange) {
                onChange(appSize, lastValue.current);
            }
            lastValue.current = appSize;
        }
    });
    var value = react_1.useMemo(function () { return (__assign(__assign({}, appSize), { __initialized: true })); }, [appSize]);
    return (react_1.default.createElement(useAppSize_1.AppSizeContext.Provider, { value: value }, children));
}
exports.AppSizeListener = AppSizeListener;
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        var querySize = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);
        AppSizeListener.propTypes = {
            children: PropTypes.node.isRequired,
            onChange: PropTypes.func,
            phoneMaxWidth: querySize,
            tabletMinWidth: querySize,
            tabletMaxWidth: querySize,
            desktopMinWidth: querySize,
            desktopLargeMinWidth: querySize,
            defaultSize: PropTypes.shape({
                isPhone: PropTypes.bool.isRequired,
                isTablet: PropTypes.bool.isRequired,
                isDesktop: PropTypes.bool.isRequired,
                isLargeDesktop: PropTypes.bool.isRequired,
                isLandscape: PropTypes.bool.isRequired,
            }),
        };
    }
    catch (e) { }
}
//# sourceMappingURL=AppSizeListener.js.map