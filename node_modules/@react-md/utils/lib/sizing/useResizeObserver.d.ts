import { Ref } from "react";
import { EnsuredRefs } from "../useEnsuredRef";
import { UseResizeObserverV1Options } from "./useResizeObserverV1";
/**
 * @remarks \@since 2.3.0
 */
export interface UseResizeObserverOptions<E extends HTMLElement> {
    /**
     * An optional ref to merge with the returned ref handler function
     */
    ref?: Ref<E | null>;
    /**
     * Boolean if the `onResize` callback should not be triggered if only the
     * height has changed for the watched element.
     */
    disableHeight?: boolean;
    /**
     * Boolean if the `onResize` callback should not be triggered if only the
     * width has changed for the watched element.
     */
    disableWidth?: boolean;
}
/**
 * @remarks \@since 2.3.0
 */
export interface ResizeObserverElementSize {
    /**
     * The height for the element that was changed.
     */
    height: number;
    /**
     * The width for the element that was changed.
     */
    width: number;
    /**
     * The scroll height for the element that was changed.
     */
    scrollHeight: number;
    /**
     * The scroll height for the element that was changed.
     */
    scrollWidth: number;
}
/**
 * @remarks \@since 2.3.0
 */
export interface ResizeObserverElementData<E extends HTMLElement = HTMLElement> extends ResizeObserverElementSize {
    /**
     * The element that changed due to the resize observer.
     */
    element: E;
}
/**
 * The callback that is triggered each time an element's size change has been
 * observered.
 * @remarks \@since 2.3.0
 */
export declare type OnResizeObserverChange<E extends HTMLElement = HTMLElement> = (resizeData: ResizeObserverElementData<E>) => void;
/**
 * This uses the deprecated v1 behavior of providing a `target` element for the
 * resize observer. It is recommended to use the newer API that returns a ref
 * handler instead.
 *
 * @deprecated 2.3.0
 */
export declare function useResizeObserver<E extends HTMLElement>(options: UseResizeObserverV1Options<E>): void;
/**
 * The new resize observer API that returns a `refHandler` to attach to a DOM
 * node instead of using the weird `target` API.
 *
 * @remarks \@since 2.3.0
 * @param onResize - The resize handler to call when the element has changed
 * height or width. If you notice performance issues or other oddities, it is
 * recommended to wrap this function in `useCallback`.
 * @param options - Any additional options to use for the resize observer.
 */
export declare function useResizeObserver<E extends HTMLElement>(onResize: OnResizeObserverChange<E>, options?: UseResizeObserverOptions<E>): EnsuredRefs<E>;
