"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useResizeListener = void 0;
var react_1 = require("react");
var delegateEvent_1 = require("../events/delegateEvent");
var useRefCache_1 = require("../useRefCache");
/**
 * This is a simple hook that will attach a throttled resize event listener when
 * mounted, and detach when it unmounts.
 *
 * This hook only works for entire app resize events. If you are looking for
 * specific element resize events, check out the `ResizeObserver` component or
 * `useReiszeObserver` hook instead.
 */
function useResizeListener(_a) {
    var onResize = _a.onResize, options = _a.options, immediate = _a.immediate, _b = _a.enabled, enabled = _b === void 0 ? true : _b;
    var callback = useRefCache_1.useRefCache(onResize);
    react_1.useEffect(function () {
        if (!enabled) {
            return;
        }
        var eventHandler = delegateEvent_1.delegateEvent("resize", window, true, options);
        var handler = function (event) { return callback.current(event); };
        eventHandler.add(handler);
        if (immediate && typeof window !== "undefined") {
            window.dispatchEvent(new UIEvent("resize"));
        }
        return function () {
            eventHandler.remove(handler);
        };
        // disabled since useRefCache for callback and don't want immediate to
        // re-trigger it.
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [options, enabled]);
}
exports.useResizeListener = useResizeListener;
//# sourceMappingURL=useResizeListener.js.map