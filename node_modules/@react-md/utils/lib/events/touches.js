"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeTouchEvent = exports.addTouchEvent = exports.setTouchEvent = void 0;
var passiveEvents_1 = require("./passiveEvents");
/**
 * A helper function for manually setting touch events on elements when they
 * cannot be directly added with a React event listener. This will attempt to
 * create a passive event if the browser supports passive events so there is
 * better scroll performance.
 */
function setTouchEvent(
/**
 * Boolean if the event should be added or removed.
 */
add, 
/**
 * The element to add the touch event to.
 */
el, 
/**
 * One of the touch types to modify.
 */
eventType, 
/**
 * The touch event callback function to use.
 */
callback, 
/**
 * Boolean if the event should be captured if the browser does not support
 * passive events.
 */
capture, 
/**
 * Any additional options to provide to the passive event.
 */
options) {
    if (capture === void 0) { capture = false; }
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-expect-error
    el[(add ? "add" : "remove") + "EventListener"]("touch" + eventType, callback, passiveEvents_1.isSupported ? __assign({ passive: true, capture: capture }, options) : capture);
}
exports.setTouchEvent = setTouchEvent;
/**
 * A simple wrapper for the `setTouchEvent` to just always add events.
 */
function addTouchEvent(
/**
 * The element to add the touch event to.
 */
el, 
/**
 * One of the touch types to modify.
 */
eventType, 
/**
 * The touch event callback function to use.
 */
callback, 
/**
 * Boolean if the event should be captured if the browser does not support
 * passive events.
 */
capture, 
/**
 * Any additional options to provide to the passive event.
 */
options) {
    if (capture === void 0) { capture = false; }
    setTouchEvent(true, el, eventType, callback, capture, options);
}
exports.addTouchEvent = addTouchEvent;
/**
 * A simple wrapper for the `setTouchEvent` to just always remove events.
 *
 * @param el - The element to add the touch event to.
 * @param eventType - One of the touch types to modify.
 */
function removeTouchEvent(el, eventType, 
/**
 * The touch event callback function to use.
 */
callback, 
/**
 * Boolean if the event should be captured if the browser does not support
 * passive events.
 */
capture, 
/**
 * Any additional options to provide to the passive event.
 */
options) {
    if (capture === void 0) { capture = false; }
    setTouchEvent(false, el, eventType, callback, capture, options);
}
exports.removeTouchEvent = removeTouchEvent;
//# sourceMappingURL=touches.js.map