"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HoverModeProvider = void 0;
var react_1 = __importStar(require("react"));
var useOnUnmount_1 = require("../useOnUnmount");
var constants_1 = require("./constants");
var useHoverModeContext_1 = require("./useHoverModeContext");
/**
 * This component should normally be mounted near the root of your app to enable
 * hover mode for child components. However, it can also be used at other levels
 * if hover mode functionality should not carry over between two different parts
 * of the screen.
 *
 * @example
 * Separating Hover Mode
 * ```tsx
 * export default function Example(): ReactElement {
 *   return (
 *     <>
 *       <HoverModeProvider>
 *         <HeaderActions />
 *       </HoverModeProvider>
 *       <HoverModeProvider>
 *         <MainContent />
 *       </HoverModeProvider>
 *     </>
 *   );
 * }
 * ```
 *
 * @remarks \@since 2.8.0
 */
function HoverModeProvider(_a) {
    var children = _a.children, _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.defaultVisibleInTime, defaultVisibleInTime = _c === void 0 ? constants_1.DEFAULT_HOVER_MODE_VISIBLE_IN_TIME : _c, _d = _a.deactivateTime, deactivateTime = _d === void 0 ? constants_1.DEFAULT_HOVER_MODE_DEACTIVATION_TIME : _d;
    var _e = react_1.useState(defaultVisibleInTime), visibleInTime = _e[0], setVisibleInTime = _e[1];
    var timeoutRef = react_1.useRef();
    var enableHoverMode = react_1.useCallback(function () {
        if (disabled) {
            return;
        }
        window.clearTimeout(timeoutRef.current);
        setVisibleInTime(0);
    }, [disabled]);
    var disableHoverMode = react_1.useCallback(function () {
        window.clearTimeout(timeoutRef.current);
        setVisibleInTime(defaultVisibleInTime);
    }, [defaultVisibleInTime]);
    var startDisableTimer = react_1.useCallback(function () {
        window.clearTimeout(timeoutRef.current);
        timeoutRef.current = window.setTimeout(function () {
            setVisibleInTime(defaultVisibleInTime);
        }, deactivateTime);
    }, [defaultVisibleInTime, deactivateTime]);
    react_1.useEffect(function () {
        if (disabled) {
            window.clearTimeout(timeoutRef.current);
            setVisibleInTime(defaultVisibleInTime);
        }
    }, [disabled, defaultVisibleInTime]);
    useOnUnmount_1.useOnUnmount(function () {
        window.clearTimeout(timeoutRef.current);
    });
    var context = react_1.useMemo(function () { return ({
        visibleInTime: visibleInTime,
        enableHoverMode: enableHoverMode,
        disableHoverMode: disableHoverMode,
        startDisableTimer: startDisableTimer,
    }); }, [disableHoverMode, enableHoverMode, startDisableTimer, visibleInTime]);
    return (react_1.default.createElement(useHoverModeContext_1.HoverModeContextProvider, { value: context }, children));
}
exports.HoverModeProvider = HoverModeProvider;
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        HoverModeProvider.propTypes = {
            disabled: PropTypes.bool,
            defaultVisibleInTime: PropTypes.number,
            deactivateTime: PropTypes.number,
            children: PropTypes.node.isRequired,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=HoverModeProvider.js.map