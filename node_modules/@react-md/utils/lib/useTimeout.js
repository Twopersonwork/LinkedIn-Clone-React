"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTimeout = void 0;
var react_1 = require("react");
var useRefCache_1 = require("./useRefCache");
var useToggle_1 = require("./useToggle");
/**
 * Simple hook to use an timeout with auto setup and teardown. The provided
 * functions will be guaranteed to not change and are memoized.
 *
 * @param cb - The callback function to call
 * @param delay - The time in milliseconds the timer should delay between
 * executions of the callback function
 * @param defaultStarted - Boolean if the timeout should be started immediately.
 * @returns a list containing a function to start the timeout, a function to
 * stop the timeout, and a function to restart the timeout.
 */
function useTimeout(cb, delay, defaultStarted) {
    if (defaultStarted === void 0) { defaultStarted = false; }
    var cbRef = useRefCache_1.useRefCache(cb);
    var delayRef = useRefCache_1.useRefCache(delay);
    var timeoutRef = react_1.useRef();
    var _a = useToggle_1.useToggle(defaultStarted), enabled = _a[0], start = _a[1], disable = _a[2];
    var clearTimeout = react_1.useCallback(function () {
        window.clearTimeout(timeoutRef.current);
        timeoutRef.current = undefined;
    }, []);
    /* eslint-disable react-hooks/exhaustive-deps */
    // these are all guaranteed to not change since using refs or non-updating
    // callbacks
    var restart = react_1.useCallback(function () {
        clearTimeout();
        timeoutRef.current = window.setTimeout(function () {
            cbRef.current();
            disable();
        }, delayRef.current);
    }, []);
    var stop = react_1.useCallback(function () {
        clearTimeout();
        disable();
    }, []);
    react_1.useEffect(function () {
        if (!enabled) {
            return;
        }
        timeoutRef.current = window.setTimeout(function () {
            cbRef.current();
            disable();
        }, delay);
        return function () {
            clearTimeout();
        };
    }, [enabled, delay, disable]);
    return [start, stop, restart];
}
exports.useTimeout = useTimeout;
//# sourceMappingURL=useTimeout.js.map