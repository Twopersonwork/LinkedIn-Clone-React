"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHorizontalPosition = exports.createEqualWidth = exports.createAnchoredRight = exports.createAnchoredInnerRight = exports.createAnchoredCenter = exports.createAnchoredInnerLeft = exports.createAnchoredLeft = void 0;
var getCoord_1 = require("./getCoord");
/**
 * Attempts to position the fixed element so that it will appear to the left of
 * the container element but also within the viewport boundaries. When swapping
 * is enabled, it will attempt to swap to the right position if it can't fit
 * within the viewport to the left. If it can't fit in the viewport even after
 * being swapped to the right or swapping is disabled, it will be positioned to
 * the viewport left boundary.
 *
 * @internal
 */
function createAnchoredLeft(config) {
    var vwMargin = config.vwMargin, screenRight = config.screenRight, elWidth = config.elWidth, disableSwapping = config.disableSwapping;
    var left = getCoord_1.getLeftCoord(config);
    var actualX = "left";
    if (left >= vwMargin) {
        return { actualX: actualX, left: left };
    }
    var swappedLeft = getCoord_1.getRightCoord(config);
    if (disableSwapping || swappedLeft + elWidth > screenRight) {
        left = vwMargin;
    }
    else {
        left = swappedLeft;
        actualX = "right";
    }
    return { actualX: actualX, left: left };
}
exports.createAnchoredLeft = createAnchoredLeft;
/**
 * Attempts to position the fixed element so that it will appear to the
 * inner-left of the container element but also within the viewport boundaries.
 * When swapping is enabled, it will attempt to swap to the right position if it
 * can't fit within the viewport to the left. If it can't fit in the viewport
 * even after being swapped to the right or swapping is disabled, it will be
 * positioned to the viewport left boundary.
 *
 * @internal
 */
function createAnchoredInnerLeft(config) {
    var vwMargin = config.vwMargin, screenRight = config.screenRight, elWidth = config.elWidth, disableSwapping = config.disableSwapping;
    var left = getCoord_1.getInnerLeftCoord(config);
    var actualX = "inner-left";
    if (left + elWidth <= screenRight) {
        return { actualX: actualX, left: left };
    }
    var swappedLeft = getCoord_1.getInnerRightCoord(config);
    if (disableSwapping || swappedLeft < vwMargin) {
        left = vwMargin;
    }
    else {
        left = swappedLeft;
        actualX = "inner-right";
    }
    return { actualX: actualX, left: left };
}
exports.createAnchoredInnerLeft = createAnchoredInnerLeft;
/**
 * Attempts to position the fixed element so that it will appear at the center
 * of the container element but also within the viewport boundaries. If the
 * centered element can't fit within the viewport, it will use the vwMargin
 * value if it overflowed to the left, it'll position to the screen right
 * boundary.
 *
 * @internal
 */
function createAnchoredCenter(config) {
    var vwMargin = config.vwMargin, screenRight = config.screenRight, elWidth = config.elWidth;
    var left = getCoord_1.getCenterXCoord(config);
    if (left < vwMargin) {
        left = vwMargin;
    }
    else if (left + elWidth > screenRight || left < vwMargin) {
        left = screenRight - elWidth;
    }
    return { actualX: "center", left: left };
}
exports.createAnchoredCenter = createAnchoredCenter;
/**
 * Attempts to position the fixed element so that it will appear to the
 * inner-right of the container element but also within the viewport boundaries.
 * When swapping is enabled, it will attempt to swap to the inner-left position
 * if it can't fit within the viewport to the right. If it can't fit in the
 * viewport even after being swapped to the left or swapping is disabled, it
 * will be positioned to the viewport right boundary.
 *
 * @internal
 */
function createAnchoredInnerRight(config) {
    var screenRight = config.screenRight, vwMargin = config.vwMargin, elWidth = config.elWidth, disableSwapping = config.disableSwapping;
    var left = getCoord_1.getInnerRightCoord(config);
    var actualX = "inner-right";
    if (left >= vwMargin) {
        return { actualX: actualX, left: left };
    }
    var swappedLeft = getCoord_1.getInnerLeftCoord(config);
    if (disableSwapping || swappedLeft + elWidth > screenRight) {
        left = screenRight - elWidth;
    }
    else {
        left = swappedLeft;
        actualX = "inner-left";
    }
    return { actualX: actualX, left: left };
}
exports.createAnchoredInnerRight = createAnchoredInnerRight;
/**
 * Attempts to position the fixed element so that it will appear to the right of
 * the container element but also within the viewport boundaries. When swapping
 * is enabled, it will attempt to swap to the left position if it can't fit
 * within the viewport to the right. If it can't fit in the viewport even after
 * being swapped to the left or swapping is disabled, it will be positioned to
 * the viewport right boundary.
 *
 * @internal
 */
function createAnchoredRight(config) {
    var screenRight = config.screenRight, vwMargin = config.vwMargin, elWidth = config.elWidth, disableSwapping = config.disableSwapping;
    var left = getCoord_1.getRightCoord(config);
    var actualX = "right";
    if (left + elWidth <= screenRight) {
        return { actualX: actualX, left: left };
    }
    var swappedLeft = getCoord_1.getLeftCoord(config);
    if (disableSwapping || swappedLeft < vwMargin) {
        left = screenRight - elWidth;
    }
    else {
        left = swappedLeft;
        actualX = "left";
    }
    return { actualX: actualX, left: left };
}
exports.createAnchoredRight = createAnchoredRight;
/**
 * @internal
 */
function createEqualWidth(_a) {
    var x = _a.x, vw = _a.vw, elWidth = _a.elWidth, xMargin = _a.xMargin, vwMargin = _a.vwMargin, initialX = _a.initialX, containerRect = _a.containerRect, isMinWidth = _a.isMinWidth;
    var left = initialX !== null && initialX !== void 0 ? initialX : containerRect.left + xMargin;
    var width = containerRect.width - xMargin * 2;
    var minWidth;
    var right;
    if (isMinWidth) {
        minWidth = width;
        width = undefined;
        if (left + elWidth > vw - vwMargin) {
            right = vwMargin;
        }
    }
    // going to assume that the container element is visible in the DOM and just
    // make the fixed element have the same left and right corners
    return {
        left: left,
        right: right,
        width: width,
        minWidth: minWidth,
        actualX: x,
    };
}
exports.createEqualWidth = createEqualWidth;
/**
 * Creates the horizontal position for a fixed element with the provided
 * options.
 * @internal
 */
function createHorizontalPosition(_a) {
    var x = _a.x, vw = _a.vw, vwMargin = _a.vwMargin, xMargin = _a.xMargin, width = _a.width, elWidth = _a.elWidth, initialX = _a.initialX, containerRect = _a.containerRect, disableSwapping = _a.disableSwapping;
    if (width === "min" || width === "equal") {
        return createEqualWidth({
            x: x,
            vw: vw,
            vwMargin: vwMargin,
            xMargin: xMargin,
            elWidth: elWidth,
            initialX: initialX,
            containerRect: containerRect,
            isMinWidth: width === "min",
        });
    }
    if (elWidth > vw - vwMargin * 2) {
        // if the element's width is greater than the viewport's width minus the
        // margin on both sides, just make the element span the entire viewport with
        // the margin
        return {
            left: vwMargin,
            right: vwMargin,
            actualX: x,
        };
    }
    var config = {
        vwMargin: vwMargin,
        xMargin: xMargin,
        elWidth: elWidth,
        initialX: initialX,
        screenRight: vw - vwMargin,
        containerRect: containerRect,
        disableSwapping: disableSwapping,
    };
    switch (x) {
        case "left":
            return createAnchoredLeft(config);
        case "inner-left":
            return createAnchoredInnerLeft(config);
        case "center":
            return createAnchoredCenter(config);
        case "inner-right":
            return createAnchoredInnerRight(config);
        case "right":
            return createAnchoredRight(config);
        default:
            throw new Error("This should never happen");
    }
}
exports.createHorizontalPosition = createHorizontalPosition;
//# sourceMappingURL=createHorizontalPosition.js.map