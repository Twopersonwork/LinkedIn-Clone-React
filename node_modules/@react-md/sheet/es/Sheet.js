var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useCallback, useRef, useState } from "react";
import cn from "classnames";
import { Dialog } from "@react-md/dialog";
import { bem } from "@react-md/utils";
import { DEFAULT_SHEET_CLASSNAMES, DEFAULT_SHEET_TIMEOUT } from "./constants";
var block = bem("rmd-sheet");
/**
 * The Sheet component is an extension of the `Dialog` except that it is fixed
 * to the edges of the viewport instead of centered or full page. This component
 * is great for rendering a navigation tree or menus on mobile devices.
 */
export var Sheet = forwardRef(function Sheet(_a, ref) {
    var _b;
    var className = _a.className, children = _a.children, visible = _a.visible, _c = _a.position, position = _c === void 0 ? "left" : _c, _d = _a.horizontalSize, horizontalSize = _d === void 0 ? "media" : _d, _e = _a.verticalSize, verticalSize = _e === void 0 ? "recommended" : _e, _f = _a.overlay, propOverlay = _f === void 0 ? true : _f, overlayClassName = _a.overlayClassName, _g = _a.role, role = _g === void 0 ? "dialog" : _g, _h = _a.component, component = _h === void 0 ? "div" : _h, _j = _a.tabIndex, tabIndex = _j === void 0 ? -1 : _j, _k = _a.appear, appear = _k === void 0 ? false : _k, _l = _a.enter, enter = _l === void 0 ? true : _l, _m = _a.exit, exit = _m === void 0 ? true : _m, onExited = _a.onExited, propHidden = _a.hidden, _o = _a.timeout, timeout = _o === void 0 ? DEFAULT_SHEET_TIMEOUT : _o, _p = _a.classNames, classNames = _p === void 0 ? DEFAULT_SHEET_CLASSNAMES : _p, _q = _a.disableTransition, disableTransition = _q === void 0 ? false : _q, _r = _a.mountOnEnter, mountOnEnter = _r === void 0 ? true : _r, _s = _a.unmountOnExit, unmountOnExit = _s === void 0 ? true : _s, _t = _a.portal, portal = _t === void 0 ? true : _t, _u = _a.overlayHidden, overlayHidden = _u === void 0 ? false : _u, _v = _a.defaultFocus, defaultFocus = _v === void 0 ? "first" : _v, _w = _a.disableScrollLock, disableScrollLock = _w === void 0 ? false : _w, _x = _a.disableEscapeClose, disableEscapeClose = _x === void 0 ? false : _x, _y = _a.disableFocusContainer, disableFocusContainer = _y === void 0 ? false : _y, _z = _a.disableNestedDialogFixes, disableNestedDialogFixes = _z === void 0 ? false : _z, props = __rest(_a, ["className", "children", "visible", "position", "horizontalSize", "verticalSize", "overlay", "overlayClassName", "role", "component", "tabIndex", "appear", "enter", "exit", "onExited", "hidden", "timeout", "classNames", "disableTransition", "mountOnEnter", "unmountOnExit", "portal", "overlayHidden", "defaultFocus", "disableScrollLock", "disableEscapeClose", "disableFocusContainer", "disableNestedDialogFixes"]);
    var horizontal = position === "left" || position === "right";
    var overlay = role !== "none" && propOverlay;
    // if the sheet mounts while not visible and the conditional mounting isn't
    // enabled, need to default to the offscreen state which is normally handled
    // by the CSSTransition's exit state.
    var offscreen = useRef(!visible && !unmountOnExit && !mountOnEnter);
    if (offscreen.current && visible) {
        offscreen.current = false;
    }
    // when sheets are not unmounted on exit, need to set it to hidden so that
    // tabbing no longer focuses any of the elements inside
    var _0 = useState(!visible && !mountOnEnter), hidden = _0[0], setHidden = _0[1];
    if (hidden && visible) {
        setHidden(false);
    }
    var handleExited = useCallback(function (node) {
        if (onExited) {
            onExited(node);
        }
        setHidden(true);
    }, [onExited]);
    return (React.createElement(Dialog, __assign({}, props, { ref: ref, type: "custom", role: role, visible: visible, className: cn(block((_b = {
                horizontal: horizontal,
                vertical: !horizontal,
                raised: overlay,
                offscreen: offscreen.current
            },
            _b[position] = true,
            _b[horizontalSize + "-width"] = horizontal,
            _b["viewport-height"] = !horizontal && verticalSize === "none",
            _b["touchable-height"] = !horizontal && verticalSize === "touch",
            _b["recommended-height"] = !horizontal && verticalSize === "recommended",
            _b)), className), hidden: propHidden !== null && propHidden !== void 0 ? propHidden : hidden, overlay: overlay, overlayClassName: cn("rmd-sheet-overlay", overlayClassName), component: component, tabIndex: tabIndex, appear: appear, enter: enter, exit: exit, timeout: timeout, classNames: classNames, disableTransition: disableTransition, mountOnEnter: mountOnEnter, unmountOnExit: unmountOnExit, onExited: handleExited, portal: portal, overlayHidden: overlayHidden, defaultFocus: defaultFocus, disableScrollLock: disableScrollLock, disableEscapeClose: disableEscapeClose, disableFocusContainer: disableFocusContainer, disableNestedDialogFixes: disableNestedDialogFixes }), children));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        Sheet.propTypes = {
            id: PropTypes.string.isRequired,
            "aria-label": PropTypes.string,
            "aria-labelledby": PropTypes.string,
            className: PropTypes.string,
            tabIndex: PropTypes.number,
            visible: PropTypes.bool.isRequired,
            onRequestClose: PropTypes.func.isRequired,
            mountOnEnter: PropTypes.bool,
            unmountOnExit: PropTypes.bool,
            overlay: PropTypes.bool,
            overlayStyle: PropTypes.object,
            overlayClassName: PropTypes.string,
            overlayHidden: PropTypes.bool,
            containerStyle: PropTypes.object,
            containerClassName: PropTypes.string,
            children: PropTypes.node,
            classNames: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.shape({
                    appear: PropTypes.string,
                    appearActive: PropTypes.string,
                    enter: PropTypes.string,
                    enterActive: PropTypes.string,
                    enterDone: PropTypes.string,
                    exit: PropTypes.string,
                    exitActive: PropTypes.string,
                    exitDone: PropTypes.string,
                }),
            ]),
            timeout: PropTypes.oneOfType([
                PropTypes.number,
                PropTypes.shape({
                    enter: PropTypes.number,
                    exit: PropTypes.number,
                }),
            ]),
            appear: PropTypes.bool,
            enter: PropTypes.bool,
            exit: PropTypes.bool,
            disableTransition: PropTypes.bool,
            onEnter: PropTypes.func,
            onEntering: PropTypes.func,
            onEntered: PropTypes.func,
            onExit: PropTypes.func,
            onExiting: PropTypes.func,
            onExited: PropTypes.func,
            portal: PropTypes.bool,
            portalInto: PropTypes.oneOfType([
                PropTypes.func,
                PropTypes.string,
                PropTypes.object,
            ]),
            portalIntoId: PropTypes.string,
            defaultFocus: PropTypes.oneOfType([
                PropTypes.oneOf(["first", "last"]),
                PropTypes.string,
            ]),
            disableScrollLock: PropTypes.bool,
            disableEscapeClose: PropTypes.bool,
            disableFocusContainer: PropTypes.bool,
            disableNestedDialogFixes: PropTypes.bool,
            position: PropTypes.oneOf(["top", "right", "bottom", "left"]),
            horizontalSize: PropTypes.oneOf(["none", "media", "touch", "static"]),
            verticalSize: PropTypes.oneOf(["none", "touch", "recommended"]),
            role: PropTypes.oneOf(["dialog", "menu", "none"]),
            hidden: PropTypes.bool,
            component: PropTypes.oneOf(["div", "nav"]),
        };
    }
    catch (e) { }
}
//# sourceMappingURL=Sheet.js.map