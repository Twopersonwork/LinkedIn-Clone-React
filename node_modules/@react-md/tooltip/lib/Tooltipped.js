"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tooltipped = void 0;
var react_1 = __importStar(require("react"));
var constants_1 = require("./constants");
var Tooltip_1 = require("./Tooltip");
var useTooltip_1 = require("./useTooltip");
var MERGABLE_PROPS = [
    "onClick",
    "onMouseEnter",
    "onMouseLeave",
    "onTouchStart",
    "onFocus",
    "onKeyDown",
    "onContextMenu",
];
/**
 * The `Tooltipped` component can be used to dynamically add a tooltip to child
 * element by cloning the required event handlers and accessibility props into
 * the child with `React.cloneChild`.
 *
 * Note: This component is _kind of_ deprecated in favor of using the
 * `useTooltip` hook and `Tooltip` component instead.
 *
 * @see {@link Tooltip} for an example
 */
function Tooltipped(_a) {
    var id = _a.id, style = _a.style, children = _a.children, tooltipChildren = _a.tooltip, _b = _a.dense, dense = _b === void 0 ? false : _b, _c = _a.vhMargin, vhMargin = _c === void 0 ? constants_1.DEFAULT_TOOLTIP_MARGIN : _c, _d = _a.vwMargin, vwMargin = _d === void 0 ? constants_1.DEFAULT_TOOLTIP_MARGIN : _d, _e = _a.spacing, spacing = _e === void 0 ? constants_1.DEFAULT_TOOLTIP_SPACING : _e, _f = _a.denseSpacing, denseSpacing = _f === void 0 ? constants_1.DEFAULT_TOOLTIP_DENSE_SPACING : _f, propPosition = _a.position, positionThreshold = _a.positionThreshold, _g = _a.threshold, threshold = _g === void 0 ? positionThreshold !== null && positionThreshold !== void 0 ? positionThreshold : constants_1.DEFAULT_TOOLTIP_THRESHOLD : _g, onClick = _a.onClick, onMouseEnter = _a.onMouseEnter, onMouseLeave = _a.onMouseLeave, onTouchStart = _a.onTouchStart, onContextMenu = _a.onContextMenu, onBlur = _a.onBlur, onFocus = _a.onFocus, onKeyDown = _a.onKeyDown, describedBy = _a["aria-describedby"], _h = _a.defaultPosition, defaultPosition = _h === void 0 ? constants_1.DEFAULT_TOOLTIP_POSITION : _h, _j = _a.mountOnEnter, mountOnEnter = _j === void 0 ? true : _j, _k = _a.unmountOnExit, unmountOnExit = _k === void 0 ? true : _k, disableSwapping = _a.disableSwapping, disableHoverMode = _a.disableHoverMode, _l = _a.disableAutoSpacing, disableAutoSpacing = _l === void 0 ? process.env.NODE_ENV === "test" : _l, _tooltipId = _a.tooltipId, _hoverDelay = _a.hoverDelay, _focusDelay = _a.focusDelay, _touchTimeout = _a.touchTimeout, _onShow = _a.onShow, _onHide = _a.onHide, props = __rest(_a, ["id", "style", "children", "tooltip", "dense", "vhMargin", "vwMargin", "spacing", "denseSpacing", "position", "positionThreshold", "threshold", "onClick", "onMouseEnter", "onMouseLeave", "onTouchStart", "onContextMenu", "onBlur", "onFocus", "onKeyDown", "aria-describedby", "defaultPosition", "mountOnEnter", "unmountOnExit", "disableSwapping", "disableHoverMode", "disableAutoSpacing", "tooltipId", "hoverDelay", "focusDelay", "touchTimeout", "onShow", "onHide"]);
    var _m = useTooltip_1.useTooltip({
        baseId: id,
        style: style,
        dense: dense,
        spacing: spacing,
        denseSpacing: denseSpacing,
        vwMargin: vwMargin,
        vhMargin: vhMargin,
        position: propPosition,
        defaultPosition: defaultPosition,
        disableSwapping: disableSwapping,
        disableHoverMode: disableHoverMode,
        disableAutoSpacing: disableAutoSpacing,
        onFocus: onFocus,
        onBlur: onBlur,
        onKeyDown: onKeyDown,
        onClick: onClick,
        onMouseEnter: onMouseEnter,
        onMouseLeave: onMouseLeave,
        onTouchStart: onTouchStart,
        onContextMenu: onContextMenu,
        threshold: threshold,
    }), elementProps = _m.elementProps, tooltipProps = _m.tooltipProps;
    if (!tooltipChildren) {
        if (typeof children === "function") {
            return children({ id: id, tooltip: null, "aria-describedby": describedBy });
        }
        var child_1 = react_1.Children.only(children);
        return react_1.cloneElement(child_1, { id: id, "aria-describedby": describedBy });
    }
    var tooltip = (react_1.default.createElement(Tooltip_1.Tooltip, __assign({}, tooltipProps, props, { mountOnEnter: mountOnEnter, unmountOnExit: unmountOnExit }), tooltipChildren));
    if (typeof children === "function") {
        return children(__assign(__assign({}, elementProps), { tooltip: tooltip }));
    }
    var child = react_1.Children.only(children);
    // TODO: remove this mess since you should provide handlers to the
    // `Tooltipped` component instead of the child element.
    /* istanbul ignore next */
    var merged = MERGABLE_PROPS.reduce(function (result, propName) {
        var propHandler = child.props[propName];
        var configHandler = elementProps[propName];
        if (!propHandler) {
            result[propName] = configHandler;
        }
        else if (!configHandler) {
            result[propName] = propHandler;
        }
        else {
            // not sure of a way to actually strongly type this nicely.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            result[propName] = function (event) {
                propHandler(event);
                configHandler(event);
            };
        }
        return result;
    }, __assign({}, elementProps));
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.cloneElement(child, merged),
        tooltip));
}
exports.Tooltipped = Tooltipped;
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        Tooltipped.propTypes = {
            tooltipId: PropTypes.string,
            dense: PropTypes.bool,
            spacing: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
            denseSpacing: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
            positionThreshold: PropTypes.number,
            disableAutoSpacing: PropTypes.bool,
            vwMargin: PropTypes.number,
            vhMargin: PropTypes.number,
            portal: PropTypes.bool,
            lineWrap: PropTypes.bool,
            focusDelay: PropTypes.number,
            hoverDelay: PropTypes.number,
            touchTimeout: PropTypes.number,
            mountOnEnter: PropTypes.bool,
            unmountOnExit: PropTypes.bool,
            defaultPosition: PropTypes.oneOf(["above", "below", "left", "right"]),
        };
    }
    catch (e) { }
}
//# sourceMappingURL=Tooltipped.js.map