"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTooltipPosition = void 0;
var react_1 = require("react");
var utils_1 = require("@react-md/utils");
var constants_1 = require("./constants");
/** @internal */
var noop = function () {
    // do nothing
};
/**
 * A hook that's used to determine the "best" position to render the tooltip
 * within the viewport.
 *
 * @internal
 * @remarks \@since 2.8.0
 */
function useTooltipPosition(_a) {
    var determinedPosition = _a.position, _b = _a.defaultPosition, defaultPosition = _b === void 0 ? "below" : _b, _c = _a.threshold, threshold = _c === void 0 ? constants_1.DEFAULT_TOOLTIP_THRESHOLD : _c;
    var _d = react_1.useState(defaultPosition), position = _d[0], setPosition = _d[1];
    var updatePosition = react_1.useCallback(function (container) {
        var _a = container.getBoundingClientRect(), top = _a.top, left = _a.left;
        var vh = utils_1.getViewportSize("height");
        var vw = utils_1.getViewportSize("width");
        var nextPosition = defaultPosition;
        if (defaultPosition === "above" && top < vh * threshold) {
            nextPosition = "below";
        }
        else if (defaultPosition === "below" && top > vh * threshold) {
            nextPosition = "above";
        }
        else if (defaultPosition === "left" && left < vw * threshold) {
            nextPosition = "right";
        }
        else if (defaultPosition === "right" && left > vw * threshold) {
            nextPosition = "left";
        }
        setPosition(nextPosition);
    }, [defaultPosition, threshold]);
    if (typeof determinedPosition !== "undefined") {
        return [determinedPosition, noop];
    }
    return [position, updatePosition];
}
exports.useTooltipPosition = useTooltipPosition;
//# sourceMappingURL=useTooltipPosition.js.map