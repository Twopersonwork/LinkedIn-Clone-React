"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tree = void 0;
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var icon_1 = require("@react-md/icon");
var list_1 = require("@react-md/list");
var utils_1 = require("@react-md/utils");
var defaultGetItemLabel_1 = require("./defaultGetItemLabel");
var defaultGetItemValue_1 = require("./defaultGetItemValue");
var defaultTreeItemRenderer_1 = require("./defaultTreeItemRenderer");
var useTreeMovement_1 = require("./useTreeMovement");
var block = utils_1.bem("rmd-tree");
var defaultGetItemProps = function () { return undefined; };
/**
 * Creates an accessible tree widget that allows you to show hierarchical data
 * in a list presentation view. This component requires the selection and
 * expansion state to be provided/controlled but you can use the
 * `useTreeItemSelection` and `useTreeItemExpansion` hooks for a great starting
 * point for this functionality.
 */
exports.Tree = react_1.forwardRef(function Tree(// eslint-disable-line @typescript-eslint/no-explicit-any
_a, ref) {
    var id = _a.id, className = _a.className, _b = _a.itemRenderer, itemRenderer = _b === void 0 ? defaultTreeItemRenderer_1.defaultTreeItemRenderer : _b, data = _a.data, _c = _a.multiSelect, multiSelect = _c === void 0 ? false : _c, selectedIds = _a.selectedIds, onItemSelect = _a.onItemSelect, onMultiItemSelect = _a.onMultiItemSelect, expandedIds = _a.expandedIds, onItemExpansion = _a.onItemExpansion, onMultiItemExpansion = _a.onMultiItemExpansion, _d = _a.expanderLeft, expanderLeft = _d === void 0 ? false : _d, propExpanderIcon = _a.expanderIcon, _e = _a.labelKey, labelKey = _e === void 0 ? "name" : _e, _f = _a.valueKey, valueKey = _f === void 0 ? "name" : _f, _g = _a.getItemLabel, getItemLabel = _g === void 0 ? defaultGetItemLabel_1.defaultGetItemLabel : _g, _h = _a.getItemValue, getItemValue = _h === void 0 ? defaultGetItemValue_1.defaultGetItemValue : _h, _j = _a.getItemProps, getItemProps = _j === void 0 ? defaultGetItemProps : _j, linkComponent = _a.linkComponent, sort = _a.sort, _k = _a.rootId, rootId = _k === void 0 ? null : _k, onBlur = _a.onBlur, onFocus = _a.onFocus, onKeyDown = _a.onKeyDown, props = __rest(_a, // eslint-disable-line @typescript-eslint/no-explicit-any
    ["id", "className", "itemRenderer", "data", "multiSelect", "selectedIds", "onItemSelect", "onMultiItemSelect", "expandedIds", "onItemExpansion", "onMultiItemExpansion", "expanderLeft", "expanderIcon", "labelKey", "valueKey", "getItemLabel", "getItemValue", "getItemProps", "linkComponent", "sort", "rootId", "onBlur", "onFocus", "onKeyDown"]);
    var expanderIcon = icon_1.useIcon("dropdown", propExpanderIcon);
    var _l = useTreeMovement_1.useTreeMovement({
        id: id,
        data: data,
        sort: sort,
        rootId: rootId,
        onBlur: onBlur,
        onFocus: onFocus,
        onKeyDown: onKeyDown,
        multiSelect: multiSelect,
        selectedIds: selectedIds,
        onItemSelect: onItemSelect,
        onMultiItemSelect: onMultiItemSelect,
        expandedIds: expandedIds,
        onItemExpansion: onItemExpansion,
        onMultiItemExpansion: onMultiItemExpansion,
        valueKey: valueKey,
        getItemValue: getItemValue,
    }), items = _l.items, activeId = _l.activeId, setActiveId = _l.setActiveId, itemIdRefs = _l.itemIdRefs, handleBlur = _l.handleBlur, handleFocus = _l.handleFocus, handleKeyDown = _l.handleKeyDown;
    var renderChildItems = function (items, depth, parentIndexes) {
        var listSize = items.length;
        return items.map(function (item, index) {
            var _a;
            var itemId = item.itemId, childItems = item.childItems, isCustom = item.isCustom;
            var selected = selectedIds.includes(itemId);
            var expanded = expandedIds.includes(itemId);
            var id = "";
            var ref;
            var visibleIndex = -1;
            if (!isCustom) {
                (_a = itemIdRefs[itemId], id = _a.id, ref = _a.ref, visibleIndex = _a.visibleIndex);
            }
            var focused = id === activeId;
            return itemRenderer({
                key: itemId,
                id: id,
                liRef: ref,
                depth: depth,
                listSize: listSize,
                itemIndex: index,
                selected: selected,
                expanded: expanded,
                focused: focused,
                onClick: function () {
                    setActiveId(itemId);
                    onItemSelect(itemId);
                    if (childItems) {
                        onItemExpansion(itemId, !expanded);
                    }
                },
                renderChildItems: childItems
                    ? function () {
                        return renderChildItems(childItems, depth + 1, __spreadArray(__spreadArray([], parentIndexes), [
                            index + 1,
                        ]));
                    }
                    : undefined,
            }, __assign(__assign({}, item), { visibleIndex: visibleIndex }), __assign({ id: id,
                expanderLeft: expanderLeft, expanderIcon: expanderIcon, multiSelect: multiSelect,
                labelKey: labelKey,
                valueKey: valueKey,
                getItemLabel: getItemLabel,
                getItemValue: getItemValue,
                getItemProps: getItemProps,
                linkComponent: linkComponent,
                rootId: rootId }, props));
        });
    };
    return (react_1.default.createElement(list_1.List, __assign({}, props, { ref: ref, id: id, "aria-activedescendant": activeId, "aria-multiselectable": multiSelect || undefined, role: "tree", tabIndex: 0, className: classnames_1.default(block(), className), onBlur: handleBlur, onFocus: handleFocus, onKeyDown: handleKeyDown }), renderChildItems(items, 0, [])));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        exports.Tree.propTypes = {
            id: PropTypes.string.isRequired,
            className: PropTypes.string,
            onBlur: PropTypes.func,
            onFocus: PropTypes.func,
            onKeyDown: PropTypes.func,
            "aria-label": PropTypes.string,
            "aria-labelledby": PropTypes.string,
            // TODO: Update to custom prop validation for itemId and parentId
            data: PropTypes.object.isRequired,
            rootId: PropTypes.string,
            sort: PropTypes.func,
            selectedIds: PropTypes.arrayOf(PropTypes.string).isRequired,
            onItemSelect: PropTypes.func.isRequired,
            onMultiItemSelect: PropTypes.func.isRequired,
            expandedIds: PropTypes.arrayOf(PropTypes.string).isRequired,
            onItemExpansion: PropTypes.func.isRequired,
            onMultiItemExpansion: PropTypes.func.isRequired,
            multiSelect: PropTypes.bool,
            expanderLeft: PropTypes.bool,
            expanderIcon: PropTypes.node,
            itemRenderer: PropTypes.func,
            labelKey: PropTypes.string,
            valueKey: PropTypes.string,
            getItemLabel: PropTypes.func,
            getItemValue: PropTypes.func,
            getItemProps: PropTypes.func,
            linkComponent: PropTypes.oneOfType([
                PropTypes.func,
                PropTypes.object,
                PropTypes.oneOf(["a"]),
            ]),
        };
    }
    catch (e) { }
}
//# sourceMappingURL=Tree.js.map