"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreeItem = void 0;
var react_1 = __importStar(require("react"));
var classnames_1 = __importDefault(require("classnames"));
var icon_1 = require("@react-md/icon");
var list_1 = require("@react-md/list");
var states_1 = require("@react-md/states");
var utils_1 = require("@react-md/utils");
var TreeGroup_1 = require("./TreeGroup");
var TreeItemExpanderIcon_1 = require("./TreeItemExpanderIcon");
var block = utils_1.bem("rmd-tree-item");
/**
 * This component renders an item within a tree with optional child items. This
 * should almost always be used from the `itemRenderer` prop from the `Tree`
 * component as it provides a lot of the required a11y props for you.
 */
exports.TreeItem = react_1.forwardRef(function TreeItem(_a, ref) {
    var _b;
    var id = _a.id, propClassName = _a.className, liStyle = _a.liStyle, liClassName = _a.liClassName, liRef = _a.liRef, depth = _a.depth, listSize = _a.listSize, itemIndex = _a.itemIndex, renderChildItems = _a.renderChildItems, expanded = _a.expanded, selected = _a.selected, focused = _a.focused, propExpanderIcon = _a.expanderIcon, _c = _a.expanderLeft, expanderLeft = _c === void 0 ? false : _c, textClassName = _a.textClassName, secondaryTextClassName = _a.secondaryTextClassName, _d = _a.textChildren, textChildren = _d === void 0 ? true : _d, primaryText = _a.primaryText, secondaryText = _a.secondaryText, propLeftAddon = _a.leftAddon, _e = _a.leftAddonType, leftAddonType = _e === void 0 ? "icon" : _e, _f = _a.leftAddonPosition, leftAddonPosition = _f === void 0 ? "middle" : _f, propRightAddon = _a.rightAddon, _g = _a.rightAddonType, rightAddonType = _g === void 0 ? "icon" : _g, _h = _a.rightAddonPosition, rightAddonPosition = _h === void 0 ? "middle" : _h, forceAddonWrap = _a.forceAddonWrap, _j = _a.height, height = _j === void 0 ? "auto" : _j, _k = _a.threeLines, threeLines = _k === void 0 ? false : _k, children = _a.children, _l = _a.contentComponent, Content = _l === void 0 ? "span" : _l, propIsLink = _a.isLink, _m = _a.disabled, disabled = _m === void 0 ? false : _m, readOnly = _a.readOnly, onFocus = _a.onFocus, props = __rest(_a, ["id", "className", "liStyle", "liClassName", "liRef", "depth", "listSize", "itemIndex", "renderChildItems", "expanded", "selected", "focused", "expanderIcon", "expanderLeft", "textClassName", "secondaryTextClassName", "textChildren", "primaryText", "secondaryText", "leftAddon", "leftAddonType", "leftAddonPosition", "rightAddon", "rightAddonType", "rightAddonPosition", "forceAddonWrap", "height", "threeLines", "children", "contentComponent", "isLink", "disabled", "readOnly", "onFocus"]);
    var expanderIcon = icon_1.useIcon("expander", propExpanderIcon);
    var isLink = typeof propIsLink === "boolean"
        ? propIsLink
        : typeof Content !== "string" || Content === "a";
    var _o = states_1.useInteractionStates({
        disabled: disabled,
        className: propClassName,
        handlers: isLink ? props : undefined,
        disableSpacebarClick: isLink,
    }), ripples = _o.ripples, className = _o.className, handlers = _o.handlers;
    var group;
    var leftAddon = propLeftAddon;
    var rightAddon = propRightAddon;
    if (renderChildItems) {
        var icon = (react_1.default.createElement(TreeItemExpanderIcon_1.TreeItemExpanderIcon, { rotated: expanded }, expanderIcon));
        if (expanderLeft) {
            leftAddon = icon;
        }
        else {
            rightAddon = icon;
        }
        group = react_1.default.createElement(TreeGroup_1.TreeGroup, { collapsed: !expanded }, renderChildItems());
    }
    var handleFocus = react_1.useCallback(function (event) {
        if (onFocus) {
            onFocus(event);
        }
        event.preventDefault();
        var tree = event.currentTarget.closest('[role="tree"]');
        if (tree) {
            tree.focus();
        }
    }, [onFocus]);
    var a11y = __assign(__assign({ "aria-expanded": renderChildItems ? expanded : undefined, "aria-level": depth + 1, "aria-setsize": listSize, "aria-posinset": itemIndex + 1, "aria-disabled": disabled ? "true" : undefined, id: id, role: "treeitem", tabIndex: -1 }, handlers), { onFocus: handleFocus });
    var noA11y = { role: "none" };
    return (react_1.default.createElement("li", __assign({}, (isLink ? noA11y : a11y), { ref: liRef, style: liStyle, className: classnames_1.default(block(), liClassName) }),
        react_1.default.createElement(Content, __assign({}, props, (isLink ? a11y : undefined), { ref: ref, className: classnames_1.default(block("content", (_b = {
                    link: isLink,
                    clickable: !disabled && !readOnly
                },
                _b[height] = height !== "auto" && height !== "normal",
                _b["three-lines"] = !!secondaryText && threeLines,
                _b.selected = selected,
                _b.focused = focused,
                _b)), className) }),
            react_1.default.createElement(list_1.ListItemChildren, { textClassName: textClassName, secondaryTextClassName: secondaryTextClassName, textChildren: textChildren, primaryText: primaryText, secondaryText: secondaryText, leftAddon: leftAddon, leftAddonType: leftAddonType, leftAddonPosition: leftAddonPosition, rightAddon: rightAddon, rightAddonType: rightAddonType, rightAddonPosition: rightAddonPosition, forceAddonWrap: forceAddonWrap }, children),
            ripples),
        group));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        exports.TreeItem.propTypes = {
            id: PropTypes.string.isRequired,
            depth: PropTypes.number.isRequired,
            itemIndex: PropTypes.number.isRequired,
            listSize: PropTypes.number.isRequired,
            selected: PropTypes.bool.isRequired,
            expanded: PropTypes.bool.isRequired,
            focused: PropTypes.bool.isRequired,
            renderChildItems: PropTypes.func,
            className: PropTypes.string,
            liRef: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),
            liStyle: PropTypes.object,
            liClassName: PropTypes.string,
            textClassName: PropTypes.string,
            secondaryTextClassName: PropTypes.string,
            isLink: PropTypes.bool,
            onFocus: PropTypes.func,
            contentComponent: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.func,
                PropTypes.object,
            ]),
            disabled: PropTypes.bool,
            readOnly: PropTypes.bool,
            expanderLeft: PropTypes.bool,
            expanderIcon: PropTypes.node,
            height: PropTypes.oneOf([
                "auto",
                "normal",
                "medium",
                "large",
                "extra-large",
            ]),
            threeLines: PropTypes.bool,
            textChildren: PropTypes.bool,
            children: PropTypes.node,
            primaryText: PropTypes.node,
            secondaryText: PropTypes.node,
            leftAddon: PropTypes.node,
            leftAddonType: PropTypes.oneOf([
                "icon",
                "avatar",
                "media",
                "large-media",
            ]),
            leftAddonPosition: PropTypes.oneOf(["top", "middle", "bottom"]),
            rightAddon: PropTypes.node,
            rightAddonType: PropTypes.oneOf([
                "icon",
                "avatar",
                "media",
                "large-media",
            ]),
            rightAddonPosition: PropTypes.oneOf(["top", "middle", "bottom"]),
            forceAddonWrap: PropTypes.bool,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=TreeItem.js.map