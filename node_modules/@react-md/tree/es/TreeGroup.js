var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from "react";
import cn from "classnames";
import { List } from "@react-md/list";
import { Collapse } from "@react-md/transition";
/**
 * The `TreeGroup` component is used to render a tree item's nested items
 * whenever the `expanded` prop is `true`. It uses the `Collapse` component
 * behind the scenes to animate in-and-out of view and will fully unrender when
 * the `expanded` prop is `false`.
 */
export var TreeGroup = forwardRef(function TreeGroup(_a, ref) {
    var style = _a.style, className = _a.className, collapsed = _a.collapsed, minHeight = _a.minHeight, minPaddingBottom = _a.minPaddingBottom, minPaddingTop = _a.minPaddingTop, timeout = _a.timeout, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, children = _a.children, temporary = _a.temporary, props = __rest(_a, ["style", "className", "collapsed", "minHeight", "minPaddingBottom", "minPaddingTop", "timeout", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "children", "temporary"]);
    return (React.createElement(Collapse, { style: style, className: cn("rmd-tree-group", className), collapsed: collapsed, minHeight: minHeight, minPaddingBottom: minPaddingBottom, minPaddingTop: minPaddingTop, timeout: timeout, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited, temporary: temporary },
        React.createElement(List, __assign({}, props, { ref: ref, role: "group" }), children)));
});
/* istanbul ignore next */
if (process.env.NODE_ENV !== "production") {
    try {
        var PropTypes = require("prop-types");
        TreeGroup.propTypes = {
            style: PropTypes.object,
            className: PropTypes.string,
            collapsed: PropTypes.bool.isRequired,
            minHeight: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
            minPaddingTop: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
            minPaddingBottom: PropTypes.oneOfType([
                PropTypes.string,
                PropTypes.number,
            ]),
            timeout: PropTypes.oneOfType([
                PropTypes.number,
                PropTypes.shape({
                    appear: PropTypes.number,
                    enter: PropTypes.number,
                    exit: PropTypes.number,
                }),
            ]),
            temporary: PropTypes.bool,
            children: PropTypes.node,
            onEnter: PropTypes.func,
            onEntering: PropTypes.func,
            onEntered: PropTypes.func,
            onExit: PropTypes.func,
            onExiting: PropTypes.func,
            onExited: PropTypes.func,
        };
    }
    catch (e) { }
}
//# sourceMappingURL=TreeGroup.js.map