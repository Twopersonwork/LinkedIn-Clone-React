var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from "react";
import { TreeItem } from "./TreeItem";
function isElementType(contentComponent) {
    return typeof contentComponent !== "undefined";
}
/**
 * A "reasonable" default implementation for rendering a tree item that extracts
 * the most used ListItem props and passes them down to the `TreeItem`.
 *
 * This is actually exported from this package so it can be used along with a
 * custom renderer for all items that have `isCustom` enabled.
 *
 * ```tsx
 * const itemRenderer: TreeItemRenderer<MyTreeItem> = (
 *   itemProps,
 *   item,
 *   treeProps
 * ) => {
 *   const { key } = itemProps;
 *   const { isCustom } = item;
 *   if (isCustom) {
 *     return <MyFancyNonTreeItem item={item} key={key} />
 *   }
 *
 *   return defaultTreeItemRenderer(itemProps, item, treeProps);
 * }
 * ```
 *
 * @param itemProps - The providied tree item props that should be passed down
 * for keyboard functionality, accessibility, and a `key` for the item.
 * @param item - The item itself. This is used to extract any of the common
 * ListItemChildren props.
 * @param treeProps - The props for the Tree this item is being rendered in.
 * This is really used so the `expanderLeft`, `expanderIcon`, `labelKey`,
 * `getItemLabel`, and `getItemProps` can be used to render the TreeItem
 * itself.
 * @returns a `TreeItem` or a custom `ReactElement`
 */
export function defaultTreeItemRenderer(itemProps, item, treeProps) {
    var treeItem = item;
    var focused = itemProps.focused, selected = itemProps.selected, expanded = itemProps.expanded;
    var expanderLeft = treeProps.expanderLeft, expanderIcon = treeProps.expanderIcon, labelKey = treeProps.labelKey, getItemLabel = treeProps.getItemLabel, getItemProps = treeProps.getItemProps, linkComponent = treeProps.linkComponent;
    var leftAddon = treeItem.leftAddon, leftAddonType = treeItem.leftAddonType, leftAddonPosition = treeItem.leftAddonPosition, rightAddon = treeItem.rightAddon, rightAddonType = treeItem.rightAddonType, rightAddonPosition = treeItem.rightAddonPosition, as = treeItem.as, to = treeItem.to, href = treeItem.href;
    var isLink;
    var readOnly;
    var disabled;
    var className;
    var liClassName;
    if (typeof treeItem.isLink === "boolean") {
        (isLink = treeItem.isLink);
    }
    if (typeof treeItem.readOnly === "boolean") {
        (readOnly = treeItem.readOnly);
    }
    if (typeof treeItem.disabled === "boolean") {
        (disabled = treeItem.disabled);
    }
    if (typeof treeItem.className === "string") {
        (className = treeItem.className);
    }
    if (typeof treeItem.liClassName === "string") {
        (liClassName = treeItem.liClassName);
    }
    var overrides = getItemProps(__assign(__assign({}, treeItem), { focused: focused,
        selected: selected,
        expanded: expanded }));
    var children = (overrides && overrides.children) || undefined;
    if (typeof children === "undefined") {
        children = getItemLabel(treeItem, labelKey);
    }
    var contentComponent;
    if (isElementType(treeItem.contentComponent)) {
        (contentComponent = treeItem.contentComponent);
    }
    if (isLink !== false && (to || href || isLink)) {
        contentComponent = contentComponent || linkComponent;
    }
    return (React.createElement(TreeItem, __assign({}, itemProps, { as: as, to: to, href: href, isLink: isLink, contentComponent: contentComponent, readOnly: readOnly, disabled: disabled, leftAddon: leftAddon, leftAddonType: leftAddonType, leftAddonPosition: leftAddonPosition, rightAddon: rightAddon, rightAddonType: rightAddonType, rightAddonPosition: rightAddonPosition, expanderLeft: expanderLeft, expanderIcon: expanderIcon, className: className, liClassName: liClassName }, overrides), children));
}
//# sourceMappingURL=defaultTreeItemRenderer.js.map