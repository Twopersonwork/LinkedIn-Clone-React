(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('react-dom')) :
	typeof define === 'function' && define.amd ? define(['exports', 'react', 'react-dom'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ReactMD = {}, global.React, global.ReactDOM));
}(this, (function (exports, React, ReactDOM) { 'use strict';

	function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

	var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
	var ReactDOM__default = /*#__PURE__*/_interopDefaultLegacy(ReactDOM);

	var classnames = {exports: {}};

	/*!
	  Copyright (c) 2018 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/

	(function (module) {
	/* global define */

	(function () {

		var hasOwn = {}.hasOwnProperty;

		function classNames() {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg)) {
					if (arg.length) {
						var inner = classNames.apply(null, arg);
						if (inner) {
							classes.push(inner);
						}
					}
				} else if (argType === 'object') {
					if (arg.toString === Object.prototype.toString) {
						for (var key in arg) {
							if (hasOwn.call(arg, key) && arg[key]) {
								classes.push(key);
							}
						}
					} else {
						classes.push(arg.toString());
					}
				}
			}

			return classes.join(' ');
		}

		if (module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else {
			window.classNames = classNames;
		}
	}());
	}(classnames));

	var cn = classnames.exports;

	/**
	 * A utility function to get the current container for the portal.  For SSR, the
	 * container will always be `null` since portals don't work server side.
	 *
	 * @param into - The element to portal into
	 * @param intoId - An id for an element to portal into
	 * @returns the portal container element or null
	 */
	function getContainer(into, intoId) {
	    if (typeof document === "undefined") {
	        return null;
	    }
	    var container = null;
	    if (typeof into === "undefined" && typeof intoId === "undefined") {
	        container = document.body;
	    }
	    else if (typeof intoId === "string") {
	        container = document.getElementById(intoId);
	    }
	    else if (typeof into === "string") {
	        container = document.querySelector(into);
	    }
	    else if (typeof into === "function") {
	        container = into();
	    }
	    else if (into) {
	        container = into;
	    }
	    return container;
	}

	/**
	 * This component is a simple wrapper for the `createPortal` API from ReactDOM
	 * that will just ensure that `null` is always returned for server side
	 * rendering as well as a "nice" way to choose specific portal targets or just
	 * falling back to the `document.body`.
	 */
	function Portal(_a) {
	    var into = _a.into, intoId = _a.intoId, children = _a.children;
	    var _b = React.useState(null), container = _b[0], setContainer = _b[1];
	    // setting the container via useEffect instead of immediately in the render
	    // just so that it doesn't throw an error immediately if the dom hasn't fully
	    // painted after a SSR
	    React.useEffect(function () {
	        var nextContainer = getContainer(into, intoId);
	        if (container !== nextContainer) {
	            setContainer(nextContainer);
	        }
	    }, [into, intoId, container]);
	    if (!container) {
	        return null;
	    }
	    return ReactDOM.createPortal(children, container);
	}

	/**
	 * This is a very simple component that is used in other places within react-md
	 * to conditionally render the children within a portal or not based on general
	 * portal config props.
	 */
	function ConditionalPortal(_a) {
	    var portal = _a.portal, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, children = _a.children;
	    if (!portal && !portalInto && !portalIntoId) {
	        return children;
	    }
	    return (React__default['default'].createElement(Portal, { into: portalInto, intoId: portalIntoId }, children));
	}

	/**
	 * A small utility function that allows me to apply a passed in ref along with
	 * my own custom ref logic.
	 *
	 * @param instance - The DOM Node instance
	 * @param ref - The prop ref
	 */
	function applyRef(instance, ref) {
	    if (!ref) {
	        return;
	    }
	    if (typeof ref === "function") {
	        ref(instance);
	    }
	    else if (typeof ref === "object") {
	        ref.current = instance;
	    }
	}

	function modify(base, modifier) {
	    if (!modifier) {
	        return base;
	    }
	    var hasOwn = Object.prototype.hasOwnProperty;
	    return Object.keys(modifier).reduce(function (s, mod) {
	        if (hasOwn.call(modifier, mod) && modifier[mod]) {
	            s = s + " " + base + "--" + mod;
	        }
	        return s;
	    }, base);
	}
	/**
	 * Applies the BEM styled class name to an element.
	 *
	 * @see https://en.bem.info/methodology/css/
	 * @param base - The base class to use
	 * @returns a function to call that generates the full class name
	 */
	function bem(base) {
	    /**
	     * Creates the full class name from the base block name. This can be called
	     * without any arguments which will just return the base block name (kind of
	     * worthless), or you can provide a child element name and modifiers.
	     *
	     * @param elementOrModifier - This is either the child element name or an
	     * object of modifiers to apply. This **must** be a string if the second
	     * argument is provided.
	     * @param modifier - Any optional modifiers to apply to the block and optional
	     * element.
	     * @returns the full class name
	     */
	    return function block(elementOrModifier, modifier) {
	        if (!elementOrModifier) {
	            return base;
	        }
	        if (typeof elementOrModifier !== "string") {
	            return modify(base, elementOrModifier);
	        }
	        return modify(base + "__" + elementOrModifier, modifier);
	    };
	}

	var SHORTHAND_REGEX = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
	var VERBOSE_REGEX = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i;
	/**
	 * Converts a hex string into an rgb value. This is useful for deteching color
	 * contrast ratios and other stuff.
	 *
	 * @param hex - The hex string to convert
	 * @returns an object containing the r, g, b values for the color.
	 */
	function hexToRGB(hex) {
	    hex = hex.replace(SHORTHAND_REGEX, function (_m, r, g, b) { return "" + r + r + g + g + b + b; });
	    var result = hex.match(VERBOSE_REGEX) || [];
	    var r = parseInt(result[1] || "", 16) || 0;
	    var g = parseInt(result[2] || "", 16) || 0;
	    var b = parseInt(result[3] || "", 16) || 0;
	    return [r, g, b];
	}

	var RED_MULTIPLIER = 0.2126;
	var GREEN_MULTIPLIER = 0.7152;
	var BLUE_MULTIPLIER = 0.0722;
	/**
	 * I really couldn't figure out how to name these "magic" numbers since the
	 * formula doesn't really describe it much:
	 *
	 * @see https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 * @internal
	 */
	function get8BitColor(color) {
	    color /= 255;
	    if (color <= 0.03928) {
	        return color / 12.92;
	    }
	    return Math.pow(((color + 0.055) / 1.055), 2.4);
	}
	/**
	 * A number closest to 0 should be closest to black while a number closest to 1
	 * should be closest to white.
	 *
	 * @see https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 * @internal
	 */
	function getLuminance(color) {
	    var _a = hexToRGB(color), r = _a[0], g = _a[1], b = _a[2];
	    var red = get8BitColor(r) * RED_MULTIPLIER;
	    var green = get8BitColor(g) * GREEN_MULTIPLIER;
	    var blue = get8BitColor(b) * BLUE_MULTIPLIER;
	    return red + green + blue;
	}

	/**
	 * Gets the contrast ratio between a background color and a foreground color.
	 *
	 * @see https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 *
	 * @param background - The background color
	 * @param foreground - The foreground color. This is normally the `color` css
	 * value.
	 * @returns the contrast ratio between the background and foreground colors.
	 */
	function getContrastRatio(background, foreground) {
	    var backgroundLuminance = getLuminance(background) + 0.05;
	    var foregroundLuminance = getLuminance(foreground) + 0.05;
	    return (Math.max(backgroundLuminance, foregroundLuminance) /
	        Math.min(backgroundLuminance, foregroundLuminance));
	}

	/**
	 * The contrast ratio that can be used for large text where large text is
	 * considered 18pt or 14pt bold.
	 */
	var LARGE_TEXT_CONTRAST_RATIO = 3;
	/**
	 * The contrast ratio that can be used for normal text.
	 */
	var NORMAL_TEXT_CONTRAST_RATIO = 4.5;
	/**
	 * The AAA contrast ratio for passing WGAC 2.0 color contrast ratios.
	 */
	var AAA_CONTRAST_RATIO = 7;
	/**
	 * Checks if there is an acceptable contrast ratio between the background and
	 * foreground colors based on the provided compliance level.
	 *
	 * @param background - The background color to check against
	 * @param foreground - The foreground color to check against
	 * @param compliance - The compliance level to use or a custom number as a
	 * ratio.
	 * @returns true if there is enough contrast between the foreground and
	 * background colors for the provided compliance level.
	 */
	function isContrastCompliant(background, foreground, compliance) {
	    if (compliance === void 0) { compliance = "normal"; }
	    var ratio;
	    switch (compliance) {
	        case "large":
	            ratio = LARGE_TEXT_CONTRAST_RATIO;
	            break;
	        case "normal":
	            ratio = NORMAL_TEXT_CONTRAST_RATIO;
	            break;
	        case "AAA":
	            ratio = AAA_CONTRAST_RATIO;
	            break;
	        default:
	            ratio = compliance;
	    }
	    return getContrastRatio(background, foreground) >= ratio;
	}

	/**
	 * Typeguard that will check if the provided checkable thing is a
	 * MutableRefObject or just an HTMLElement.
	 *
	 * @internal
	 */
	var isMutableRefObject = function (thing) {
	    return !!thing &&
	        typeof thing.current !== "undefined";
	};
	/**
	 * Gets the HTMLElement or null from the checkable thing.
	 *
	 * @internal
	 */
	var getElement$1 = function (thing) {
	    if (isMutableRefObject(thing)) {
	        return thing.current;
	    }
	    return thing;
	};
	/**
	 * Checks if a container element contains another element as a child while
	 * allowing for nulls or a MutableRefObject of HTMLElement or null. Mostly just
	 * a convenience function that should be used internally.
	 *
	 * @param container - The element to use as a container element. This can be an
	 * HTMLElement, null, or a MutableRefObject of HTMLElement or null.
	 * @param child - The element that might be a child of the container
	 * element. This can be an HTMLElement, null, or a MutableRefObject of
	 * HTMLElement or null.
	 * @returns True if the container contains the child element and both the
	 * container and child are valid HTMLElements (not null).
	 * @internal
	 */
	function containsElement(container, child) {
	    container = getElement$1(container);
	    child = getElement$1(child);
	    return !!(container && child && container.contains(child));
	}

	var __assign$hi = (undefined && undefined.__assign) || function () {
	    __assign$hi = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$hi.apply(this, arguments);
	};
	/**
	 * This is normally used for reusable shareable configs that have multiple
	 * shared options with default values that should be used. This basically works
	 * just like `defaultProps` in react.
	 *
	 * @internal
	 * @param optional - The original object that has the optional/omitted values
	 * @param required - The required default values that should be used to fill the
	 * optional object with
	 * @returns a new object with both the values of the optional and required
	 * objects but use the optional values if they were defined.
	 */
	function defaults(optional, required) {
	    var keys = Object.keys(required);
	    return keys.reduce(function (result, key) {
	        if (typeof result[key] === "undefined") {
	            result[key] = required[key];
	        }
	        return result;
	    }, __assign$hi({}, optional));
	}

	var __rest$2i = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var context$b = React.createContext({
	    root: true,
	    dir: "ltr",
	    toggleDir: function () {
	        throw new Error("Tried to toggle the current writing direction without initializing the `Dir` component.");
	    },
	});
	var Provider$5 = context$b.Provider;
	/**
	 * Gets the writing direction context which provides access to the current `dir`
	 * and a `toggleDir` function.
	 *
	 * @remarks \@since 2.3.0
	 */
	function useDir() {
	    var _a = React.useContext(context$b); _a.root; var current = __rest$2i(_a, ["root"]);
	    return current;
	}
	/**
	 * @remarks \@since 2.3.0
	 */
	var DEFAULT_DIR = function () {
	    var dir = "ltr";
	    if (typeof document !== "undefined") {
	        var rootDir = document.documentElement.getAttribute("dir");
	        dir = rootDir === "rtl" ? "rtl" : "ltr";
	    }
	    return dir;
	};
	/**
	 * The `Dir` component is used to handle the current writing direction within
	 * your app as well as conditionally updating the writing direction for small
	 * sections in your app. When this component is used for the first time near the
	 * root of your React component tree, the current direction will be applied to
	 * the root `<html>` element. Otherwise the current dir will be cloned into the
	 * child element so it can be passed as a prop.
	 *
	 * ```tsx
	 * // html element will be updated to have `dir="ltr"`
	 * ReactDOM.render(<Dir><App /></Dir>, root)
	 * ```
	 *
	 * ```tsx
	 * // html element will be updated to have `dir="rtl"` while the `<span>` will
	 * // now be `<span dir="ltr">`
	 * ReactDOM.render(
	 *   <Dir defaultDir="rtl">
	 *     <Some>
	 *       <Other>
	 *         <Components>
	 *           <Dir defaultDir="ltr">
	 *             <span>Content</span>
	 *           </Dir>
	 *         </Components>
	 *       </Other>
	 *     </Some>
	 *   </Dir>,
	 *   root
	 * );
	 * ```
	 *
	 * Note: Since the `dir` is cloned into the child element, you need to make sure
	 * that the child is either a DOM element or the `dir` prop is passed from your
	 * custom component.
	 *
	 * @remarks \@since 2.3.0
	 */
	function Dir(_a) {
	    var children = _a.children, _b = _a.defaultDir, defaultDir = _b === void 0 ? DEFAULT_DIR : _b;
	    var root = React.useContext(context$b).root;
	    var _c = React.useState(defaultDir), dir = _c[0], setDir = _c[1];
	    React.useEffect(function () {
	        if (!root || typeof document === "undefined") {
	            return;
	        }
	        document.documentElement.setAttribute("dir", dir);
	        return function () {
	            document.documentElement.removeAttribute("dir");
	        };
	    }, [dir, root]);
	    var toggleDir = React.useCallback(function () {
	        setDir(function (prevDir) { return (prevDir === "ltr" ? "rtl" : "ltr"); });
	    }, []);
	    var value = React.useMemo(function () { return ({ root: false, dir: dir, toggleDir: toggleDir }); }, [dir, toggleDir]);
	    var child = React.Children.only(children);
	    if (!root) {
	        child = React.cloneElement(child, { dir: dir });
	    }
	    return React__default['default'].createElement(Provider$5, { value: value }, child);
	}

	/* eslint-disable import/no-mutable-exports, getter-return */
	var noop$b = function () {
	    // do nothing
	};
	var isSupported = false;
	/**
	 * Checks if the browser supports passive events. This shouldn't really be used
	 * outside of this file, but you can always check again if needed.
	 */
	function update() {
	    if (typeof window === "undefined") {
	        return false;
	    }
	    var isPassiveEventsSupported = false;
	    var opts = Object.defineProperty({}, "passive", {
	        get: function () {
	            isPassiveEventsSupported = true;
	        },
	    });
	    window.addEventListener("testSupportsPassive", noop$b, opts);
	    window.removeEventListener("testSupportsPassive", noop$b, opts);
	    isSupported = isPassiveEventsSupported;
	    return isPassiveEventsSupported;
	}
	// invoke immediately
	update();

	var passiveEvents = /*#__PURE__*/Object.freeze({
		__proto__: null,
		update: update,
		get isSupported () { return isSupported; }
	});

	var delegatedEvents = [];
	/* eslint-disable @typescript-eslint/explicit-function-return-type */
	/**
	 * Creates the delegated event handler that will run all the callbacks once an
	 * event happens. The callbacks' invocation can also be throttled for event
	 * types that trigger rapidly for additional performance.
	 *
	 * The `<K extends keyof WindowEventMap` is a nice thing I found while looking
	 * through the `lib.d.ts` implementation of `addEventListener` that will allow
	 * you to get the "correct" event type when using the `add` and `remove`
	 * functions once you have created this event handler. Otherwise there'd be ts
	 * errors trying to do `MouseEvent` or `KeyboardEvent` in your listeners.
	 */
	function createEventHandler(throttle, callbacks) {
	    var running = false;
	    var runCallbacks = function (event) { return function () {
	        for (var i = 0; i < callbacks.length; i += 1) {
	            callbacks[i](event);
	        }
	        running = false;
	    }; };
	    return function eventHandler(event) {
	        if (!throttle) {
	            runCallbacks(event)();
	            return;
	        }
	        if (running) {
	            return;
	        }
	        running = true;
	        window.requestAnimationFrame(runCallbacks(event));
	    };
	}
	/* eslint-enable @typescript-eslint/explicit-function-return-type */
	/**
	 * Creates a throttled event handler for the provided event type and event
	 * target.
	 */
	function createDelegatedEventHandler(eventType, eventTarget, throttle, options) {
	    if (eventTarget === void 0) { eventTarget = window; }
	    if (throttle === void 0) { throttle = false; }
	    var callbacks = [];
	    var handler = createEventHandler(throttle, callbacks);
	    return {
	        /**
	         * Attempts to add the provided callback to the list of callbacks for the
	         * throttled event. If this is the first callback to be added, the throttled
	         * event will also be started.
	         */
	        add: function (callback) {
	            if (!callbacks.length) {
	                eventTarget.addEventListener(eventType, handler, options);
	            }
	            if (callbacks.indexOf(callback) === -1) {
	                callbacks.push(callback);
	            }
	        },
	        /**
	         * Attempts to remove the provided callback from the lsit of callbacks for
	         * the throttled event. If this is the last callback that was removed, the
	         * throttled event will also be stopped.
	         */
	        remove: function (callback) {
	            var i = callbacks.indexOf(callback);
	            if (i >= 0) {
	                callbacks.splice(i, 1);
	                if (!callbacks.length) {
	                    eventTarget.removeEventListener(eventType, handler, options);
	                }
	            }
	        },
	    };
	}
	/**
	 * Creates a delegated event listener using custom events. Most of this code
	 * comes from the MDN about resize listeners.
	 *
	 * This will return an object for adding or removing event handlers for the
	 * provided `eventType` since only one base throttled event listener will be
	 * created. Each callback that is added will be called with the event each time
	 * the event is triggered. This does mean that you will manually need to remove
	 * your callback like normal or else it can be called when no longer in use.
	 * This also means that it doesn't "hurt" to call this function without
	 * immediately calling the `add` function since the event won't start until
	 * there is at least 1 callback.
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/Events/resize#Examples
	 * @param eventType - One of the event types that should be used to create a
	 * delegated event for. This should be things like resize, click, scroll, etc.
	 * @param eventTarget - The target that should have the delegated event handler
	 * attached to. This is normally the window, but can be any element as needed.
	 * @param throttle - Boolean if the event should be throttled or not. Normally
	 * only event types like resize or scroll should be throttled for performance
	 * boosts, but anything can be.
	 * @returns The delegated event handler that allows you to add or remove
	 * `EventListener`s to that event.
	 */
	function delegateEvent(eventType, eventTarget, throttle, options) {
	    if (eventTarget === void 0) { eventTarget = window; }
	    if (throttle === void 0) { throttle = eventType === "resize" || eventType === "scroll"; }
	    var index = delegatedEvents.findIndex(function (event) {
	        return event.type === eventType &&
	            event.target === eventTarget &&
	            event.options === options &&
	            event.throttle === throttle;
	    });
	    if (index === -1) {
	        delegatedEvents.push({
	            type: eventType,
	            target: eventTarget,
	            options: options,
	            throttle: throttle,
	            handler: createDelegatedEventHandler(eventType, eventTarget, throttle, options),
	        });
	        index = delegatedEvents.length - 1;
	    }
	    return delegatedEvents[index].handler;
	}

	var __assign$hh = (undefined && undefined.__assign) || function () {
	    __assign$hh = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$hh.apply(this, arguments);
	};
	/**
	 * A helper function for manually setting touch events on elements when they
	 * cannot be directly added with a React event listener. This will attempt to
	 * create a passive event if the browser supports passive events so there is
	 * better scroll performance.
	 */
	function setTouchEvent(
	/**
	 * Boolean if the event should be added or removed.
	 */
	add, 
	/**
	 * The element to add the touch event to.
	 */
	el, 
	/**
	 * One of the touch types to modify.
	 */
	eventType, 
	/**
	 * The touch event callback function to use.
	 */
	callback, 
	/**
	 * Boolean if the event should be captured if the browser does not support
	 * passive events.
	 */
	capture, 
	/**
	 * Any additional options to provide to the passive event.
	 */
	options) {
	    if (capture === void 0) { capture = false; }
	    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
	    // @ts-expect-error
	    el[(add ? "add" : "remove") + "EventListener"]("touch" + eventType, callback, isSupported ? __assign$hh({ passive: true, capture: capture }, options) : capture);
	}
	/**
	 * A simple wrapper for the `setTouchEvent` to just always add events.
	 */
	function addTouchEvent(
	/**
	 * The element to add the touch event to.
	 */
	el, 
	/**
	 * One of the touch types to modify.
	 */
	eventType, 
	/**
	 * The touch event callback function to use.
	 */
	callback, 
	/**
	 * Boolean if the event should be captured if the browser does not support
	 * passive events.
	 */
	capture, 
	/**
	 * Any additional options to provide to the passive event.
	 */
	options) {
	    if (capture === void 0) { capture = false; }
	    setTouchEvent(true, el, eventType, callback, capture, options);
	}
	/**
	 * A simple wrapper for the `setTouchEvent` to just always remove events.
	 *
	 * @param el - The element to add the touch event to.
	 * @param eventType - One of the touch types to modify.
	 */
	function removeTouchEvent(el, eventType, 
	/**
	 * The touch event callback function to use.
	 */
	callback, 
	/**
	 * Boolean if the event should be captured if the browser does not support
	 * passive events.
	 */
	capture, 
	/**
	 * Any additional options to provide to the passive event.
	 */
	options) {
	    if (capture === void 0) { capture = false; }
	    setTouchEvent(false, el, eventType, callback, capture, options);
	}

	/**
	 * This hook allows you to provide anything that should be "cached" and puts it
	 * into a ref that'll be updated each render. This is pretty overkill for most
	 * places, but it's really nice when you want to create event handlers that
	 * shouldn't update if the developer used arrow functions to define callbacks.
	 * (A great example is for ref callbacks that *shouldn't* be triggered each
	 * render. But that might just be a programming error instead).
	 *
	 * @param cacheable - The cacheable thing that gets updated after each render.
	 * @returns a mutable ref object containing the current cache.
	 */
	function useRefCache(cacheable) {
	    var ref = React.useRef(cacheable);
	    React.useEffect(function () {
	        ref.current = cacheable;
	    });
	    return ref;
	}

	/**
	 * This hook will create a performant scroll listener by enabling passive events
	 * if it's supported by the browser and delegating the event as needed.
	 */
	function useScrollListener(_a) {
	    var _b = _a.enabled, enabled = _b === void 0 ? true : _b, onScroll = _a.onScroll, element = _a.element, _c = _a.options, options = _c === void 0 ? isSupported ? { passive: true } : false : _c;
	    var callback = useRefCache(onScroll);
	    React.useEffect(function () {
	        if (!enabled) {
	            return;
	        }
	        var eventHandler = delegateEvent("scroll", element || window, true, options);
	        var handler = function (event) { return callback.current(event); };
	        eventHandler.add(handler);
	        return function () {
	            eventHandler.remove(handler);
	        };
	        // disabled since useRefCache
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, [enabled, element, options]);
	}

	/**
	 * This is a simple component wrapper for the `useScrollListener` hook.
	 */
	function ScrollListener(props) {
	    useScrollListener(props);
	    return null;
	}

	/**
	 * Gets the current percentage based on the min, max, and current value.
	 *
	 * @param min - the min value
	 * @param max - the max value
	 * @param value - the current value to compare against
	 * @returns the percentage that the `value` is between the `min` and `max`
	 * values.
	 */
	function getPercentage(min, max, value) {
	    if (min >= max) {
	        throw new RangeError("A range must have the min value less than the max value");
	    }
	    if (value > max || value < min) {
	        throw new RangeError("A value must be between the min and max values");
	    }
	    var range = max - min;
	    var start = value - min;
	    var percentage = start / range;
	    return Math.max(0, Math.min(Math.abs(percentage), 1));
	}

	/**
	 * The amount of time a user must hover an element before the temporary element
	 * becomes visible.
	 *
	 * @remarks \@since 2.8.0
	 */
	var DEFAULT_HOVER_MODE_VISIBLE_IN_TIME = 1000;
	/**
	 * The amount of time the user must no longer hover any element attached to the
	 * {@link HoverModeProvider} to disable the hover mode.
	 *
	 * @remarks \@since 2.8.0
	 */
	var DEFAULT_HOVER_MODE_DEACTIVATION_TIME = 1000;
	/**
	 * The amount of time the user must not hover any element attached to the same
	 * instance of the {@link useHoverMode} hook when the using the sticky mode.
	 *
	 * @remarks \@since 2.8.0
	 */
	var DEFAULT_HOVER_MODE_STICKY_EXIT_TIME = 300;

	/**
	 * A simple hook that only triggers the callback when a component is unmounted.
	 * This will make sure that the callback function does not have a stale closure
	 * by the time the component unmounts as well.
	 *
	 * @example
	 * Simple Example
	 * ```ts
	 * useOnUnmount(() => {
	 *   console.log('Component is unmounted.');
	 * });
	 *
	 * const [data, setData] = useState(initialData);
	 * useOnUnmount(() => {
	 *   API.saveCurrentData(data);
	 * });
	 *
	 * // update data
	 * ```
	 *
	 * @remarks \@since 2.7.1
	 * @param callback - the function to call when the component unmounts.
	 */
	function useOnUnmount(callback) {
	    var ref = React.useRef(callback);
	    React.useEffect(function () {
	        ref.current = callback;
	    });
	    return React.useEffect(function () { return function () { return ref.current(); }; }, []);
	}

	/** @internal */
	var noop$a = function () {
	    // do nothing
	};
	/** @internal */
	var context$a = React.createContext({
	    visibleInTime: DEFAULT_HOVER_MODE_VISIBLE_IN_TIME,
	    enableHoverMode: noop$a,
	    disableHoverMode: noop$a,
	    startDisableTimer: noop$a,
	});
	/**
	 * @internal
	 * @remarks \@since 2.8.0
	 */
	var HoverModeContextProvider = context$a.Provider;
	/**
	 * Gets the {@link HoverModeContext} which allows you implement hover mode
	 * functionality for any component. This is mostly an internal hook since
	 * everything you need will be available in the {@link useHoverMode} hook.
	 *
	 * @internal
	 * @remarks \@since 2.8.0
	 * @returns The {@link HoverModeContext}
	 */
	function useHoverModeContext() {
	    return React.useContext(context$a);
	}

	/**
	 * This component should normally be mounted near the root of your app to enable
	 * hover mode for child components. However, it can also be used at other levels
	 * if hover mode functionality should not carry over between two different parts
	 * of the screen.
	 *
	 * @example
	 * Separating Hover Mode
	 * ```tsx
	 * export default function Example(): ReactElement {
	 *   return (
	 *     <>
	 *       <HoverModeProvider>
	 *         <HeaderActions />
	 *       </HoverModeProvider>
	 *       <HoverModeProvider>
	 *         <MainContent />
	 *       </HoverModeProvider>
	 *     </>
	 *   );
	 * }
	 * ```
	 *
	 * @remarks \@since 2.8.0
	 */
	function HoverModeProvider(_a) {
	    var children = _a.children, _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.defaultVisibleInTime, defaultVisibleInTime = _c === void 0 ? DEFAULT_HOVER_MODE_VISIBLE_IN_TIME : _c, _d = _a.deactivateTime, deactivateTime = _d === void 0 ? DEFAULT_HOVER_MODE_DEACTIVATION_TIME : _d;
	    var _e = React.useState(defaultVisibleInTime), visibleInTime = _e[0], setVisibleInTime = _e[1];
	    var timeoutRef = React.useRef();
	    var enableHoverMode = React.useCallback(function () {
	        if (disabled) {
	            return;
	        }
	        window.clearTimeout(timeoutRef.current);
	        setVisibleInTime(0);
	    }, [disabled]);
	    var disableHoverMode = React.useCallback(function () {
	        window.clearTimeout(timeoutRef.current);
	        setVisibleInTime(defaultVisibleInTime);
	    }, [defaultVisibleInTime]);
	    var startDisableTimer = React.useCallback(function () {
	        window.clearTimeout(timeoutRef.current);
	        timeoutRef.current = window.setTimeout(function () {
	            setVisibleInTime(defaultVisibleInTime);
	        }, deactivateTime);
	    }, [defaultVisibleInTime, deactivateTime]);
	    React.useEffect(function () {
	        if (disabled) {
	            window.clearTimeout(timeoutRef.current);
	            setVisibleInTime(defaultVisibleInTime);
	        }
	    }, [disabled, defaultVisibleInTime]);
	    useOnUnmount(function () {
	        window.clearTimeout(timeoutRef.current);
	    });
	    var context = React.useMemo(function () { return ({
	        visibleInTime: visibleInTime,
	        enableHoverMode: enableHoverMode,
	        disableHoverMode: disableHoverMode,
	        startDisableTimer: startDisableTimer,
	    }); }, [disableHoverMode, enableHoverMode, startDisableTimer, visibleInTime]);
	    return (React__default['default'].createElement(HoverModeContextProvider, { value: context }, children));
	}

	/**
	 * This is copy/pasted from react-redux which has some more information about
	 * this and how to fix "invalid" warnings while running tests.
	 *
	 * @see https://github.com/reduxjs/react-redux/blob/4c907c0870c6b9a136dd69be294c17d1dc63c8f5/src/utils/useIsomorphicLayoutEffect.js
	 */
	var useIsomorphicLayoutEffect = typeof window !== "undefined" &&
	    typeof window.document !== "undefined" &&
	    typeof window.document.createElement !== "undefined"
	    ? React.useLayoutEffect
	    : React.useEffect;

	/**
	 * @internal
	 */
	var TOUCH_TIMEOUT = 1200;
	/**
	 * This hook helps determine the current interaction mode by attaching the
	 * required event listeners to the window. The `mode` will always be defaulted
	 * to `mouse` at first since it has the least possibilities of causing errors
	 * with styles since the mouse-only styles are normally just `:hover` effects.
	 *
	 * ## Switching between modes:
	 *
	 * ### While in `mouse` mode:
	 *
	 * - any `keydown` event will switch to `keyboard` mode
	 *   - this does have the side effect of meta keys also causing the switch over,
	 *     but it feels fine since it helps show the current focus in the document
	 *     as well
	 * - any `touchstart` event will switch to `touch` mode
	 *
	 * ### While in `keyboard` mode:
	 *
	 * - any `mousedown` event will switch to `mouse` mode
	 *   - it is perfectly okay to move the mouse while in keyboard mode, but still
	 *     want to keep the keyboard styles until the user actually starts clicking
	 * - any `touchstart` event will switch to `touch` mode
	 *
	 * ### While in `touch` mode:
	 *
	 * - any `mousemove` event will switch to `mouse` mode, but **only** if there
	 *   hasn't been a `contextmenu` event within the last `1.2s`
	 *   - you can really only switch back to `mouse` mode if you are using the
	 *     devtools to emulate devices OR using a touch-desktop. I don't know how
	 *     common this really is though.
	 *   - touching the screen will always fire a `mousemove` event (which is why
	 *     the `:hover` styles are normally with `rmd-utils-mouse-only`) and even
	 *     after the `contextmenu` event. Normally want to go back to `mouse` mode
	 *     when the mouse re-enters the `window`
	 *
	 * Note: It's currently impossible to switch from `touch` to `keyboard`
	 * immediately. You'd first need to switch to `mouse` and then to `keyboard`. I
	 * don't really know of any use-cases other than the weird touch-desktop stuff
	 * and I have no experience using them.
	 *
	 * @internal
	 */
	function useInteractionMode() {
	    var _a = React.useState("mouse"), mode = _a[0], setMode = _a[1];
	    var lastTouchTime = React.useRef(0);
	    var isTouchContextMenu = React.useRef(false);
	    useIsomorphicLayoutEffect(function () {
	        var enableMouseMode = function () { return setMode("mouse"); };
	        var enableKeyboardMode = function () { return setMode("keyboard"); };
	        var handleTouchStart = function () {
	            lastTouchTime.current = Date.now();
	            isTouchContextMenu.current = false;
	            setMode("touch");
	        };
	        var handleMouseMove = function () {
	            if (isTouchContextMenu.current ||
	                Date.now() - lastTouchTime.current < TOUCH_TIMEOUT) {
	                isTouchContextMenu.current = false;
	                return;
	            }
	            enableMouseMode();
	        };
	        var handleContextMenu = function () {
	            isTouchContextMenu.current = true;
	        };
	        var className = "rmd-utils--" + mode;
	        document.body.classList.add(className);
	        window.addEventListener("touchstart", handleTouchStart, true);
	        if (mode === "mouse") {
	            window.addEventListener("keydown", enableKeyboardMode, true);
	        }
	        else if (mode === "keyboard") {
	            window.addEventListener("mousedown", enableMouseMode, true);
	        }
	        else {
	            window.addEventListener("mousemove", handleMouseMove, true);
	            window.addEventListener("contextmenu", handleContextMenu, true);
	        }
	        return function () {
	            document.body.classList.remove(className);
	            window.removeEventListener("touchstart", handleTouchStart, true);
	            if (mode === "mouse") {
	                window.removeEventListener("keydown", enableKeyboardMode, true);
	            }
	            else if (mode === "keyboard") {
	                window.removeEventListener("mousedown", enableMouseMode, true);
	            }
	            else {
	                window.removeEventListener("mousemove", handleMouseMove, true);
	                window.removeEventListener("contextmenu", handleContextMenu, true);
	            }
	        };
	    }, [mode]);
	    return mode;
	}

	/**
	 * @internal
	 */
	var modeContext = React.createContext("mouse");
	/**
	 * @internal
	 */
	var parentContext = React.createContext(false);
	/**
	 * @internal
	 */
	var UserInteractionModeProvider = modeContext.Provider;
	/**
	 * @internal
	 */
	var ParentProvider = parentContext.Provider;
	/**
	 * Returns the current user interaction mode.
	 *
	 * @returns {@link UserInteractionMode}
	 */
	function useUserInteractionMode() {
	    return React.useContext(modeContext);
	}
	/**
	 * Example:
	 *
	 * ```ts
	 * const isKeyboard = useIsUserInteractionMode("keyboard");
	 * // do stuff if keyboard only
	 * ```
	 *
	 * @param mode - The {@link UserInteractionMode} to check against.
	 * @returns `true` if the current user interaction mode matches the provided
	 * mode.
	 */
	function useIsUserInteractionMode(mode) {
	    return useInteractionMode() === mode;
	}
	/**
	 * This component is used to determine how the user is current interacting with
	 * your app as well as modifying the `document.body`'s `className` with the
	 * current mode. This is what allows the `rmd-utils-phone-only`,
	 * `rmd-utils-keyboard-only`, and `rmd-utils-mouse-only` mixins to work.
	 *
	 * @remarks \@since 2.6.0 Renamed from `InteractionModeListener`
	 * @throws When this component has been mounted multiple times in your app.
	 */
	function UserInteractionModeListener(_a) {
	    var children = _a.children;
	    var mode = useInteractionMode();
	    if (React.useContext(parentContext)) {
	        throw new Error("Mounted multiple `UserInteractionModeListener` components.");
	    }
	    return (React__default['default'].createElement(UserInteractionModeProvider, { value: mode },
	        React__default['default'].createElement(ParentProvider, { value: true }, children)));
	}
	/**
	 * @deprecated Use the `UserInteractionModeListener` component instead.
	 * @remarks \@since 2.6.0
	 */
	var InteractionModeListener = UserInteractionModeListener;

	var __assign$hg = (undefined && undefined.__assign) || function () {
	    __assign$hg = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$hg.apply(this, arguments);
	};
	function useHoverMode(_a) {
	    var _b = _a === void 0 ? {} : _a, _c = _b.disabled, disabled = _c === void 0 ? false : _c, _d = _b.sticky, sticky = _d === void 0 ? false : _d, propOnClick = _b.onClick, propOnMouseEnter = _b.onMouseEnter, propOnMouseLeave = _b.onMouseLeave, _e = _b.defaultVisible, defaultVisible = _e === void 0 ? false : _e, _f = _b.exitVisibilityDelay, exitVisibilityDelay = _f === void 0 ? sticky ? DEFAULT_HOVER_MODE_STICKY_EXIT_TIME : 0 : _f;
	    var isTouch = useIsUserInteractionMode("touch");
	    var _g = React.useState(defaultVisible), visible = _g[0], setVisible = _g[1];
	    var _h = React.useState(false), stuck = _h[0], setStuck = _h[1];
	    var enterTimeoutRef = React.useRef();
	    var exitTimeoutRef = React.useRef();
	    var _j = useHoverModeContext(), visibleInTime = _j.visibleInTime, enableHoverMode = _j.enableHoverMode, disableHoverMode = _j.disableHoverMode, startDisableTimer = _j.startDisableTimer;
	    var active = visibleInTime === 0;
	    React.useEffect(function () {
	        if (sticky && !visible) {
	            setStuck(false);
	        }
	    }, [visible, sticky]);
	    useOnUnmount(function () {
	        window.clearTimeout(enterTimeoutRef.current);
	        window.clearTimeout(exitTimeoutRef.current);
	    });
	    React.useEffect(function () {
	        if (isTouch || disabled) {
	            disableHoverMode();
	        }
	    }, [disableHoverMode, isTouch, disabled]);
	    var onMouseEnter = React.useCallback(function (event) {
	        propOnMouseEnter === null || propOnMouseEnter === void 0 ? void 0 : propOnMouseEnter(event);
	        if (stuck || disabled || isTouch || event.isPropagationStopped()) {
	            return;
	        }
	        window.clearTimeout(enterTimeoutRef.current);
	        window.clearTimeout(exitTimeoutRef.current);
	        if (visibleInTime === 0) {
	            enableHoverMode();
	            setVisible(true);
	            return;
	        }
	        enterTimeoutRef.current = window.setTimeout(function () {
	            enableHoverMode();
	            setVisible(true);
	        }, visibleInTime);
	    }, [disabled, enableHoverMode, isTouch, propOnMouseEnter, stuck, visibleInTime]);
	    var onMouseLeave = React.useCallback(function (event) {
	        propOnMouseLeave === null || propOnMouseLeave === void 0 ? void 0 : propOnMouseLeave(event);
	        if (stuck || disabled || isTouch || event.isPropagationStopped()) {
	            return;
	        }
	        startDisableTimer();
	        window.clearTimeout(enterTimeoutRef.current);
	        window.clearTimeout(exitTimeoutRef.current);
	        if (exitVisibilityDelay === 0) {
	            setVisible(false);
	            return;
	        }
	        exitTimeoutRef.current = window.setTimeout(function () {
	            setVisible(false);
	        }, exitVisibilityDelay);
	    }, [
	        disabled,
	        exitVisibilityDelay,
	        isTouch,
	        propOnMouseLeave,
	        startDisableTimer,
	        stuck,
	    ]);
	    var onClick = React.useCallback(function (event) {
	        propOnClick === null || propOnClick === void 0 ? void 0 : propOnClick(event);
	        if (event.isPropagationStopped() || disabled) {
	            return;
	        }
	        startDisableTimer();
	        window.clearTimeout(enterTimeoutRef.current);
	        window.clearTimeout(exitTimeoutRef.current);
	    }, [disabled, propOnClick, startDisableTimer]);
	    var onStickyClick = React.useCallback(function (event) {
	        propOnClick === null || propOnClick === void 0 ? void 0 : propOnClick(event);
	        if (event.isPropagationStopped() || disabled) {
	            return;
	        }
	        if (!stuck) {
	            setStuck(true);
	            setVisible(true);
	            disableHoverMode();
	        }
	        else {
	            setStuck(false);
	            setVisible(function (prevVisible) { return !prevVisible; });
	        }
	    }, [disableHoverMode, disabled, propOnClick, stuck]);
	    var handlers = {
	        onClick: onClick,
	        onMouseEnter: onMouseEnter,
	        onMouseLeave: onMouseLeave,
	    };
	    var stickyHandlers;
	    if (sticky) {
	        stickyHandlers = __assign$hg(__assign$hg({}, handlers), { onClick: onStickyClick });
	    }
	    return {
	        active: active,
	        stuck: sticky ? stuck : undefined,
	        visible: visible,
	        setVisible: setVisible,
	        handlers: handlers,
	        stickyHandlers: stickyHandlers,
	        enableHoverMode: enableHoverMode,
	        disableHoverMode: disableHoverMode,
	        startDisableTimer: startDisableTimer,
	    };
	}

	var DEFAULT_DESKTOP_MIN_WIDTH = 1025 / 16 + "em";
	var DEFAULT_TABLET_MIN_WIDTH = 768 / 16 + "em";
	var DEFAULT_TABLET_MAX_WIDTH = 1024 / 16 + "em";
	var DEFAULT_PHONE_MAX_WIDTH = 767 / 16 + "em";
	var DEFAULT_DESKTOP_LARGE_MIN_WIDTH = 1280 / 16 + "em";

	/**
	 * An extremely simple "pollyfill" for the `window.screen.orientation` just for
	 * the `type` value that is required for the `useOrientation` hook.
	 */
	var getOrientationType = function () {
	    var _a;
	    var screenOrientation = (_a = window.screen.orientation) === null || _a === void 0 ? void 0 : _a.type;
	    if (typeof screenOrientation === "string") {
	        return screenOrientation;
	    }
	    var _b = window.screen, availHeight = _b.availHeight, availWidth = _b.availWidth;
	    return availHeight > availWidth ? "portrait-primary" : "landscape-primary";
	};
	/**
	 * This media query is used to determine the current orientation of the app
	 * based on the `window.screen.orientation.type`. This will always be
	 * `"landscape-primary"` server side unless a default value is provided.
	 *
	 * @param defaultValue - an optional default value to use. When this is omitted,
	 * it will default to `"landscape-primary"` unless the `window` is defined. If
	 * the `window` is defined, it will immediately check the orientation type on
	 * mount.
	 * @returns the orientation type value.
	 */
	function useOrientation$1(defaultValue) {
	    var _a = React.useState(function () {
	        if (defaultValue) {
	            return defaultValue;
	        }
	        if (typeof window !== "undefined") {
	            return getOrientationType();
	        }
	        return "landscape-primary";
	    }), value = _a[0], setValue = _a[1];
	    React.useEffect(function () {
	        if (typeof window === "undefined") {
	            return;
	        }
	        var handler = function () {
	            setValue(getOrientationType());
	        };
	        window.addEventListener("orientationchange", handler);
	        return function () { return window.removeEventListener("orientationchange", handler); };
	    }, []);
	    return value;
	}

	/**
	 * A helper hook that is used to create a memoized media query tester for
	 * `window.matchMedia`.
	 *
	 * Note: This is a **client side only** hook as it requires the `window` to
	 * attach a resize event listener to.
	 *
	 * @param query - The media query to use
	 * @param defaultValue - The default value for if this media query matches. When
	 * this is `undefined`, it will default to `false` unless the `window` is
	 * defined and the `checkImmediately` param was not set to `false`. Otherwise,
	 * it will check the media query matches on mount and use that value.
	 * @param disabled - Boolean if the media query checking should be disabled.
	 * @param checkImmediately - Boolean if the media query should be checked
	 * immediately on mount. When omittied, it will default to checking when the
	 * window is defined.
	 * @returns true if the media query is a match.
	 */
	function useMediaQuery(query, defaultValue, disabled, checkImmediately) {
	    if (disabled === void 0) { disabled = false; }
	    if (checkImmediately === void 0) { checkImmediately = typeof window !== "undefined"; }
	    var _a = React.useState(function () {
	        if (typeof defaultValue !== "undefined") {
	            return defaultValue;
	        }
	        if (!disabled && checkImmediately && typeof window !== "undefined") {
	            return window.matchMedia(query).matches;
	        }
	        return false;
	    }), matches = _a[0], setMatches = _a[1];
	    React.useEffect(function () {
	        if (typeof window === "undefined" || disabled) {
	            return;
	        }
	        var mq = window.matchMedia(query);
	        var updater = function (_a) {
	            var matches = _a.matches;
	            return setMatches(matches);
	        };
	        mq.addListener(updater);
	        if (mq.matches !== matches) {
	            setMatches(mq.matches);
	        }
	        return function () { return mq.removeListener(updater); };
	    }, [disabled, matches, query]);
	    return matches;
	}

	/**
	 * This is a small helper that will create a media query block based on the
	 * provided width value.
	 */
	var toWidthPart = function (v, prefix) {
	    var type = typeof v;
	    if (type === "undefined") {
	        return "";
	    }
	    var value = type === "number" ? v + "px" : v;
	    return "(" + prefix + "-width: " + value + ")";
	};
	/**
	 * This is a simple hoo that will create a memoized media query string with the
	 * provided min anx max values.
	 *
	 * @param min - An optional min value to use
	 * @param max - An optional max value to use
	 * @returns a boolean if the current media query is a match.
	 */
	function useWidthMediaQuery(_a) {
	    var min = _a.min, max = _a.max;
	    var query = React.useMemo(function () {
	        var parts = [toWidthPart(min, "min"), toWidthPart(max, "max")]
	            .filter(Boolean)
	            .join(" and ");
	        return "screen and " + parts;
	    }, [min, max]);
	    return useMediaQuery(query);
	}

	var DEFAULT_APP_SIZE = {
	    isPhone: false,
	    isTablet: false,
	    isDesktop: true,
	    isLargeDesktop: false,
	    isLandscape: true,
	};
	/**
	 * This hook is used to determine the current application size based on the
	 * provided query sizes. When you want to render your app server side, you will
	 * need to provide a custom `defaultSize` that implements your logic to
	 * determine the type of device requesting a page. Once the app has been
	 * rendered in the DOM, this hook will attach event listeners to automatically
	 * update the app size when the page is resized.
	 *
	 * @internal
	 */
	function useAppSizeMedia(_a) {
	    var _b = _a === void 0 ? {} : _a, _c = _b.phoneMaxWidth, phoneMaxWidth = _c === void 0 ? DEFAULT_PHONE_MAX_WIDTH : _c, _d = _b.tabletMinWidth, tabletMinWidth = _d === void 0 ? DEFAULT_TABLET_MIN_WIDTH : _d, _e = _b.tabletMaxWidth, tabletMaxWidth = _e === void 0 ? DEFAULT_TABLET_MAX_WIDTH : _e, _f = _b.desktopMinWidth, desktopMinWidth = _f === void 0 ? DEFAULT_DESKTOP_MIN_WIDTH : _f, _g = _b.desktopLargeMinWidth, desktopLargeMinWidth = _g === void 0 ? DEFAULT_DESKTOP_LARGE_MIN_WIDTH : _g, _h = _b.defaultSize, defaultSize = _h === void 0 ? DEFAULT_APP_SIZE : _h;
	    /* eslint-disable react-hooks/rules-of-hooks */
	    // disabled since this is conditionally applied for SSR
	    if (typeof window === "undefined") {
	        return defaultSize;
	    }
	    var matchesDesktop = useWidthMediaQuery({ min: desktopMinWidth });
	    var matchesLargeDesktop = useWidthMediaQuery({ min: desktopLargeMinWidth });
	    var matchesTablet = useWidthMediaQuery({
	        min: tabletMinWidth,
	        max: tabletMaxWidth,
	    });
	    var matchesPhone = useWidthMediaQuery({ max: phoneMaxWidth });
	    var isDesktop = matchesDesktop;
	    var isTablet = !matchesDesktop && matchesTablet;
	    var isPhone = !isTablet && !isDesktop && matchesPhone;
	    var isLandscape = useOrientation$1().includes("landscape");
	    var isLargeDesktop = matchesLargeDesktop;
	    var _j = React.useState(defaultSize), appSize = _j[0], setAppSize = _j[1];
	    React.useEffect(function () {
	        if (appSize.isPhone === isPhone &&
	            appSize.isTablet === isTablet &&
	            appSize.isDesktop === isDesktop &&
	            appSize.isLargeDesktop === isLargeDesktop &&
	            appSize.isLandscape === isLandscape) {
	            return;
	        }
	        // for some reason, it's sometimes possible to fail every single matchMedia
	        // value when you are resizing the browser a lot. this is an "invalid" event
	        // so skip it. It normally happens between 760px-768px
	        if (!isPhone && !isTablet && !isDesktop && !isLargeDesktop) {
	            return;
	        }
	        setAppSize({ isPhone: isPhone, isTablet: isTablet, isDesktop: isDesktop, isLargeDesktop: isLargeDesktop, isLandscape: isLandscape });
	    }, [isPhone, isTablet, isDesktop, isLargeDesktop, isLandscape, appSize]);
	    return appSize;
	}

	var __assign$hf = (undefined && undefined.__assign) || function () {
	    __assign$hf = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$hf.apply(this, arguments);
	};
	var __rest$2h = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * @internal
	 */
	var AppSizeContext = React.createContext(__assign$hf(__assign$hf({}, DEFAULT_APP_SIZE), { __initialized: false }));
	/**
	 * Gets the current app size.
	 *
	 * @returns the current AppSize
	 */
	function useAppSize() {
	    var _a = React.useContext(AppSizeContext), __initialized = _a.__initialized, context = __rest$2h(_a, ["__initialized"]);
	    if (!__initialized) {
	        throw new Error("Unable to get the current `AppSize` from `react-md` because the `AppSizeListener` " +
	            "could not be found when using the `useAppSize` hook. To fix this error, either " +
	            "initialize the `AppSizeListener` component from `@react-md/utils` or the " +
	            "`Configuration` component from `@react-md/layout` near the root of your app.");
	    }
	    return context;
	}

	var __assign$he = (undefined && undefined.__assign) || function () {
	    __assign$he = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$he.apply(this, arguments);
	};
	var __rest$2g = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$1d = bem("rmd-grid");
	var GridCell = React.forwardRef(function GridCell(_a, ref) {
	    var _b, _c, _d, _e, _f, _g, _h;
	    var style = _a.style, className = _a.className, clone = _a.clone, children = _a.children, propColSpan = _a.colSpan, propColStart = _a.colStart, propColEnd = _a.colEnd, propRowSpan = _a.rowSpan, propRowStart = _a.rowStart, propRowEnd = _a.rowEnd, phone = _a.phone, tablet = _a.tablet, desktop = _a.desktop, largeDesktop = _a.largeDesktop, props = __rest$2g(_a, ["style", "className", "clone", "children", "colSpan", "colStart", "colEnd", "rowSpan", "rowStart", "rowEnd", "phone", "tablet", "desktop", "largeDesktop"]);
	    var _j = useAppSize(), isPhone = _j.isPhone, isTablet = _j.isTablet, isDesktop = _j.isDesktop, isLargeDesktop = _j.isLargeDesktop;
	    var colSpan = propColSpan;
	    var colStart = propColStart;
	    var colEnd = propColEnd;
	    var rowSpan = propRowSpan;
	    var rowStart = propRowStart;
	    var rowEnd = propRowEnd;
	    var media = (isPhone && phone) ||
	        (isTablet && tablet) ||
	        (isLargeDesktop && largeDesktop) ||
	        (isDesktop && desktop);
	    if (media) {
	        (_b = media.rowSpan, rowSpan = _b === void 0 ? propRowSpan : _b, _c = media.rowStart, rowStart = _c === void 0 ? propRowStart : _c, _d = media.rowEnd, rowEnd = _d === void 0 ? propRowEnd : _d, _e = media.colSpan, colSpan = _e === void 0 ? propColSpan : _e, _f = media.colStart, colStart = _f === void 0 ? propColStart : _f, _g = media.colEnd, colEnd = _g === void 0 ? propColEnd : _g);
	    }
	    var cellStyle = __assign$he({ gridColumnStart: colStart, gridColumnEnd: colEnd, gridRowStart: rowStart, gridRowEnd: rowSpan ? "span " + rowSpan : rowEnd }, style);
	    var cellClassName = cn(block$1d("cell", (_h = {},
	        _h["" + colSpan] = colSpan,
	        _h)), className);
	    if (clone && React.isValidElement(children)) {
	        var child = React.Children.only(children);
	        return React.cloneElement(child, {
	            style: __assign$he(__assign$he({}, child.props.style), cellStyle),
	            className: cn(cellClassName, child.props.className),
	        });
	    }
	    return (React__default['default'].createElement("div", __assign$he({}, props, { ref: ref, style: cellStyle, className: cellClassName }), children));
	});

	var __assign$hd = (undefined && undefined.__assign) || function () {
	    __assign$hd = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$hd.apply(this, arguments);
	};
	var __rest$2f = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This CSS Variable allows you to override the number of columns that should be
	 * displayed in the grid. This is automatically updated with media queries with
	 * the default grid implementation, but is used here to add additional
	 * inline-style overrides.
	 *
	 * @internal
	 */
	var GRID_COLUMNS_VAR = "--rmd-grid-cols";
	/**
	 * This CSS Variable allows you to override the gutter (grid-gap) between each
	 * cell in the grid.
	 *
	 * @internal
	 */
	var GRID_GUTTER_VAR = "--rmd-grid-gutter";
	var block$1c = bem("rmd-grid");
	/**
	 * The grid component is generally used for a base layout in your app to provide
	 * nice padding and spacing between each item.
	 *
	 * Note: This component relies on the `AppSizeListener` as a parent component to
	 * work and will throw an error if it does not exist as a parent.
	 */
	var Grid = React.forwardRef(function Grid(_a, ref) {
	    var _b;
	    var style = _a.style, className = _a.className, children = _a.children, _c = _a.clone, clone = _c === void 0 ? false : _c, _d = _a.cloneStyles, cloneStyles = _d === void 0 ? false : _d, _e = _a.wrapOnly, wrapOnly = _e === void 0 ? false : _e, columns = _a.columns, phoneColumns = _a.phoneColumns, tabletColumns = _a.tabletColumns, desktopColumns = _a.desktopColumns, largeDesktopColumns = _a.largeDesktopColumns, padding = _a.padding, gutter = _a.gutter, minCellWidth = _a.minCellWidth, props = __rest$2f(_a, ["style", "className", "children", "clone", "cloneStyles", "wrapOnly", "columns", "phoneColumns", "tabletColumns", "desktopColumns", "largeDesktopColumns", "padding", "gutter", "minCellWidth"]);
	    var _f = useAppSize(), isPhone = _f.isPhone, isTablet = _f.isTablet, isDesktop = _f.isDesktop, isLargeDesktop = _f.isLargeDesktop;
	    var mergedStyle = __assign$hd(__assign$hd({ padding: (padding !== 0 && padding) || undefined, gridTemplateColumns: minCellWidth
	            ? "repeat(auto-fill, minmax(" + minCellWidth + ", 1fr))"
	            : undefined }, style), (_b = {}, _b[GRID_COLUMNS_VAR] = (isPhone && phoneColumns) ||
	        (isTablet && tabletColumns) ||
	        (isLargeDesktop && largeDesktopColumns) ||
	        (isDesktop && desktopColumns) ||
	        columns, _b[GRID_GUTTER_VAR] = gutter, _b));
	    var mergedClassName = cn(block$1c({ "no-padding": padding === 0 }), className);
	    if (cloneStyles && React.isValidElement(children)) {
	        var child = React.Children.only(children);
	        return React.cloneElement(child, {
	            style: __assign$hd(__assign$hd({}, mergedStyle), child.props.style),
	            className: cn(mergedClassName, child.props.className),
	        });
	    }
	    var content = children;
	    if (clone || wrapOnly) {
	        content = React.Children.map(children, function (child) { return child && React__default['default'].createElement(GridCell, { clone: clone }, child); });
	    }
	    return (React__default['default'].createElement("div", __assign$hd({}, props, { ref: ref, style: mergedStyle, className: mergedClassName }), content));
	});

	var __assign$hc = (undefined && undefined.__assign) || function () {
	    __assign$hc = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$hc.apply(this, arguments);
	};
	var __rest$2e = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$1b = bem("rmd-grid-list");
	var GridListCell = React.forwardRef(function GridListCell(_a, ref) {
	    var className = _a.className, children = _a.children, _b = _a.square, square = _b === void 0 ? false : _b, _c = _a.clone, clone = _c === void 0 ? false : _c, props = __rest$2e(_a, ["className", "children", "square", "clone"]);
	    var cellClassName = cn(block$1b("cell", { square: square }), className);
	    if (clone && React.isValidElement(children)) {
	        var child = React.Children.only(children);
	        return React.cloneElement(child, {
	            className: cn(cellClassName, child.props.className),
	        });
	    }
	    return (React__default['default'].createElement("div", __assign$hc({}, props, { ref: ref, className: cellClassName }), children));
	});

	var resizeObservers = [];

	var hasActiveObservations = function () {
	    return resizeObservers.some(function (ro) { return ro.activeTargets.length > 0; });
	};

	var hasSkippedObservations = function () {
	    return resizeObservers.some(function (ro) { return ro.skippedTargets.length > 0; });
	};

	var msg = 'ResizeObserver loop completed with undelivered notifications.';
	var deliverResizeLoopError = function () {
	    var event;
	    if (typeof ErrorEvent === 'function') {
	        event = new ErrorEvent('error', {
	            message: msg
	        });
	    }
	    else {
	        event = document.createEvent('Event');
	        event.initEvent('error', false, false);
	        event.message = msg;
	    }
	    window.dispatchEvent(event);
	};

	var ResizeObserverBoxOptions;
	(function (ResizeObserverBoxOptions) {
	    ResizeObserverBoxOptions["BORDER_BOX"] = "border-box";
	    ResizeObserverBoxOptions["CONTENT_BOX"] = "content-box";
	    ResizeObserverBoxOptions["DEVICE_PIXEL_CONTENT_BOX"] = "device-pixel-content-box";
	})(ResizeObserverBoxOptions || (ResizeObserverBoxOptions = {}));

	var freeze = function (obj) { return Object.freeze(obj); };

	var ResizeObserverSize = (function () {
	    function ResizeObserverSize(inlineSize, blockSize) {
	        this.inlineSize = inlineSize;
	        this.blockSize = blockSize;
	        freeze(this);
	    }
	    return ResizeObserverSize;
	}());

	var DOMRectReadOnly = (function () {
	    function DOMRectReadOnly(x, y, width, height) {
	        this.x = x;
	        this.y = y;
	        this.width = width;
	        this.height = height;
	        this.top = this.y;
	        this.left = this.x;
	        this.bottom = this.top + this.height;
	        this.right = this.left + this.width;
	        return freeze(this);
	    }
	    DOMRectReadOnly.prototype.toJSON = function () {
	        var _a = this, x = _a.x, y = _a.y, top = _a.top, right = _a.right, bottom = _a.bottom, left = _a.left, width = _a.width, height = _a.height;
	        return { x: x, y: y, top: top, right: right, bottom: bottom, left: left, width: width, height: height };
	    };
	    DOMRectReadOnly.fromRect = function (rectangle) {
	        return new DOMRectReadOnly(rectangle.x, rectangle.y, rectangle.width, rectangle.height);
	    };
	    return DOMRectReadOnly;
	}());

	var isSVG = function (target) { return target instanceof SVGElement && 'getBBox' in target; };
	var isHidden = function (target) {
	    if (isSVG(target)) {
	        var _a = target.getBBox(), width = _a.width, height = _a.height;
	        return !width && !height;
	    }
	    var _b = target, offsetWidth = _b.offsetWidth, offsetHeight = _b.offsetHeight;
	    return !(offsetWidth || offsetHeight || target.getClientRects().length);
	};
	var isElement = function (obj) {
	    var _a, _b;
	    if (obj instanceof Element) {
	        return true;
	    }
	    var scope = (_b = (_a = obj) === null || _a === void 0 ? void 0 : _a.ownerDocument) === null || _b === void 0 ? void 0 : _b.defaultView;
	    return !!(scope && obj instanceof scope.Element);
	};
	var isReplacedElement = function (target) {
	    switch (target.tagName) {
	        case 'INPUT':
	            if (target.type !== 'image') {
	                break;
	            }
	        case 'VIDEO':
	        case 'AUDIO':
	        case 'EMBED':
	        case 'OBJECT':
	        case 'CANVAS':
	        case 'IFRAME':
	        case 'IMG':
	            return true;
	    }
	    return false;
	};

	var global = typeof window !== 'undefined' ? window : {};

	var cache = new WeakMap();
	var scrollRegexp = /auto|scroll/;
	var verticalRegexp = /^tb|vertical/;
	var IE = (/msie|trident/i).test(global.navigator && global.navigator.userAgent);
	var parseDimension = function (pixel) { return parseFloat(pixel || '0'); };
	var size = function (inlineSize, blockSize, switchSizes) {
	    if (inlineSize === void 0) { inlineSize = 0; }
	    if (blockSize === void 0) { blockSize = 0; }
	    if (switchSizes === void 0) { switchSizes = false; }
	    return new ResizeObserverSize((switchSizes ? blockSize : inlineSize) || 0, (switchSizes ? inlineSize : blockSize) || 0);
	};
	var zeroBoxes = freeze({
	    devicePixelContentBoxSize: size(),
	    borderBoxSize: size(),
	    contentBoxSize: size(),
	    contentRect: new DOMRectReadOnly(0, 0, 0, 0)
	});
	var calculateBoxSizes = function (target, forceRecalculation) {
	    if (forceRecalculation === void 0) { forceRecalculation = false; }
	    if (cache.has(target) && !forceRecalculation) {
	        return cache.get(target);
	    }
	    if (isHidden(target)) {
	        cache.set(target, zeroBoxes);
	        return zeroBoxes;
	    }
	    var cs = getComputedStyle(target);
	    var svg = isSVG(target) && target.ownerSVGElement && target.getBBox();
	    var removePadding = !IE && cs.boxSizing === 'border-box';
	    var switchSizes = verticalRegexp.test(cs.writingMode || '');
	    var canScrollVertically = !svg && scrollRegexp.test(cs.overflowY || '');
	    var canScrollHorizontally = !svg && scrollRegexp.test(cs.overflowX || '');
	    var paddingTop = svg ? 0 : parseDimension(cs.paddingTop);
	    var paddingRight = svg ? 0 : parseDimension(cs.paddingRight);
	    var paddingBottom = svg ? 0 : parseDimension(cs.paddingBottom);
	    var paddingLeft = svg ? 0 : parseDimension(cs.paddingLeft);
	    var borderTop = svg ? 0 : parseDimension(cs.borderTopWidth);
	    var borderRight = svg ? 0 : parseDimension(cs.borderRightWidth);
	    var borderBottom = svg ? 0 : parseDimension(cs.borderBottomWidth);
	    var borderLeft = svg ? 0 : parseDimension(cs.borderLeftWidth);
	    var horizontalPadding = paddingLeft + paddingRight;
	    var verticalPadding = paddingTop + paddingBottom;
	    var horizontalBorderArea = borderLeft + borderRight;
	    var verticalBorderArea = borderTop + borderBottom;
	    var horizontalScrollbarThickness = !canScrollHorizontally ? 0 : target.offsetHeight - verticalBorderArea - target.clientHeight;
	    var verticalScrollbarThickness = !canScrollVertically ? 0 : target.offsetWidth - horizontalBorderArea - target.clientWidth;
	    var widthReduction = removePadding ? horizontalPadding + horizontalBorderArea : 0;
	    var heightReduction = removePadding ? verticalPadding + verticalBorderArea : 0;
	    var contentWidth = svg ? svg.width : parseDimension(cs.width) - widthReduction - verticalScrollbarThickness;
	    var contentHeight = svg ? svg.height : parseDimension(cs.height) - heightReduction - horizontalScrollbarThickness;
	    var borderBoxWidth = contentWidth + horizontalPadding + verticalScrollbarThickness + horizontalBorderArea;
	    var borderBoxHeight = contentHeight + verticalPadding + horizontalScrollbarThickness + verticalBorderArea;
	    var boxes = freeze({
	        devicePixelContentBoxSize: size(Math.round(contentWidth * devicePixelRatio), Math.round(contentHeight * devicePixelRatio), switchSizes),
	        borderBoxSize: size(borderBoxWidth, borderBoxHeight, switchSizes),
	        contentBoxSize: size(contentWidth, contentHeight, switchSizes),
	        contentRect: new DOMRectReadOnly(paddingLeft, paddingTop, contentWidth, contentHeight)
	    });
	    cache.set(target, boxes);
	    return boxes;
	};
	var calculateBoxSize = function (target, observedBox, forceRecalculation) {
	    var _a = calculateBoxSizes(target, forceRecalculation), borderBoxSize = _a.borderBoxSize, contentBoxSize = _a.contentBoxSize, devicePixelContentBoxSize = _a.devicePixelContentBoxSize;
	    switch (observedBox) {
	        case ResizeObserverBoxOptions.DEVICE_PIXEL_CONTENT_BOX:
	            return devicePixelContentBoxSize;
	        case ResizeObserverBoxOptions.BORDER_BOX:
	            return borderBoxSize;
	        default:
	            return contentBoxSize;
	    }
	};

	var ResizeObserverEntry = (function () {
	    function ResizeObserverEntry(target) {
	        var boxes = calculateBoxSizes(target);
	        this.target = target;
	        this.contentRect = boxes.contentRect;
	        this.borderBoxSize = freeze([boxes.borderBoxSize]);
	        this.contentBoxSize = freeze([boxes.contentBoxSize]);
	        this.devicePixelContentBoxSize = freeze([boxes.devicePixelContentBoxSize]);
	    }
	    return ResizeObserverEntry;
	}());

	var calculateDepthForNode = function (node) {
	    if (isHidden(node)) {
	        return Infinity;
	    }
	    var depth = 0;
	    var parent = node.parentNode;
	    while (parent) {
	        depth += 1;
	        parent = parent.parentNode;
	    }
	    return depth;
	};

	var broadcastActiveObservations = function () {
	    var shallowestDepth = Infinity;
	    var callbacks = [];
	    resizeObservers.forEach(function processObserver(ro) {
	        if (ro.activeTargets.length === 0) {
	            return;
	        }
	        var entries = [];
	        ro.activeTargets.forEach(function processTarget(ot) {
	            var entry = new ResizeObserverEntry(ot.target);
	            var targetDepth = calculateDepthForNode(ot.target);
	            entries.push(entry);
	            ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);
	            if (targetDepth < shallowestDepth) {
	                shallowestDepth = targetDepth;
	            }
	        });
	        callbacks.push(function resizeObserverCallback() {
	            ro.callback.call(ro.observer, entries, ro.observer);
	        });
	        ro.activeTargets.splice(0, ro.activeTargets.length);
	    });
	    for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {
	        var callback = callbacks_1[_i];
	        callback();
	    }
	    return shallowestDepth;
	};

	var gatherActiveObservationsAtDepth = function (depth) {
	    resizeObservers.forEach(function processObserver(ro) {
	        ro.activeTargets.splice(0, ro.activeTargets.length);
	        ro.skippedTargets.splice(0, ro.skippedTargets.length);
	        ro.observationTargets.forEach(function processTarget(ot) {
	            if (ot.isActive()) {
	                if (calculateDepthForNode(ot.target) > depth) {
	                    ro.activeTargets.push(ot);
	                }
	                else {
	                    ro.skippedTargets.push(ot);
	                }
	            }
	        });
	    });
	};

	var process = function () {
	    var depth = 0;
	    gatherActiveObservationsAtDepth(depth);
	    while (hasActiveObservations()) {
	        depth = broadcastActiveObservations();
	        gatherActiveObservationsAtDepth(depth);
	    }
	    if (hasSkippedObservations()) {
	        deliverResizeLoopError();
	    }
	    return depth > 0;
	};

	var trigger;
	var callbacks = [];
	var notify = function () { return callbacks.splice(0).forEach(function (cb) { return cb(); }); };
	var queueMicroTask = function (callback) {
	    if (!trigger) {
	        var toggle_1 = 0;
	        var el_1 = document.createTextNode('');
	        var config = { characterData: true };
	        new MutationObserver(function () { return notify(); }).observe(el_1, config);
	        trigger = function () { el_1.textContent = "" + (toggle_1 ? toggle_1-- : toggle_1++); };
	    }
	    callbacks.push(callback);
	    trigger();
	};

	var queueResizeObserver = function (cb) {
	    queueMicroTask(function ResizeObserver() {
	        requestAnimationFrame(cb);
	    });
	};

	var watching = 0;
	var isWatching = function () { return !!watching; };
	var CATCH_PERIOD = 250;
	var observerConfig = { attributes: true, characterData: true, childList: true, subtree: true };
	var events = [
	    'resize',
	    'load',
	    'transitionend',
	    'animationend',
	    'animationstart',
	    'animationiteration',
	    'keyup',
	    'keydown',
	    'mouseup',
	    'mousedown',
	    'mouseover',
	    'mouseout',
	    'blur',
	    'focus'
	];
	var time = function (timeout) {
	    if (timeout === void 0) { timeout = 0; }
	    return Date.now() + timeout;
	};
	var scheduled = false;
	var Scheduler = (function () {
	    function Scheduler() {
	        var _this = this;
	        this.stopped = true;
	        this.listener = function () { return _this.schedule(); };
	    }
	    Scheduler.prototype.run = function (timeout) {
	        var _this = this;
	        if (timeout === void 0) { timeout = CATCH_PERIOD; }
	        if (scheduled) {
	            return;
	        }
	        scheduled = true;
	        var until = time(timeout);
	        queueResizeObserver(function () {
	            var elementsHaveResized = false;
	            try {
	                elementsHaveResized = process();
	            }
	            finally {
	                scheduled = false;
	                timeout = until - time();
	                if (!isWatching()) {
	                    return;
	                }
	                if (elementsHaveResized) {
	                    _this.run(1000);
	                }
	                else if (timeout > 0) {
	                    _this.run(timeout);
	                }
	                else {
	                    _this.start();
	                }
	            }
	        });
	    };
	    Scheduler.prototype.schedule = function () {
	        this.stop();
	        this.run();
	    };
	    Scheduler.prototype.observe = function () {
	        var _this = this;
	        var cb = function () { return _this.observer && _this.observer.observe(document.body, observerConfig); };
	        document.body ? cb() : global.addEventListener('DOMContentLoaded', cb);
	    };
	    Scheduler.prototype.start = function () {
	        var _this = this;
	        if (this.stopped) {
	            this.stopped = false;
	            this.observer = new MutationObserver(this.listener);
	            this.observe();
	            events.forEach(function (name) { return global.addEventListener(name, _this.listener, true); });
	        }
	    };
	    Scheduler.prototype.stop = function () {
	        var _this = this;
	        if (!this.stopped) {
	            this.observer && this.observer.disconnect();
	            events.forEach(function (name) { return global.removeEventListener(name, _this.listener, true); });
	            this.stopped = true;
	        }
	    };
	    return Scheduler;
	}());
	var scheduler = new Scheduler();
	var updateCount = function (n) {
	    !watching && n > 0 && scheduler.start();
	    watching += n;
	    !watching && scheduler.stop();
	};

	var skipNotifyOnElement = function (target) {
	    return !isSVG(target)
	        && !isReplacedElement(target)
	        && getComputedStyle(target).display === 'inline';
	};
	var ResizeObservation = (function () {
	    function ResizeObservation(target, observedBox) {
	        this.target = target;
	        this.observedBox = observedBox || ResizeObserverBoxOptions.CONTENT_BOX;
	        this.lastReportedSize = {
	            inlineSize: 0,
	            blockSize: 0
	        };
	    }
	    ResizeObservation.prototype.isActive = function () {
	        var size = calculateBoxSize(this.target, this.observedBox, true);
	        if (skipNotifyOnElement(this.target)) {
	            this.lastReportedSize = size;
	        }
	        if (this.lastReportedSize.inlineSize !== size.inlineSize
	            || this.lastReportedSize.blockSize !== size.blockSize) {
	            return true;
	        }
	        return false;
	    };
	    return ResizeObservation;
	}());

	var ResizeObserverDetail = (function () {
	    function ResizeObserverDetail(resizeObserver, callback) {
	        this.activeTargets = [];
	        this.skippedTargets = [];
	        this.observationTargets = [];
	        this.observer = resizeObserver;
	        this.callback = callback;
	    }
	    return ResizeObserverDetail;
	}());

	var observerMap = new WeakMap();
	var getObservationIndex = function (observationTargets, target) {
	    for (var i = 0; i < observationTargets.length; i += 1) {
	        if (observationTargets[i].target === target) {
	            return i;
	        }
	    }
	    return -1;
	};
	var ResizeObserverController = (function () {
	    function ResizeObserverController() {
	    }
	    ResizeObserverController.connect = function (resizeObserver, callback) {
	        var detail = new ResizeObserverDetail(resizeObserver, callback);
	        observerMap.set(resizeObserver, detail);
	    };
	    ResizeObserverController.observe = function (resizeObserver, target, options) {
	        var detail = observerMap.get(resizeObserver);
	        var firstObservation = detail.observationTargets.length === 0;
	        if (getObservationIndex(detail.observationTargets, target) < 0) {
	            firstObservation && resizeObservers.push(detail);
	            detail.observationTargets.push(new ResizeObservation(target, options && options.box));
	            updateCount(1);
	            scheduler.schedule();
	        }
	    };
	    ResizeObserverController.unobserve = function (resizeObserver, target) {
	        var detail = observerMap.get(resizeObserver);
	        var index = getObservationIndex(detail.observationTargets, target);
	        var lastObservation = detail.observationTargets.length === 1;
	        if (index >= 0) {
	            lastObservation && resizeObservers.splice(resizeObservers.indexOf(detail), 1);
	            detail.observationTargets.splice(index, 1);
	            updateCount(-1);
	        }
	    };
	    ResizeObserverController.disconnect = function (resizeObserver) {
	        var _this = this;
	        var detail = observerMap.get(resizeObserver);
	        detail.observationTargets.slice().forEach(function (ot) { return _this.unobserve(resizeObserver, ot.target); });
	        detail.activeTargets.splice(0, detail.activeTargets.length);
	    };
	    return ResizeObserverController;
	}());

	var ResizeObserver$1 = (function () {
	    function ResizeObserver(callback) {
	        if (arguments.length === 0) {
	            throw new TypeError("Failed to construct 'ResizeObserver': 1 argument required, but only 0 present.");
	        }
	        if (typeof callback !== 'function') {
	            throw new TypeError("Failed to construct 'ResizeObserver': The callback provided as parameter 1 is not a function.");
	        }
	        ResizeObserverController.connect(this, callback);
	    }
	    ResizeObserver.prototype.observe = function (target, options) {
	        if (arguments.length === 0) {
	            throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': 1 argument required, but only 0 present.");
	        }
	        if (!isElement(target)) {
	            throw new TypeError("Failed to execute 'observe' on 'ResizeObserver': parameter 1 is not of type 'Element");
	        }
	        ResizeObserverController.observe(this, target, options);
	    };
	    ResizeObserver.prototype.unobserve = function (target) {
	        if (arguments.length === 0) {
	            throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': 1 argument required, but only 0 present.");
	        }
	        if (!isElement(target)) {
	            throw new TypeError("Failed to execute 'unobserve' on 'ResizeObserver': parameter 1 is not of type 'Element");
	        }
	        ResizeObserverController.unobserve(this, target);
	    };
	    ResizeObserver.prototype.disconnect = function () {
	        ResizeObserverController.disconnect(this);
	    };
	    ResizeObserver.toString = function () {
	        return 'function ResizeObserver () { [polyfill code] }';
	    };
	    return ResizeObserver;
	}());

	/**
	 * This is mostly an enternal hook that allows for an optional ref (normally
	 * from props or hook options) to be merged with a hook's required `ref`. This
	 * will return a MutableRefObject used for DOM manipulation in a custom hook
	 * followed by a ref callback function that should be passed to the DOM node
	 * that will ensure that both the optional `propRef` and hook ref are updated.
	 *
	 * @remarks \@since 2.3.0
	 */
	function useEnsuredRef(propRef) {
	    var ref = React.useRef(null);
	    var refHandler = React.useCallback(function (instance) {
	        applyRef(instance, propRef);
	        ref.current = instance;
	    }, [propRef]);
	    return [ref, refHandler];
	}

	var __assign$hb = (undefined && undefined.__assign) || function () {
	    __assign$hb = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$hb.apply(this, arguments);
	};
	/**
	 * @internal
	 */
	var isRefTarget = function (target) {
	    return !!target &&
	        typeof target.current !==
	            "undefined";
	};
	/**
	 * @internal
	 */
	var isFunctionTarget = function (target) {
	    return typeof target === "function";
	};
	/**
	 * A utility function to get the current resize observer element.
	 *
	 * @internal
	 */
	function getResizeObserverTarget(target) {
	    if (isRefTarget(target)) {
	        return target.current;
	    }
	    if (isFunctionTarget(target)) {
	        return target();
	    }
	    if (typeof target === "string") {
	        return document.querySelector(target);
	    }
	    return target;
	}
	/**
	 *
	 * @internal
	 */
	function isHeightChange$1(prevSize, nextSize) {
	    return (!prevSize ||
	        prevSize.height !== nextSize.height ||
	        prevSize.scrollHeight !== nextSize.scrollHeight);
	}
	/**
	 *
	 * @internal
	 */
	function isWidthChange$1(prevSize, nextSize) {
	    return (!prevSize ||
	        prevSize.width !== nextSize.width ||
	        prevSize.scrollWidth !== nextSize.scrollWidth);
	}
	/**
	 * A hook that is used to trigger esize events when a target element is resized
	 * via CSS or other changes.
	 *
	 * @param options - The resize observer options.
	 * @deprecated 2.3.0 Use the new ref API instead
	 */
	function useResizeObserverV1(_a) {
	    var _c = _a.disableHeight, disableHeight = _c === void 0 ? false : _c, _d = _a.disableWidth, disableWidth = _d === void 0 ? false : _d, onResize = _a.onResize, target = _a.target;
	    React.useEffect(function () {
	        if (disableHeight && disableWidth) {
	            return;
	        }
	        var resizeTarget = getResizeObserverTarget(target);
	        if (!resizeTarget) {
	            return;
	        }
	        var prevSize;
	        var observer = new ResizeObserver$1(function (entries) {
	            for (var i = 0; i < entries.length; i += 1) {
	                var entry = entries[i];
	                var target_1 = entry.target;
	                var _a = entry.contentRect, height = _a.height, width = _a.width;
	                var scrollHeight = target_1.scrollHeight, scrollWidth = target_1.scrollWidth;
	                var nextSize = {
	                    height: height,
	                    width: width,
	                    scrollHeight: scrollHeight,
	                    scrollWidth: scrollWidth,
	                };
	                var isNewHeight = isHeightChange$1(prevSize, nextSize);
	                var isNewWidth = isWidthChange$1(prevSize, nextSize);
	                prevSize = nextSize;
	                if ((isNewHeight && !disableHeight) || (isNewWidth && !disableWidth)) {
	                    onResize(__assign$hb(__assign$hb({}, nextSize), { element: target_1 }));
	                }
	            }
	        });
	        observer.observe(resizeTarget);
	        return function () {
	            observer.unobserve(resizeTarget);
	            observer.disconnect();
	        };
	    }, [target, onResize, disableHeight, disableWidth]);
	}

	var __assign$ha = (undefined && undefined.__assign) || function () {
	    __assign$ha = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ha.apply(this, arguments);
	};
	/**
	 * @internal
	 */
	function isHeightChange(prevSize, nextSize) {
	    return (!prevSize ||
	        prevSize.height !== nextSize.height ||
	        prevSize.scrollHeight !== nextSize.scrollHeight);
	}
	/**
	 * @internal
	 */
	function isWidthChange(prevSize, nextSize) {
	    return (!prevSize ||
	        prevSize.width !== nextSize.width ||
	        prevSize.scrollWidth !== nextSize.scrollWidth);
	}
	/**
	 * Why is there a single shared observer instead of multiple and a
	 * "subscription" model?
	 *
	 * Note: Probably a bit of a premature optimization right now...
	 *
	 * @see https://github.com/WICG/resize-observer/issues/59
	 * @internal
	 */
	var sharedObserver;
	/**
	 *
	 * @internal
	 */
	var subscriptions = [];
	/**
	 * Lazy initializes the shared resize observer which will loop through all the
	 * subscriptions when a resize event is called.
	 *
	 * @internal
	 */
	function init() {
	    if (sharedObserver || typeof document === "undefined") {
	        return;
	    }
	    sharedObserver = new ResizeObserver$1(function (entries) {
	        var _loop_1 = function (i) {
	            var entry = entries[i];
	            var currentSubscriptions = subscriptions.filter(function (_a) {
	                var target = _a.target;
	                return target === entry.target;
	            });
	            if (!currentSubscriptions.length) {
	                return { value: void 0 };
	            }
	            var _a = entry.contentRect, height = _a.height, width = _a.width;
	            var _b = entry.target, scrollHeight = _b.scrollHeight, scrollWidth = _b.scrollWidth;
	            var nextSize = {
	                height: height,
	                width: width,
	                scrollHeight: scrollHeight,
	                scrollWidth: scrollWidth,
	            };
	            for (var j = 0; j < currentSubscriptions.length; j += 1) {
	                var subscription = currentSubscriptions[j];
	                var handler = subscription.handler, prevSize = subscription.prevSize, disableHeight = subscription.disableHeight, disableWidth = subscription.disableWidth;
	                var isNewHeight = isHeightChange(prevSize, nextSize);
	                var isNewWidth = isWidthChange(prevSize, nextSize);
	                if ((isNewHeight && !disableHeight) || (isNewWidth && !disableWidth)) {
	                    subscription.prevSize = nextSize;
	                    handler(__assign$ha(__assign$ha({}, nextSize), { element: entry.target }));
	                }
	            }
	        };
	        // Note: might need to wait until an requestAnimationFrame has completed to
	        // fix the resize observer loop exceeded error if switching to
	        // `useIsomorphicLayoutEffect` and a shared observer didn't fix that error:
	        // https://stackoverflow.com/questions/49384120/resizeobserver-loop-limit-exceeded
	        for (var i = 0; i < entries.length; i += 1) {
	            var state_1 = _loop_1(i);
	            if (typeof state_1 === "object")
	                return state_1.value;
	        }
	    });
	}
	/**
	 *
	 * @internal
	 */
	function subscribe(target, onResize, disableHeight, disableWidth) {
	    var exists = subscriptions.find(function (sub) { return sub.target === target; });
	    subscriptions.push({
	        target: target,
	        handler: onResize,
	        disableWidth: disableWidth,
	        disableHeight: disableHeight,
	        prevSize: undefined,
	    });
	    if (!exists) {
	        // I'll silently fail non-initialized observers for now until it becomes an
	        // issue... But how will I ever know?
	        sharedObserver === null || sharedObserver === void 0 ? void 0 : sharedObserver.observe(target);
	    }
	}
	/**
	 *
	 * @internal
	 */
	function unsubscribe(target, onResize, disableHeight, disableWidth) {
	    var i = subscriptions.findIndex(function (sub) {
	        return sub.target === target &&
	            sub.handler === onResize &&
	            sub.disableWidth === disableWidth &&
	            sub.disableHeight === disableHeight;
	    });
	    if (i !== -1) {
	        subscriptions.splice(i, 1);
	    }
	    var remaining = subscriptions.some(function (sub) { return sub.target === target; });
	    if (!remaining) {
	        // I'll silently fail non-initialized observers for now until it becomes an
	        // issue... But how will I ever know?
	        sharedObserver === null || sharedObserver === void 0 ? void 0 : sharedObserver.unobserve(target);
	    }
	}
	/**
	 * This is currently a version that supports the "v1" and "v2" behavior of the
	 * resize observer. **This hook with crash if you switch between the v1 and v2
	 * behavior** during runtime.
	 *
	 * Please migrate to the v2 behavior with the ref handler when possible.
	 *
	 * @remarks \@since 2.3.0
	 */
	function useResizeObserver(arg1, arg2) {
	    if (arg2 === void 0) { arg2 = {}; }
	    // the app **should** crash if the user is switching between v1 and v2 behavior
	    /* eslint-disable react-hooks/rules-of-hooks */
	    if (typeof arg1 !== "function") {
	        useResizeObserverV1(arg1);
	        return;
	    }
	    var onResize = arg1;
	    var propRef = arg2.ref, _a = arg2.disableHeight, disableHeight = _a === void 0 ? false : _a, _b = arg2.disableWidth, disableWidth = _b === void 0 ? false : _b;
	    var _c = useEnsuredRef(propRef), ref = _c[0], refHandler = _c[1];
	    useIsomorphicLayoutEffect(function () {
	        var target = ref.current;
	        if ((disableHeight && disableWidth) || !target) {
	            return;
	        }
	        init();
	        subscribe(target, onResize, disableHeight, disableWidth);
	        return function () {
	            unsubscribe(target, onResize, disableHeight, disableWidth);
	        };
	    }, [disableHeight, disableWidth, onResize]);
	    return [ref, refHandler];
	}

	var cached = {
	    height: undefined,
	    width: undefined,
	};
	/**
	 * This will return the scrollbar size for a specific OS by creating a
	 * temporary element to compare the height/width between it's inner element and
	 * it's own height/width when scrollbars are enabled. This is useful when your
	 * height/width calculations need to exclude scrollbars since they are included
	 * by default but content can't be shown underneath them for for static
	 * elements.
	 *
	 * Note: This will return `0` on Mac OS with the default "Only show scrollbars
	 * when scrolling" which is to be expected. These scrollbars overlay the content
	 * and actually don't take up height/width real estate.
	 *
	 * @see https://stackoverflow.com/a/13382873
	 * @param type - Either the string "height" or "width" to determine which size
	 * to get
	 * @param forced - Boolean if the scrollbar height/width should be force
	 * updated. When this is false, the "cached" value will be returned immediately
	 * instead
	 * @returns the current scrollbar width or -1 if running this on the server
	 */
	function scrollbarSize(type, forced) {
	    if (type === void 0) { type = "width"; }
	    if (forced === void 0) { forced = false; }
	    /* istanbul ignore if */
	    if (typeof window === "undefined") {
	        return -1;
	    }
	    var value = cached[type];
	    if (!forced && typeof value === "number") {
	        return value;
	    }
	    var outer = document.createElement("div");
	    outer.style.visibility = "hidden";
	    outer.style.overflow = "scroll";
	    document.body.appendChild(outer);
	    var inner = document.createElement("div");
	    outer.appendChild(inner);
	    var offsetType = type === "width" ? "offsetWidth" : "offsetHeight";
	    // the scrollbar width can be determined by comparing the width of the parent
	    // element that has scrollbars to the child element that does not.
	    value = outer[offsetType] - inner[offsetType];
	    cached[type] = value;
	    document.body.removeChild(outer);
	    return value;
	}

	var __assign$h9 = (undefined && undefined.__assign) || function () {
	    __assign$h9 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$h9.apply(this, arguments);
	};
	/**
	 * This is the css variable that is used store the current size of each cell.
	 */
	var CELL_SIZE_VAR = "--rmd-cell-size";
	/**
	 * This is the css variable that is used store the current margin of each cell.
	 */
	var CELL_MARGIN_VAR = "--rmd-cell-margin";
	/**
	 * @remarks \@since 2.3.0
	 */
	var DEFAULT_GRID_LIST_MAX_CELL_SIZE = 150;
	/**
	 * @remarks \@since 2.3.0
	 */
	var DEFAULT_GRID_LIST_PADDING = 16;
	var context$9 = React.createContext({
	    columns: -1,
	    cellWidth: -1,
	});
	/**
	 * @remarks \@since 2.3.0
	 */
	var GridListSizeProvider = context$9.Provider;
	/**
	 * Gets the current size of each cell within the `GridList` component. If this
	 * is used without a parent `GridList` component, `-1` is returned instead.
	 *
	 * @remarks \@since 2.3.0
	 */
	function useGridListSize() {
	    return React.useContext(context$9);
	}
	/**
	 * The `useGridList` hook allows you to get all the grid and sizing
	 * functionality of the `GridList` component without needing to wrap your
	 * children in a `<div>` element.
	 *
	 * Example:
	 *
	 * ```tsx
	 * const [gridListProps] = useGridList({
	 *   cellMargin: 16,
	 *   maxCellSize: 300,
	 *   containerPadding: 4,
	 * });
	 *
	 * return <div {...gridListProps}>{children}</div>;
	 * ```
	 *
	 * Note: You must manually provide the `gridSize` to the `GridListSizeProvider`
	 * component that was added in 2.3.0 if you want to use the `useGridSize` hook.
	 *
	 * Example:
	 *
	 * ```tsx
	 * const [gridListProps, gridSize] = useGridList()
	 *
	 * return (
	 *   <GridListSizeProvider value={gridSize}>
	 *     <MyComponent {...gridListProps} />
	 *   </GridListSizeProvider>
	 * );
	 * ```
	 *
	 * @remarks \@since 2.3.0
	 */
	function useGridList(_a) {
	    var _b;
	    var _c = _a === void 0 ? {} : _a, propRef = _c.ref, style = _c.style, className = _c.className, cellMargin = _c.cellMargin, defaultSize = _c.defaultSize, _d = _c.maxCellSize, maxCellSize = _d === void 0 ? DEFAULT_GRID_LIST_MAX_CELL_SIZE : _d, _e = _c.disableHeight, disableHeight = _e === void 0 ? false : _e, _f = _c.disableWidth, disableWidth = _f === void 0 ? false : _f, _g = _c.containerPadding, containerPadding = _g === void 0 ? DEFAULT_GRID_LIST_PADDING : _g;
	    var _h = useEnsuredRef(propRef), ref = _h[0], mergedRef = _h[1];
	    var _j = React.useState(defaultSize || { columns: -1, cellWidth: maxCellSize }), gridSize = _j[0], setGridSize = _j[1];
	    var recalculate = React.useCallback(function () {
	        var target = ref.current;
	        if (!target) {
	            return;
	        }
	        // need to use rect instead of offsetWidth since we need decimal precision
	        // for the width since offsetWidth is basically Math.ceil(width). the
	        // calculations for max columns will be off on high-pixel-density monitors
	        // or some zoom levels.
	        var width = target.getBoundingClientRect().width;
	        width -= containerPadding;
	        // just need to see if there is a scrollbar visible and subtract that width.
	        // don't need decimal precision here since both values will be rounded
	        if (target.offsetHeight < target.scrollHeight) {
	            width -= scrollbarSize("width");
	        }
	        var columns = Math.ceil(width / maxCellSize);
	        setGridSize({ cellWidth: width / columns, columns: columns });
	    }, [containerPadding, maxCellSize, ref]);
	    var _k = useResizeObserver(recalculate, {
	        ref: mergedRef,
	        disableHeight: disableHeight,
	        disableWidth: disableWidth,
	    }), refHandler = _k[1];
	    var mergedStyle = __assign$h9(__assign$h9({}, style), (_b = {}, _b[CELL_SIZE_VAR] = gridSize.cellWidth + "px", _b));
	    if (cellMargin) {
	        mergedStyle[CELL_MARGIN_VAR] = cellMargin;
	    }
	    return [
	        {
	            ref: refHandler,
	            style: mergedStyle,
	            className: cn("rmd-grid-list", className),
	        },
	        gridSize,
	    ];
	}

	var __assign$h8 = (undefined && undefined.__assign) || function () {
	    __assign$h8 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$h8.apply(this, arguments);
	};
	var __rest$2d = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var isRenderFunction = function (children) { return typeof children === "function"; };
	/**
	 * The `GridList` component is a different way to render a list of data where
	 * the number of columns is dynamic and based on the max-width for each cell.
	 * Instead of setting a percentage width to each cell based on the number of
	 * columns, this will dynamically add columns to fill up the remaining space and
	 * have each cell grow up to a set max-width. A really good use-case for this is
	 * displaying a list of images or thumbnails and allowing the user to see a full
	 * screen preview once selected/clicked.
	 */
	var GridList = React.forwardRef(function GridList(_a, forwardedRef) {
	    var style = _a.style, className = _a.className, children = _a.children, _b = _a.clone, clone = _b === void 0 ? false : _b, _c = _a.wrapOnly, wrapOnly = _c === void 0 ? false : _c, cellMargin = _a.cellMargin, defaultSize = _a.defaultSize, _d = _a.maxCellSize, maxCellSize = _d === void 0 ? DEFAULT_GRID_LIST_MAX_CELL_SIZE : _d, _e = _a.containerPadding, containerPadding = _e === void 0 ? DEFAULT_GRID_LIST_PADDING : _e, _f = _a.disableHeightObserver, disableHeightObserver = _f === void 0 ? false : _f, _g = _a.disableWidthObserver, disableWidthObserver = _g === void 0 ? false : _g, props = __rest$2d(_a, ["style", "className", "children", "clone", "wrapOnly", "cellMargin", "defaultSize", "maxCellSize", "containerPadding", "disableHeightObserver", "disableWidthObserver"]);
	    var _h = useGridList({
	        ref: forwardedRef,
	        style: style,
	        className: className,
	        cellMargin: cellMargin,
	        defaultSize: defaultSize,
	        maxCellSize: maxCellSize,
	        containerPadding: containerPadding,
	        disableHeight: disableHeightObserver,
	        disableWidth: disableWidthObserver,
	    }), gridListProps = _h[0], gridSize = _h[1];
	    var content = null;
	    if (isRenderFunction(children)) {
	        content = children(gridSize);
	    }
	    else if (clone || wrapOnly) {
	        content = React.Children.map(children, function (child) { return child && React__default['default'].createElement(GridListCell, { clone: clone }, child); });
	    }
	    else {
	        content = children;
	    }
	    return (React__default['default'].createElement(GridListSizeProvider, { value: gridSize },
	        React__default['default'].createElement("div", __assign$h8({}, props, gridListProps), content)));
	});

	/**
	 * A small util that is used to increment or decrement a number until it reaches
	 * the max value or -1. When that happens, it will loop around to 0 or the max
	 * value respectively. This does not work for different increment numbers or any
	 * values below 0 for now.
	 *
	 * @internal
	 * @param options - {@link LoopOptions}
	 * @remarks \@since 2.7.0 The `min` option was added and the arguments changed to an
	 * object
	 */
	function loop(_a) {
	    var value = _a.value, _b = _a.min, min = _b === void 0 ? 0 : _b, max = _a.max, increment = _a.increment, _c = _a.minmax, minmax = _c === void 0 ? false : _c;
	    var next = value + (increment ? 1 : -1);
	    if (minmax) {
	        next = Math.min(max, Math.max(min, next));
	    }
	    else if (next > max) {
	        next = min;
	    }
	    else if (next < min) {
	        next = max;
	    }
	    return next;
	}

	/**
	 * Rounds a number to the nearest step within a min/max range.
	 *
	 * @see https://stackoverflow.com/a/13635455
	 * @param value - The value to round to the nearest step
	 * @param min - The min value allowed
	 * @param max - The max value allowed
	 * @param steps - The number of steps in the min/max range
	 * @param range - The range allowed for the value that defaults to `max - min`
	 * @returns the value rounded to the nearest step in the min/max range
	 * @remarks \@since 2.5.0 - Added the `range` param
	 */
	function nearest(value, min, max, steps, range) {
	    if (range === void 0) { range = max - min; }
	    var rounded = Math.round(((value - min) * steps) / range) / steps;
	    var zeroToOne = Math.min(Math.max(rounded, 0), 1);
	    // have to calculate the number of allowed decimal places since decimal
	    // precision gets weird:
	    // 0.28 * 100 === 28.000000000000004
	    var step = range / steps;
	    var decimals = Number.isInteger(step)
	        ? range % steps
	        : step.toString().split(".")[1].length;
	    return Math.min(max, Math.max(min, parseFloat((zeroToOne * range + min).toFixed(decimals))));
	}

	/**
	 * I really don't know how to typedef this. It just creates a new object that
	 * has all the values copied over except for any keys that are defined in the
	 * omitKeys param.
	 *
	 * @internal
	 * @param object - The object to remove keys from
	 * @param omitKeys - The keys to remove.
	 * @returns a new object without the specified keys
	 */
	function omit(object, omitKeys) {
	    if (!omitKeys.length) {
	        return object;
	    }
	    return Object.keys(object).reduce(function (updated, key) {
	        if (!omitKeys.includes(key)) {
	            updated[key] = object[key];
	        }
	        return updated;
	    }, {});
	}

	/**
	 * Attempts to find a sizing container based on the provided HTMLElement. By
	 * default, the sizing element will just be the provided element unless:
	 * - the item has a known role within react-md that can target known classes
	 * - the item has a `data-sizing-selector` attribute that is a valid query
	 *   selector for the nested item.
	 *
	 * NOTE: The `data-sizing-selector` will be run from the current element instead
	 * of the `document`.
	 *
	 * @param el - The element to find a sizing container for.
	 * @returns the sizing container relative to the provided element, or `null` if
	 * none could be found.
	 * @throws This error will be thrown if using the `data-query-selector` and the
	 * query selector does not return an element on the page.
	 */
	function findSizingContainer(el) {
	    if (!el) {
	        return null;
	    }
	    if (/(tree|list)item/.test(el.getAttribute("role") || "")) {
	        var content = el.querySelector(".rmd-tree-item__content, .rmd-item-text");
	        if (content) {
	            return content;
	        }
	    }
	    else if (el.getAttribute("type") === "file") {
	        var label = document.querySelector("[for=\"" + el.id + "\"]");
	        if (label) {
	            return label;
	        }
	    }
	    var data = el.getAttribute("data-sizing-selector");
	    if (data) {
	        var content = el.querySelector(data);
	        if (content) {
	            return content;
	        }
	    }
	    return el;
	}

	/**
	 * This is a simple wrapper to get the view width or view hieght.
	 *
	 * @param direction - Either the "height" or "width" string to get that
	 * dimension
	 * @returns the view width or view height.
	 */
	function getViewportSize(direction) {
	    var de = document.documentElement || { clientHeight: 0, clientWidth: 0 };
	    if (direction === "width") {
	        return window.innerWidth || de.clientWidth;
	    }
	    return window.innerHeight || de.clientHeight;
	}

	function applyCoords(coord) {
	    return typeof coord === "number" ? coord + "px" : "";
	}
	/**
	 * This util is used to get the "true" `element.getBoundingClientRect()` that
	 * ensures that transitions using tarnsforms don't mess up the sizing so that
	 * position calculations are easier to do.
	 *
	 * @param element - The element to get a rect for.
	 * @param coords - An optional object of coordinates to apply to the positioning
	 * styles. This should be used when the coords might resize the element since it
	 * needs to try to fit within the viewport.
	 * @returns either a DOMRect or ClientRect for the element
	 * @internal
	 */
	function getElementRect(element, coords) {
	    if (coords === void 0) { coords = {}; }
	    var cloned = element.cloneNode(true);
	    // remove the id so there won't be two elements with the same id on the page
	    cloned.removeAttribute("id");
	    // remove the role just in case the role would alert screen readers once added
	    // to the dom
	    cloned.removeAttribute("role");
	    // ensure the cloned node won't shift the page or be visible
	    cloned.style.position = "fixed";
	    cloned.style.visibility = "hidden";
	    // reset positionion to get a "pure" calculation. otherwise this will mess up
	    // the height and width if the element is able to line wrap.
	    cloned.style.left = applyCoords(coords.left);
	    cloned.style.top = applyCoords(coords.top);
	    cloned.style.right = applyCoords(coords.right);
	    cloned.style.bottom = applyCoords(coords.bottom);
	    // reset transforms so that custom animations don't mess with the sizing
	    cloned.style.webkitTransform = "none";
	    cloned.style.transform = "none";
	    var parent = element.parentElement || document.body;
	    parent.appendChild(cloned);
	    var rect = cloned.getBoundingClientRect();
	    parent.removeChild(cloned);
	    return rect;
	}

	/**
	 * Creates the `left` style value for an element that should be fixed to the
	 * (outer) left of the container element. So the right bounds of the fixed
	 * element will be equal to the left bounds of the container element (before the
	 * xMargin is applied).
	 * @internal
	 */
	function getLeftCoord(_a) {
	    var xMargin = _a.xMargin, elWidth = _a.elWidth, initialX = _a.initialX, containerRect = _a.containerRect;
	    return (initialX !== null && initialX !== void 0 ? initialX : containerRect.left) - elWidth - xMargin;
	}
	/**
	 * Creates the `left` style value for an element that should be fixed to the
	 * inner-left of the container element. So the left bounds of both the container
	 * and fixed elements will overlap (before the xMargin is applied)
	 * @internal
	 */
	function getInnerLeftCoord(_a) {
	    var xMargin = _a.xMargin, initialX = _a.initialX, containerRect = _a.containerRect;
	    return (initialX !== null && initialX !== void 0 ? initialX : containerRect.left) + xMargin;
	}
	/**
	 * Creates the `left` style value for an element that should be fixed to the
	 * center of the container element. So the center point of the fixed element
	 * should be the center point of the container element.
	 *
	 * Note: Unlike all the other horizontal positioning logic, the center position
	 * does not use the xMargin.
	 * @internal
	 */
	function getCenterXCoord(_a) {
	    var elWidth = _a.elWidth, initialX = _a.initialX, containerRect = _a.containerRect;
	    var containerCenter = containerRect.width / 2;
	    var elementCenter = elWidth / 2;
	    return (initialX !== null && initialX !== void 0 ? initialX : containerRect.left + containerCenter) - elementCenter;
	}
	/**
	 * Creates the `left` style value for an element that should be fixed to the
	 * inner-right of the container element. So the right bounds for both the
	 * container and fixed elements will overlap (before the xMargin is applied).
	 * @internal
	 */
	function getInnerRightCoord(_a) {
	    var xMargin = _a.xMargin, elWidth = _a.elWidth, initialX = _a.initialX, containerRect = _a.containerRect;
	    return ((initialX !== null && initialX !== void 0 ? initialX : containerRect.left + containerRect.width) - elWidth - xMargin);
	}
	/**
	 * Creates the `left` style value for an element that should be fixed to the
	 * (outer) right of the container element. So the left bounds of the fixed
	 * element will overlap with the right bounds of the container element (before
	 * the xMargin is applied).
	 * @internal
	 */
	function getRightCoord(_a) {
	    var xMargin = _a.xMargin, initialX = _a.initialX, containerRect = _a.containerRect;
	    return (initialX !== null && initialX !== void 0 ? initialX : containerRect.left + containerRect.width) + xMargin;
	}
	/**
	 * Creates the `top` style value for an element that should be fixed above the
	 * container element. So the bottom bounds of the fixed element will overlap
	 * with the top bounds of the container element (before the yMargin is applied).
	 * @internal
	 */
	function getAboveCoord(_a) {
	    var yMargin = _a.yMargin, initialY = _a.initialY, elHeight = _a.elHeight, containerRect = _a.containerRect;
	    return (initialY !== null && initialY !== void 0 ? initialY : containerRect.top) - elHeight - yMargin;
	}
	/**
	 * Creates the `top` style value for an element that should be fixed to the top
	 * of the container element. So the top bounds for both the container and fixed
	 * elements will overlap (before the yMargin is applied).
	 * @internal
	 */
	function getTopCoord(_a) {
	    var yMargin = _a.yMargin, initialY = _a.initialY, containerRect = _a.containerRect;
	    return (initialY !== null && initialY !== void 0 ? initialY : containerRect.top) + yMargin;
	}
	/**
	 * Creates the `top` style value for an element that should be fixed vertically
	 * centered relative to the container element. So the vertical center point for
	 * the fixed element should overlap the vertical center point of the container
	 * element.
	 *
	 * Note: Unlike all the other vertical positioning logic, the center position
	 * does not use the yMargin.
	 */
	function getCenterYCoord(_a) {
	    var elHeight = _a.elHeight, initialY = _a.initialY, containerRect = _a.containerRect;
	    var containerCenter = containerRect.height / 2;
	    var elementCenter = elHeight / 2;
	    return (initialY !== null && initialY !== void 0 ? initialY : containerRect.top + containerCenter) - elementCenter;
	}
	/**
	 * Creates the `top` style value for an element that should be fixed to the
	 * bottom of the container element. So the top bounds of the fixed element
	 * should overlap the bottom bounds of the container element (before the yMargin
	 * is applied).
	 * @internal
	 */
	function getBottomCoord(_a) {
	    var yMargin = _a.yMargin, initialY = _a.initialY, elHeight = _a.elHeight, containerRect = _a.containerRect;
	    return ((initialY !== null && initialY !== void 0 ? initialY : containerRect.top + containerRect.height) - elHeight - yMargin);
	}
	/**
	 * Creates the `top` style value for an element that should be fixed to the
	 * bottom of the container element. So the bottom bounds of both the container
	 * and fixed elements should overlap (before the yMargin is applied).
	 * @internal
	 */
	function getBelowCoord(_a) {
	    var yMargin = _a.yMargin, initialY = _a.initialY, containerRect = _a.containerRect;
	    return (initialY !== null && initialY !== void 0 ? initialY : containerRect.top + containerRect.height) + yMargin;
	}

	/**
	 * Attempts to position the fixed element so that it will appear to the left of
	 * the container element but also within the viewport boundaries. When swapping
	 * is enabled, it will attempt to swap to the right position if it can't fit
	 * within the viewport to the left. If it can't fit in the viewport even after
	 * being swapped to the right or swapping is disabled, it will be positioned to
	 * the viewport left boundary.
	 *
	 * @internal
	 */
	function createAnchoredLeft(config) {
	    var vwMargin = config.vwMargin, screenRight = config.screenRight, elWidth = config.elWidth, disableSwapping = config.disableSwapping;
	    var left = getLeftCoord(config);
	    var actualX = "left";
	    if (left >= vwMargin) {
	        return { actualX: actualX, left: left };
	    }
	    var swappedLeft = getRightCoord(config);
	    if (disableSwapping || swappedLeft + elWidth > screenRight) {
	        left = vwMargin;
	    }
	    else {
	        left = swappedLeft;
	        actualX = "right";
	    }
	    return { actualX: actualX, left: left };
	}
	/**
	 * Attempts to position the fixed element so that it will appear to the
	 * inner-left of the container element but also within the viewport boundaries.
	 * When swapping is enabled, it will attempt to swap to the right position if it
	 * can't fit within the viewport to the left. If it can't fit in the viewport
	 * even after being swapped to the right or swapping is disabled, it will be
	 * positioned to the viewport left boundary.
	 *
	 * @internal
	 */
	function createAnchoredInnerLeft(config) {
	    var vwMargin = config.vwMargin, screenRight = config.screenRight, elWidth = config.elWidth, disableSwapping = config.disableSwapping;
	    var left = getInnerLeftCoord(config);
	    var actualX = "inner-left";
	    if (left + elWidth <= screenRight) {
	        return { actualX: actualX, left: left };
	    }
	    var swappedLeft = getInnerRightCoord(config);
	    if (disableSwapping || swappedLeft < vwMargin) {
	        left = vwMargin;
	    }
	    else {
	        left = swappedLeft;
	        actualX = "inner-right";
	    }
	    return { actualX: actualX, left: left };
	}
	/**
	 * Attempts to position the fixed element so that it will appear at the center
	 * of the container element but also within the viewport boundaries. If the
	 * centered element can't fit within the viewport, it will use the vwMargin
	 * value if it overflowed to the left, it'll position to the screen right
	 * boundary.
	 *
	 * @internal
	 */
	function createAnchoredCenter$1(config) {
	    var vwMargin = config.vwMargin, screenRight = config.screenRight, elWidth = config.elWidth;
	    var left = getCenterXCoord(config);
	    if (left < vwMargin) {
	        left = vwMargin;
	    }
	    else if (left + elWidth > screenRight || left < vwMargin) {
	        left = screenRight - elWidth;
	    }
	    return { actualX: "center", left: left };
	}
	/**
	 * Attempts to position the fixed element so that it will appear to the
	 * inner-right of the container element but also within the viewport boundaries.
	 * When swapping is enabled, it will attempt to swap to the inner-left position
	 * if it can't fit within the viewport to the right. If it can't fit in the
	 * viewport even after being swapped to the left or swapping is disabled, it
	 * will be positioned to the viewport right boundary.
	 *
	 * @internal
	 */
	function createAnchoredInnerRight(config) {
	    var screenRight = config.screenRight, vwMargin = config.vwMargin, elWidth = config.elWidth, disableSwapping = config.disableSwapping;
	    var left = getInnerRightCoord(config);
	    var actualX = "inner-right";
	    if (left >= vwMargin) {
	        return { actualX: actualX, left: left };
	    }
	    var swappedLeft = getInnerLeftCoord(config);
	    if (disableSwapping || swappedLeft + elWidth > screenRight) {
	        left = screenRight - elWidth;
	    }
	    else {
	        left = swappedLeft;
	        actualX = "inner-left";
	    }
	    return { actualX: actualX, left: left };
	}
	/**
	 * Attempts to position the fixed element so that it will appear to the right of
	 * the container element but also within the viewport boundaries. When swapping
	 * is enabled, it will attempt to swap to the left position if it can't fit
	 * within the viewport to the right. If it can't fit in the viewport even after
	 * being swapped to the left or swapping is disabled, it will be positioned to
	 * the viewport right boundary.
	 *
	 * @internal
	 */
	function createAnchoredRight(config) {
	    var screenRight = config.screenRight, vwMargin = config.vwMargin, elWidth = config.elWidth, disableSwapping = config.disableSwapping;
	    var left = getRightCoord(config);
	    var actualX = "right";
	    if (left + elWidth <= screenRight) {
	        return { actualX: actualX, left: left };
	    }
	    var swappedLeft = getLeftCoord(config);
	    if (disableSwapping || swappedLeft < vwMargin) {
	        left = screenRight - elWidth;
	    }
	    else {
	        left = swappedLeft;
	        actualX = "left";
	    }
	    return { actualX: actualX, left: left };
	}
	/**
	 * @internal
	 */
	function createEqualWidth(_a) {
	    var x = _a.x, vw = _a.vw, elWidth = _a.elWidth, xMargin = _a.xMargin, vwMargin = _a.vwMargin, initialX = _a.initialX, containerRect = _a.containerRect, isMinWidth = _a.isMinWidth;
	    var left = initialX !== null && initialX !== void 0 ? initialX : containerRect.left + xMargin;
	    var width = containerRect.width - xMargin * 2;
	    var minWidth;
	    var right;
	    if (isMinWidth) {
	        minWidth = width;
	        width = undefined;
	        if (left + elWidth > vw - vwMargin) {
	            right = vwMargin;
	        }
	    }
	    // going to assume that the container element is visible in the DOM and just
	    // make the fixed element have the same left and right corners
	    return {
	        left: left,
	        right: right,
	        width: width,
	        minWidth: minWidth,
	        actualX: x,
	    };
	}
	/**
	 * Creates the horizontal position for a fixed element with the provided
	 * options.
	 * @internal
	 */
	function createHorizontalPosition(_a) {
	    var x = _a.x, vw = _a.vw, vwMargin = _a.vwMargin, xMargin = _a.xMargin, width = _a.width, elWidth = _a.elWidth, initialX = _a.initialX, containerRect = _a.containerRect, disableSwapping = _a.disableSwapping;
	    if (width === "min" || width === "equal") {
	        return createEqualWidth({
	            x: x,
	            vw: vw,
	            vwMargin: vwMargin,
	            xMargin: xMargin,
	            elWidth: elWidth,
	            initialX: initialX,
	            containerRect: containerRect,
	            isMinWidth: width === "min",
	        });
	    }
	    if (elWidth > vw - vwMargin * 2) {
	        // if the element's width is greater than the viewport's width minus the
	        // margin on both sides, just make the element span the entire viewport with
	        // the margin
	        return {
	            left: vwMargin,
	            right: vwMargin,
	            actualX: x,
	        };
	    }
	    var config = {
	        vwMargin: vwMargin,
	        xMargin: xMargin,
	        elWidth: elWidth,
	        initialX: initialX,
	        screenRight: vw - vwMargin,
	        containerRect: containerRect,
	        disableSwapping: disableSwapping,
	    };
	    switch (x) {
	        case "left":
	            return createAnchoredLeft(config);
	        case "inner-left":
	            return createAnchoredInnerLeft(config);
	        case "center":
	            return createAnchoredCenter$1(config);
	        case "inner-right":
	            return createAnchoredInnerRight(config);
	        case "right":
	            return createAnchoredRight(config);
	        default:
	            throw new Error("This should never happen");
	    }
	}

	/**
	 * Attempts to position the fixed element so that it will appear completely
	 * above the container element but also within the viewport boundaries. When
	 * swapping is enabled, it will attempt to swap to the below position if it
	 * can't fit within the viewport above the container element. If it can't fit in
	 * the viewport even after being swapped below or swapping is disabled, it will
	 * be positioned to the top viewport boundary.
	 *
	 * @internal
	 */
	function createAnchoredAbove(config) {
	    var yMargin = config.yMargin, vhMargin = config.vhMargin, screenBottom = config.screenBottom, elHeight = config.elHeight, containerRect = config.containerRect, preventOverlap = config.preventOverlap, disableSwapping = config.disableSwapping, disableVHBounds = config.disableVHBounds;
	    var top = getAboveCoord(config);
	    var actualY = "above";
	    if (disableVHBounds) {
	        // can't actually allow a top value as a negative number since browsers
	        // won't scroll upwards pas the normal page top
	        return { actualY: actualY, top: Math.max(0, top) };
	    }
	    if (top > vhMargin) {
	        // don't need to do anything else since the top is still in the viewport and
	        // since it's positioned above, we already know it can't overlap the
	        // container element
	        return { actualY: actualY, top: top };
	    }
	    var swappedTop = getBelowCoord(config);
	    if (disableSwapping || swappedTop + elHeight > screenBottom) {
	        top = vhMargin;
	    }
	    else {
	        actualY = "below";
	        top = swappedTop;
	    }
	    var bottom;
	    if (preventOverlap &&
	        // can't overlap if it's positioned below
	        actualY === "above" &&
	        top + elHeight > containerRect.top) {
	        bottom = window.innerHeight - containerRect.top + yMargin;
	    }
	    return { actualY: actualY, top: top, bottom: bottom };
	}
	/**
	 * Attempts to position the fixed element so that it will appear fixed to the
	 * top of the container element but also within the viewport boundaries. When
	 * swapping is enabled, it will attempt to swap to the bottom position if it
	 * can't fit within the viewport. If it can't fit in the viewport even after
	 * being swapped to the bottom position or swapping is disabled, it will be
	 * positioned to the top viewport boundary.
	 *
	 * @internal
	 */
	function createAnchoredTop(config) {
	    var vhMargin = config.vhMargin, screenBottom = config.screenBottom, elHeight = config.elHeight, disableSwapping = config.disableSwapping, disableVHBounds = config.disableVHBounds;
	    var top = getTopCoord(config);
	    var actualY = "top";
	    if (disableVHBounds || top + elHeight <= screenBottom) {
	        return { actualY: actualY, top: top };
	    }
	    var swappedTop = getBottomCoord(config);
	    if (disableSwapping || swappedTop < vhMargin) {
	        top = vhMargin;
	    }
	    else {
	        actualY = "bottom";
	        top = swappedTop;
	    }
	    return { actualY: actualY, top: top };
	}
	/**
	 * Attempts to position the fixed element so that it will appear at the center
	 * of the container element but also within the viewport boundaries. If the
	 * entered element can't fit within the viewport, it'll update the top value
	 * to either be the vhMargin or position to the screen bottom boundary
	 *
	 * @internal
	 */
	function createAnchoredCenter(config) {
	    var vhMargin = config.vhMargin, screenBottom = config.screenBottom, elHeight = config.elHeight, disableVHBounds = config.disableVHBounds;
	    var top = getCenterYCoord(config);
	    var actualY = "center";
	    if (disableVHBounds) {
	        return { actualY: actualY, top: Math.max(0, top) };
	    }
	    top = Math.max(vhMargin, top);
	    if (top + elHeight > screenBottom) {
	        top = screenBottom - elHeight;
	    }
	    return { actualY: actualY, top: top };
	}
	/**
	 * Attempts to position the fixed element so that it will appear fixed to the
	 * bottom of the container element but also within the viewport boundaries. When
	 * swapping is enabled, it will attempt to swap to the top position if it can't
	 * fit within the viewport. If it can't fit in the viewport even after being
	 * swapped to the top position or swapping is disabled, it will be positioned to
	 * the bottom viewport boundary.
	 *
	 * @internal
	 */
	function createAnchoredBottom(config) {
	    var vhMargin = config.vhMargin, screenBottom = config.screenBottom, elHeight = config.elHeight, disableSwapping = config.disableSwapping, disableVHBounds = config.disableVHBounds;
	    var top = getBottomCoord(config);
	    var actualY = "bottom";
	    if (disableVHBounds || top > vhMargin) {
	        return { actualY: actualY, top: top };
	    }
	    var swappedTop = getTopCoord(config);
	    if (disableSwapping || swappedTop + elHeight > screenBottom) {
	        top = screenBottom - elHeight;
	    }
	    else {
	        actualY = "top";
	        top = swappedTop;
	    }
	    return { actualY: actualY, top: top };
	}
	/**
	 * Attempts to position the fixed element so that it will appear completely
	 * below the container element but also within the viewport boundaries. When
	 * swapping is enabled, it will attempt to swap to the above position if it
	 * can't fit within the viewport below the container element. If it can't fit in
	 * the viewport even after being swapped above or swapping is disabled, it will
	 * be positioned to the bottom viewport boundary.
	 *
	 * @internal
	 */
	function createAnchoredBelow(config) {
	    var yMargin = config.yMargin, vhMargin = config.vhMargin, elHeight = config.elHeight, screenBottom = config.screenBottom, containerRect = config.containerRect, preventOverlap = config.preventOverlap, disableSwapping = config.disableSwapping, disableVHBounds = config.disableVHBounds;
	    var top = getBelowCoord(config);
	    var actualY = "below";
	    if (disableVHBounds || top + elHeight <= screenBottom) {
	        return { actualY: actualY, top: top };
	    }
	    if (preventOverlap) {
	        var availableTop = containerRect.top - yMargin;
	        if (disableSwapping || availableTop < screenBottom - top) {
	            return {
	                actualY: actualY,
	                top: top,
	                bottom: vhMargin,
	            };
	        }
	        return {
	            actualY: "above",
	            top: Math.max(vhMargin, availableTop - elHeight),
	            // this makes it so that the bottom of the fixed element is the top of the container
	            // element. this ensures that it won't ever overlap the container element
	            bottom: getViewportSize("height") - availableTop,
	        };
	    }
	    var swappedTop = getAboveCoord(config);
	    if (disableSwapping || swappedTop < vhMargin) {
	        top = screenBottom - elHeight;
	    }
	    else {
	        actualY = "above";
	        top = swappedTop;
	    }
	    return { actualY: actualY, top: top };
	}
	/**
	 * Creates the vertical position for a fixed element with the provided options.
	 *
	 * @internal
	 */
	function createVerticalPosition(_a) {
	    var y = _a.y, vh = _a.vh, vhMargin = _a.vhMargin, yMargin = _a.yMargin, elHeight = _a.elHeight, initialY = _a.initialY, containerRect = _a.containerRect, disableSwapping = _a.disableSwapping, preventOverlap = _a.preventOverlap, disableVHBounds = _a.disableVHBounds;
	    if (!disableVHBounds && !preventOverlap && elHeight > vh - vhMargin * 2) {
	        // the element is too big to be displayed in the viewport, so just span the
	        // full viewport excluding margins
	        return {
	            top: vhMargin,
	            bottom: vhMargin,
	            actualY: "center",
	        };
	    }
	    var config = {
	        vhMargin: vhMargin,
	        yMargin: yMargin,
	        elHeight: elHeight,
	        initialY: initialY,
	        containerRect: containerRect,
	        screenBottom: vh - vhMargin,
	        preventOverlap: preventOverlap,
	        disableSwapping: disableSwapping,
	        disableVHBounds: disableVHBounds,
	    };
	    switch (y) {
	        case "above":
	            return createAnchoredAbove(config);
	        case "top":
	            return createAnchoredTop(config);
	        case "center":
	            return createAnchoredCenter(config);
	        case "bottom":
	            return createAnchoredBottom(config);
	        case "below":
	            return createAnchoredBelow(config);
	        default:
	            throw new Error("This should never happen");
	    }
	}

	/**
	 * This is a simple util that'll generate a css `transform-origin` string so
	 * that the fixed element can animate from the correct point based on the
	 * provided anchor.
	 *
	 * @param anchor - The anchor that should be used to create the transform origin
	 * for.
	 * @returns the transform origin string
	 * @internal
	 */
	function getTransformOrigin(anchor) {
	    var x = "0";
	    switch (anchor.x) {
	        case "right":
	        case "inner-left":
	            x = "0";
	            break;
	        case "center":
	            x = "50%";
	            break;
	        case "left":
	        case "inner-right":
	            x = "100%";
	            break;
	        default:
	            x = "0";
	    }
	    var y = "0";
	    switch (anchor.y) {
	        case "above":
	        case "bottom":
	            y = "100%";
	            break;
	        case "center":
	            y = "50%";
	            break;
	        case "below":
	        case "top":
	            y = "0";
	            break;
	        default:
	            y = "0";
	    }
	    return x + " " + y;
	}

	/**
	 * One of the most complicated functions in this project that will attempt to
	 * position an element relative to another container element while still being
	 * visible within the viewport. Below is the logical flow for attempting to fix
	 * the element to the container:
	 *
	 * No Container: If there is no container element, return the provided x and y
	 * positions and no styles since there's nothing we can use to calculate the
	 * position.
	 *
	 * No Element: If the container was provided but the element to position does
	 * not exist, return an style object containing the `left` and `top` values for
	 * the container and apply as many of the positioning options as possible so
	 * that the styles are "as close as possible" before the fixed element is added
	 * to the DOM. This will also return the provided x and y positions since
	 * nothing could be swapped around yet.
	 *
	 * Container and Element: If both the container and fixed element were provided,
	 * apply all the positioning options to the `left` and `top` values of the
	 * container based on the sizes of both elements.
	 *
	 * Now that the `left` and `top` values were applied, check to see if the
	 * element is fully visible within the viewport with the provided positioning
	 * options. If it is fully visible, do nothing else. If it isn't... follow the
	 * next flow:
	 *
	 * First, check the horizontal sizes and make sure that the element is still
	 * within the viewport with the provided viewwidth margin. If it isn't, first
	 * try to swap only to a `right` style instead of left to see if that fixes it,
	 * otherwise keep both the `left` and `right` styles.
	 */
	function getFixedPosition(_a) {
	    var container = _a.container, element = _a.element, _b = _a.anchor, propAnchor = _b === void 0 ? {} : _b, initialX = _a.initialX, initialY = _a.initialY, _c = _a.vwMargin, vwMargin = _c === void 0 ? 16 : _c, _d = _a.vhMargin, vhMargin = _d === void 0 ? 16 : _d, _e = _a.xMargin, xMargin = _e === void 0 ? 0 : _e, _f = _a.yMargin, yMargin = _f === void 0 ? 0 : _f, _g = _a.width, widthType = _g === void 0 ? "auto" : _g, _h = _a.preventOverlap, preventOverlap = _h === void 0 ? false : _h, _j = _a.transformOrigin, transformOrigin = _j === void 0 ? false : _j, _k = _a.disableSwapping, disableSwapping = _k === void 0 ? false : _k, _l = _a.disableVHBounds, disableVHBounds = _l === void 0 ? false : _l;
	    container = findSizingContainer(container);
	    var anchor = {
	        x: propAnchor.x || "center",
	        y: propAnchor.y || "below",
	    };
	    if (!container || !element) {
	        return {
	            actualX: anchor.x,
	            actualY: anchor.y,
	        };
	    }
	    var containerRect = container.getBoundingClientRect();
	    var vh = getViewportSize("height");
	    var vw = getViewportSize("width");
	    var _m = getElementRect(element), height = _m.height, elWidth = _m.width;
	    if (disableVHBounds) {
	        var dialog = element.closest("[role='dialog']");
	        if (!dialog) {
	            initialY = (initialY !== null && initialY !== void 0 ? initialY : 0) + window.scrollY;
	        }
	    }
	    var _o = createHorizontalPosition({
	        x: anchor.x,
	        vw: vw,
	        vwMargin: vwMargin,
	        xMargin: xMargin,
	        width: widthType,
	        elWidth: elWidth,
	        initialX: initialX,
	        containerRect: containerRect,
	        disableSwapping: disableSwapping,
	    }), left = _o.left, right = _o.right, width = _o.width, minWidth = _o.minWidth, actualX = _o.actualX;
	    var _p = createVerticalPosition({
	        y: anchor.y,
	        vh: vh,
	        vhMargin: vhMargin,
	        yMargin: yMargin,
	        initialY: initialY,
	        elHeight: height,
	        containerRect: containerRect,
	        disableSwapping: disableSwapping,
	        preventOverlap: preventOverlap,
	        disableVHBounds: disableVHBounds,
	    }), top = _p.top, bottom = _p.bottom, actualY = _p.actualY;
	    return {
	        actualX: actualX,
	        actualY: actualY,
	        style: {
	            left: left,
	            top: top,
	            right: right,
	            bottom: bottom,
	            width: width,
	            minWidth: minWidth,
	            position: disableVHBounds ? "absolute" : "fixed",
	            transformOrigin: transformOrigin
	                ? getTransformOrigin({ x: actualX, y: actualY })
	                : undefined,
	        },
	    };
	}

	var ABOVE_LEFT_ANCHOR = {
	    x: "left",
	    y: "above",
	};
	var ABOVE_INNER_LEFT_ANCHOR = {
	    x: "inner-left",
	    y: "above",
	};
	var ABOVE_CENTER_ANCHOR = {
	    x: "center",
	    y: "above",
	};
	var ABOVE_INNER_RIGHT_ANCHOR = {
	    x: "inner-right",
	    y: "above",
	};
	var ABOVE_RIGHT_ANCHOR = {
	    x: "right",
	    y: "above",
	};
	var TOP_LEFT_ANCHOR = {
	    x: "left",
	    y: "top",
	};
	var TOP_INNER_LEFT_ANCHOR = {
	    x: "inner-left",
	    y: "top",
	};
	var TOP_CENTER_ANCHOR = {
	    x: "center",
	    y: "top",
	};
	var TOP_INNER_RIGHT_ANCHOR = {
	    x: "inner-right",
	    y: "top",
	};
	var TOP_RIGHT_ANCHOR = {
	    x: "right",
	    y: "top",
	};
	var CENTER_LEFT_ANCHOR = {
	    x: "left",
	    y: "center",
	};
	var CENTER_INNER_LEFT_ANCHOR = {
	    x: "inner-left",
	    y: "center",
	};
	var CENTER_CENTER_ANCHOR = {
	    x: "center",
	    y: "center",
	};
	var CENTER_INNER_RIGHT_ANCHOR = {
	    x: "inner-right",
	    y: "center",
	};
	var CENTER_RIGHT_ANCHOR = {
	    x: "right",
	    y: "center",
	};
	var BOTTOM_LEFT_ANCHOR = {
	    x: "left",
	    y: "bottom",
	};
	var BOTTOM_INNER_LEFT_ANCHOR = {
	    x: "inner-left",
	    y: "bottom",
	};
	var BOTTOM_CENTER_ANCHOR = {
	    x: "center",
	    y: "bottom",
	};
	var BOTTOM_INNER_RIGHT_ANCHOR = {
	    x: "inner-right",
	    y: "bottom",
	};
	var BOTTOM_RIGHT_ANCHOR = {
	    x: "right",
	    y: "bottom",
	};
	var BELOW_LEFT_ANCHOR = {
	    x: "left",
	    y: "below",
	};
	var BELOW_INNER_LEFT_ANCHOR = {
	    x: "inner-left",
	    y: "below",
	};
	var BELOW_CENTER_ANCHOR = {
	    x: "center",
	    y: "below",
	};
	var BELOW_INNER_RIGHT_ANCHOR = {
	    x: "inner-right",
	    y: "below",
	};
	var BELOW_RIGHT_ANCHOR = {
	    x: "right",
	    y: "below",
	};

	/**
	 * Attempts to scroll an element into view within another container element if
	 * needed.  If either the container or element are `null`, nothing will happen.
	 *
	 * @param container - The container element that should be scrolled if the child
	 * element is not within view.
	 * @param element - The element that should be visible within the container
	 * element's scroll area.
	 */
	function scrollIntoView(container, element) {
	    element = findSizingContainer(element);
	    if (!container || !element) {
	        return;
	    }
	    var offsetTop = element.offsetTop;
	    if (element.offsetParent !== container) {
	        offsetTop -= container.offsetTop;
	    }
	    var elementBottom = offsetTop + element.offsetHeight;
	    var containerBottom = container.offsetHeight + container.scrollTop;
	    if (elementBottom > containerBottom) {
	        container.scrollTop = elementBottom - container.offsetHeight;
	    }
	    else if (offsetTop < container.scrollTop) {
	        container.scrollTop = offsetTop;
	    }
	}

	/**
	 * Attempts to find the first match index for a list of values that starts with
	 * the provided query string and is within the start and end indexes. If no
	 * matches are found, -1 will be returned instead.
	 *
	 * Since this is normally coming from a keydown event, the query *must* be a
	 * string of all capital letters to work as each value will be converted to
	 * uppercase before checking.
	 *
	 * @param value - The current query string to find within the values
	 * @param values - The list of values to search within
	 * @param startIndex - The start index for the search
	 * @param endIndex - The end index for the search
	 * @internal
	 */
	function findMatchInRange(value, values, startIndex, endIndex) {
	    value = value.toUpperCase();
	    for (var i = startIndex; i < endIndex; i += 1) {
	        var content = values[i];
	        if (content.toUpperCase().indexOf(value) === 0) {
	            return i;
	        }
	    }
	    return -1;
	}
	/**
	 * A function that is used to find the next match index within a list of values
	 * by comparing the start values ignoring case.
	 *
	 * If a match can not be found from the search string, `-1` will be returned.
	 * The search value is self-matchable by default, but it can be omitted by
	 * disabling the `isSelfMatchable` argument. This will make a self-match return
	 * `-1`.
	 *
	 * @param value - The current search value
	 * @param values - A list of values to search within
	 * @param startIndex - The index within the values list to start the search from
	 * @param isSelfMatchable - Boolean if the current index can be included in the
	 * search
	 * @internal
	 */
	function findMatchIndex(value, values, startIndex, isSelfMatchable) {
	    if (isSelfMatchable === void 0) { isSelfMatchable = true; }
	    var index = findMatchInRange(value, values, startIndex + 1, values.length);
	    if (index === -1) {
	        var endIndex = startIndex + (isSelfMatchable ? 1 : 0);
	        index = findMatchInRange(value, values, 0, endIndex);
	    }
	    return index;
	}

	/**
	 * This is a small util that is used to transform a search string with common
	 * patterns.
	 *
	 * @param value - The string to transform
	 * @param lowercase - Boolean if the value should be lowercased for
	 * case-insensitive searches
	 * @param trim - Boolean if the leading and trailing whitespace should be
	 * trimmed
	 * @param ignoreWhitespace - Boolean if all whitespace should be ignored. This
	 * will take precedence over the `trim` parameter if set to true.
	 * @returns The transformed search string
	 * @internal
	 */
	function getSearchString(value, lowercase, trim, ignoreWhitespace) {
	    if (lowercase === void 0) { lowercase = false; }
	    if (trim === void 0) { trim = false; }
	    if (ignoreWhitespace === void 0) { ignoreWhitespace = false; }
	    if (lowercase) {
	        value = value.toLowerCase();
	    }
	    if (ignoreWhitespace) {
	        value = value.replace(/\s/g, "");
	    }
	    else if (trim) {
	        value = value.trim();
	    }
	    return value;
	}
	/**
	 * The default implementation of the getItemValue search option that will
	 * attempt to "stringify" any unknown item as a string.
	 *
	 * @param item - The current item to transform
	 * @param valueKey - The key to use that should hold the value if the item is an
	 * object
	 * @returns the item as a string
	 * @internal
	 */
	function getItemValue(item, valueKey) {
	    if (valueKey === void 0) { valueKey = "value"; }
	    switch (typeof item) {
	        case "string":
	            return item;
	        case "number":
	            return Number.isNaN(item) ? "" : "" + item;
	        case "function":
	            return getItemValue(item(), valueKey);
	        case "object":
	            return item
	                ? getItemValue(item[valueKey], valueKey)
	                : "";
	        default:
	            return "";
	    }
	}
	var DEFAULT_GET_ITEM_VALUE = getItemValue;
	var DEFAULT_VALUE_KEY = "value";
	var DEFAULT_TRIM = true;
	var DEFAULT_IGNORE_WHITESPACE = false;
	var DEFAULT_SEARCH_RESET_TIME = 500;
	var DEFAULT_SEARCH_OPTIONS = {
	    getItemValue: DEFAULT_GET_ITEM_VALUE,
	    valueKey: DEFAULT_VALUE_KEY,
	    trim: DEFAULT_TRIM,
	    ignoreWhitespace: DEFAULT_IGNORE_WHITESPACE,
	};

	/**
	 * Filters a list by ensuring that all items contain the query string in order
	 * anywhere in it's own value.
	 *
	 * @param query - The current query string
	 * @param searchable - The list of searchable items that should be filtered
	 * @param options - All the search options to use
	 * @returns A filtered list of all the searchable items based on the query
	 * string.
	 */
	function caseInsensitiveFilter(query, searchable, options) {
	    if (options === void 0) { options = {}; }
	    var _a = defaults(options, DEFAULT_SEARCH_OPTIONS), getItemValue = _a.getItemValue, valueKey = _a.valueKey, trim = _a.trim, ignoreWhitespace = _a.ignoreWhitespace, _b = _a.startsWith, startsWith = _b === void 0 ? false : _b;
	    query = getSearchString(query, true, trim, ignoreWhitespace);
	    if (!query || !searchable.length) {
	        return searchable;
	    }
	    return searchable.filter(function (item) {
	        var value = getSearchString(getItemValue(item, valueKey), true, trim, ignoreWhitespace);
	        if (startsWith) {
	            return value.indexOf(query) === 0;
	        }
	        return value.indexOf(query) !== -1;
	    });
	}

	/**
	 * Creates an "amazing" regular expression that matches the letters in order and
	 * escapes any letters that could be part of a regex. This should normally be
	 * used in fuzzy filters or determining fuzzy matches.
	 *
	 * @param query - The query string to convert into a "fuzzy" regular expression
	 * @returns The "fuzzy" regular expression that can be used to determine
	 * matches.
	 */
	function getFuzzyRegExp(query) {
	    return new RegExp(("" + query)
	        .split("")
	        .join("\\w*")
	        .replace(/(\(|\||\)|\\(?!w\*)|\[|\|-|\.|\^|\+|\$|\?|^(?!w)\*)/g, "\\$1")
	        // Couldn't get the matching of two '*' working, so replace them here..
	        .replace(/\*\*/g, "*\\*"), "i");
	}

	/**
	 * Filters a list by using a fuzzy search "algorithm" (huge double quotes on
	 * algorithm). The fuzzy search will just ensure that all the letters in the
	 * query string appear in-order for all the remaining items. However, the
	 * letters *do not need to be consecutive*.
	 *
	 * @param query - The current query string
	 * @param searchable - The list of searchable items that should be filtered
	 * @param options - All the search options to use
	 * @returns A filtered list of all the searchable items based on the query
	 * string.
	 */
	function fuzzyFilter(query, searchable, options) {
	    if (options === void 0) { options = {}; }
	    var _a = defaults(options, DEFAULT_SEARCH_OPTIONS), getItemValue = _a.getItemValue, valueKey = _a.valueKey, trim = _a.trim, ignoreWhitespace = _a.ignoreWhitespace;
	    query = getSearchString(query, false, trim, ignoreWhitespace);
	    if (!searchable.length || !query) {
	        return searchable;
	    }
	    var queryRegExp = getFuzzyRegExp(query);
	    return searchable.filter(function (item) {
	        var value = getSearchString(getItemValue(item, valueKey), false, trim, ignoreWhitespace);
	        return value.length && value.match(queryRegExp);
	    });
	}

	/**
	 * This is a simple `array.find` implementation that will work for any
	 * searchable item type and return the first item that starts with the current
	 * query string ignoring case.
	 *
	 * @param query - The current query string to use to match with
	 * @param searchable - The list of searchable items
	 * @param options - The additional search options available.
	 * @returns the found item in the searchable list or null
	 */
	function findIgnoreCase(query, searchable, options) {
	    if (options === void 0) { options = {}; }
	    var _a = defaults(options, DEFAULT_SEARCH_OPTIONS), getItemValue = _a.getItemValue, valueKey = _a.valueKey, trim = _a.trim, ignoreWhitespace = _a.ignoreWhitespace;
	    query = getSearchString(query, true, trim, ignoreWhitespace);
	    if (!query.length || !searchable.length) {
	        return null;
	    }
	    var found = searchable.find(function (item) {
	        var value = getSearchString(getItemValue(item, valueKey), true, trim, ignoreWhitespace);
	        return value.indexOf(query) === 0;
	    });
	    return typeof found === "number" ? found : found || null;
	}

	/**
	 * Creates a temporary value that gets reset every `x`ms back to the provided
	 * default value. This is useful when doing keyboard searching or other
	 * interactions.
	 *
	 * NOTE: This does not force a re-render when the value changes and instead uses
	 * a ref value instead.
	 *
	 * @typeParam T - the type for the value
	 * @param defaultValue - The default value to use. Each time the reset timeout
	 * is triggered, this value will be set again.
	 * @param resetTime - The amount of time before the value is reset back to the
	 * default value
	 */
	function useTempValue(defaultValue, resetTime) {
	    if (resetTime === void 0) { resetTime = 500; }
	    var value = React.useRef(defaultValue);
	    var timeout = React.useRef();
	    var resetValue = React.useCallback(function () {
	        window.clearTimeout(timeout.current);
	        value.current = defaultValue;
	    }, [defaultValue]);
	    var setValue = React.useCallback(function (nextValue) {
	        value.current = nextValue;
	        window.clearTimeout(timeout.current);
	        timeout.current = window.setTimeout(resetValue, resetTime);
	    }, [resetTime, resetValue]);
	    return [value, setValue, resetValue];
	}

	/**
	 * Adds the accessibility functionality to search a list of items as the user
	 * types to trigger `aria-activedescendant` focus or manual DOM focus events.
	 */
	function useKeyboardSearch(_a) {
	    var items = _a.items, onChange = _a.onChange, onKeyDown = _a.onKeyDown, _b = _a.resetTime, resetTime = _b === void 0 ? DEFAULT_SEARCH_RESET_TIME : _b, searchIndex = _a.searchIndex, _c = _a.valueKey, valueKey = _c === void 0 ? DEFAULT_VALUE_KEY : _c, _d = _a.getItemValue, getItemValue = _d === void 0 ? DEFAULT_GET_ITEM_VALUE : _d, _e = _a.findMatchIndex, findMatchIndex$1 = _e === void 0 ? findMatchIndex : _e;
	    var _f = useTempValue("", resetTime), value = _f[0], setValue = _f[1];
	    var values = React.useMemo(function () { return items.map(function (item) { return getItemValue(item, valueKey); }); }, [items, getItemValue, valueKey]);
	    var handleKeyDown = React.useCallback(function (event) {
	        if (onKeyDown) {
	            onKeyDown(event);
	        }
	        var key = event.key, altKey = event.altKey, ctrlKey = event.ctrlKey, metaKey = event.metaKey;
	        if (altKey ||
	            ctrlKey ||
	            metaKey ||
	            key.length > 1 ||
	            (!value.current && key === " ")) {
	            // might need to change this later if other languages have non-meta keys
	            // that are more than 1 letter
	            return;
	        }
	        var nextValue = key;
	        if (value.current !== key) {
	            nextValue = "" + value.current + key;
	        }
	        setValue(nextValue);
	        var index = findMatchIndex$1(nextValue, values, searchIndex, true);
	        // don't want to trigger change events if the search didn't match anything
	        // since you normally don't really care about failed matches
	        if (index === searchIndex || index === -1) {
	            return;
	        }
	        var data = {
	            index: index,
	            item: items[index],
	            items: items,
	            query: nextValue,
	            target: event.currentTarget,
	        };
	        onChange(data);
	    }, [
	        searchIndex,
	        findMatchIndex$1,
	        items,
	        onChange,
	        onKeyDown,
	        setValue,
	        value,
	        values,
	    ]);
	    return handleKeyDown;
	}

	var __assign$h7 = (undefined && undefined.__assign) || function () {
	    __assign$h7 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$h7.apply(this, arguments);
	};
	/**
	 * This component should be mounted near the top of your app as it will keep
	 * track of the current app size based on the provided breakpoint widths.
	 */
	function AppSizeListener(_a) {
	    var children = _a.children, onChange = _a.onChange, _b = _a.phoneMaxWidth, phoneMaxWidth = _b === void 0 ? DEFAULT_PHONE_MAX_WIDTH : _b, _c = _a.tabletMinWidth, tabletMinWidth = _c === void 0 ? DEFAULT_TABLET_MIN_WIDTH : _c, _d = _a.tabletMaxWidth, tabletMaxWidth = _d === void 0 ? DEFAULT_TABLET_MAX_WIDTH : _d, _e = _a.desktopMinWidth, desktopMinWidth = _e === void 0 ? DEFAULT_DESKTOP_MIN_WIDTH : _e, _f = _a.desktopLargeMinWidth, desktopLargeMinWidth = _f === void 0 ? DEFAULT_DESKTOP_LARGE_MIN_WIDTH : _f, _g = _a.defaultSize, defaultSize = _g === void 0 ? DEFAULT_APP_SIZE : _g;
	    var appSize = useAppSizeMedia({
	        phoneMaxWidth: phoneMaxWidth,
	        tabletMaxWidth: tabletMaxWidth,
	        tabletMinWidth: tabletMinWidth,
	        desktopMinWidth: desktopMinWidth,
	        desktopLargeMinWidth: desktopLargeMinWidth,
	        defaultSize: defaultSize,
	    });
	    var lastValue = React.useRef(appSize);
	    React.useEffect(function () {
	        // trigger the onChange prop on mount only if there is a difference between
	        // the defaultSize and the mounted size.
	        if (onChange &&
	            (defaultSize.isPhone !== appSize.isPhone ||
	                defaultSize.isTablet !== appSize.isTablet ||
	                defaultSize.isDesktop !== appSize.isDesktop ||
	                defaultSize.isLargeDesktop !== appSize.isLargeDesktop ||
	                defaultSize.isLandscape !== appSize.isLandscape)) {
	            onChange(appSize, defaultSize);
	        }
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	    React.useEffect(function () {
	        if (lastValue.current !== appSize) {
	            if (onChange) {
	                onChange(appSize, lastValue.current);
	            }
	            lastValue.current = appSize;
	        }
	    });
	    var value = React.useMemo(function () { return (__assign$h7(__assign$h7({}, appSize), { __initialized: true })); }, [appSize]);
	    return (React__default['default'].createElement(AppSizeContext.Provider, { value: value }, children));
	}

	/**
	 * The resize observer is used to track the size changes for a single element in
	 * a page. This is a bit different than a normal `ResizeListener` since it does
	 * not rely on entire page size changes.
	 *
	 * @deprecated 2.3.0 You should really use the `useResizeObserver` hook instead
	 * since it offers a lot more flexibility and functionality than this component.
	 */
	function ResizeObserver(_a) {
	    var _b = _a.disableHeight, disableHeight = _b === void 0 ? false : _b, _c = _a.disableWidth, disableWidth = _c === void 0 ? false : _c, className = _a.className, _d = _a.component, Component = _d === void 0 ? "span" : _d, target = _a.target, onResize = _a.onResize;
	    var _e = React.useState(null), element = _e[0], setElement = _e[1];
	    useResizeObserver({
	        disableHeight: disableHeight,
	        disableWidth: disableWidth,
	        target: target || element,
	        onResize: onResize,
	    });
	    var ref = React.useCallback(function (instance) {
	        if (!instance) {
	            setElement(null);
	            return;
	        }
	        setElement(instance.parentElement);
	    }, []);
	    if (target === null || target) {
	        return null;
	    }
	    return React__default['default'].createElement(Component, { className: className, "aria-hidden": "true", ref: ref });
	}

	/**
	 * This is a simple hook that will attach a throttled resize event listener when
	 * mounted, and detach when it unmounts.
	 *
	 * This hook only works for entire app resize events. If you are looking for
	 * specific element resize events, check out the `ResizeObserver` component or
	 * `useReiszeObserver` hook instead.
	 */
	function useResizeListener(_a) {
	    var onResize = _a.onResize, options = _a.options, immediate = _a.immediate, _b = _a.enabled, enabled = _b === void 0 ? true : _b;
	    var callback = useRefCache(onResize);
	    React.useEffect(function () {
	        if (!enabled) {
	            return;
	        }
	        var eventHandler = delegateEvent("resize", window, true, options);
	        var handler = function (event) { return callback.current(event); };
	        eventHandler.add(handler);
	        if (immediate && typeof window !== "undefined") {
	            window.dispatchEvent(new UIEvent("resize"));
	        }
	        return function () {
	            eventHandler.remove(handler);
	        };
	        // disabled since useRefCache for callback and don't want immediate to
	        // re-trigger it.
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, [options, enabled]);
	}

	/**
	 * This is a simple component that will attach a throttled resize event listener
	 * when mounted, and detach when it unmounts.
	 *
	 * This component only works for entire app resize events. If you are looking
	 * for specific element resize events, check out the `ResizeObserver` component
	 * instead.
	 */
	function ResizeListener(_a) {
	    var onResize = _a.onResize, options = _a.options, _b = _a.immediate, immediate = _b === void 0 ? typeof window !== "undefined" : _b;
	    useResizeListener({ onResize: onResize, options: options, immediate: immediate, enabled: true });
	    return null;
	}

	/**
	 * A simple component that will render the children only when the app is
	 * considered in mobile mode via the `AppSizeContext`. A mobile view will be
	 * true for both phones and tablets.
	 */
	function MobileOnly(_a) {
	    var children = _a.children, _b = _a.fallback, fallback = _b === void 0 ? null : _b;
	    var _c = useAppSize(), isPhone = _c.isPhone, isTablet = _c.isTablet;
	    if (isPhone || isTablet) {
	        return children;
	    }
	    return fallback;
	}
	/**
	 * A simple component that will render the children only when the app is
	 * considered in phone mode via the `AppSizeContext`.
	 */
	function PhoneOnly(_a) {
	    var children = _a.children, _b = _a.fallback, fallback = _b === void 0 ? null : _b;
	    var isPhone = useAppSize().isPhone;
	    if (isPhone) {
	        return children;
	    }
	    return fallback;
	}
	/**
	 * A simple component that will render the children only when the app is
	 * considered in tablet mode via the `AppSizeContext`.
	 */
	function TabletOnly(_a) {
	    var children = _a.children, _b = _a.fallback, fallback = _b === void 0 ? null : _b;
	    var isTablet = useAppSize().isTablet;
	    if (isTablet) {
	        return children;
	    }
	    return fallback;
	}
	/**
	 * A simple component that will render the children only when the app is
	 * considered in desktop mode via the `AppSizeContext`.
	 */
	function DesktopOnly(_a) {
	    var children = _a.children, _b = _a.fallback, fallback = _b === void 0 ? null : _b;
	    var isDesktop = useAppSize().isDesktop;
	    if (isDesktop) {
	        return children;
	    }
	    return fallback;
	}

	/**
	 * Creates a throttled version of a function so that it'll be called with
	 * trailing and leading calls. Since I always get this confused with `debounce`,
	 * here's a quick summary of the differences:
	 *
	 * - debounce will wait to call the function until it hasn't been called again
	 *   for the wait duration without trailing or leading calls. If it has the
	 *   trailing and leading calls, I can't figure out how it's different than
	 *   throttle.
	 * - throttle will be called each time it is available to be called.
	 *
	 * So debounce is great for things like auto-save features if you want to save
	 * whenever the user stops typing for a few seconds while throttle is good for
	 * things like sending an API request when the user is typing so that it isn't
	 * sent every keystroke, but every few letters. You _could_ also do debounce
	 * here, but it'll feel more "responsive" to the user when throttled.
	 *
	 * @param fn - The function that should be throttled
	 * @param wait - The number of milliseconds to wait before calling the function
	 * again
	 * @returns a throttled version of the function that'll return the last computed
	 * value if it was called again during the "wait" period.
	 */
	function throttle(fn, wait) {
	    var lastCalledTime = 0;
	    var timeout;
	    var result;
	    var args;
	    function trailingCall() {
	        lastCalledTime = Date.now();
	        timeout = undefined;
	        result = fn.apply(void 0, args);
	    }
	    return function throttled() {
	        var nextArgs = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            nextArgs[_i] = arguments[_i];
	        }
	        args = nextArgs;
	        var now = Date.now();
	        var remaining = wait - (now - lastCalledTime);
	        if (remaining <= 0 || remaining > wait) {
	            lastCalledTime = now;
	            result = fn.apply(void 0, args);
	        }
	        else if (!timeout) {
	            timeout = window.setTimeout(trailingCall, remaining);
	        }
	        return result;
	    };
	}

	/**
	 * A simple util to convert a unit that is using `px`, `em`, or `rem` to a
	 * number so that calculations can be made on that unit.
	 *
	 * @param unit - The unit to convert to a number
	 * @param element - The element to use to use for calculating `em`
	 * @returns the unit as a number
	 */
	function unitToNumber(unit, options) {
	    if (options === void 0) { options = {}; }
	    var _a = options.fontSizeFallback, fontSizeFallback = _a === void 0 ? 16 : _a, element = options.element;
	    if (typeof unit === "number") {
	        return unit;
	    }
	    var parsed = parseFloat(unit);
	    if (/px$/.test(unit)) {
	        return parsed;
	    }
	    if (typeof document === "undefined") {
	        return parsed * fontSizeFallback;
	    }
	    var rem = /rem$/.test(unit);
	    var el = document.documentElement;
	    if (!rem && element) {
	        el = element.parentElement || element;
	    }
	    var fontSize = parseFloat(window.getComputedStyle(el).fontSize || fontSizeFallback + "px");
	    return parsed * fontSize;
	}

	/**
	 * Gets the HTMLElement or null from a provided RefObject or HTMLElement/null
	 * @internal
	 */
	function getElement(element) {
	    if (!element) {
	        return null;
	    }
	    if (typeof element.current !== "undefined") {
	        return element.current;
	    }
	    return element;
	}
	/**
	 * Triggers a callback function when another element in the page is clicked that
	 * is outside of the provided element. This is generally used for closing
	 * temporary elements when something else within the page has been clicked.
	 *
	 * The callback will be provided the current `element` as well as the click
	 * target if additional logic should be applied before closing.
	 *
	 * @typeParam E - The type of element
	 */
	function useCloseOnOutsideClick(_a) {
	    var enabled = _a.enabled, element = _a.element, onOutsideClick = _a.onOutsideClick;
	    React.useEffect(function () {
	        if (!enabled) {
	            return;
	        }
	        function handleClick(event) {
	            var target = event.target;
	            var el = getElement(element);
	            if (!containsElement(el, target)) {
	                onOutsideClick(el, target, containsElement);
	            }
	        }
	        window.addEventListener("click", handleClick);
	        return function () {
	            window.removeEventListener("click", handleClick);
	        };
	    }, [enabled, element, onOutsideClick]);
	}

	/**
	 * This hooks provides an easy way to toggle a boolean flag for React
	 * components.  The main use case for this will be toggling the visibility of
	 * something. All the provided actions are guaranteed to never change.
	 *
	 * @param defaultToggled - Boolean if the visibility should be enabled first
	 * render.
	 * @returns an array containing the toggled state, an enable function, a disable
	 * function, a toggle function, and then a manual set toggle function.
	 */
	function useToggle(defaultToggled) {
	    var _a = React.useState(defaultToggled), toggled = _a[0], setToggled = _a[1];
	    var previous = useRefCache(toggled);
	    var enable = React.useCallback(function () {
	        if (!previous.current) {
	            setToggled(true);
	        }
	        // disabled since useRefCache
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	    var disable = React.useCallback(function () {
	        if (previous.current) {
	            setToggled(false);
	        }
	        // disabled since useRefCache
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	    var toggle = React.useCallback(function () {
	        setToggled(function (prevVisible) { return !prevVisible; });
	    }, []);
	    return [toggled, enable, disable, toggle, setToggled];
	}

	/**
	 * Simple hook to use an interval with auto setup and teardown. The provided
	 * functions will be guaranteed to not change and are memoized.
	 *
	 * @param callback - The callback function to call
	 * @param delay - The time in milliseconds the timer should delay between
	 * executions of the callback function
	 * @param defaultRunning - Boolean if the interval should be started immediately
	 * @returns a list containing a boolean if the interval is running, function to
	 * start the interval, and a function to stop the interval.
	 */
	function useInterval(callback, delay, defaultRunning) {
	    if (defaultRunning === void 0) { defaultRunning = false; }
	    var ref = useRefCache(callback);
	    var _a = useToggle(defaultRunning), running = _a[0], start = _a[1], stop = _a[2];
	    React.useEffect(function () {
	        if (!running) {
	            return;
	        }
	        var interval = window.setInterval(function () {
	            ref.current(stop);
	        }, delay);
	        return function () {
	            window.clearInterval(interval);
	        };
	        // disabled since useRefCache for the callback
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, [delay, running, stop]);
	    return [running, start, stop];
	}

	/**
	 * Simple hook to use an timeout with auto setup and teardown. The provided
	 * functions will be guaranteed to not change and are memoized.
	 *
	 * @param cb - The callback function to call
	 * @param delay - The time in milliseconds the timer should delay between
	 * executions of the callback function
	 * @param defaultStarted - Boolean if the timeout should be started immediately.
	 * @returns a list containing a function to start the timeout, a function to
	 * stop the timeout, and a function to restart the timeout.
	 */
	function useTimeout(cb, delay, defaultStarted) {
	    if (defaultStarted === void 0) { defaultStarted = false; }
	    var cbRef = useRefCache(cb);
	    var delayRef = useRefCache(delay);
	    var timeoutRef = React.useRef();
	    var _a = useToggle(defaultStarted), enabled = _a[0], start = _a[1], disable = _a[2];
	    var clearTimeout = React.useCallback(function () {
	        window.clearTimeout(timeoutRef.current);
	        timeoutRef.current = undefined;
	    }, []);
	    /* eslint-disable react-hooks/exhaustive-deps */
	    // these are all guaranteed to not change since using refs or non-updating
	    // callbacks
	    var restart = React.useCallback(function () {
	        clearTimeout();
	        timeoutRef.current = window.setTimeout(function () {
	            cbRef.current();
	            disable();
	        }, delayRef.current);
	    }, []);
	    var stop = React.useCallback(function () {
	        clearTimeout();
	        disable();
	    }, []);
	    React.useEffect(function () {
	        if (!enabled) {
	            return;
	        }
	        timeoutRef.current = window.setTimeout(function () {
	            cbRef.current();
	            disable();
	        }, delay);
	        return function () {
	            clearTimeout();
	        };
	    }, [enabled, delay, disable]);
	    return [start, stop, restart];
	}

	var removeWhitespace = function (s) { return s.replace(/\s/g, ""); };
	/**
	 * The default function used to extract the text from nodes. This will just
	 * return the textContent by default unless the node has a react-md FontIcon as
	 * a child. If there is a FontIcon child, the node will be cloned without the
	 * FontIcon to return the textContent instead. This is because the FontIcon's
	 * text content would also be returned from the node's text content.
	 *
	 * @param stringOrElement - Either a string or an element element to convert
	 * @param fontIconQuerySelector - A string to use for finding font icons in the
	 * HTML Element. When this is set to the empty string, the element will not be
	 * checked for font icons which _might_ be a slight performance boost if you are
	 * guarenteed to not use font icons
	 */
	function extractTextContent(stringOrElement, fontIconQuerySelector) {
	    if (fontIconQuerySelector === void 0) { fontIconQuerySelector = ".rmd-icon--font"; }
	    if (typeof stringOrElement === "string") {
	        return removeWhitespace(stringOrElement);
	    }
	    if (fontIconQuerySelector) {
	        var fontIcons = Array.from(stringOrElement.querySelectorAll(fontIconQuerySelector));
	        if (fontIcons.some(function (i) { return !!i.textContent; })) {
	            var cloned = stringOrElement.cloneNode(true);
	            var icon = void 0;
	            do {
	                icon = cloned.querySelector(fontIconQuerySelector);
	                if (icon && icon.parentNode) {
	                    icon.parentNode.removeChild(icon);
	                }
	            } while (icon);
	            return removeWhitespace(cloned.textContent || "");
	        }
	    }
	    return removeWhitespace(stringOrElement.textContent || "");
	}

	var FOCUSABLE_ELEMENTS = ["BUTTON", "TEXTAREA", "SELECT"];
	var BASE_FOCUSABLE_ELEMENTS = 'a[href],area[href],input:not([disabled]):not([type="hidden"])';
	var BASE_FOCUSABLE_QUERY = FOCUSABLE_ELEMENTS.reduce(function (queryString, element) { return queryString + "," + element + ":not([disabled])"; }, BASE_FOCUSABLE_ELEMENTS);
	/**
	 * A query selector to find elements that are programmatically focusable.
	 *
	 * Example:
	 *
	 * ```ts
	 * const focusableElements = document.querySelectorAll(PROGRAMATICALLY_FOCUSABLE);
	 * // do something with elements
	 * ```
	 */
	var PROGRAMATICALLY_FOCUSABLE = BASE_FOCUSABLE_QUERY + ",[tabindex]";
	/**
	 * A query selector to find elements that are focusable only with tab and shift+tab.
	 *
	 * Example:
	 *
	 * ```ts
	 * const focusableElements = document.querySelectorAll(TAB_FOCUSABLE);
	 * // do something with elements
	 * ```
	 */
	var TAB_FOCUSABLE = PROGRAMATICALLY_FOCUSABLE + ":not([tabindex=\"-1\"])";

	/**
	 * A simple util that will find all the tab focusable elements within a
	 * container element.  The container should normally be a specific HTMLElement,
	 * but it can also be the entire document if you want to find **all** focusable
	 * elements within your page.
	 *
	 * @param container - The container element/document to find focusable elements
	 * within.
	 * @param programatic - Boolean if programatically focusable elements should be
	 * included instead of only tab focusable.
	 * @returns A list of HTMLElements that are focusable within the container.
	 */
	function getFocusableElements(container, programatic) {
	    if (programatic === void 0) { programatic = false; }
	    return Array.from(container.querySelectorAll(programatic ? PROGRAMATICALLY_FOCUSABLE : TAB_FOCUSABLE));
	}

	/**
	 * Checks if an element is focusable.
	 *
	 * @see {@link ElementFocusType}
	 * @remarks \@since 2.8.0
	 * @param element - The element to check
	 * @param type - The focus type to compare against
	 * @returns true if the element is focusable
	 */
	function isFocusable(element, type) {
	    if (type === void 0) { type = "programmatic"; }
	    return ("matches" in element &&
	        element.matches(type === "programmatic" ? PROGRAMATICALLY_FOCUSABLE : TAB_FOCUSABLE));
	}

	/**
	 * A function that is used to focus an element within the provided node.  This
	 * can either focus the first, last, or a querySelector found element.
	 *
	 * @param container - Either an HTMLElement or the document to focus an element
	 * within.
	 * @param focus - Either the "first" or "last" string to focus the first or last
	 * focusable element within the container or a query selector string to find a
	 * focusable element within the container.
	 * @param programmatic - Boolean if programmatically focusable elements should be
	 * included as well.
	 * @param preventScroll - Boolean if the focus event should not scroll the
	 * element into view. This should normally remain `false`, but can be useful if
	 * the element gets focused while offscreen during a transition.
	 * @param elements - Optonal child elements to search
	 * @remarks \@since 2.8.0 Supports focusing the container element if it is
	 * focusable
	 */
	function focusElementWithin(container, focus, programmatic, preventScroll, elements) {
	    if (programmatic === void 0) { programmatic = false; }
	    if (preventScroll === void 0) { preventScroll = false; }
	    if (!elements || !elements.length) {
	        elements = getFocusableElements(container, programmatic);
	    }
	    var el;
	    switch (focus) {
	        case "first":
	            el = elements[0];
	            break;
	        case "last":
	            el = elements[elements.length - 1];
	            break;
	        default:
	            el = container.querySelector(focus);
	    }
	    // just allow any focusable-type element
	    if (!el && isFocusable(container, "programmatic")) {
	        el = container;
	    }
	    if (!el) {
	        throw new Error("Unable to find a focusable element");
	    }
	    el.focus({ preventScroll: preventScroll });
	    if (!preventScroll && container !== document) {
	        scrollIntoView(container, el);
	    }
	}

	/**
	 * Simple private util to get the DOM "instance" from either a ref object or an
	 * HTMLElement.
	 *
	 * @param refOrInstance - The ref or instance to get an HTMLElement from
	 * @returns The HTMLElement or null.
	 * @internal
	 */
	function getInstance(refOrInstance) {
	    var instance = null;
	    if (refOrInstance) {
	        if (refOrInstance instanceof HTMLElement) {
	            instance = refOrInstance;
	        }
	        else {
	            instance = refOrInstance.current;
	        }
	    }
	    return instance;
	}

	/**
	 * This hook is used to focus an element once a component has mounted. To help
	 * with keyboard click events, it will actually wait for an animation frame
	 * before attempting to focus as an enter key might click both elements at the
	 * same time.
	 *
	 * This hook will first focus the HTMLElement (if it is focusable) and then
	 * focus an element based on the defaultFocus prop.
	 *
	 * @param refOrInstance - This is either a ref object containing the element to
	 * focus or the element itself.
	 * @param defaultFocus - The element to focus within the containing element once
	 * it has been mounted. This can either be "first" or "last" to focus the first
	 * or last focusable elements or a query selector string to find an element to
	 * focus.
	 * @param preventScroll - Boolean if the focus events should try to prevent the
	 * default scroll-into-view behavior. This is generally recommended to be kept
	 * as `false`, but can be useful to enable if the component mounts offscreen
	 * during a transition.
	 * @param programatic - Boolean if programatically focusable elements should be
	 * included instead of only tab focusable.
	 * @param disabled - Boolean if the focus behavior should be disabled.
	 */
	function useFocusOnMount(refOrInstance, defaultFocus, preventScroll, programatic, disabled) {
	    if (preventScroll === void 0) { preventScroll = false; }
	    if (programatic === void 0) { programatic = false; }
	    if (disabled === void 0) { disabled = false; }
	    React.useEffect(function () {
	        if (disabled) {
	            return;
	        }
	        var frame = window.requestAnimationFrame(function () {
	            var instance = getInstance(refOrInstance);
	            if (!instance) {
	                return;
	            }
	            instance.focus({ preventScroll: preventScroll });
	            focusElementWithin(instance, defaultFocus, programatic, preventScroll);
	        });
	        return function () {
	            window.cancelAnimationFrame(frame);
	        };
	    }, [defaultFocus, disabled, refOrInstance, programatic, preventScroll]);
	}

	/**
	 * This hook is used to focus the previous element when a component unmounts.
	 * The default behavior is to store the current activeElement within the
	 * document when the component mounts and then try to focus it again when the
	 * component unmounts.  You can also provide your own HTMLElement to focus when
	 * unmounting.
	 *
	 * During the unmount phase, it will wait for an animation frame before checking
	 * if the fallback element still exists within the page. If it doesn't, it will
	 * use the fallback query/element/function to attempt to find another element to
	 * focus. If the element exists within the page, it will then finally be
	 * focused.
	 *
	 * The animation frame is unfortunately required for keyboard users as pressing
	 * enter key will click the previous element immediately on focus as well.
	 *
	 * @param disabled - Boolean if the focus behavior should be disabled.
	 * @param fallback - The fallback query, element, or function to use if the
	 * previous element no longer exists in the DOM.
	 * @param previousElement - An optional previous element to focus. If this is
	 * omitted, the `document.activeElement` will be used instead.
	 */
	function usePreviousFocus(disabled, fallback, previousElement) {
	    if (fallback === void 0) { fallback = undefined; }
	    if (previousElement === void 0) { previousElement = null; }
	    var options = React.useRef({
	        disabled: disabled,
	        fallback: fallback,
	    });
	    React.useEffect(function () {
	        options.current = {
	            disabled: disabled,
	            fallback: fallback,
	        };
	    });
	    React.useEffect(function () {
	        if (disabled) {
	            return;
	        }
	        var element = previousElement || document.activeElement;
	        // i'll need to think of a better way to handle this flow. There's just a
	        // weird one where if going from a menu to a dialog, we get lost without
	        // specifying a fallback. So if we are in a menu, try to find the
	        // corresponding menu button for this flow to fallback to.
	        var menu = element.closest('[role="menu"]');
	        var menuButton = null;
	        if (menu) {
	            // first try to get the button by using the menu's id minus the trailing
	            // -menu since that's the normal pattern within react-md.
	            menuButton = document.getElementById(menu.id.replace(/-menu$/, ""));
	            if (!menuButton) {
	                // if no menu button, try to see if the `aria-labelledby` points to the
	                // button... but since the `aria-labelledby` is a space-deliminated
	                // string of ids, have to check each one
	                var labelledBy = menu.getAttribute("aria-labelledby") || "";
	                var query = labelledBy
	                    .split(" ")
	                    .map(function (id) { return "#" + id + "[tabindex]"; })
	                    .join(",");
	                menuButton = query ? document.querySelector(query) : null;
	            }
	        }
	        return function () {
	            var _a = options.current, fallback = _a.fallback, disabled = _a.disabled;
	            if (disabled) {
	                // this has been added just for support for scrolling menus out of view.
	                // It is not ideal since keyboard focus is lost at this point, but
	                // _technically_ shouldn't be able to reach this flow with keyboard
	                // movement
	                return;
	            }
	            if (menu &&
	                menuButton &&
	                !previousElement &&
	                !fallback &&
	                !document.contains(element) &&
	                document.contains(menuButton)) {
	                menuButton.focus();
	                return;
	            }
	            var el = element;
	            if (!document.contains(el)) {
	                el =
	                    previousElement && document.contains(previousElement)
	                        ? previousElement
	                        : null;
	            }
	            if (!el && fallback) {
	                switch (typeof fallback) {
	                    case "string":
	                        el = document.querySelector(fallback);
	                        break;
	                    case "function":
	                        el = fallback();
	                        break;
	                    default:
	                        el = fallback;
	                }
	            }
	            if (el && !document.contains(el)) {
	                el = null;
	            }
	            if (el) {
	                el.focus();
	            }
	        };
	        // disabled since useRefCache and don't wnt to update on disabled change
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	}

	/**
	 * Creates an `onKeyDown` event handler to trap keyboard focus within a
	 * container element.
	 *
	 * @typeParam E - The HTMLElement type that has the keydown event listener
	 * attached.
	 * @param options - All the options for handling tab focus wrapping.
	 * @returns The kedown event handler to enforce focus wrapping or the onKeyDown
	 * prop if this functionality is disabled.
	 */
	function useTabFocusWrap(_a) {
	    var _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.disableFocusCache, disableFocusCache = _c === void 0 ? false : _c, onKeyDown = _a.onKeyDown;
	    var focusables = React.useRef([]);
	    var handleKeyDown = React.useCallback(function (event) {
	        if (onKeyDown) {
	            onKeyDown(event);
	        }
	        if (event.key !== "Tab") {
	            return;
	        }
	        if (disableFocusCache || !focusables.current.length) {
	            focusables.current = getFocusableElements(event.currentTarget);
	        }
	        var elements = focusables.current;
	        var l = elements.length;
	        if (l === 0) {
	            return;
	        }
	        if (l === 1) {
	            event.preventDefault();
	            elements[0].focus();
	        }
	        else if (elements[0] === event.target && event.shiftKey) {
	            event.preventDefault();
	            elements[l - 1].focus();
	        }
	        else if (elements[l - 1] === event.target && !event.shiftKey) {
	            event.preventDefault();
	            elements[0].focus();
	        }
	    }, [onKeyDown, disableFocusCache]);
	    return disabled ? onKeyDown : handleKeyDown;
	}

	var __assign$h6 = (undefined && undefined.__assign) || function () {
	    __assign$h6 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$h6.apply(this, arguments);
	};
	var __rest$2c = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * The `FocusContainer` is a wrapper for a few of the accessibility hooks to
	 * maintain focus within an element.
	 */
	var FocusContainer = React.forwardRef(function FocusContainer(_a, forwardedRef) {
	    var children = _a.children, onKeyDown = _a.onKeyDown, _b = _a.component, Component = _b === void 0 ? "div" : _b, _c = _a.defaultFocus, defaultFocus = _c === void 0 ? "first" : _c, _d = _a.disableFocusCache, disableFocusCache = _d === void 0 ? false : _d, _e = _a.disableFocusOnMount, disableFocusOnMount = _e === void 0 ? false : _e, _f = _a.disableFocusOnMountScroll, disableFocusOnMountScroll = _f === void 0 ? false : _f, _g = _a.disableFocusOnUnmount, disableFocusOnUnmount = _g === void 0 ? false : _g, _h = _a.disableTabFocusWrap, disableTabFocusWrap = _h === void 0 ? false : _h, _j = _a.unmountFocusFallback, unmountFocusFallback = _j === void 0 ? "" : _j, props = __rest$2c(_a, ["children", "onKeyDown", "component", "defaultFocus", "disableFocusCache", "disableFocusOnMount", "disableFocusOnMountScroll", "disableFocusOnUnmount", "disableTabFocusWrap", "unmountFocusFallback"]);
	    var _k = useEnsuredRef(forwardedRef), ref = _k[0], refHandler = _k[1];
	    usePreviousFocus(disableFocusOnUnmount, unmountFocusFallback);
	    useFocusOnMount(ref, defaultFocus, disableFocusOnMountScroll, false, disableFocusOnMount);
	    var handleKeyDown = useTabFocusWrap({
	        disabled: disableTabFocusWrap,
	        disableFocusCache: disableFocusCache,
	        onKeyDown: onKeyDown,
	    });
	    return (React__default['default'].createElement(Component, __assign$h6({}, props, { onKeyDown: handleKeyDown, ref: refHandler }), children));
	});

	/**
	 * The currently supported keyboard movement key combinations that increment or
	 * decrement within a list. This was extracted from the w3.org website about
	 * wia-aria best practices.
	 *
	 * @see https://www.w3.org/TR/wai-aria-practices/
	 */
	exports.IncrementMovementKey = void 0;
	(function (IncrementMovementKey) {
	    IncrementMovementKey["ArrowUp"] = "ArrowUp";
	    IncrementMovementKey["ArrowDown"] = "ArrowDown";
	    IncrementMovementKey["ArrowLeft"] = "ArrowLeft";
	    IncrementMovementKey["ArrowRight"] = "ArrowRight";
	    IncrementMovementKey["PageDown"] = "PageDown";
	    IncrementMovementKey["PageUp"] = "PageUp";
	    IncrementMovementKey["ShiftArrowUp"] = "Shift+ArrowUp";
	    IncrementMovementKey["ShiftArrowDown"] = "Shift+ArrowDown";
	    IncrementMovementKey["ShiftArrowLeft"] = "Shift+ArrowLeft";
	    IncrementMovementKey["ShiftArrowRight"] = "Shift+ArrowRight";
	    IncrementMovementKey["AltArrowDown"] = "Alt+ArrowDown";
	    IncrementMovementKey["AltArrowUp"] = "Alt+ArrowUp";
	    IncrementMovementKey["AltArrowLeft"] = "Alt+ArrowLeft";
	    IncrementMovementKey["AltArrowRight"] = "Alt+ArrowRight";
	    IncrementMovementKey["AltPageDown"] = "Alt+PageDown";
	    IncrementMovementKey["AltPageUp"] = "Alt+PageUp";
	    IncrementMovementKey["ControlArrowDown"] = "Control+ArrowDown";
	    IncrementMovementKey["ControlArrowUp"] = "Control+ArrowUp";
	})(exports.IncrementMovementKey || (exports.IncrementMovementKey = {}));
	/**
	 * The currently supported keyboard movement key combinations that jump to the
	 * start or end of a list.  This was extracted from the w3.org website about
	 * wai-aria best practices.
	 *
	 * @see https://www.w3.org/TR/wai-aria-practices/
	 */
	exports.JumpMovementKey = void 0;
	(function (JumpMovementKey) {
	    JumpMovementKey["Home"] = "Home";
	    JumpMovementKey["End"] = "End";
	    JumpMovementKey["AltHome"] = "Alt+Home";
	    JumpMovementKey["AltEnd"] = "Alt+End";
	    JumpMovementKey["ControlHome"] = "Control+Home";
	    JumpMovementKey["ControlEnd"] = "Control+End";
	    JumpMovementKey["ControlShiftHome"] = "Control+Shift+Home";
	    JumpMovementKey["ControlShiftEnd"] = "Control+Shift+End";
	})(exports.JumpMovementKey || (exports.JumpMovementKey = {}));

	var __assign$h5 = (undefined && undefined.__assign) || function () {
	    __assign$h5 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$h5.apply(this, arguments);
	};
	/**
	 * A keyboard movement configuration preset for handling vertical menu
	 * movements.
	 */
	var VERTICAL_MENU = {
	    loopable: true,
	    searchable: true,
	    incrementKeys: [exports.IncrementMovementKey.ArrowDown],
	    decrementKeys: [exports.IncrementMovementKey.ArrowUp],
	    jumpToFirstKeys: [exports.JumpMovementKey.Home],
	    jumpToLastKeys: [exports.JumpMovementKey.End],
	};
	/**
	 * A keyboard movement configuration preset for handling horizontal menu
	 * movements.
	 */
	var HORIZONTAL_MENU = __assign$h5(__assign$h5({}, VERTICAL_MENU), { incrementKeys: [exports.IncrementMovementKey.ArrowRight], decrementKeys: [exports.IncrementMovementKey.ArrowLeft] });
	/**
	 * A keyboard movement configuration preset for handling vertical listbox
	 * movements.
	 */
	var VERTICAL_LISTBOX = __assign$h5(__assign$h5({}, VERTICAL_MENU), { loopable: false });
	/**
	 * A keyboard movement configuration preset for handling horizontal listbox
	 * movements.
	 */
	var HORIZONTAL_LISTBOX = __assign$h5(__assign$h5({}, HORIZONTAL_MENU), { loopable: false });
	/**
	 * A keyboard movement configuration preset for handling vertical combobox
	 * movements.
	 */
	var VERTICAL_COMBOBOX = {
	    incrementKeys: [exports.IncrementMovementKey.ArrowDown],
	    decrementKeys: [exports.IncrementMovementKey.ArrowUp],
	    // don't want to be able to jump since home and end should do default behavior
	    // in text field
	    jumpToFirstKeys: [],
	    jumpToLastKeys: [],
	    searchable: false,
	};
	/**
	 * A keyboard movement configuration preset for handling horizontal combobox
	 * movements.
	 */
	var HORIZONTAL_COMBOBOX = {
	    incrementKeys: [exports.IncrementMovementKey.ArrowRight],
	    decrementKeys: [exports.IncrementMovementKey.ArrowLeft],
	    // don't want to be able to jump since home and end should do default behavior
	    // in text field
	    jumpToFirstKeys: [],
	    jumpToLastKeys: [],
	    searchable: false,
	};
	var VERTICAL_TREE = {
	    incrementKeys: [exports.IncrementMovementKey.ArrowDown],
	    decrementKeys: [exports.IncrementMovementKey.ArrowUp],
	    jumpToFirstKeys: [exports.JumpMovementKey.Home, exports.JumpMovementKey.ControlShiftHome],
	    jumpToLastKeys: [exports.JumpMovementKey.End, exports.JumpMovementKey.ControlShiftEnd],
	    loopable: true,
	    searchable: true,
	};
	var HORIZONTAL_TREE = {
	    incrementKeys: [exports.IncrementMovementKey.ArrowRight],
	    decrementKeys: [exports.IncrementMovementKey.ArrowLeft],
	    jumpToFirstKeys: [exports.JumpMovementKey.Home, exports.JumpMovementKey.ControlShiftHome],
	    jumpToLastKeys: [exports.JumpMovementKey.End, exports.JumpMovementKey.ControlShiftEnd],
	    loopable: true,
	    searchable: true,
	};
	var HORIZONTAL_TABS = {
	    incrementKeys: [exports.IncrementMovementKey.ArrowRight],
	    decrementKeys: [exports.IncrementMovementKey.ArrowLeft],
	    jumpToFirstKeys: [exports.JumpMovementKey.Home],
	    jumpToLastKeys: [exports.JumpMovementKey.End],
	    loopable: true,
	    searchable: false,
	};
	var VERTICAL_TABS = {
	    incrementKeys: [exports.IncrementMovementKey.ArrowDown],
	    decrementKeys: [exports.IncrementMovementKey.ArrowUp],
	    jumpToFirstKeys: [exports.JumpMovementKey.Home],
	    jumpToLastKeys: [exports.JumpMovementKey.End],
	    loopable: true,
	    searchable: false,
	};

	var presets = /*#__PURE__*/Object.freeze({
		__proto__: null,
		VERTICAL_MENU: VERTICAL_MENU,
		HORIZONTAL_MENU: HORIZONTAL_MENU,
		VERTICAL_LISTBOX: VERTICAL_LISTBOX,
		HORIZONTAL_LISTBOX: HORIZONTAL_LISTBOX,
		VERTICAL_COMBOBOX: VERTICAL_COMBOBOX,
		HORIZONTAL_COMBOBOX: HORIZONTAL_COMBOBOX,
		VERTICAL_TREE: VERTICAL_TREE,
		HORIZONTAL_TREE: HORIZONTAL_TREE,
		HORIZONTAL_TABS: HORIZONTAL_TABS,
		VERTICAL_TABS: VERTICAL_TABS
	});

	/**
	 * An extremely simple function that is used to generate an id for an item
	 * within a list of other items.  This is generally used with list of items that
	 * should have custom focus with the `aria-activedescendant` flow instead of
	 * native focus.
	 *
	 * @param id - The base id for the container element of all the items.
	 * @param i - The index of the item within the list. This number will be
	 * incremented by 1 as an id to start from 1 instead of 0.
	 */
	function getItemId(id, i) {
	    if (!id) {
	        throw new Error("The id must be a string with a length greater than 0");
	    }
	    if (i < 0) {
	        throw new RangeError("The provided index must be greater than 0");
	    }
	    return id + "-item-" + (i + 1);
	}
	/**
	 * A small util function to transform a list of key codes into a list of
	 * `KeyConfig` objects. This is useful for how I determine what behavior to
	 * implement after a keydown event.
	 *
	 * @param keys - A list of key mappings to convert to a key object. These should
	 * be things like: "Tab", "Alt+Home", "A", "Shift+Alt+ArrowUp"
	 * @param type - The keyboard focus type this key should be mapped to
	 * @internal
	 */
	function transformKeys(keys, type) {
	    return keys.map(function (key) { return ({
	        shiftKey: key.includes("Shift+"),
	        metaKey: key.includes("Meta+"),
	        ctrlKey: key.includes("Control+"),
	        altKey: key.includes("Alt+"),
	        key: key.replace(/(Shift|Meta|Alt|Control)\+/g, ""),
	        type: type,
	    }); });
	}
	/**
	 * A small util get the `KeyConfig` based on the provided keys and keyboard
	 * event. This ensures that the key, altKey, metaKey, and shiftKey values all
	 * match.
	 *
	 * If a key is not found, `null` will be returned instead.
	 *
	 * @param event - The event to get a key mapping type for
	 * @param keys - A list of key mappings to attempt to find a valid key event
	 * type from.
	 * @internal
	 */
	function getKeyboardConfig(event, keys) {
	    var key = event.key, altKey = event.altKey, ctrlKey = event.ctrlKey, metaKey = event.metaKey, shiftKey = event.shiftKey;
	    return (keys.find(function (k) {
	        return k.key === key &&
	            k.altKey === altKey &&
	            k.ctrlKey === ctrlKey &&
	            k.metaKey === metaKey &&
	            k.shiftKey === shiftKey;
	    }) || null);
	}
	/**
	 * Creates a stringified representation of the configuration so that the config
	 * can be checked in the `onChange` callback for keyboard movement. This is used
	 * as the `query` attribute on the change data.
	 *
	 * @param config - The key config to stringify
	 * @internal
	 */
	function getStringifiedKeyConfig(config) {
	    var key = config.key, altKey = config.altKey, ctrlKey = config.ctrlKey, metaKey = config.metaKey, shiftKey = config.shiftKey, type = config.type;
	    var suffix = [
	        metaKey && "Meta",
	        ctrlKey && "Control",
	        shiftKey && "Shift",
	        altKey && "Alt",
	        key,
	    ]
	        .filter(Boolean)
	        .join("+");
	    return type + "-" + suffix;
	}

	var __spreadArray$9 = (undefined && undefined.__spreadArray) || function (to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	};
	/**
	 * This is a low-level hook for providing custom keyboard movement based on key
	 * configurations.  This normally shouldn't really be used externally since
	 * you'll most likely want to use the "presets" of `useFocusMovement` and
	 * `useActiveDescendantMovement` that implement the main movement types already
	 * for you.
	 *
	 * The way this works is that it will general a list of mutable item refs that
	 * should be applied to each DOM node for the corresponding `item` within the
	 * `items` list. This list will change and regenerate itself each time the
	 * `items` array changes so it'll always be in-sync with the DOM nodes. This
	 * means that if you have some items that **should not be rendered**, they
	 * should not be included within the items list. The main reason these item refs
	 * are required is so that the `aria-acativedescendant` movement can scroll the
	 * new "focused" element into view if needed while the "true" focus movement can
	 * trigger a `ref.current.focus()` on the new item as needed.
	 *
	 * Finally, this will create a keydown event handler that will merge in the
	 * optionally provided `onKeyDown` prop and check if the pressed key should
	 * trigger a custom keyboard movement event.  If it does, an `onChange` event
	 * will be fired with the matching data and allows for custom movement with
	 * `target.focus()` or updating the `aria-activedescendant` attribute as needed.
	 *
	 * @typeParam D - The type of each data item within the items list.
	 * @typeParam CE - The HTMLElement type of the container element that handles
	 * the custom keyboard movement.
	 * @typeParam IE - The HTMLElement type of each item within the container
	 * element that can be focusable.
	 */
	function useKeyboardMovement(_a) {
	    var onKeyDown = _a.onKeyDown, incrementKeys = _a.incrementKeys, decrementKeys = _a.decrementKeys, jumpToFirstKeys = _a.jumpToFirstKeys, jumpToLastKeys = _a.jumpToLastKeys, _b = _a.stopPropagation, stopPropagation = _b === void 0 ? true : _b, onChange = _a.onChange, items = _a.items, resetTime = _a.resetTime, findMatchIndex = _a.findMatchIndex, focusedIndex = _a.focusedIndex, _c = _a.loopable, loopable = _c === void 0 ? true : _c, _d = _a.searchable, searchable = _d === void 0 ? true : _d, _e = _a.valueKey, valueKey = _e === void 0 ? DEFAULT_VALUE_KEY : _e, _f = _a.getItemValue, getItemValue = _f === void 0 ? DEFAULT_GET_ITEM_VALUE : _f;
	    var keys = React.useMemo(function () { return __spreadArray$9(__spreadArray$9(__spreadArray$9(__spreadArray$9([], transformKeys(incrementKeys, "increment")), transformKeys(decrementKeys, "decrement")), transformKeys(jumpToFirstKeys, "first")), transformKeys(jumpToLastKeys, "last")); }, [incrementKeys, decrementKeys, jumpToFirstKeys, jumpToLastKeys]);
	    var itemRefs = React.useMemo(function () { return Array.from(items, function () { return ({ current: null }); }); }, [items]);
	    var handleSearch = useKeyboardSearch({
	        items: items,
	        valueKey: valueKey,
	        getItemValue: getItemValue,
	        onChange: function (data) {
	            onChange(data, itemRefs);
	        },
	        searchIndex: focusedIndex,
	        resetTime: resetTime,
	        findMatchIndex: findMatchIndex,
	    });
	    var handleKeyDown = React.useCallback(function (event) {
	        if (searchable) {
	            handleSearch(event);
	        }
	        if (onKeyDown) {
	            onKeyDown(event);
	        }
	        var target = event.target;
	        var keyConfig = getKeyboardConfig(event, keys);
	        if (!keyConfig || !target) {
	            return;
	        }
	        // implementing custom behavior, so prevent default of scrolling or other
	        // things
	        event.preventDefault();
	        if (stopPropagation) {
	            event.stopPropagation();
	        }
	        var type = keyConfig.type;
	        var lastIndex = items.length - 1;
	        var index;
	        switch (type) {
	            case "first":
	                index = 0;
	                break;
	            case "last":
	                index = lastIndex;
	                break;
	            default:
	                index = loop({
	                    value: focusedIndex,
	                    max: lastIndex,
	                    increment: type === "increment",
	                    minmax: !loopable,
	                });
	        }
	        if (index === focusedIndex) {
	            return;
	        }
	        var data = {
	            index: index,
	            item: items[index],
	            items: items,
	            query: getStringifiedKeyConfig(keyConfig),
	            target: event.currentTarget,
	        };
	        onChange(data, itemRefs);
	    }, [
	        onKeyDown,
	        stopPropagation,
	        focusedIndex,
	        keys,
	        items,
	        handleSearch,
	        loopable,
	        searchable,
	        onChange,
	        itemRefs,
	    ]);
	    return [itemRefs, handleKeyDown];
	}

	var __assign$h4 = (undefined && undefined.__assign) || function () {
	    __assign$h4 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$h4.apply(this, arguments);
	};
	var __rest$2b = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This hook allows for custom keyboard "focus" movement using the
	 * `aria-activedescendant` movement pattern. This is generally used when the DOM
	 * focus shouldn't actually change from the container element (like listboxes)
	 * but you still need to indicate that another element is "focused" due to a key
	 * press.
	 *
	 * To use this hook, you'll want to update the container element of all the
	 * items to have an `aria-activedescendant={activeId}` attribute and
	 * `onKeyDown={onKeyDown}` that are provided by this hook. The
	 * `aria-activedescendant` will help screen readers known what element is
	 * "focused" since the container element should never really lose focus during
	 * these keyboard movement events.  Finally, you'll want to update each item
	 * have an id that is the result of `getItem(baseId, index)` so that it matches
	 * the `aria-activedescendant` value and then apply `ref={itemRefs[i]}`.
	 * Unfortunately, this means that all the child items **must** either be an
	 * HTMLElement or the ref is forwarded down to the HTMLElement.
	 *
	 * The `itemRefs` **must** be applied so that a new "focused" item can be
	 * scrolled into view as needed.
	 *
	 * @typeParam D - The type of each data item within the items list.
	 * @typeParam CE - The HTMLElement type of the container element that handles
	 * the custom keyboard movement.
	 * @typeParam IE - The HTMLElement type of each item within the container
	 * element that can be focusable.
	 */
	function useActiveDescendantMovement(_a) {
	    var baseId = _a.baseId, _b = _a.getId, getId = _b === void 0 ? getItemId : _b, _c = _a.defaultFocusedIndex, defaultFocusedIndex = _c === void 0 ? -1 : _c, items = _a.items, onChange = _a.onChange, _d = _a.getItemValue, getItemValue = _d === void 0 ? DEFAULT_GET_ITEM_VALUE : _d, _e = _a.valueKey, valueKey = _e === void 0 ? DEFAULT_VALUE_KEY : _e, onKeyDown = _a.onKeyDown, onEnter = _a.onEnter, onSpace = _a.onSpace, options = __rest$2b(_a, ["baseId", "getId", "defaultFocusedIndex", "items", "onChange", "getItemValue", "valueKey", "onKeyDown", "onEnter", "onSpace"]);
	    var _f = React.useState(defaultFocusedIndex), focusedIndex = _f[0], setFocusedIndex = _f[1];
	    var activeId = focusedIndex !== -1 ? getId(baseId, focusedIndex) : "";
	    var _g = useKeyboardMovement(__assign$h4(__assign$h4({}, options), { valueKey: valueKey,
	        getItemValue: getItemValue,
	        focusedIndex: focusedIndex,
	        items: items,
	        onChange: function (data, itemRefs) {
	            if (onChange) {
	                onChange(data, itemRefs);
	            }
	            var index = data.index, target = data.target;
	            var item = itemRefs[index] && itemRefs[index].current;
	            if (item && target && target.scrollHeight > target.offsetHeight) {
	                scrollIntoView(target, item);
	            }
	            setFocusedIndex(index);
	        },
	        onKeyDown: function (event) {
	            if (onKeyDown) {
	                onKeyDown(event);
	            }
	            var ref = (itemRefs[focusedIndex] && itemRefs[focusedIndex].current) || null;
	            if (onEnter && event.key === "Enter") {
	                onEnter(focusedIndex, ref);
	            }
	            else if (onSpace && event.key === " ") {
	                event.preventDefault();
	                onSpace(focusedIndex, ref);
	            }
	        } })), itemRefs = _g[0], handleKeyDown = _g[1];
	    return {
	        activeId: activeId,
	        itemRefs: itemRefs,
	        onKeyDown: handleKeyDown,
	        focusedIndex: focusedIndex,
	        setFocusedIndex: setFocusedIndex,
	    };
	}

	var __assign$h3 = (undefined && undefined.__assign) || function () {
	    __assign$h3 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$h3.apply(this, arguments);
	};
	var __rest$2a = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This hook allows for custom keyboard focus movement using DOM focus behavior
	 * by actually focusing each DOM node.
	 *
	 * To use this hook, you'll want to update the container element of all the
	 * items to have a correct `role` applied as well as the `onKeyDown` event
	 * handler provided by this hook. Then, you'll want to applied a
	 * `ref={itemRefs[i]}` for each item within the items list so that the DOM nodes
	 * can be focused as needed. Unfortunately, this means that all the child items
	 * **must** either be an HTMLElement or the ref is forwarded down to the
	 * HTMLElement.
	 *
	 * @typeParam D - The type of each data item within the items list.
	 * @typeParam CE - The HTMLElement type of the container element that handles
	 * the custom keyboard movement.
	 * @typeParam IE - The HTMLElement type of each item within the container
	 * element that can be focusable.
	 */
	function useFocusMovement(_a) {
	    var _b = _a.defaultFocusedIndex, defaultFocusedIndex = _b === void 0 ? -1 : _b, onChange = _a.onChange, options = __rest$2a(_a, ["defaultFocusedIndex", "onChange"]);
	    var _c = React.useState(defaultFocusedIndex), focusedIndex = _c[0], setFocusedIndex = _c[1];
	    var _d = useKeyboardMovement(__assign$h3(__assign$h3({}, options), { focusedIndex: focusedIndex,
	        onChange: function (data, itemRefs) {
	            if (onChange) {
	                onChange(data, itemRefs);
	            }
	            var index = data.index;
	            if (index === -1) {
	                return;
	            }
	            var item = itemRefs[index] && itemRefs[index].current;
	            if (item) {
	                item.focus();
	            }
	            setFocusedIndex(index);
	        } })), itemRefs = _d[0], handleKeyDown = _d[1];
	    React.useEffect(function () {
	        if (defaultFocusedIndex === -1) {
	            return;
	        }
	        var item = itemRefs[defaultFocusedIndex] && itemRefs[defaultFocusedIndex].current;
	        if (item) {
	            item.focus();
	        }
	        // only want to trigger on mount
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	    return [itemRefs, handleKeyDown];
	}

	/**
	 * The default  behavior when pressing the `"Enter"` key on a form control
	 * (`input`, `textarea`, `select`) is to submit the form that the form control
	 * is in. This util will try to polyfill this behavior for custom widgets that
	 * use are using a role to act as a form control.
	 *
	 * The way this works is:
	 * - Check if the `event.key` is the `"Enter"` key. Do nothing if it is not.
	 * - Call `event.preventDefault()` and `event.stopPropagation()` to prevent
	 *   other unwanted keyboard behavior
	 * - Check the event target to see if it is contained in a `<form>`
	 * - Try to find a submit button and click it by:
	 *   - First check with `form.querySelector('[type="submit"]')`
	 *   - Fallback to `document.querySelector('[type="submit"][form="{{FORM_ID}}"]')`
	 *     - submit buttons can be placed outside of the form and link it back using
	 *       the `form` attribute pointing to the id of the form
	 *
	 *
	 * The reason the submit button has to be found and clicked is because calling
	 * `form.submit()` won't actually fire any attached `form.onsubmit` event
	 * handlers. If you click the submit button though, the `form.onsubmit` handlers
	 * will be called correctly.
	 *
	 * @param event - The keyboard event that should attempt to submit the form when
	 * the enter key is presssed.
	 * @returns `true` if the `event.key` was the `"Enter"` key so that other
	 * keydown logic can be ignored.
	 * @remarks \@since 2.7.0
	 */
	function tryToSubmitRelatedForm(event) {
	    var _a, _b;
	    if (event.key !== "Enter") {
	        return false;
	    }
	    event.preventDefault();
	    event.stopPropagation();
	    /* istanbul ignore next */
	    var form = (_b = (_a = event.currentTarget) === null || _a === void 0 ? void 0 : _a.closest) === null || _b === void 0 ? void 0 : _b.call(_a, "form");
	    var submit = form === null || form === void 0 ? void 0 : form.querySelector('[type="submit"]');
	    if (!submit && (form === null || form === void 0 ? void 0 : form.id)) {
	        submit = document.querySelector("[type=\"submit\"][form=\"" + form.id + "\"]");
	    }
	    submit === null || submit === void 0 ? void 0 : submit.click();
	    return true;
	}

	var __assign$h2 = (undefined && undefined.__assign) || function () {
	    __assign$h2 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$h2.apply(this, arguments);
	};
	var __rest$29 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This component offers no styles and probably shouldn't be used externally
	 * since it is just rendered by the `RadioGroup` component.
	 *
	 * @remarks \@since 2.7.0
	 */
	var RadioWidget = React.forwardRef(function RadioGroupRadio(_a, ref) {
	    var checked = _a.checked, children = _a.children, props = __rest$29(_a, ["checked", "children"]);
	    return (React__default['default'].createElement("span", __assign$h2({}, props, { "aria-checked": checked, ref: ref, role: "radio" }), children));
	});

	/**
	 * Small util to get the value from a {@link RadioItem}.
	 *
	 * @param value - {@link RadioItem}
	 * @returns the current string value of the radio item
	 * @remarks \@since 2.7.0
	 */
	function getRadioItemValue(value) {
	    return typeof value === "string" ? value : value.value;
	}
	/**
	 * This util will return the `style` object only if the `RadioItemValue` had a
	 * `style` property.
	 *
	 * @param item - {@link RadioItemStyleObject}
	 * @returns an optional style object to provide to the radio.
	 * @remarks \@since 2.7.0
	 */
	var defaultGetRadioStyle = function (item) { return item.style; };
	/**
	 * This util will return the `className` string only if the `RadioItemValue`
	 * had a `className` property.
	 *
	 * @param item - {@link RadioItemStyleObject}
	 * @returns an optional className to provide to the radio
	 * @remarks \@since 2.7.0
	 */
	var defaultGetRadioClassName = function (item) { return item.className; };

	var __assign$h1 = (undefined && undefined.__assign) || function () {
	    __assign$h1 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$h1.apply(this, arguments);
	};
	var __rest$28 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * The `RadioGroup` is a low-level component that does not provide any styles
	 * and instead only provides the accessibility required for a
	 * `role="radiogroup"` and rendering each `role="radio"` item.
	 *
	 * @remarks \@since 2.7.0
	 */
	var RadioGroup = React.forwardRef(function RadioGroup(_a, ref) {
	    var id = _a.id, _b = _a.getRadioStyle, getRadioStyle = _b === void 0 ? defaultGetRadioStyle : _b, _c = _a.getRadioClassName, getRadioClassName = _c === void 0 ? defaultGetRadioClassName : _c, items = _a.items, currentValue = _a.value, onBlur = _a.onBlur, onFocus = _a.onFocus, onClick = _a.onClick, onChange = _a.onChange, onKeyDown = _a.onKeyDown, props = __rest$28(_a, ["id", "getRadioStyle", "getRadioClassName", "items", "value", "onBlur", "onFocus", "onClick", "onChange", "onKeyDown"]);
	    var refs = items.map(function () { return React.createRef(); });
	    var _d = React.useState(false), focused = _d[0], setFocused = _d[1];
	    var handleBlur = React.useCallback(function (event) {
	        onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);
	        setFocused(false);
	    }, [onBlur]);
	    var handleFocus = React.useCallback(function (event) {
	        onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);
	        setFocused(true);
	    }, [onFocus]);
	    var handleClick = React.useCallback(function (event) {
	        var _a, _b;
	        onClick === null || onClick === void 0 ? void 0 : onClick(event);
	        /* istanbul ignore next: can't really happen */
	        var radio = (_a = event.target) === null || _a === void 0 ? void 0 : _a.closest('[role="radio"]');
	        var index = radio
	            ? refs.findIndex(function (_a) {
	                var current = _a.current;
	                return radio === current;
	            })
	            : -1;
	        if (index !== -1) {
	            onChange(getRadioItemValue(items[index]));
	            /* istanbul ignore next: can't really happen */
	            (_b = refs[index].current) === null || _b === void 0 ? void 0 : _b.focus();
	        }
	    }, [onChange, onClick, refs, items]);
	    var handleKeyDown = React.useCallback(function (event) {
	        var _a, _b;
	        onKeyDown === null || onKeyDown === void 0 ? void 0 : onKeyDown(event);
	        if (tryToSubmitRelatedForm(event)) {
	            return;
	        }
	        if (![" ", "ArrowLeft", "ArrowUp", "ArrowRight", "ArrowDown"].includes(event.key)) {
	            return;
	        }
	        /* istanbul ignore next: can't really happen */
	        var radio = (_a = event.target) === null || _a === void 0 ? void 0 : _a.closest('[role="radio"]');
	        if (!radio) {
	            return;
	        }
	        event.preventDefault();
	        event.stopPropagation();
	        if (event.key === " ") {
	            radio.click();
	            return;
	        }
	        var increment = event.key === "ArrowRight" || event.key === "ArrowDown";
	        var index = refs.findIndex(function (_a) {
	            var current = _a.current;
	            return current === radio;
	        });
	        /* istanbul ignore next: can't really happen */
	        if (index !== -1) {
	            var nextIndex = loop({
	                value: index,
	                max: items.length - 1,
	                increment: increment,
	            });
	            (_b = refs[nextIndex].current) === null || _b === void 0 ? void 0 : _b.focus();
	            onChange(getRadioItemValue(items[nextIndex]));
	        }
	    }, [onChange, onKeyDown, refs, items]);
	    var focusable = React.useMemo(function () { return items.some(function (value) { return getRadioItemValue(value) === currentValue; }); }, [currentValue, items]);
	    return (React__default['default'].createElement("span", __assign$h1({}, props, { id: id, ref: ref, role: "radiogroup", onBlur: handleBlur, onFocus: handleFocus, onClick: handleClick, onKeyDown: handleKeyDown, tabIndex: -1 }), items.map(function (item, i) {
	        var props;
	        var value;
	        var checked = false;
	        var children;
	        var itemStyle;
	        var itemClassName;
	        if (typeof item === "string") {
	            value = item;
	            checked = currentValue === value;
	            children = value;
	            itemStyle = getRadioStyle({ index: i, checked: checked, value: item });
	            itemClassName = getRadioClassName({
	                index: i,
	                checked: checked,
	                value: item,
	            });
	        }
	        else {
	            (value = item.value, children = item.children, props = __rest$28(item, ["value", "children"]));
	            checked = currentValue === value;
	            itemStyle = getRadioStyle(__assign$h1({ index: i, checked: checked }, item));
	            itemClassName =
	                getRadioClassName(__assign$h1({ index: i, checked: checked }, item)) || undefined;
	            if (typeof children === "undefined") {
	                children = value;
	            }
	        }
	        return (React__default['default'].createElement(RadioWidget, __assign$h1({}, props, { key: value, id: id + "-" + (i + 1), ref: refs[i], style: itemStyle, className: itemClassName, checked: checked, tabIndex: checked || (!focused && !focusable) ? 0 : -1 }), children));
	    })));
	});

	/**
	 * This will conditionally close the dialog when the escape key is pressed.
	 *
	 * @param onRequestClose - The function to call to close the dialog.
	 * @param disabled - Boolean if the escape key functionality should be disabled
	 * @param onKeyDown - An optional keydown event handler to also call.
	 * @returns A keydown event handler
	 */
	function useCloseOnEscape(onRequestClose, disabled, onKeyDown) {
	    var handleKeyDown = React.useCallback(function (event) {
	        if (onKeyDown) {
	            onKeyDown(event);
	        }
	        if (event.key === "Escape") {
	            onRequestClose();
	        }
	    }, [onKeyDown, onRequestClose]);
	    return disabled ? onKeyDown : handleKeyDown;
	}

	/**
	 * This is used with the `useScrollLock` effect to determine if the styles were
	 * applied by scroll locking or not in the cleanup stage.
	 */
	var DATA_RMD_NOSCROLL = "data-rmd-noscroll";
	/**
	 * This will enable scroll locking for the provided element. Scroll locking
	 * works by fixing the element within the page and hiding overflow for that
	 * element.
	 *
	 * @param element - Either the `<body>` tag or an element within the page to
	 * disable scroll for.
	 * @internal
	 */
	function enable(element) {
	    element.style.overflow = "hidden";
	    element.setAttribute(DATA_RMD_NOSCROLL, "");
	}
	/**
	 * Attempts to disable the scroll locking behavior for an element. If the
	 * element does not have `data-rmd-noscroll`, it will not be modified. This is
	 * really just a safety catch to ensure that pre-existing styles aren't removed
	 * on accident.
	 *
	 * If the `data-rmd-noscroll` attribute exists, overflow style and the
	 * `data-rmd-noscroll` attribute will be removed.
	 *
	 * @param element - Either the `<body>` tag or an element within the page to
	 * disable scroll locking for.
	 * @internal
	 */
	function disable(element) {
	    if (element.getAttribute(DATA_RMD_NOSCROLL) === null) {
	        return;
	    }
	    element.style.overflow = "";
	    element.removeAttribute(DATA_RMD_NOSCROLL);
	}
	/**
	 * A hook that is used to dynamically add scroll locking to an element. By
	 * default, this will use the main `<body>` tag for scroll locking, but a query
	 * selector string or an HTML element can also be used instead.
	 *
	 * @param enabled - Boolean if the scroll locking behavior should be enabled
	 * @param selectorOrElement - Either a query selector string, HTMLElement, or a
	 * function that returns an HTMLElement to apply scroll locking to.
	 */
	function useScrollLock(enabled, selectorOrElement) {
	    React.useEffect(function () {
	        if (!enabled || typeof document === "undefined") {
	            return;
	        }
	        var element = null;
	        if (typeof selectorOrElement === "string") {
	            element = document.querySelector(selectorOrElement);
	        }
	        else if (typeof selectorOrElement === "function") {
	            element = selectorOrElement();
	        }
	        else if (selectorOrElement) {
	            element = selectorOrElement;
	        }
	        else {
	            element = document.body;
	        }
	        if (!element || element.getAttribute(DATA_RMD_NOSCROLL) !== null) {
	            return;
	        }
	        enable(element);
	        return function () {
	            disable(element);
	        };
	    }, [enabled, selectorOrElement]);
	}

	/**
	 * A simple util that will ensure that a number is within the optional min and
	 * max values.
	 *
	 * @param value - The number to ensure that is within the range
	 * @param min - The optional min value
	 * @param max - The optional max value
	 * @returns the updated value
	 * @remarks \@since 2.5.0
	 */
	function withinRange(value, min, max) {
	    var nextValue = value;
	    if (typeof min === "number") {
	        nextValue = Math.max(min, nextValue);
	    }
	    if (typeof max === "number") {
	        nextValue = Math.min(max, nextValue);
	    }
	    return nextValue;
	}

	var __assign$h0 = (undefined && undefined.__assign) || function () {
	    __assign$h0 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$h0.apply(this, arguments);
	};
	var __rest$27 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$1a = bem("rmd-snackbar");
	var Snackbar = React.forwardRef(function Snackbar(_a, ref) {
	    var _b;
	    var className = _a.className, children = _a.children, _c = _a.portal, portal = _c === void 0 ? false : _c, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, _d = _a.position, position = _d === void 0 ? "bottom" : _d, props = __rest$27(_a, ["className", "children", "portal", "portalInto", "portalIntoId", "position"]);
	    return (React__default['default'].createElement(ConditionalPortal, { portal: portal, portalInto: portalInto, portalIntoId: portalIntoId },
	        React__default['default'].createElement("div", __assign$h0({}, props, { role: "status", ref: ref, className: cn(block$1a((_b = {}, _b[position] = true, _b)), className) }), children)));
	});

	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	Function.call.bind(Object.prototype.hasOwnProperty);

	function hasClass(element, className) {
	  if (element.classList) return !!className && element.classList.contains(className);
	  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
	}

	function addClass(element, className) {
	  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + " " + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
	}

	function replaceClassName(origClass, classToRemove) {
	  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
	}

	function removeClass$1(element, className) {
	  if (element.classList) {
	    element.classList.remove(className);
	  } else if (typeof element.className === 'string') {
	    element.className = replaceClassName(element.className, className);
	  } else {
	    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
	  }
	}

	var config = {
	  disabled: false
	};

	var TransitionGroupContext = React__default['default'].createContext(null);

	var UNMOUNTED = 'unmounted';
	var EXITED$1 = 'exited';
	var ENTERING$1 = 'entering';
	var ENTERED$2 = 'entered';
	var EXITING$1 = 'exiting';
	/**
	 * The Transition component lets you describe a transition from one component
	 * state to another _over time_ with a simple declarative API. Most commonly
	 * it's used to animate the mounting and unmounting of a component, but can also
	 * be used to describe in-place transition states as well.
	 *
	 * ---
	 *
	 * **Note**: `Transition` is a platform-agnostic base component. If you're using
	 * transitions in CSS, you'll probably want to use
	 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
	 * instead. It inherits all the features of `Transition`, but contains
	 * additional features necessary to play nice with CSS transitions (hence the
	 * name of the component).
	 *
	 * ---
	 *
	 * By default the `Transition` component does not alter the behavior of the
	 * component it renders, it only tracks "enter" and "exit" states for the
	 * components. It's up to you to give meaning and effect to those states. For
	 * example we can add styles to a component when it enters or exits:
	 *
	 * ```jsx
	 * import { Transition } from 'react-transition-group';
	 *
	 * const duration = 300;
	 *
	 * const defaultStyle = {
	 *   transition: `opacity ${duration}ms ease-in-out`,
	 *   opacity: 0,
	 * }
	 *
	 * const transitionStyles = {
	 *   entering: { opacity: 1 },
	 *   entered:  { opacity: 1 },
	 *   exiting:  { opacity: 0 },
	 *   exited:  { opacity: 0 },
	 * };
	 *
	 * const Fade = ({ in: inProp }) => (
	 *   <Transition in={inProp} timeout={duration}>
	 *     {state => (
	 *       <div style={{
	 *         ...defaultStyle,
	 *         ...transitionStyles[state]
	 *       }}>
	 *         I'm a fade Transition!
	 *       </div>
	 *     )}
	 *   </Transition>
	 * );
	 * ```
	 *
	 * There are 4 main states a Transition can be in:
	 *  - `'entering'`
	 *  - `'entered'`
	 *  - `'exiting'`
	 *  - `'exited'`
	 *
	 * Transition state is toggled via the `in` prop. When `true` the component
	 * begins the "Enter" stage. During this stage, the component will shift from
	 * its current transition state, to `'entering'` for the duration of the
	 * transition and then to the `'entered'` stage once it's complete. Let's take
	 * the following example (we'll use the
	 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <Transition in={inProp} timeout={500}>
	 *         {state => (
	 *           // ...
	 *         )}
	 *       </Transition>
	 *       <button onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the button is clicked the component will shift to the `'entering'` state
	 * and stay there for 500ms (the value of `timeout`) before it finally switches
	 * to `'entered'`.
	 *
	 * When `in` is `false` the same thing happens except the state moves from
	 * `'exiting'` to `'exited'`.
	 */

	var Transition = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(Transition, _React$Component);

	  function Transition(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;
	    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

	    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
	    var initialStatus;
	    _this.appearStatus = null;

	    if (props.in) {
	      if (appear) {
	        initialStatus = EXITED$1;
	        _this.appearStatus = ENTERING$1;
	      } else {
	        initialStatus = ENTERED$2;
	      }
	    } else {
	      if (props.unmountOnExit || props.mountOnEnter) {
	        initialStatus = UNMOUNTED;
	      } else {
	        initialStatus = EXITED$1;
	      }
	    }

	    _this.state = {
	      status: initialStatus
	    };
	    _this.nextCallback = null;
	    return _this;
	  }

	  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
	    var nextIn = _ref.in;

	    if (nextIn && prevState.status === UNMOUNTED) {
	      return {
	        status: EXITED$1
	      };
	    }

	    return null;
	  } // getSnapshotBeforeUpdate(prevProps) {
	  //   let nextStatus = null
	  //   if (prevProps !== this.props) {
	  //     const { status } = this.state
	  //     if (this.props.in) {
	  //       if (status !== ENTERING && status !== ENTERED) {
	  //         nextStatus = ENTERING
	  //       }
	  //     } else {
	  //       if (status === ENTERING || status === ENTERED) {
	  //         nextStatus = EXITING
	  //       }
	  //     }
	  //   }
	  //   return { nextStatus }
	  // }
	  ;

	  var _proto = Transition.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.updateStatus(true, this.appearStatus);
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var nextStatus = null;

	    if (prevProps !== this.props) {
	      var status = this.state.status;

	      if (this.props.in) {
	        if (status !== ENTERING$1 && status !== ENTERED$2) {
	          nextStatus = ENTERING$1;
	        }
	      } else {
	        if (status === ENTERING$1 || status === ENTERED$2) {
	          nextStatus = EXITING$1;
	        }
	      }
	    }

	    this.updateStatus(false, nextStatus);
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };

	  _proto.getTimeouts = function getTimeouts() {
	    var timeout = this.props.timeout;
	    var exit, enter, appear;
	    exit = enter = appear = timeout;

	    if (timeout != null && typeof timeout !== 'number') {
	      exit = timeout.exit;
	      enter = timeout.enter; // TODO: remove fallback for next major

	      appear = timeout.appear !== undefined ? timeout.appear : enter;
	    }

	    return {
	      exit: exit,
	      enter: enter,
	      appear: appear
	    };
	  };

	  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
	    if (mounting === void 0) {
	      mounting = false;
	    }

	    if (nextStatus !== null) {
	      // nextStatus will always be ENTERING or EXITING.
	      this.cancelNextCallback();

	      if (nextStatus === ENTERING$1) {
	        this.performEnter(mounting);
	      } else {
	        this.performExit();
	      }
	    } else if (this.props.unmountOnExit && this.state.status === EXITED$1) {
	      this.setState({
	        status: UNMOUNTED
	      });
	    }
	  };

	  _proto.performEnter = function performEnter(mounting) {
	    var _this2 = this;

	    var enter = this.props.enter;
	    var appearing = this.context ? this.context.isMounting : mounting;

	    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM__default['default'].findDOMNode(this), appearing],
	        maybeNode = _ref2[0],
	        maybeAppearing = _ref2[1];

	    var timeouts = this.getTimeouts();
	    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
	    // if we are mounting and running this it means appear _must_ be set

	    if (!mounting && !enter || config.disabled) {
	      this.safeSetState({
	        status: ENTERED$2
	      }, function () {
	        _this2.props.onEntered(maybeNode);
	      });
	      return;
	    }

	    this.props.onEnter(maybeNode, maybeAppearing);
	    this.safeSetState({
	      status: ENTERING$1
	    }, function () {
	      _this2.props.onEntering(maybeNode, maybeAppearing);

	      _this2.onTransitionEnd(enterTimeout, function () {
	        _this2.safeSetState({
	          status: ENTERED$2
	        }, function () {
	          _this2.props.onEntered(maybeNode, maybeAppearing);
	        });
	      });
	    });
	  };

	  _proto.performExit = function performExit() {
	    var _this3 = this;

	    var exit = this.props.exit;
	    var timeouts = this.getTimeouts();
	    var maybeNode = this.props.nodeRef ? undefined : ReactDOM__default['default'].findDOMNode(this); // no exit animation skip right to EXITED

	    if (!exit || config.disabled) {
	      this.safeSetState({
	        status: EXITED$1
	      }, function () {
	        _this3.props.onExited(maybeNode);
	      });
	      return;
	    }

	    this.props.onExit(maybeNode);
	    this.safeSetState({
	      status: EXITING$1
	    }, function () {
	      _this3.props.onExiting(maybeNode);

	      _this3.onTransitionEnd(timeouts.exit, function () {
	        _this3.safeSetState({
	          status: EXITED$1
	        }, function () {
	          _this3.props.onExited(maybeNode);
	        });
	      });
	    });
	  };

	  _proto.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };

	  _proto.safeSetState = function safeSetState(nextState, callback) {
	    // This shouldn't be necessary, but there are weird race conditions with
	    // setState callbacks and unmounting in testing, so always make sure that
	    // we can cancel any pending setState callbacks after we unmount.
	    callback = this.setNextCallback(callback);
	    this.setState(nextState, callback);
	  };

	  _proto.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;

	    var active = true;

	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;
	        callback(event);
	      }
	    };

	    this.nextCallback.cancel = function () {
	      active = false;
	    };

	    return this.nextCallback;
	  };

	  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
	    this.setNextCallback(handler);
	    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM__default['default'].findDOMNode(this);
	    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

	    if (!node || doesNotHaveTimeoutOrListener) {
	      setTimeout(this.nextCallback, 0);
	      return;
	    }

	    if (this.props.addEndListener) {
	      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
	          maybeNode = _ref3[0],
	          maybeNextCallback = _ref3[1];

	      this.props.addEndListener(maybeNode, maybeNextCallback);
	    }

	    if (timeout != null) {
	      setTimeout(this.nextCallback, timeout);
	    }
	  };

	  _proto.render = function render() {
	    var status = this.state.status;

	    if (status === UNMOUNTED) {
	      return null;
	    }

	    var _this$props = this.props,
	        children = _this$props.children;
	        _this$props.in;
	        _this$props.mountOnEnter;
	        _this$props.unmountOnExit;
	        _this$props.appear;
	        _this$props.enter;
	        _this$props.exit;
	        _this$props.timeout;
	        _this$props.addEndListener;
	        _this$props.onEnter;
	        _this$props.onEntering;
	        _this$props.onEntered;
	        _this$props.onExit;
	        _this$props.onExiting;
	        _this$props.onExited;
	        _this$props.nodeRef;
	        var childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

	    return (
	      /*#__PURE__*/
	      // allows for nested Transitions
	      React__default['default'].createElement(TransitionGroupContext.Provider, {
	        value: null
	      }, typeof children === 'function' ? children(status, childProps) : React__default['default'].cloneElement(React__default['default'].Children.only(children), childProps))
	    );
	  };

	  return Transition;
	}(React__default['default'].Component);

	Transition.contextType = TransitionGroupContext;
	Transition.propTypes = {}; // Name the function so it is clearer in the documentation

	function noop$9() {}

	Transition.defaultProps = {
	  in: false,
	  mountOnEnter: false,
	  unmountOnExit: false,
	  appear: false,
	  enter: true,
	  exit: true,
	  onEnter: noop$9,
	  onEntering: noop$9,
	  onEntered: noop$9,
	  onExit: noop$9,
	  onExiting: noop$9,
	  onExited: noop$9
	};
	Transition.UNMOUNTED = UNMOUNTED;
	Transition.EXITED = EXITED$1;
	Transition.ENTERING = ENTERING$1;
	Transition.ENTERED = ENTERED$2;
	Transition.EXITING = EXITING$1;

	var _addClass = function addClass$1(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return addClass(node, c);
	  });
	};

	var removeClass = function removeClass(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return removeClass$1(node, c);
	  });
	};
	/**
	 * A transition component inspired by the excellent
	 * [ng-animate](https://docs.angularjs.org/api/ngAnimate) library, you should
	 * use it if you're using CSS transitions or animations. It's built upon the
	 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
	 * component, so it inherits all of its props.
	 *
	 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
	 * and `exit` states of the transition. The first class is applied and then a
	 * second `*-active` class in order to activate the CSS transition. After the
	 * transition, matching `*-done` class names are applied to persist the
	 * transition state.
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
	 *         <div>
	 *           {"I'll receive my-node-* classes"}
	 *         </div>
	 *       </CSSTransition>
	 *       <button type="button" onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the `in` prop is set to `true`, the child component will first receive
	 * the class `example-enter`, then the `example-enter-active` will be added in
	 * the next tick. `CSSTransition` [forces a
	 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
	 * between before adding the `example-enter-active`. This is an important trick
	 * because it allows us to transition between `example-enter` and
	 * `example-enter-active` even though they were added immediately one after
	 * another. Most notably, this is what makes it possible for us to animate
	 * _appearance_.
	 *
	 * ```css
	 * .my-node-enter {
	 *   opacity: 0;
	 * }
	 * .my-node-enter-active {
	 *   opacity: 1;
	 *   transition: opacity 200ms;
	 * }
	 * .my-node-exit {
	 *   opacity: 1;
	 * }
	 * .my-node-exit-active {
	 *   opacity: 0;
	 *   transition: opacity 200ms;
	 * }
	 * ```
	 *
	 * `*-active` classes represent which styles you want to animate **to**, so it's
	 * important to add `transition` declaration only to them, otherwise transitions
	 * might not behave as intended! This might not be obvious when the transitions
	 * are symmetrical, i.e. when `*-enter-active` is the same as `*-exit`, like in
	 * the example above (minus `transition`), but it becomes apparent in more
	 * complex transitions.
	 *
	 * **Note**: If you're using the
	 * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)
	 * prop, make sure to define styles for `.appear-*` classes as well.
	 */


	var CSSTransition = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(CSSTransition, _React$Component);

	  function CSSTransition() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
	    _this.appliedClasses = {
	      appear: {},
	      enter: {},
	      exit: {}
	    };

	    _this.onEnter = function (maybeNode, maybeAppearing) {
	      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing),
	          node = _this$resolveArgument[0],
	          appearing = _this$resolveArgument[1];

	      _this.removeClasses(node, 'exit');

	      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');

	      if (_this.props.onEnter) {
	        _this.props.onEnter(maybeNode, maybeAppearing);
	      }
	    };

	    _this.onEntering = function (maybeNode, maybeAppearing) {
	      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing),
	          node = _this$resolveArgument2[0],
	          appearing = _this$resolveArgument2[1];

	      var type = appearing ? 'appear' : 'enter';

	      _this.addClass(node, type, 'active');

	      if (_this.props.onEntering) {
	        _this.props.onEntering(maybeNode, maybeAppearing);
	      }
	    };

	    _this.onEntered = function (maybeNode, maybeAppearing) {
	      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing),
	          node = _this$resolveArgument3[0],
	          appearing = _this$resolveArgument3[1];

	      var type = appearing ? 'appear' : 'enter';

	      _this.removeClasses(node, type);

	      _this.addClass(node, type, 'done');

	      if (_this.props.onEntered) {
	        _this.props.onEntered(maybeNode, maybeAppearing);
	      }
	    };

	    _this.onExit = function (maybeNode) {
	      var _this$resolveArgument4 = _this.resolveArguments(maybeNode),
	          node = _this$resolveArgument4[0];

	      _this.removeClasses(node, 'appear');

	      _this.removeClasses(node, 'enter');

	      _this.addClass(node, 'exit', 'base');

	      if (_this.props.onExit) {
	        _this.props.onExit(maybeNode);
	      }
	    };

	    _this.onExiting = function (maybeNode) {
	      var _this$resolveArgument5 = _this.resolveArguments(maybeNode),
	          node = _this$resolveArgument5[0];

	      _this.addClass(node, 'exit', 'active');

	      if (_this.props.onExiting) {
	        _this.props.onExiting(maybeNode);
	      }
	    };

	    _this.onExited = function (maybeNode) {
	      var _this$resolveArgument6 = _this.resolveArguments(maybeNode),
	          node = _this$resolveArgument6[0];

	      _this.removeClasses(node, 'exit');

	      _this.addClass(node, 'exit', 'done');

	      if (_this.props.onExited) {
	        _this.props.onExited(maybeNode);
	      }
	    };

	    _this.resolveArguments = function (maybeNode, maybeAppearing) {
	      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] // here `maybeNode` is actually `appearing`
	      : [maybeNode, maybeAppearing];
	    };

	    _this.getClassNames = function (type) {
	      var classNames = _this.props.classNames;
	      var isStringClassNames = typeof classNames === 'string';
	      var prefix = isStringClassNames && classNames ? classNames + "-" : '';
	      var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
	      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
	      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
	      return {
	        baseClassName: baseClassName,
	        activeClassName: activeClassName,
	        doneClassName: doneClassName
	      };
	    };

	    return _this;
	  }

	  var _proto = CSSTransition.prototype;

	  _proto.addClass = function addClass(node, type, phase) {
	    var className = this.getClassNames(type)[phase + "ClassName"];

	    var _this$getClassNames = this.getClassNames('enter'),
	        doneClassName = _this$getClassNames.doneClassName;

	    if (type === 'appear' && phase === 'done' && doneClassName) {
	      className += " " + doneClassName;
	    } // This is for to force a repaint,
	    // which is necessary in order to transition styles when adding a class name.


	    if (phase === 'active') {
	      /* eslint-disable no-unused-expressions */
	      node && node.scrollTop;
	    }

	    if (className) {
	      this.appliedClasses[type][phase] = className;

	      _addClass(node, className);
	    }
	  };

	  _proto.removeClasses = function removeClasses(node, type) {
	    var _this$appliedClasses$ = this.appliedClasses[type],
	        baseClassName = _this$appliedClasses$.base,
	        activeClassName = _this$appliedClasses$.active,
	        doneClassName = _this$appliedClasses$.done;
	    this.appliedClasses[type] = {};

	    if (baseClassName) {
	      removeClass(node, baseClassName);
	    }

	    if (activeClassName) {
	      removeClass(node, activeClassName);
	    }

	    if (doneClassName) {
	      removeClass(node, doneClassName);
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props;
	        _this$props.classNames;
	        var props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);

	    return /*#__PURE__*/React__default['default'].createElement(Transition, _extends({}, props, {
	      onEnter: this.onEnter,
	      onEntered: this.onEntered,
	      onEntering: this.onEntering,
	      onExit: this.onExit,
	      onExiting: this.onExiting,
	      onExited: this.onExited
	    }));
	  };

	  return CSSTransition;
	}(React__default['default'].Component);

	CSSTransition.defaultProps = {
	  classNames: ''
	};
	CSSTransition.propTypes = {};

	var DEFAULT_TOAST_TIMEOUT = 150;
	var DEFAULT_TOAST_CLASSNAMES = {
	    appear: "rmd-toast--enter",
	    appearActive: "rmd-toast--enter-active",
	    enter: "rmd-toast--enter",
	    enterActive: "rmd-toast--enter-active",
	    exit: "rmd-toast--exit",
	    exitActive: "rmd-toast--exit-active",
	};

	var __assign$g$ = (undefined && undefined.__assign) || function () {
	    __assign$g$ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$g$.apply(this, arguments);
	};
	var __rest$26 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$19 = bem("rmd-toast");
	/**
	 * This is a very low-level component that can be used to animate a new toast in
	 * to a `Snackbar` as it is mainly just a wrapper of the `CSSTransition`
	 * component. If you are using this component, it is generally recommended to
	 * provide the `onEntered` callback as a function to start the hide visibility
	 * timer and the `onExited` callback to remove the current toast from your
	 * queue.
	 */
	var Toast = React.forwardRef(function Toast(_a, ref) {
	    var className = _a.className, children = _a.children, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, _b = _a.timeout, timeout = _b === void 0 ? DEFAULT_TOAST_TIMEOUT : _b, _c = _a.classNames, classNames = _c === void 0 ? DEFAULT_TOAST_CLASSNAMES : _c, _d = _a.action, action = _d === void 0 ? null : _d, _e = _a.stacked, stacked = _e === void 0 ? false : _e, _f = _a.twoLines, twoLines = _f === void 0 ? false : _f, visible = _a.visible, props = __rest$26(_a, ["className", "children", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "timeout", "classNames", "action", "stacked", "twoLines", "visible"]);
	    return (React__default['default'].createElement(CSSTransition, { in: visible, appear: true, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited, timeout: timeout, classNames: classNames, mountOnEnter: true, unmountOnExit: true },
	        React__default['default'].createElement("div", __assign$g$({}, props, { ref: ref, className: cn(block$19({
	                stacked: stacked,
	                padded: !action || twoLines,
	                "two-lines": twoLines,
	                action: action,
	                "action-2": action && twoLines,
	            }), className) }),
	            React__default['default'].createElement("span", { className: block$19("message", { action: action }) }, children),
	            action && (React__default['default'].createElement("span", { className: block$19("action", { stacked: stacked }) }, action)))));
	});

	var DEFAULT_MESSAGE_QUEUE_TIMEOUT = 5000;
	/**
	 * @internal
	 */
	var AddMessageContext = React.createContext(function () {
	    throw new Error("Attempted to create a message without initializing the MessageQueue component.");
	});
	/**
	 * @internal
	 */
	var MessageVisibilityContext = React.createContext(false);
	/**
	 * This hook is used to add a message to the queue from anywhere in your app.
	 * This should normally be used from click event handlers, but can also be
	 * triggered with custom logic within components.
	 */
	function useAddMessage() {
	    return React.useContext(AddMessageContext);
	}
	/**
	 * Gets the current message visibility to provide to the toast.
	 *
	 * @internal
	 */
	function useMessageVisibility() {
	    return React.useContext(MessageVisibilityContext);
	}
	/**
	 * @internal
	 */
	var MessageQueueActionsContext = React.createContext({
	    popMessage: function () {
	        throw new Error("Attempted to pop a message without initializing the MessageQueue component.");
	    },
	    hideMessage: function () {
	        throw new Error("Attempted to hide a message within initializing the MessageQueue component.");
	    },
	    startTimer: function () {
	        throw new Error("Attempted to start a message queue timer without initializing the MessageQueue component.");
	    },
	    stopTimer: function () {
	        throw new Error("Attempted to stop a message queue timer without initializing the MessageQueue component.");
	    },
	    restartTimer: function () {
	        throw new Error("Attempted to restart a message queue timer without initializing the MessageQueue component.");
	    },
	    resetQueue: function () {
	        throw new Error("Attempted to reset the message queue timer without initializing the MessageQueue component.");
	    },
	});
	/**
	 * This hook exposes some of the lower level actions for handling a message
	 * queue if advanced behavior is desired.
	 */
	function useMessageQueueActions() {
	    // I don't know how to type the createContext for a generic
	    return React.useContext(MessageQueueActionsContext);
	}
	/**
	 * @internal
	 */
	var MessageQueueContext = React.createContext([]);
	/**
	 * This hook will allow you to get the current queue. This probably shouldn't be
	 * used that much.
	 */
	function useQueue() {
	    return React.useContext(MessageQueueContext);
	}

	var block$18 = bem("rmd-button");
	/**
	 * Creates a button theme based on the button theming props. This is really just
	 * used so that other elements like clickable `<div>`s or `<input type="file">`
	 * can look like buttons.
	 *
	 * @param props - An object containing the themeable button props to generate a
	 * button theme className.
	 * @returns a string of class names to create an element with a button theme.
	 */
	function buttonThemeClassNames(_a) {
	    var _b;
	    var _c = _a.theme, propTheme = _c === void 0 ? "clear" : _c, _d = _a.themeType, themeType = _d === void 0 ? "flat" : _d, _e = _a.buttonType, buttonType = _e === void 0 ? "text" : _e, _f = _a.disabled, propDisabled = _f === void 0 ? false : _f, className = _a.className;
	    var theme = propTheme === "disabled" ? "clear" : propTheme;
	    var disabled = propDisabled || propTheme === "disabled";
	    var text = buttonType === "text";
	    var icon = buttonType === "icon";
	    var outline = themeType === "outline";
	    var contained = themeType === "contained";
	    var clear = theme === "clear";
	    return cn(block$18((_b = {
	            text: text,
	            icon: icon,
	            disabled: disabled,
	            contained: !disabled && contained,
	            outline: outline
	        },
	        _b[theme] = !disabled && !clear && contained,
	        _b["text-" + theme] = !disabled && !clear && !contained,
	        _b["outline-" + theme] = !disabled && !clear && outline,
	        _b)), className);
	}

	/**
	 * Checks if the ripple event should be ignored since it was bubbled
	 * up from a child treeitem. I should find a better way to handle
	 * this at some point.
	 */
	function isBubbled(event) {
	    return Array.from(event.currentTarget.querySelectorAll('[role="treeitem"]')).some(function (item) { return item.contains(event.target); });
	}
	/**
	 * Gets the ripple event type based on the provided event.
	 */
	function getType(event) {
	    switch (event.type) {
	        case "mousedown":
	        case "mouseup":
	        case "mouseleave":
	            return "mouse";
	        case "touchstart":
	        case "touchmove":
	        case "touchend":
	            return "touch";
	        case "keydown":
	        case "keyup":
	            return "keyboard";
	        default:
	            return "programmatic";
	    }
	}
	/**
	 * Checks if the provided event type is actually rippleable by ensuring:
	 * - it is a mousedown event while not in touch mode and the left mouse was
	 *   clicked.
	 * - it was a keydown event for either tab or space when spacebar clicks have not
	 *   been disabled
	 * - it was a touchstart event
	 */
	function isRippleable(event, disableSpacebarClick) {
	    switch (event.type) {
	        case "mousedown":
	            return (document.querySelector(".rmd-states--touch") === null &&
	                event.button === 0);
	        case "keydown":
	            return ((!disableSpacebarClick && event.key === " ") ||
	                (event.key === "Enter" &&
	                    !/checkbox|radio/i.test(event.currentTarget.getAttribute("type") || "")));
	        case "touchstart":
	        case "click":
	            return true;
	        default:
	            return false;
	    }
	}
	function calcHypotenuse(a, b) {
	    return Math.sqrt(a * a + b * b);
	}
	/**
	 * Gets the current radius for a ripple based on the x and y page dimensions
	 * as well as the size of the element.
	 *
	 * This is really just in a separate file so I can easily mock this and write
	 * tests.
	 */
	function getRadius(x, y, offsetWidth, offsetHeight) {
	    return Math.max(calcHypotenuse(x, y), calcHypotenuse(offsetWidth - x, y), calcHypotenuse(offsetWidth - x, offsetHeight - y), calcHypotenuse(x, offsetHeight - y));
	}
	/**
	 * Gets the ripple creation origin base on the provided event. When the event
	 * type is for keyboards or triggered programmatically, the origin will
	 * be the center of the target element. When the event is for touch or mouse,
	 * the origin will be the location within the viewport where the user touched
	 * or clicked the target element.
	 */
	function getOrigin(event, element) {
	    var _a;
	    var type = getType(event);
	    var offsetWidth = element.offsetWidth, offsetHeight = element.offsetHeight;
	    var x;
	    var y;
	    if (type === "programmatic" || type === "keyboard") {
	        x = offsetWidth / 2;
	        y = offsetHeight / 2;
	    }
	    else {
	        // if the event type is not programmatic, want to figure out exactly where in
	        // the element to trigger the animation from. this can be determined by:
	        // - getting the pageX and pageY of the mouse or touch event
	        // - getting element's current position in the page
	        var pageX = void 0;
	        var pageY = void 0;
	        if (type === "mouse") {
	            (_a = event, pageX = _a.pageX, pageY = _a.pageY);
	        }
	        else {
	            var touch = event.touches.item(0);
	            (pageX = touch.pageX, pageY = touch.pageY);
	        }
	        var rect = element.getBoundingClientRect();
	        // have to include the current page's scroll offset to the element's
	        // bounding rect since the pageX and pageY from Events include the scroll
	        // offset while the bounding rect is only based on viewport.
	        x = pageX - (rect.left + window.pageXOffset);
	        y = pageY - (rect.top + window.pageYOffset);
	    }
	    return { x: x, y: y };
	}
	/**
	 * Creates a new ripple state based off the provided event type.
	 */
	function createRippleState(event) {
	    var element = findSizingContainer(event.currentTarget) || event.currentTarget;
	    var offsetWidth = element.offsetWidth, offsetHeight = element.offsetHeight;
	    var type = getType(event);
	    var _a = getOrigin(event, element), x = _a.x, y = _a.y;
	    var radius = getRadius(x, y, offsetWidth, offsetHeight);
	    var size = radius * 2;
	    return {
	        startTime: Date.now(),
	        style: {
	            left: x - radius,
	            top: y - radius,
	            height: size,
	            width: size,
	        },
	        type: type,
	        holding: type !== "programmatic",
	        exiting: false,
	        entered: false,
	    };
	}

	var __assign$g_ = (undefined && undefined.__assign) || function () {
	    __assign$g_ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$g_.apply(this, arguments);
	};
	var __spreadArray$8 = (undefined && undefined.__spreadArray) || function (to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	};
	var CREATE = "CREATE";
	var CANCEL = "CANCEL";
	var RELEASE = "RELEASE";
	var ENTERED$1 = "ENTERED";
	var REMOVE = "REMOVE";
	/**
	 * This function will create a simplified version of the create event
	 * that only includes the parts that are needed to trigger a ripple.
	 * This is really only required since `event.persist()` crashed a lot
	 * when spamming the trigger events and it threw warnings when not
	 * persisting the event.
	 */
	function createRippleAction(event, disableSpacebarClick) {
	    var _a = event, type = _a.type, target = _a.target, currentTarget = _a.currentTarget, touches = _a.touches, pageX = _a.pageX, pageY = _a.pageY, button = _a.button, key = _a.key;
	    return {
	        type: CREATE,
	        disableSpacebarClick: disableSpacebarClick,
	        event: {
	            type: type,
	            key: key,
	            target: target,
	            button: button,
	            currentTarget: currentTarget,
	            touches: touches,
	            pageX: pageX,
	            pageY: pageY,
	        },
	    };
	}
	function createRipple(state, event, disableSpacebarClick) {
	    if (!isRippleable(event, disableSpacebarClick) || isBubbled(event)) {
	        return state;
	    }
	    if (state.find(function (r) { return r.holding; }) ||
	        (getType(event) !== "touch" && state.find(function (r) { return r.type === "touch"; }))) {
	        // keyboard events are a bit different than the others since it is actually
	        // spammable since the space or enter key can be held down which triggers click
	        // events infinitely until they release. There's also the fun fact that mouse
	        // events are triggered after touch events, so we need to make sure duplicate
	        // ripples aren't created for these
	        return state;
	    }
	    var ripple = createRippleState(event);
	    return __spreadArray$8(__spreadArray$8([], state), [ripple]);
	}
	function enteredRipple(state, ripple) {
	    var i = state.findIndex(function (r) { return r === ripple; });
	    if (i === -1 || ripple.exiting) {
	        return state;
	    }
	    var nextState = state.slice();
	    var exiting = !ripple.holding || Date.now() - ripple.startTime > 300;
	    nextState[i] = __assign$g_(__assign$g_({}, ripple), { exiting: exiting, entered: true });
	    return nextState;
	}
	function releaseRipple(state) {
	    var i = state.findIndex(function (r) { return r.holding && !r.exiting; });
	    if (i === -1) {
	        return state;
	    }
	    var ripple = state[i];
	    var exiting = ripple.entered || Date.now() - ripple.startTime > 300;
	    var nextState = state.slice();
	    nextState[i] = __assign$g_(__assign$g_({}, ripple), { exiting: exiting, holding: false });
	    return nextState;
	}
	function removeRipple(state, ripple) {
	    var i = state.findIndex(function (r) { return r.startTime === ripple.startTime; });
	    if (i === -1) {
	        return state;
	    }
	    var nextState = state.slice();
	    nextState.splice(i, 1);
	    return nextState;
	}
	function cancelRipples(state, ease) {
	    if (ease) {
	        return state.map(function (r) { return (__assign$g_(__assign$g_({}, r), { exiting: true, mounted: true, holding: false })); });
	    }
	    return [];
	}
	function reducer$2(state, action) {
	    if (state === void 0) { state = []; }
	    switch (action.type) {
	        case CREATE:
	            return createRipple(state, action.event, action.disableSpacebarClick);
	        case RELEASE:
	            return releaseRipple(state);
	        case CANCEL:
	            return cancelRipples(state, action.ease);
	        case ENTERED$1:
	            return enteredRipple(state, action.ripple);
	        case REMOVE:
	            return removeRipple(state, action.ripple);
	        default:
	            return state;
	    }
	}
	/**
	 * This hook creates memoized callbacks for each part of the ripple transition
	 * as well as returning the current list of ripples.
	 */
	function useRippleTransition(disableSpacebarClick) {
	    if (disableSpacebarClick === void 0) { disableSpacebarClick = false; }
	    var _a = React.useReducer(reducer$2, []), state = _a[0], dispatch = _a[1];
	    var spacebarRef = useRefCache(disableSpacebarClick);
	    var create = React.useCallback(function (event) {
	        var disableSpacebarClick = spacebarRef.current;
	        dispatch(createRippleAction(event, disableSpacebarClick));
	        // disabled since useRefCache
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	    var release = React.useCallback(function (event) {
	        dispatch({ type: RELEASE, event: event });
	    }, []);
	    var entered = React.useCallback(function (ripple) {
	        dispatch({ type: ENTERED$1, ripple: ripple });
	    }, []);
	    var cancel = React.useCallback(function (ease) {
	        if (ease === void 0) { ease = false; }
	        dispatch({ type: CANCEL, ease: ease });
	    }, []);
	    var remove = React.useCallback(function (ripple) {
	        dispatch({ type: REMOVE, ripple: ripple });
	    }, []);
	    return { state: state, create: create, release: release, entered: entered, remove: remove, cancel: cancel };
	}

	var DEFAULT_RIPPLE_CLASSNAMES = {
	    enter: "rmd-ripple--animating",
	    enterActive: "rmd-ripple--scaling",
	    enterDone: "rmd-ripple--animating rmd-ripple--scaling",
	    exit: "rmd-ripple--animating rmd-ripple--scaling",
	    exitActive: "rmd-ripple--fading",
	};
	var DEFAULT_RIPPLE_TIMEOUT = {
	    enter: 150,
	    exit: 300,
	};

	var StatesConfigContext = React.createContext({
	    rippleTimeout: DEFAULT_RIPPLE_TIMEOUT,
	    rippleClassNames: DEFAULT_RIPPLE_CLASSNAMES,
	    disableRipple: false,
	    disableProgrammaticRipple: false,
	});
	/**
	 * A simple hook that can be used to get the Ripple context. This is used behind
	 * the scenes for the Ripple component and _probably_ shouldn't be used anywhere
	 * else. It's mostly used to just use the context defaults when the timeout or
	 * classNames are undefined.
	 */
	function useStatesConfigContext() {
	    return React.useContext(StatesConfigContext);
	}
	/**
	 * The `StatesConfig` component is a top-level context provider for the states
	 * context configuration. It'll keep track of:
	 *
	 * - the current interaction mode of your user
	 * - configuration for ripple effects
	 * - disabling or enabling the ripple effects
	 * - disabling or enabling the fix for color pollution
	 */
	function StatesConfig(_a) {
	    var _b = _a.rippleTimeout, rippleTimeout = _b === void 0 ? DEFAULT_RIPPLE_TIMEOUT : _b, _c = _a.rippleClassNames, rippleClassNames = _c === void 0 ? DEFAULT_RIPPLE_CLASSNAMES : _c, _d = _a.disableRipple, disableRipple = _d === void 0 ? false : _d, _e = _a.disableProgrammaticRipple, disableProgrammaticRipple = _e === void 0 ? false : _e, children = _a.children;
	    var value = React.useMemo(function () { return ({
	        rippleTimeout: rippleTimeout,
	        rippleClassNames: rippleClassNames,
	        disableRipple: disableRipple,
	        disableProgrammaticRipple: disableProgrammaticRipple,
	    }); }, [rippleTimeout, rippleClassNames, disableRipple, disableProgrammaticRipple]);
	    return (React__default['default'].createElement(StatesConfigContext.Provider, { value: value }, children));
	}

	function Ripple(_a) {
	    var className = _a.className, propClassNames = _a.classNames, propTimeout = _a.timeout, ripple = _a.ripple, entered = _a.entered, exited = _a.exited;
	    var exiting = ripple.exiting, style = ripple.style;
	    var timeout = propTimeout;
	    var classNames = propClassNames;
	    var context = useStatesConfigContext();
	    if (typeof timeout === "undefined" || typeof classNames === "undefined") {
	        if (typeof timeout === "undefined") {
	            timeout = context.rippleTimeout;
	        }
	        if (typeof classNames === "undefined") {
	            classNames = context.rippleClassNames;
	        }
	    }
	    var ref = useRefCache({ ripple: ripple, entered: entered, exited: exited });
	    var onEntered = React.useCallback(function () {
	        var _a = ref.current, ripple = _a.ripple, entered = _a.entered;
	        entered(ripple);
	        // disabled since useRefCache
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	    var onExited = React.useCallback(function () {
	        var _a = ref.current, ripple = _a.ripple, exited = _a.exited;
	        exited(ripple);
	        // disabled since useRefCache
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	    return (React__default['default'].createElement(CSSTransition, { in: !exiting, appear: true, classNames: classNames, timeout: timeout, onEntered: onEntered, onExited: onExited },
	        React__default['default'].createElement("span", { style: style, className: cn("rmd-ripple", className) })));
	}

	function RippleContainer(_a) {
	    var ripples = _a.ripples, className = _a.className, rippleClassName = _a.rippleClassName, timeout = _a.timeout, classNames = _a.classNames, entered = _a.entered, exited = _a.exited;
	    return (React__default['default'].createElement("span", { className: cn("rmd-ripple-container", className) }, ripples.map(function (ripple) { return (React__default['default'].createElement(Ripple, { key: ripple.startTime, ripple: ripple, className: rippleClassName, entered: entered, exited: exited, timeout: timeout, classNames: classNames })); })));
	}

	var __assign$gZ = (undefined && undefined.__assign) || function () {
	    __assign$gZ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gZ.apply(this, arguments);
	};
	/**
	 * This hook is used to create all the event handlers required for
	 * creating ripples on an element. Each handler will be memoized and
	 * merged with any provided event handlers of the same type. If the
	 * ripple effect is disabled, the provided event handlers will be
	 * returned instead.
	 */
	function useRippleHandlers(_a) {
	    var create = _a.create, release = _a.release, cancel = _a.cancel, _b = _a.handlers, handlers = _b === void 0 ? {} : _b, _c = _a.disabled, propDisabled = _c === void 0 ? false : _c, _d = _a.disableRipple, disableRipple = _d === void 0 ? false : _d, _e = _a.disableProgrammaticRipple, disableProgrammaticRipple = _e === void 0 ? false : _e;
	    var disabled = propDisabled || disableRipple;
	    var ref = useRefCache(__assign$gZ(__assign$gZ({}, handlers), { disableProgrammaticRipple: disableProgrammaticRipple }));
	    // some OS/browser don't actually focus buttons/elements that are focusable after a click
	    // event which causes a double ripple effect. This ref is used to disable the programmatic
	    // ripple in these cases.
	    var disableProgrammatic = React.useRef(false);
	    var onKeyDown = React.useCallback(function (event) {
	        var callback = ref.current.onKeyDown;
	        if (callback) {
	            callback(event);
	        }
	        create(event);
	    }, 
	    // disabled since useRefCache
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	    [create]);
	    var onKeyUp = React.useCallback(function (event) {
	        var callback = ref.current.onKeyUp;
	        if (callback) {
	            callback(event);
	        }
	        release(event);
	    }, 
	    // disabled since useRefCache
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	    [release]);
	    var onMouseDown = React.useCallback(function (event) {
	        var callback = ref.current.onMouseDown;
	        if (callback) {
	            callback(event);
	        }
	        create(event);
	        disableProgrammatic.current = true;
	    }, 
	    // disabled since useRefCache
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	    [create]);
	    var onMouseUp = React.useCallback(function (event) {
	        var callback = ref.current.onMouseUp;
	        if (callback) {
	            callback(event);
	        }
	        release(event);
	    }, 
	    // disabled since useRefCache
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	    [release]);
	    var onMouseLeave = React.useCallback(function (event) {
	        var callback = ref.current.onMouseLeave;
	        if (callback) {
	            callback(event);
	        }
	        cancel(true);
	    }, 
	    // disabled since useRefCache
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	    [cancel]);
	    var onTouchStart = React.useCallback(function (event) {
	        var callback = ref.current.onTouchStart;
	        if (callback) {
	            callback(event);
	        }
	        create(event);
	    }, 
	    // disabled since useRefCache
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	    [create]);
	    var onTouchMove = React.useCallback(function (event) {
	        var callback = ref.current.onTouchMove;
	        if (callback) {
	            callback(event);
	        }
	        cancel(false);
	    }, 
	    // disabled since useRefCache
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	    [cancel]);
	    var onTouchEnd = React.useCallback(function (event) {
	        var callback = ref.current.onTouchEnd;
	        if (callback) {
	            callback(event);
	        }
	        release(event);
	    }, 
	    // disabled since useRefCache
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	    [release]);
	    var onClick = React.useCallback(function (event) {
	        var _a = ref.current, callback = _a.onClick, disableProgrammaticRipple = _a.disableProgrammaticRipple;
	        if (callback) {
	            callback(event);
	        }
	        // when a click event is triggered and the current active element is not
	        // the event target, we know it was a true programmatic event and should
	        // trigger a ripple for it.
	        if (disableProgrammaticRipple ||
	            document.activeElement === event.currentTarget ||
	            disableProgrammatic.current) {
	            disableProgrammatic.current = false;
	            return;
	        }
	        create(event);
	    }, 
	    // disabled since useRefCache
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	    [create]);
	    return {
	        onKeyDown: disabled ? handlers.onKeyDown : onKeyDown,
	        onKeyUp: disabled ? handlers.onKeyUp : onKeyUp,
	        onMouseDown: disabled ? handlers.onMouseDown : onMouseDown,
	        onMouseUp: disabled ? handlers.onMouseUp : onMouseUp,
	        onMouseLeave: disabled ? handlers.onMouseLeave : onMouseLeave,
	        onTouchStart: disabled ? handlers.onTouchStart : onTouchStart,
	        onTouchMove: disabled ? handlers.onTouchMove : onTouchMove,
	        onTouchEnd: disabled ? handlers.onTouchEnd : onTouchEnd,
	        onClick: disabled || disableProgrammaticRipple ? handlers.onClick : onClick,
	    };
	}

	var __assign$gY = (undefined && undefined.__assign) || function () {
	    __assign$gY = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gY.apply(this, arguments);
	};
	var __rest$25 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * A hook that will return an object containing the ripples element
	 * and an object of event handlers to apply to an element to trigger
	 * the ripple effects.
	 */
	function useRipples(_a) {
	    var rippleTimeout = _a.rippleTimeout, rippleClassNames = _a.rippleClassNames, rippleContainerClassName = _a.rippleContainerClassName, rippleClassName = _a.rippleClassName, disableRipple = _a.disableRipple, disableSpacebarClick = _a.disableSpacebarClick, options = __rest$25(_a, ["rippleTimeout", "rippleClassNames", "rippleContainerClassName", "rippleClassName", "disableRipple", "disableSpacebarClick"]);
	    var _b = useRippleTransition(disableSpacebarClick), create = _b.create, state = _b.state, release = _b.release, entered = _b.entered, remove = _b.remove, cancel = _b.cancel;
	    var handlers = useRippleHandlers(__assign$gY({ create: create,
	        release: release,
	        cancel: cancel,
	        disableRipple: disableRipple }, options));
	    return {
	        handlers: handlers,
	        ripples: disableRipple ? null : (React__default['default'].createElement(RippleContainer, { key: "ripples", ripples: state, className: rippleContainerClassName, rippleClassName: rippleClassName, timeout: rippleTimeout, classNames: rippleClassNames, entered: entered, exited: remove })),
	    };
	}

	/**
	 * This small utility function will create an onKeyDown handler that allows the
	 * user to "click" an element with the keyboard via Enter or Space.
	 */
	function useKeyboardClickPolyfill(_a) {
	    var _b = _a === void 0 ? {} : _a, onKeyDown = _b.onKeyDown, _c = _b.disabled, disabled = _c === void 0 ? false : _c, _d = _b.disableEnterClick, disableEnterClick = _d === void 0 ? false : _d, _e = _b.disableSpacebarClick, disableSpacebarClick = _e === void 0 ? false : _e;
	    var ref = useRefCache({
	        onKeyDown: onKeyDown,
	        disableSpacebarClick: disableSpacebarClick,
	        disableEnterClick: disableEnterClick,
	    });
	    var handleKeyDown = React.useCallback(function (event) {
	        var _a = ref.current, onKeyDown = _a.onKeyDown, disableSpacebarClick = _a.disableSpacebarClick, disableEnterClick = _a.disableEnterClick;
	        if (onKeyDown) {
	            onKeyDown(event);
	        }
	        var isSpace = event.key === " ";
	        var isEnter = event.key === "Enter";
	        var currentTarget = event.currentTarget;
	        var tagName = currentTarget.tagName;
	        if ((!isSpace && !isEnter) ||
	            (isSpace && disableSpacebarClick) ||
	            (isEnter && disableEnterClick) ||
	            // buttons and textareas, and inputs shouldn't be polyfilled
	            /BUTTON|TEXTAREA|INPUT/.test(tagName) ||
	            // native links don't click on space
	            (isSpace && tagName === "A")) {
	            return;
	        }
	        if (isSpace) {
	            // prevent default behavior of page scrolling
	            event.preventDefault();
	        }
	        // don't want parent keydown events to be triggered since this should now
	        // be a "click" event instead.
	        event.stopPropagation();
	        event.currentTarget.click();
	        // disabled since useRefCache
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	    return disabled ? onKeyDown : handleKeyDown;
	}

	var __assign$gX = (undefined && undefined.__assign) || function () {
	    __assign$gX = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gX.apply(this, arguments);
	};
	/**
	 * This is a different version of the useRippleStates that will allow you to
	 * know when a component is being pressed by the user. This is really just a
	 * fallback for when the ripples are disabled.
	 *
	 * This will return an object containing the current pressed state of the
	 * element as well as all the merged eventHandlers required to trigger the
	 * different states.
	 *
	 * NOTE: Unlike the ripple effect, this pressed states will not be triggered
	 * from a programmatic click event.
	 */
	function usePressedStates(_a) {
	    var _b = _a === void 0 ? {} : _a, _c = _b.handlers, handlers = _c === void 0 ? {} : _c, _d = _b.disableSpacebarClick, disableSpacebarClick = _d === void 0 ? false : _d;
	    var _e = React.useState(false), pressed = _e[0], setPressed = _e[1];
	    var ref = useRefCache(__assign$gX(__assign$gX({}, handlers), { pressed: pressed }));
	    var handleKeyDown = React.useCallback(function (event) {
	        var _a = ref.current, onKeyDown = _a.onKeyDown, pressed = _a.pressed;
	        if (onKeyDown) {
	            onKeyDown(event);
	        }
	        var key = event.key;
	        if (!pressed &&
	            (key === "Enter" || (!disableSpacebarClick && key === " "))) {
	            setPressed(true);
	        }
	    }, 
	    // disabled since useRefCache for ref
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	    [disableSpacebarClick]);
	    var handleKeyUp = React.useCallback(function (event) {
	        var _a = ref.current, onKeyUp = _a.onKeyUp, pressed = _a.pressed;
	        if (onKeyUp) {
	            onKeyUp(event);
	        }
	        if (pressed) {
	            setPressed(false);
	        }
	        // disabled since useRefCache for ref
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	    var handleMouseDown = React.useCallback(function (event) {
	        var _a = ref.current, onMouseDown = _a.onMouseDown, pressed = _a.pressed;
	        if (onMouseDown) {
	            onMouseDown(event);
	        }
	        if (!pressed && event.button === 0 && !isBubbled(event)) {
	            setPressed(true);
	        }
	        // disabled since useRefCache for ref
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	    var handleMouseUp = React.useCallback(function (event) {
	        var _a = ref.current, onMouseUp = _a.onMouseUp, pressed = _a.pressed;
	        if (onMouseUp) {
	            onMouseUp(event);
	        }
	        if (pressed) {
	            setPressed(false);
	        }
	        // disabled since useRefCache for ref
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	    var handleMouseLeave = React.useCallback(function (event) {
	        var _a = ref.current, onMouseLeave = _a.onMouseLeave, pressed = _a.pressed;
	        if (onMouseLeave) {
	            onMouseLeave(event);
	        }
	        if (pressed) {
	            setPressed(false);
	        }
	        // disabled since useRefCache for ref
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	    var handleTouchStart = React.useCallback(function (event) {
	        var _a = ref.current, onTouchStart = _a.onTouchStart, pressed = _a.pressed;
	        if (onTouchStart) {
	            onTouchStart(event);
	        }
	        if (!pressed && !isBubbled(event)) {
	            setPressed(true);
	        }
	        // disabled since useRefCache for ref
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	    var handleTouchMove = React.useCallback(function (event) {
	        var _a = ref.current, onTouchMove = _a.onTouchMove, pressed = _a.pressed;
	        if (onTouchMove) {
	            onTouchMove(event);
	        }
	        if (pressed) {
	            setPressed(false);
	        }
	        // disabled since useRefCache for ref
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	    var handleTouchEnd = React.useCallback(function (event) {
	        var _a = ref.current, onTouchEnd = _a.onTouchEnd, pressed = _a.pressed;
	        if (onTouchEnd) {
	            onTouchEnd(event);
	        }
	        if (pressed) {
	            setPressed(false);
	        }
	        // disabled since useRefCache for ref
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	    return {
	        pressed: pressed,
	        handlers: {
	            onClick: handlers.onClick,
	            onKeyDown: handleKeyDown,
	            onKeyUp: handleKeyUp,
	            onMouseDown: handleMouseDown,
	            onMouseUp: handleMouseUp,
	            onMouseLeave: handleMouseLeave,
	            onTouchStart: handleTouchStart,
	            onTouchMove: handleTouchMove,
	            onTouchEnd: handleTouchEnd,
	        },
	    };
	}

	var __assign$gW = (undefined && undefined.__assign) || function () {
	    __assign$gW = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gW.apply(this, arguments);
	};
	/**
	 * This is probably one of the most useful hook in react-md. Any functional
	 * component component that uses this will gain all the different interaction
	 * states based on the states context or any custom overrides.
	 *
	 * The main interaction state is the "ripple" effect when an element has been
	 * clicked either via keyboard, mouse, or touch.
	 *
	 * If the ripple effect is disabled, it will fallback to "polyfilling"/fixing
	 * the `:pressed` pseudo-selector state for items so that a different
	 * background-color opacity is applied instead of the entire ripple effect. This
	 * is polyfilled since the `:pressed` state does not work on anything other than
	 * buttons and links by default and it is not triggered on "valid" keyboard
	 * clicks with a spacebar.
	 *
	 * Finally, the element that uses this hook will gain a focused className
	 * whenever it gains keyboard focus only.
	 *
	 * To get all these interaction states to work correctly, this hook returns an
	 * object containing:
	 *
	 * - `handlers`- an object of event handlers that must be passed down to your
	 *   component to get the different interaction states. All the event handlers
	 *   are automatically merged with any `handlers` that are provided to this hook
	 *   so they can all be called if needed.
	 * - `className` - the current class name for the element
	 * - `ripples` - a renderable element that displays the ripple effects. This
	 *   will be `null` when ripples are disabled.
	 *
	 * @typeParam E - The element type for the component being wrapped. This is
	 * really just used to "better type" the event handlers.
	 */
	function useInteractionStates(options) {
	    if (options === void 0) { options = {}; }
	    var disabled = options.disabled, rippleClassName = options.rippleClassName, rippleContainerClassName = options.rippleContainerClassName, _a = options.disableSpacebarClick, disableSpacebarClick = _a === void 0 ? false : _a, _b = options.disablePressedFallback, disablePressedFallback = _b === void 0 ? false : _b, _c = options.enablePressedAndRipple, enablePressedAndRipple = _c === void 0 ? false : _c, _d = options.disableEnterClick, disableEnterClick = _d === void 0 ? false : _d;
	    var className = options.className, disableRipple = options.disableRipple, disableProgrammaticRipple = options.disableProgrammaticRipple, rippleTimeout = options.rippleTimeout, rippleClassNames = options.rippleClassNames;
	    // populate undefined props from their context values
	    var context = useStatesConfigContext();
	    if (typeof disableRipple === "undefined") {
	        (disableRipple = context.disableRipple);
	    }
	    if (typeof disableProgrammaticRipple === "undefined") {
	        (disableProgrammaticRipple = context.disableProgrammaticRipple);
	    }
	    if (typeof rippleTimeout === "undefined") {
	        (rippleTimeout = context.rippleTimeout);
	    }
	    if (typeof rippleClassNames === "undefined") {
	        (rippleClassNames = context.rippleClassNames);
	    }
	    var handlers = null;
	    var ripples = null;
	    var ripplesResult = useRipples(__assign$gW(__assign$gW({}, options), { disableSpacebarClick: disableSpacebarClick,
	        disableRipple: disableRipple,
	        disableProgrammaticRipple: disableProgrammaticRipple,
	        rippleTimeout: rippleTimeout,
	        rippleClassName: rippleClassName,
	        rippleContainerClassName: rippleContainerClassName }));
	    if (!disableRipple) {
	        (ripples = ripplesResult.ripples, handlers = ripplesResult.handlers);
	    }
	    var pressedResult = usePressedStates(__assign$gW(__assign$gW({}, options), { handlers: handlers || options.handlers, disableSpacebarClick: disableSpacebarClick }));
	    if (enablePressedAndRipple || (disableRipple && !disablePressedFallback)) {
	        (handlers = pressedResult.handlers);
	        className = cn(className, { "rmd-states--pressed": pressedResult.pressed });
	    }
	    handlers = handlers || options.handlers || {};
	    handlers.onKeyDown = useKeyboardClickPolyfill({
	        disabled: disabled,
	        disableEnterClick: disableEnterClick,
	        disableSpacebarClick: disableSpacebarClick,
	        onKeyDown: handlers.onKeyDown,
	    });
	    return {
	        ripples: ripples,
	        className: className,
	        handlers: handlers,
	    };
	}

	var __assign$gV = (undefined && undefined.__assign) || function () {
	    __assign$gV = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gV.apply(this, arguments);
	};
	var __rest$24 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var styles$e = bem("rmd-fab");
	/**
	 * This is a simple wrapper for the `Button` component that will conditionally
	 * render the `Button` in a `<span>` to render as a floating action button.
	 *
	 * Note: You probably don't really want to use this externally since this is
	 * really just required so that the click and focus states behavior will still
	 * be contained within the button. The states behavior requires
	 * `position: relative` to work while changing into a floating action button
	 * makes it `position: fixed`.
	 */
	var FAB = React.forwardRef(function FAB(_a, ref) {
	    var _b = _a.position, position = _b === void 0 ? null : _b, children = _a.children, className = _a.className, props = __rest$24(_a, ["position", "children", "className"]);
	    if (!position) {
	        return React__default['default'].createElement(React__default['default'].Fragment, null, children);
	    }
	    return (React__default['default'].createElement("span", __assign$gV({}, props, { ref: ref, className: cn(styles$e({
	            tl: position === "top-left",
	            tr: position === "top-right",
	            bl: position === "bottom-left",
	            br: position === "bottom-right",
	        }), className) }), children));
	});

	var __assign$gU = (undefined && undefined.__assign) || function () {
	    __assign$gU = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gU.apply(this, arguments);
	};
	var __rest$23 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * The `Button` component is a simple wrapper for the `<button>` element that
	 * defaults the `type` attribute to `"button"` so that it does not automatically
	 * submit forms by default. It also supports multiple themes, rendering as an
	 * icon button, or even as a floating action button.
	 *
	 * The default theme will be a clear text button unless the `floating` prop has
	 * been provided where it will render as an icon button by default instead.
	 */
	var Button = React.forwardRef(function Button(_a, ref) {
	    var _b = _a.type, type = _b === void 0 ? "button" : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, _d = _a.floating, floating = _d === void 0 ? null : _d, floatingProps = _a.floatingProps, _e = _a.theme, theme = _e === void 0 ? floating ? "secondary" : "clear" : _e, _f = _a.themeType, themeType = _f === void 0 ? floating ? "contained" : "flat" : _f, _g = _a.buttonType, buttonType = _g === void 0 ? floating ? "icon" : "text" : _g, propClassName = _a.className, children = _a.children, disableRipple = _a.disableRipple, disableProgrammaticRipple = _a.disableProgrammaticRipple, rippleTimeout = _a.rippleTimeout, rippleClassNames = _a.rippleClassNames, rippleClassName = _a.rippleClassName, rippleContainerClassName = _a.rippleContainerClassName, propEnablePressedAndRipple = _a.enablePressedAndRipple, disablePressedFallback = _a.disablePressedFallback, onClick = _a.onClick, onKeyUp = _a.onKeyUp, onKeyDown = _a.onKeyDown, onMouseUp = _a.onMouseUp, onMouseDown = _a.onMouseDown, onMouseLeave = _a.onMouseLeave, onTouchStart = _a.onTouchStart, onTouchMove = _a.onTouchMove, onTouchEnd = _a.onTouchEnd, props = __rest$23(_a, ["type", "disabled", "floating", "floatingProps", "theme", "themeType", "buttonType", "className", "children", "disableRipple", "disableProgrammaticRipple", "rippleTimeout", "rippleClassNames", "rippleClassName", "rippleContainerClassName", "enablePressedAndRipple", "disablePressedFallback", "onClick", "onKeyUp", "onKeyDown", "onMouseUp", "onMouseDown", "onMouseLeave", "onTouchStart", "onTouchMove", "onTouchEnd"]);
	    var enablePressedAndRipple = typeof propEnablePressedAndRipple === "boolean"
	        ? propEnablePressedAndRipple
	        : themeType === "contained";
	    var propHandlers = {
	        onClick: onClick,
	        onKeyUp: onKeyUp,
	        onKeyDown: onKeyDown,
	        onMouseUp: onMouseUp,
	        onMouseDown: onMouseDown,
	        onMouseLeave: onMouseLeave,
	        onTouchStart: onTouchStart,
	        onTouchMove: onTouchMove,
	        onTouchEnd: onTouchEnd,
	    };
	    var isDisabledTheme = theme === "disabled";
	    var _h = useInteractionStates({
	        handlers: propHandlers,
	        className: buttonThemeClassNames({
	            theme: theme,
	            themeType: themeType,
	            buttonType: buttonType,
	            disabled: disabled,
	            className: propClassName,
	        }),
	        disabled: disabled || isDisabledTheme,
	        disableRipple: disableRipple,
	        disableProgrammaticRipple: disableProgrammaticRipple,
	        disablePressedFallback: disablePressedFallback,
	        rippleTimeout: rippleTimeout,
	        rippleClassNames: rippleClassNames,
	        rippleClassName: rippleClassName,
	        rippleContainerClassName: rippleContainerClassName,
	        enablePressedAndRipple: enablePressedAndRipple,
	    }), ripples = _h.ripples, className = _h.className, handlers = _h.handlers;
	    return (React__default['default'].createElement(FAB, __assign$gU({ position: floating }, floatingProps),
	        React__default['default'].createElement("button", __assign$gU({ "aria-disabled": isDisabledTheme || undefined }, props, (isDisabledTheme ? undefined : handlers), { ref: ref, type: type, className: className, disabled: disabled }),
	            children,
	            ripples)));
	});

	var __assign$gT = (undefined && undefined.__assign) || function () {
	    __assign$gT = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gT.apply(this, arguments);
	};
	var __rest$22 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * The unstyled button is a really simple button element that resets the default
	 * browser button styles into a clear clickable element.
	 */
	var UnstyledButton = React.forwardRef(function UnstyledButton(_a, ref) {
	    var className = _a.className, children = _a.children, props = __rest$22(_a, ["className", "children"]);
	    return (React__default['default'].createElement("button", __assign$gT({}, props, { type: "button", ref: ref, className: cn("rmd-button-unstyled", className) }), children));
	});

	var __assign$gS = (undefined && undefined.__assign) || function () {
	    __assign$gS = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gS.apply(this, arguments);
	};
	var __rest$21 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	function getId(snackbarId, toastId, actionId) {
	    if (actionId) {
	        return actionId;
	    }
	    if (toastId) {
	        return toastId + "-action";
	    }
	    return snackbarId + "-action";
	}
	/**
	 * Because the toast renderer is a callback function instead of a React
	 * component, it's actually required to create a separate component instance so
	 * that the context API can be
	 *
	 * @internal
	 */
	function SnackbarQueueT(_a, ref) {
	    var queue = _a.queue, onActionClick = _a.onActionClick, props = __rest$21(_a, ["queue", "onActionClick"]);
	    var toast = queue[0];
	    var visible = useMessageVisibility();
	    var _b = useMessageQueueActions(), popMessage = _b.popMessage, hideMessage = _b.hideMessage, startTimer = _b.startTimer;
	    var content = null;
	    if (toast) {
	        var snackbarId = props.id;
	        var toastId = toast.id;
	        toast.messageId; toast.messagePriority; var _c = toast.disableAutohide, disableAutohide = _c === void 0 ? false : _c, _d = toast.disableActionHide, disableActionHide_1 = _d === void 0 ? false : _d, providedAction = toast.action, toastProps = __rest$21(toast, ["messageId", "messagePriority", "disableAutohide", "disableActionHide", "action"]);
	        var action = null;
	        if (providedAction) {
	            var actionProps_1 = providedAction;
	            var onClick = function (event) {
	                if (onActionClick) {
	                    onActionClick(toast, event);
	                }
	                if (actionProps_1.onClick) {
	                    actionProps_1.onClick(event);
	                }
	                if (!disableActionHide_1) {
	                    hideMessage();
	                }
	            };
	            var t = typeof providedAction;
	            if (React.isValidElement(providedAction) || t !== "object") {
	                action = (React__default['default'].createElement(Button, { id: getId(snackbarId, toastId, undefined), onClick: onClick, theme: "secondary" }, providedAction));
	            }
	            else {
	                action = (React__default['default'].createElement(Button, __assign$gS({ id: getId(snackbarId, toastId, actionProps_1.id), theme: "secondary" }, actionProps_1, { onClick: onClick })));
	            }
	        }
	        content = (React__default['default'].createElement(Toast, __assign$gS({}, toastProps, { action: action, visible: visible, onEntered: disableAutohide ? undefined : startTimer, onExited: popMessage })));
	    }
	    return (React__default['default'].createElement(Snackbar, __assign$gS({}, props, { ref: ref }), content));
	}
	var SnackbarQueue = React.forwardRef(SnackbarQueueT);

	/**
	 * This hook is used to pause the exit timeout if the user blurs the window
	 * while a toast is visible and the autohide functionality is not disabled. If
	 * this functionality is not added, messages and alerts might be missed by the
	 * user since they minimized the browser or viewing something on a second
	 * screen.
	 *
	 * @internal
	 */
	function useWindowBlurPause(_a) {
	    var startTimer = _a.startTimer, stopTimer = _a.stopTimer, visible = _a.visible, message = _a.message, _b = _a.disabled, disabled = _b === void 0 ? false : _b;
	    React.useEffect(function () {
	        if (disabled || !visible || !message || message.disableAutohide) {
	            return;
	        }
	        var handleFocusEvent = function (event) {
	            if (event.type === "focus") {
	                startTimer();
	            }
	            else {
	                stopTimer();
	            }
	        };
	        window.addEventListener("blur", handleFocusEvent);
	        window.addEventListener("focus", handleFocusEvent);
	        return function () {
	            window.removeEventListener("blur", handleFocusEvent);
	            window.removeEventListener("focus", handleFocusEvent);
	        };
	    }, [disabled, startTimer, stopTimer, visible, message]);
	}

	var __spreadArray$7 = (undefined && undefined.__spreadArray) || function (to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	};
	var ADD_MESSAGE = "ADD_MESSAGE";
	var POP_MESSAGE = "POP_MESSAGE";
	var RESET_QUEUE = "RESET_QUEUE";
	/**
	 * @internal
	 */
	var popMessage = function () { return ({ type: POP_MESSAGE }); };
	/**
	 * @internal
	 */
	var resetQueue = function () { return ({ type: RESET_QUEUE }); };
	/**
	 * This function is used to update the message queue state by adding a new
	 * message when needed.
	 *
	 * @internal
	 */
	function handleAddMessage(state, message, duplicates) {
	    if (state.length === 0) {
	        return [message];
	    }
	    var messageId = message.messageId, _a = message.messagePriority, messagePriority = _a === void 0 ? "normal" : _a;
	    var i = state.findIndex(function (mes) { return mes.messageId === messageId; });
	    var isNext = messagePriority === "next";
	    var isNormal = messagePriority === "normal";
	    var isReplace = messagePriority === "replace";
	    var isImmediate = messagePriority === "immediate";
	    var isDuplicable = duplicates === "allow";
	    var isRestart = duplicates === "restart";
	    if (isNext || isImmediate) {
	        var nextState = state.slice();
	        // remove the existing message if duplicated messages aren't allowed. This
	        // will kind of act like a replace + next behavior
	        if (!isDuplicable && i > 0) {
	            nextState.splice(i, 1);
	        }
	        var current = nextState[0], remaining = nextState.slice(1);
	        if (isImmediate && current.messagePriority !== "immediate") {
	            return __spreadArray$7([current, message, current], remaining);
	        }
	        return __spreadArray$7([current, message], remaining);
	    }
	    if (i === -1 || (isDuplicable && isNormal)) {
	        return __spreadArray$7(__spreadArray$7([], state), [message]);
	    }
	    if (isNormal) {
	        if (isRestart) {
	            // creating a new state so that the queue visibility hook can still be
	            // triggered which will restart the timer
	            return state.slice();
	        }
	        return state;
	    }
	    if (isReplace) {
	        var nextState = state.slice();
	        nextState[i] = message;
	        return nextState;
	    }
	    return __spreadArray$7(__spreadArray$7([], state), [message]);
	}
	/**
	 * @internal
	 */
	function reducer$1(state, action) {
	    switch (action.type) {
	        case ADD_MESSAGE:
	            return handleAddMessage(state, action.message, action.duplicates);
	        case POP_MESSAGE:
	            return state.length ? state.slice(1) : state;
	        case RESET_QUEUE:
	            return state.length ? [] : state;
	        default:
	            return state;
	    }
	}
	/**
	 * This is the main logic for the message queue behavior that will handle:
	 *
	 * - creating timeouts as needed to show/hide toasts within the `SnackbarQueue`
	 *   component
	 * - create a way to push messages with optional priority onto the queue
	 *
	 * @internal
	 */
	function useMessageQueue(_a) {
	    var _b = _a.timeout, timeout = _b === void 0 ? DEFAULT_MESSAGE_QUEUE_TIMEOUT : _b, _c = _a.duplicates, duplicates = _c === void 0 ? "allow" : _c, _d = _a.defaultQueue, defaultQueue = _d === void 0 ? [] : _d;
	    var _e = React.useReducer(function (state, action) { return reducer$1(state, action); }, defaultQueue), queue = _e[0], dispatch = _e[1];
	    var queueRef = React.useRef(queue);
	    var addMessageDispatch = React.useCallback(function (message) {
	        if (duplicates !== "allow" && !message.messageId) {
	            throw new Error("A messageId is required when the \"" + duplicates + "\" duplicate behavior is enabled but it was not provided in the current message.");
	        }
	        dispatch({ type: ADD_MESSAGE, message: message, duplicates: duplicates });
	    }, [duplicates]);
	    var popMessageDispatch = React.useCallback(function () {
	        dispatch(popMessage());
	    }, []);
	    var resetQueueDispatch = React.useCallback(function () {
	        dispatch(resetQueue());
	        return queueRef.current;
	    }, []);
	    var _f = useToggle(defaultQueue.length > 0), visible = _f[0], showMessage = _f[1], hideMessage = _f[2];
	    var _g = useTimeout(hideMessage, timeout), startTimer = _g[0], stopTimer = _g[1], restartTimer = _g[2];
	    React.useEffect(function () {
	        // this effect will handle all the "logic" for transitioning between each
	        // message along with the message priority updates.
	        var message = queue[0], nextMessage = queue[1];
	        if (!message) {
	            return;
	        }
	        var prevQueue = queueRef.current;
	        var prevMessage = prevQueue[0];
	        if (message.messagePriority !== "immediate" &&
	            nextMessage &&
	            nextMessage.messagePriority === "immediate") {
	            stopTimer();
	            if (!visible) {
	                popMessageDispatch();
	                return;
	            }
	            hideMessage();
	            return;
	        }
	        if (!visible) {
	            showMessage();
	        }
	        if (queue.length === prevQueue.length && message === prevMessage) {
	            restartTimer();
	        }
	        // only want to run this on queue changes
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, [queue]);
	    useWindowBlurPause({
	        startTimer: startTimer,
	        stopTimer: stopTimer,
	        visible: visible,
	        message: queue[0],
	    });
	    React.useEffect(function () {
	        queueRef.current = queue;
	    });
	    return {
	        queue: queue,
	        resetQueue: resetQueueDispatch,
	        visible: visible,
	        hideMessage: hideMessage,
	        addMessage: addMessageDispatch,
	        popMessage: popMessageDispatch,
	        startTimer: startTimer,
	        stopTimer: stopTimer,
	        restartTimer: restartTimer,
	    };
	}

	var __assign$gR = (undefined && undefined.__assign) || function () {
	    __assign$gR = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gR.apply(this, arguments);
	};
	var __rest$20 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This component is used to be able to create a queue of messages with the
	 * `Snackbar` and `Toast` components with a _fairly_ decent API out of the box.
	 */
	function MessageQueue(_a) {
	    var _b = _a.timeout, timeout = _b === void 0 ? 5000 : _b, _c = _a.duplicates, duplicates = _c === void 0 ? "allow" : _c, _d = _a.defaultQueue, defaultQueue = _d === void 0 ? [] : _d, children = _a.children, props = __rest$20(_a, ["timeout", "duplicates", "defaultQueue", "children"]);
	    var _e = useMessageQueue({ timeout: timeout, duplicates: duplicates, defaultQueue: defaultQueue }), queue = _e.queue, visible = _e.visible, hideMessage = _e.hideMessage, startTimer = _e.startTimer, stopTimer = _e.stopTimer, restartTimer = _e.restartTimer, addMessage = _e.addMessage, popMessage = _e.popMessage, resetQueue = _e.resetQueue;
	    var actions = React.useMemo(function () { return ({
	        popMessage: popMessage,
	        hideMessage: hideMessage,
	        startTimer: startTimer,
	        stopTimer: stopTimer,
	        resetQueue: resetQueue,
	        restartTimer: restartTimer,
	    }); }, [popMessage, hideMessage, startTimer, stopTimer, restartTimer, resetQueue]);
	    return (React__default['default'].createElement(AddMessageContext.Provider, { value: addMessage },
	        React__default['default'].createElement(MessageQueueActionsContext.Provider, { value: actions },
	            React__default['default'].createElement(MessageVisibilityContext.Provider, { value: visible },
	                React__default['default'].createElement(MessageQueueContext.Provider, { value: queue }, children),
	                React__default['default'].createElement(SnackbarQueue, __assign$gR({}, props, { queue: queue }))))));
	}

	/**
	 * Boolean if the child components should inherit the color of the app bar.
	 * @internal
	 */
	var InheritContext = React.createContext(false);
	/**
	 * This is probably a bit overkill... but this is used so that all the AppBar
	 * child components can automatically inherit the base color as needed within an
	 * AppBar. If the `inheritColor` prop was provided to the component, that value
	 * will be used instead.
	 *
	 * @param inheritColor - The prop inheritColor for the component
	 * @returns true if the color should be inherited.
	 * @internal
	 */
	function useInheritContext(inheritColor) {
	    var inheritContext = React.useContext(InheritContext);
	    return typeof inheritColor === "boolean" ? inheritColor : inheritContext;
	}
	/**
	 * Boolean if there is a parent app bar. The theme colors will be inherited from
	 * the parent app bar instead of the current app bar for these cases since
	 * nested app bars usually happen with prominent toolbars and the root app bar
	 * defines the theme.
	 *
	 * @internal
	 */
	var ParentContext = React.createContext(false);
	/**
	 *
	 * @internal
	 */
	function useParentContext() {
	    return React.useContext(ParentContext);
	}

	var __assign$gQ = (undefined && undefined.__assign) || function () {
	    __assign$gQ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gQ.apply(this, arguments);
	};
	var __rest$1$ = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$17 = bem("rmd-app-bar");
	/**
	 * This component is used to create a top-level app bar in your application that
	 * can be used to contain a navigation menu toggle button, the app's logo and/or
	 * title, as well as any top-level actions that will be reused throughout your
	 * app. When using this component with the `fixed` prop, it is recommended to
	 * also use one of the "offset class names" so that your content will not be
	 * converted by the app bar. You can also use any of the exposed mixins to add
	 * these offsets as well.
	 */
	var AppBar = React.forwardRef(function AppBar(_a, ref) {
	    var _b;
	    var className = _a.className, children = _a.children, _c = _a.theme, propTheme = _c === void 0 ? "primary" : _c, _d = _a.component, propComponent = _d === void 0 ? "header" : _d, _e = _a.height, height = _e === void 0 ? "normal" : _e, _f = _a.fixed, fixed = _f === void 0 ? false : _f, _g = _a.fixedPosition, fixedPosition = _g === void 0 ? "top" : _g, _h = _a.fixedElevation, fixedElevation = _h === void 0 ? true : _h, inheritColor = _a.inheritColor, _j = _a.flexWrap, flexWrap = _j === void 0 ? height === "none" ||
	        height === "prominent" ||
	        height === "prominent-dense" : _j, remaining = __rest$1$(_a, ["className", "children", "theme", "component", "height", "fixed", "fixedPosition", "fixedElevation", "inheritColor", "flexWrap"]);
	    var parentContext = useParentContext();
	    var inheritContext = useInheritContext(undefined);
	    var inherit;
	    var theme = propTheme;
	    var Component = propComponent;
	    if (typeof inheritColor === "boolean") {
	        inherit = inheritColor;
	    }
	    else if (parentContext) {
	        inherit = inheritContext;
	        theme = "clear";
	        Component = "div";
	    }
	    else {
	        inherit = theme !== "clear" && theme !== "default";
	    }
	    return (React__default['default'].createElement(ParentContext.Provider, { value: true },
	        React__default['default'].createElement(InheritContext.Provider, { value: inherit },
	            React__default['default'].createElement(Component, __assign$gQ({}, remaining, { className: cn(block$17((_b = {},
	                    _b[theme] = theme !== "clear",
	                    _b[height] = height !== "none",
	                    _b.wrap = flexWrap,
	                    _b.fixed = fixed,
	                    _b[fixedPosition] = fixed,
	                    _b["fixed-elevation"] = fixed && fixedElevation,
	                    _b)), className), ref: ref }), children))));
	});

	var __assign$gP = (undefined && undefined.__assign) || function () {
	    __assign$gP = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gP.apply(this, arguments);
	};
	var __rest$1_ = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$16 = bem("rmd-app-bar");
	/**
	 * This component is used to create a title for your application. If your app is
	 * not using the `AppBarNav` component, you can enable the `keyline` prop to
	 * ensure that your title aligns with the keyline of your navigation element.
	 */
	var AppBarTitle = React.forwardRef(function AppBarTitle(_a, ref) {
	    var _b = _a.noWrap, noWrap = _b === void 0 ? true : _b, _c = _a.keyline, keyline = _c === void 0 ? false : _c, className = _a.className, children = _a.children, inheritColor = _a.inheritColor, props = __rest$1_(_a, ["noWrap", "keyline", "className", "children", "inheritColor"]);
	    return (React__default['default'].createElement("h6", __assign$gP({}, props, { ref: ref, className: cn(block$16("title", {
	            "no-wrap": noWrap,
	            keyline: keyline,
	            inherit: useInheritContext(inheritColor),
	        }), className) }), children));
	});

	var __assign$gO = (undefined && undefined.__assign) || function () {
	    __assign$gO = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gO.apply(this, arguments);
	};
	var __rest$1Z = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$15 = bem("rmd-app-bar");
	/**
	 * This component is really just a simple wrapper for the `Button` component
	 * that adds some additional styles for adding spacing before and after this
	 * button so that it aligns to the main "keyline" of your application's
	 * navigation. In simpler terms, it will make the left side of the icon in this
	 * button aligns with all the other icons that appear in `ListItem`s in your
	 * main navigation.
	 *
	 * This component is generally really only used when you want to have a
	 * temporary navigation element like a hamburger menu.
	 */
	var AppBarNav = React.forwardRef(function AppBarNav(_a, ref) {
	    var className = _a.className, children = _a.children, inheritColor = _a.inheritColor, floating = _a.floating, _b = _a.theme, theme = _b === void 0 ? floating ? "secondary" : "clear" : _b, _c = _a.buttonType, buttonType = _c === void 0 ? "icon" : _c, props = __rest$1Z(_a, ["className", "children", "inheritColor", "floating", "theme", "buttonType"]);
	    return (React__default['default'].createElement(Button, __assign$gO({}, props, { theme: theme, floating: floating, buttonType: buttonType, ref: ref, className: cn(block$15("nav", {
	            inherit: useInheritContext(inheritColor),
	        }), className) }), children));
	});

	var block$14 = bem("rmd-app-bar");
	/**
	 * This is a hook that will apply the nav classnames to an element. This should
	 * really not be used externally and is really just for creating dropdown menus
	 * within app bars that have the action styles.
	 *
	 * @internal
	 */
	function useActionClassName(_a) {
	    var _b = _a === void 0 ? {} : _a, first = _b.first, last = _b.last, inheritColor = _b.inheritColor, className = _b.className;
	    return cn(block$14("action", {
	        first: first,
	        last: last,
	        inherit: useInheritContext(inheritColor),
	    }), className);
	}

	var __assign$gN = (undefined && undefined.__assign) || function () {
	    __assign$gN = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gN.apply(this, arguments);
	};
	var __rest$1Y = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This component is really just a simple wrapper for the `Button` component
	 * that adds a few additional styles to prevent the button from shrinking when
	 * an `AppBar` has a lot of content.  It also will automatically add spacing
	 * either before or after this button when the `first` or `last` props are
	 * provided.
	 */
	var AppBarAction = React.forwardRef(function AppBarAction(_a, ref) {
	    var className = _a.className, _b = _a.first, first = _b === void 0 ? false : _b, _c = _a.last, last = _c === void 0 ? false : _c, children = _a.children, inheritColor = _a.inheritColor, floating = _a.floating, _d = _a.theme, theme = _d === void 0 ? floating ? "secondary" : "clear" : _d, _e = _a.buttonType, buttonType = _e === void 0 ? "icon" : _e, props = __rest$1Y(_a, ["className", "first", "last", "children", "inheritColor", "floating", "theme", "buttonType"]);
	    return (React__default['default'].createElement(Button, __assign$gN({}, props, { theme: theme, buttonType: buttonType, floating: floating, ref: ref, className: useActionClassName({ first: first, last: last, inheritColor: inheritColor, className: className }) }), children));
	});

	/**
	 * A classname to apply to an element that should be offset either with padding
	 * or margin by the height of a normal App Bar.
	 */
	var APP_BAR_OFFSET_CLASSNAME = "rmd-app-bar-offset";
	/**
	 * A classname to apply to an element that should be offset either with padding
	 * or margin by the height of a dense App Bar.
	 */
	var APP_BAR_OFFSET_DENSE_CLASSNAME = "rmd-app-bar-offset--dense";
	/**
	 * A classname to apply to an element that should be offset either with padding
	 * or margin by the height of a prominent App Bar.
	 */
	var APP_BAR_OFFSET_PROMINENT_CLASSNAME = "rmd-app-bar-offset--prominent";
	/**
	 * A classname to apply to an element that should be offset either with padding
	 * or margin by the height of a prominent and dense App Bar.
	 */
	var APP_BAR_OFFSET_PROMINENT_DENSE_CLASSNAME = "rmd-app-bar-offset--prominent-dense";

	var __assign$gM = (undefined && undefined.__assign) || function () {
	    __assign$gM = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gM.apply(this, arguments);
	};
	var __rest$1X = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This is probably one of the least useful components available as it doesn't
	 * do much styling or logic. All this form component will do is add basic flex
	 * behavior and prevent the default form submit behavior.
	 */
	var Form = React.forwardRef(function Form(_a, ref) {
	    var children = _a.children, _b = _a.disablePreventDefault, disablePreventDefault = _b === void 0 ? false : _b, onSubmit = _a.onSubmit, props = __rest$1X(_a, ["children", "disablePreventDefault", "onSubmit"]);
	    var handleOnSubmit = React.useCallback(function (event) {
	        if (!disablePreventDefault) {
	            event.preventDefault();
	        }
	        if (onSubmit) {
	            onSubmit(event);
	        }
	    }, [disablePreventDefault, onSubmit]);
	    return (React__default['default'].createElement("form", __assign$gM({}, props, { onSubmit: handleOnSubmit, ref: ref }), children));
	});

	var __assign$gL = (undefined && undefined.__assign) || function () {
	    __assign$gL = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gL.apply(this, arguments);
	};
	var __rest$1W = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$13 = bem("rmd-fieldset");
	/**
	 * This is a simple wrapper for the `<fieldset>` that defaults to removing
	 * the default styles of a border, padding, and margin and having a screen-reader
	 * visible only legend element for added accessibility.
	 */
	var Fieldset = React.forwardRef(function Fieldset(_a, ref) {
	    var className = _a.className, legend = _a.legend, legendStyle = _a.legendStyle, legendClassName = _a.legendClassName, _b = _a.legendSROnly, legendSROnly = _b === void 0 ? false : _b, _c = _a.unstyled, unstyled = _c === void 0 ? true : _c, children = _a.children, props = __rest$1W(_a, ["className", "legend", "legendStyle", "legendClassName", "legendSROnly", "unstyled", "children"]);
	    return (React__default['default'].createElement("fieldset", __assign$gL({}, props, { ref: ref, className: cn(block$13({ unstyled: unstyled }), className) }),
	        React__default['default'].createElement("legend", { style: legendStyle, className: cn(block$13("legend", { "sr-only": legendSROnly }), legendClassName) }, legend),
	        children));
	});

	var context$8 = React.createContext({
	    theme: "outline",
	    underlineDirection: "left",
	});
	/**
	 * Gets the current theme values for a form component by inheriting the current
	 * form theme via context. If you provide an object of theme props, the returned
	 * value will use any defined values from the theme props and fallback to the
	 * context value.
	 *
	 * Example:
	 * ```ts
	 * // everything is inherited
	 * const formTheme = useFormTheme();
	 *
	 * // theme will be set to "underline" while the others will be inherited
	 * const formTheme = useFormTheme({ theme: "underline" });
	 * ```
	 */
	function useFormTheme(options) {
	    if (options === void 0) { options = {}; }
	    var formTheme = React.useContext(context$8);
	    var theme = options.theme, underlineDirection = options.underlineDirection;
	    theme = theme !== null && theme !== void 0 ? theme : formTheme.theme;
	    underlineDirection = underlineDirection !== null && underlineDirection !== void 0 ? underlineDirection : formTheme.underlineDirection;
	    return {
	        theme: theme,
	        underlineDirection: underlineDirection,
	    };
	}
	var Provider$4 = context$8.Provider;
	/**
	 * Since you'll normally want all of your form components to use the same theme,
	 * this is a simple way to provide the same theme to all components without
	 * needing all the prop-drilling/copying.
	 */
	function FormThemeProvider(_a) {
	    var _b = _a.theme, theme = _b === void 0 ? "outline" : _b, _c = _a.underlineDirection, underlineDirection = _c === void 0 ? "left" : _c, children = _a.children;
	    var value = React.useMemo(function () { return ({ theme: theme, underlineDirection: underlineDirection }); }, [
	        theme,
	        underlineDirection,
	    ]);
	    return React__default['default'].createElement(Provider$4, { value: value }, children);
	}

	var __assign$gK = (undefined && undefined.__assign) || function () {
	    __assign$gK = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gK.apply(this, arguments);
	};
	var __rest$1V = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$12 = bem("rmd-form-message");
	/**
	 * The `FormMessage` component is used to create additional helper messages or
	 * error messages and generally placed below the related `TextField`. If a
	 * `length` (of the `value`) and `maxLength` are provided, a counter will also
	 * be displayed to the right of the `children`.
	 *
	 * This component can also be used to create form-level validation messages by
	 * setting the `role` prop to `"alert"`.
	 */
	var FormMessage = React.forwardRef(function FormMessage(_a, ref) {
	    var _b;
	    var id = _a.id, role = _a.role, className = _a.className, counterStyle = _a.counterStyle, counterClassName = _a.counterClassName, messageStyle = _a.messageStyle, messageClassName = _a.messageClassName, _c = _a.error, error = _c === void 0 ? false : _c, _d = _a.disableWrap, disableWrap = _d === void 0 ? false : _d, propTheme = _a.theme, children = _a.children, length = _a.length, maxLength = _a.maxLength, props = __rest$1V(_a, ["id", "role", "className", "counterStyle", "counterClassName", "messageStyle", "messageClassName", "error", "disableWrap", "theme", "children", "length", "maxLength"]);
	    var theme = useFormTheme({ theme: propTheme }).theme;
	    var message = children;
	    if (!disableWrap && children) {
	        message = (React__default['default'].createElement("p", { id: id + "-message", style: messageStyle, className: cn(block$12("message"), messageClassName) }, children));
	    }
	    return (React__default['default'].createElement("div", __assign$gK({}, props, { id: id, ref: ref, "aria-live": role !== "alert" ? "polite" : undefined, role: role, className: cn(block$12((_b = {
	                error: error
	            },
	            _b[theme] = theme !== "none",
	            _b)), className) }),
	        message,
	        typeof length === "number" && typeof maxLength === "number" && (React__default['default'].createElement("span", { id: id + "-counter", style: counterStyle, className: cn(block$12("counter"), counterClassName) }, length + " / " + maxLength))));
	});

	var __assign$gJ = (undefined && undefined.__assign) || function () {
	    __assign$gJ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gJ.apply(this, arguments);
	};
	var __rest$1U = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * A wrapper component that can be used to display a `TextField` related
	 * component or `TextArea` along with the `FormMessage` component.
	 *
	 * @remarks \@since 2.5.0
	 */
	var FormMessageContainer = React.forwardRef(function FormMessageContainer(_a, ref) {
	    var className = _a.className, children = _a.children, messageProps = _a.messageProps, props = __rest$1U(_a, ["className", "children", "messageProps"]);
	    if (!messageProps) {
	        return React__default['default'].createElement(React__default['default'].Fragment, null, children);
	    }
	    return (React__default['default'].createElement("div", __assign$gJ({}, props, { ref: ref, className: cn("rmd-field-message-container", className) }),
	        children,
	        React__default['default'].createElement(FormMessage, __assign$gJ({}, messageProps))));
	});

	var __assign$gI = (undefined && undefined.__assign) || function () {
	    __assign$gI = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gI.apply(this, arguments);
	};
	var __rest$1T = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$11 = bem("rmd-icon");
	/**
	 * The `FontIcon` component is used for rendering a font-icon library's icon.
	 * The default is to use the `material-icons` library, but others can be used as
	 * well.
	 *
	 * If you are using another font icon library that does not always create icons
	 * with a perfect 1:1 scale (such as font awesome), it is recommended to use the
	 * `forceSize` and `forceFontSize` props to fix the sizing issues.
	 */
	var FontIcon = React.forwardRef(function FontIcon(_a, ref) {
	    var className = _a.className, children = _a.children, _b = _a["aria-hidden"], ariaHidden = _b === void 0 ? true : _b, _c = _a.dense, dense = _c === void 0 ? false : _c, _d = _a.iconClassName, iconClassName = _d === void 0 ? "material-icons" : _d, _e = _a.forceSize, forceSize = _e === void 0 ? false : _e, _f = _a.forceFontSize, forceFontSize = _f === void 0 ? false : _f, props = __rest$1T(_a, ["className", "children", "aria-hidden", "dense", "iconClassName", "forceSize", "forceFontSize"]);
	    return (React__default['default'].createElement("i", __assign$gI({}, props, { "aria-hidden": ariaHidden, ref: ref, className: cn(block$11({
	            font: true,
	            dense: dense,
	            "forced-font": forceFontSize,
	            "forced-size": forceSize,
	        }), iconClassName, className) }), children));
	});

	var __assign$gH = (undefined && undefined.__assign) || function () {
	    __assign$gH = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gH.apply(this, arguments);
	};
	var __rest$1S = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$10 = bem("rmd-icon");
	/**
	 * The `SVGIcon` component is used to render inline SVG icons or SVG icons in a
	 * sprite map as an icon.
	 */
	var SVGIcon = React.forwardRef(function SVGIcon(_a, ref) {
	    var _b = _a["aria-hidden"], ariaHidden = _b === void 0 ? true : _b, _c = _a.focusable, focusable = _c === void 0 ? "false" : _c, _d = _a.xmlns, xmlns = _d === void 0 ? "http://www.w3.org/2000/svg" : _d, _e = _a.viewBox, viewBox = _e === void 0 ? "0 0 24 24" : _e, _f = _a.dense, dense = _f === void 0 ? false : _f, className = _a.className, use = _a.use, propChildren = _a.children, props = __rest$1S(_a, ["aria-hidden", "focusable", "xmlns", "viewBox", "dense", "className", "use", "children"]);
	    var children = propChildren;
	    if (!children && use) {
	        children = React__default['default'].createElement("use", { xlinkHref: use });
	    }
	    return (React__default['default'].createElement("svg", __assign$gH({}, props, { "aria-hidden": ariaHidden, ref: ref, className: cn(block$10({ svg: true, dense: dense }), className), focusable: focusable, xmlns: xmlns, viewBox: viewBox }), children));
	});

	function TextIconSpacing(_a) {
	    var _b;
	    var className = _a.className, propIcon = _a.icon, _c = _a.children, children = _c === void 0 ? null : _c, _d = _a.stacked, stacked = _d === void 0 ? false : _d, _e = _a.iconAfter, iconAfter = _e === void 0 ? false : _e, _f = _a.flexReverse, flexReverse = _f === void 0 ? false : _f, _g = _a.forceIconWrap, forceIconWrap = _g === void 0 ? false : _g, _h = _a.beforeClassName, beforeClassName = _h === void 0 ? "rmd-icon--before" : _h, _j = _a.afterClassName, afterClassName = _j === void 0 ? "rmd-icon--after" : _j, _k = _a.aboveClassName, aboveClassName = _k === void 0 ? "rmd-icon--above" : _k, _l = _a.belowClassName, belowClassName = _l === void 0 ? "rmd-icon--below" : _l;
	    if (!propIcon) {
	        return React__default['default'].createElement(React__default['default'].Fragment, null, children);
	    }
	    var isAfter = flexReverse ? !iconAfter : iconAfter;
	    var baseClassName = cn((_b = {},
	        _b[beforeClassName] = !stacked && !isAfter,
	        _b[afterClassName] = !stacked && isAfter,
	        _b[aboveClassName] = stacked && !isAfter,
	        _b[belowClassName] = stacked && isAfter,
	        _b), className);
	    var iconEl = propIcon;
	    var content = children;
	    if (!forceIconWrap && React.isValidElement(propIcon)) {
	        var icon = React.Children.only(propIcon);
	        iconEl = React.cloneElement(icon, {
	            className: cn(baseClassName, icon.props.className),
	        });
	    }
	    else if (propIcon) {
	        iconEl = (React__default['default'].createElement("span", { className: cn("rmd-text-icon-spacing", baseClassName) }, propIcon));
	    }
	    if (iconEl) {
	        content = (React__default['default'].createElement(React__default['default'].Fragment, null,
	            !iconAfter && iconEl,
	            children,
	            iconAfter && iconEl));
	    }
	    return React__default['default'].createElement(React__default['default'].Fragment, null, content);
	}

	var __assign$gG = (undefined && undefined.__assign) || function () {
	    __assign$gG = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gG.apply(this, arguments);
	};
	var __rest$1R = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$$ = bem("rmd-icon-rotator");
	/**
	 * The `IconRotator` is a simple component that is used to rotate an icon from a
	 * one degrees to another.
	 */
	var IconRotator = React.forwardRef(function IconRotator(_a, ref) {
	    var style = _a.style, propClassName = _a.className, _b = _a.animate, animate = _b === void 0 ? true : _b, rotated = _a.rotated, children = _a.children, _c = _a.forceIconWrap, forceIconWrap = _c === void 0 ? false : _c, props = __rest$1R(_a, ["style", "className", "animate", "rotated", "children", "forceIconWrap"]);
	    var className = cn(block$$({ animate: animate, rotated: rotated }), propClassName);
	    if (!forceIconWrap && React.isValidElement(children)) {
	        var child = React.Children.only(children);
	        return React.cloneElement(child, {
	            className: cn(className, child.props.className),
	        });
	    }
	    return (React__default['default'].createElement("span", __assign$gG({}, props, { style: style, className: className, ref: ref }), children));
	});

	var DEFAULT_ICONS = {
	    back: React__default['default'].createElement(FontIcon, null, "keyboard_arrow_left"),
	    checkbox: React__default['default'].createElement(FontIcon, null, "check_box"),
	    download: React__default['default'].createElement(FontIcon, null, "file_download"),
	    dropdown: React__default['default'].createElement(FontIcon, null, "arrow_drop_down"),
	    error: React__default['default'].createElement(FontIcon, null, "error_outline"),
	    expander: React__default['default'].createElement(FontIcon, null, "keyboard_arrow_down"),
	    forward: React__default['default'].createElement(FontIcon, null, "keyboard_arrow_right"),
	    menu: React__default['default'].createElement(FontIcon, null, "menu"),
	    notification: React__default['default'].createElement(FontIcon, null, "notifications"),
	    password: React__default['default'].createElement(FontIcon, null, "remove_red_eye"),
	    radio: React__default['default'].createElement(FontIcon, null, "radio_button_checked"),
	    selected: React__default['default'].createElement(FontIcon, null, "check"),
	    sort: React__default['default'].createElement(FontIcon, null, "arrow_upward"),
	};
	var context$7 = React.createContext(DEFAULT_ICONS);
	var Provider$3 = context$7.Provider;
	/**
	 * Gets one of the configured icons from the `IconProvider`. This is probably
	 * just for use within `react-md`, but might be helpful outside if you want to
	 * reuse the existing icon configuration for other custom components.
	 *
	 * If te second argument is provided and it is not `undefined`, that value will
	 * be used instead of the inherited icon type.
	 *
	 * @param name - The name of the icon you want to use.
	 * @param override - An optional override to use instead of the inherited icon.
	 * @returns The overridden icon value or the inherited icon.
	 */
	function useIcon(name, override) {
	    var icons = React.useContext(context$7);
	    if (typeof override !== "undefined") {
	        return override;
	    }
	    return icons[name];
	}
	/**
	 * The `IconProvider` component is used to override all the default icons within
	 * `react-md` with a newly defined set of icons. This is super nice since you
	 * won't need to create new component wrappers for all the components within
	 * `react-md` if you want to switch to SVG icons instead of the default font
	 * icons.
	 */
	function IconProvider(_a) {
	    var children = _a.children, _b = _a.back, back = _b === void 0 ? DEFAULT_ICONS.back : _b, _c = _a.checkbox, checkbox = _c === void 0 ? DEFAULT_ICONS.checkbox : _c, _d = _a.download, download = _d === void 0 ? DEFAULT_ICONS.download : _d, _e = _a.dropdown, dropdown = _e === void 0 ? DEFAULT_ICONS.dropdown : _e, _f = _a.expander, expander = _f === void 0 ? DEFAULT_ICONS.expander : _f, _g = _a.error, error = _g === void 0 ? DEFAULT_ICONS.error : _g, _h = _a.forward, forward = _h === void 0 ? DEFAULT_ICONS.forward : _h, _j = _a.menu, menu = _j === void 0 ? DEFAULT_ICONS.menu : _j, _k = _a.notification, notification = _k === void 0 ? DEFAULT_ICONS.notification : _k, _l = _a.password, password = _l === void 0 ? DEFAULT_ICONS.password : _l, _m = _a.radio, radio = _m === void 0 ? DEFAULT_ICONS.radio : _m, _o = _a.selected, selected = _o === void 0 ? DEFAULT_ICONS.selected : _o, _p = _a.sort, sort = _p === void 0 ? DEFAULT_ICONS.sort : _p;
	    var value = React.useMemo(function () { return ({
	        back: back,
	        checkbox: checkbox,
	        download: download,
	        dropdown: dropdown,
	        error: error,
	        expander: expander,
	        forward: forward,
	        menu: menu,
	        notification: notification,
	        password: password,
	        radio: radio,
	        selected: selected,
	        sort: sort,
	    }); }, [
	        back,
	        checkbox,
	        download,
	        dropdown,
	        error,
	        expander,
	        forward,
	        menu,
	        notification,
	        password,
	        radio,
	        selected,
	        sort,
	    ]);
	    return React__default['default'].createElement(Provider$3, { value: value }, children);
	}

	var __assign$gF = (undefined && undefined.__assign) || function () {
	    __assign$gF = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gF.apply(this, arguments);
	};
	var __rest$1Q = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	function getComponent(component, type) {
	    if (component) {
	        return component;
	    }
	    switch (type) {
	        case "headline-1":
	            return "h1";
	        case "headline-2":
	            return "h2";
	        case "headline-3":
	            return "h3";
	        case "headline-4":
	            return "h4";
	        case "headline-5":
	            return "h5";
	        case "headline-6":
	        case "subtitle-1":
	        case "subtitle-2":
	            return "h6";
	        case "body-1":
	        case "body-2":
	            return "p";
	        case "caption":
	            return "caption";
	        case "button":
	            return "button";
	        default:
	            return "span";
	    }
	}
	var block$_ = bem("rmd-typography");
	/**
	 * The `Text` component is used to render text with the material design
	 * typography styles applied.  By default, everything will be rendered in a
	 * `<p>` tag with the normal paragraph styles.
	 *
	 * When the `type` prop is changed to another typography style, this component
	 * will determine the "best" element to render the text in *unless* the
	 * `component` prop is provided. The default mapping is:
	 *
	 * - `"headline-1" -> <h1>`
	 * - `"headline-2" -> <h2>`
	 * - `"headline-3" -> <h3>`
	 * - `"headline-4" -> <h4>`
	 * - `"headline-5" -> <h5>`
	 * - `"headline-6" -> <h6>`
	 * - `"subtitle-1" -> <h5>`
	 * - `"subtitle-2" -> <h6>`
	 * - `"body-1"     -> <p>`
	 * - `"body-2"     -> <p>`
	 * - `"caption"    -> <caption>`
	 * - `"overline"   -> <span>`
	 * - `"button"     -> <button>`
	 *
	 * NOTE: if the `component` prop is not `null`, this logic will be ignored and
	 * the provided `component` will be used instead.
	 */
	var Text = React.forwardRef(function Text(_a, ref) {
	    var _b;
	    var propClassName = _a.className, children = _a.children, _c = _a.type, type = _c === void 0 ? "body-1" : _c, _d = _a.component, component = _d === void 0 ? null : _d, align = _a.align, color = _a.color, decoration = _a.decoration, transform = _a.transform, weight = _a.weight, fontStyle = _a.fontStyle, _e = _a.margin, margin = _e === void 0 ? "initial" : _e, props = __rest$1Q(_a, ["className", "children", "type", "component", "align", "color", "decoration", "transform", "weight", "fontStyle", "margin"]);
	    var className = cn(block$_((_b = {},
	        _b[type] = true,
	        _b["no-margin"] = margin === "none",
	        _b["no-margin-top"] = margin === "bottom",
	        _b["no-margin-bottom"] = margin === "top",
	        _b[align || ""] = align,
	        _b[decoration || ""] = decoration && decoration !== "overline",
	        _b[color || ""] = color,
	        // only because "overline" is technically one of the valid material design types :/
	        _b["overline-decoration"] = decoration === "overline",
	        _b[transform || ""] = transform,
	        _b[weight || ""] = weight,
	        _b[fontStyle || ""] = fontStyle,
	        _b)), propClassName);
	    if (typeof children === "function") {
	        return children({ className: className });
	    }
	    return React.createElement(getComponent(component, type), __assign$gF(__assign$gF({}, props), { className: className, ref: ref }), children);
	});

	var __assign$gE = (undefined && undefined.__assign) || function () {
	    __assign$gE = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gE.apply(this, arguments);
	};
	var __rest$1P = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var TextContainer = React.forwardRef(function TextContainer(_a, ref) {
	    var propClassName = _a.className, _b = _a.component, Component = _b === void 0 ? "div" : _b, _c = _a.size, size = _c === void 0 ? "auto" : _c, children = _a.children, clone = _a.clone, props = __rest$1P(_a, ["className", "component", "size", "children", "clone"]);
	    var className = cn("rmd-text-container rmd-text-container--" + size, propClassName);
	    if (clone && React.isValidElement(children)) {
	        var child = React.Children.only(children);
	        return React.cloneElement(child, {
	            className: cn(child.props.className, className),
	        });
	    }
	    if (typeof children === "function") {
	        return children({ className: className });
	    }
	    return (React__default['default'].createElement(Component, __assign$gE({}, props, { className: className, ref: ref }), children));
	});

	var __assign$gD = (undefined && undefined.__assign) || function () {
	    __assign$gD = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gD.apply(this, arguments);
	};
	var __rest$1O = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$Z = bem("rmd-sr-only");
	/**
	 * This component is used to create text that is only visible to screen readers.
	 * If you enable the `focusable` prop, the text will become visible to all users
	 * while focused.
	 */
	var SrOnly = React.forwardRef(function SrOnly(_a, ref) {
	    var className = _a.className, children = _a.children, _b = _a.focusable, focusable = _b === void 0 ? false : _b, propTabIndex = _a.tabIndex, _c = _a.component, component = _c === void 0 ? "span" : _c, props = __rest$1O(_a, ["className", "children", "focusable", "tabIndex", "component"]);
	    var tabIndex = propTabIndex;
	    if (focusable && typeof tabIndex === "undefined") {
	        tabIndex = 0;
	    }
	    return (React__default['default'].createElement(Text, __assign$gD({}, props, { ref: ref, tabIndex: tabIndex, component: component, className: cn(block$Z({ focusable: focusable }), className) }), children));
	});

	var __assign$gC = (undefined && undefined.__assign) || function () {
	    __assign$gC = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gC.apply(this, arguments);
	};
	var __rest$1N = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$Y = bem("rmd-file-input");
	/**
	 * This component is a wrapper for the `<input type="file" />` that can be themed
	 * like a button.
	 */
	var FileInput = React.forwardRef(function FileInput(_a, ref) {
	    var style = _a.style, propClassName = _a.className, propIcon = _a.icon, _b = _a.iconAfter, iconAfter = _b === void 0 ? false : _b, _c = _a.children, children = _c === void 0 ? React__default['default'].createElement(SrOnly, null, "Upload") : _c, _d = _a.theme, theme = _d === void 0 ? "primary" : _d, _e = _a.themeType, themeType = _e === void 0 ? "contained" : _e, _f = _a.buttonType, buttonType = _f === void 0 ? "icon" : _f, _g = _a.multiple, multiple = _g === void 0 ? false : _g, _h = _a.disableIconSpacing, disableIconSpacing = _h === void 0 ? false : _h, _j = _a.disableRepeatableFiles, disableRepeatableFiles = _j === void 0 ? false : _j, onKeyDown = _a.onKeyDown, onKeyUp = _a.onKeyUp, onMouseDown = _a.onMouseDown, onMouseUp = _a.onMouseUp, onMouseLeave = _a.onMouseLeave, onClick = _a.onClick, onTouchStart = _a.onTouchStart, onTouchMove = _a.onTouchMove, onTouchEnd = _a.onTouchEnd, onChange = _a.onChange, props = __rest$1N(_a, ["style", "className", "icon", "iconAfter", "children", "theme", "themeType", "buttonType", "multiple", "disableIconSpacing", "disableRepeatableFiles", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseUp", "onMouseLeave", "onClick", "onTouchStart", "onTouchMove", "onTouchEnd", "onChange"]);
	    var id = props.id, disabled = props.disabled;
	    var icon = useIcon("download", propIcon);
	    var _k = useInteractionStates({
	        handlers: {
	            onKeyDown: onKeyDown,
	            onKeyUp: onKeyUp,
	            onMouseDown: onMouseDown,
	            onMouseUp: onMouseUp,
	            onMouseLeave: onMouseLeave,
	            onClick: onClick,
	            onTouchStart: onTouchStart,
	            onTouchMove: onTouchMove,
	            onTouchEnd: onTouchEnd,
	        },
	        className: buttonThemeClassNames({
	            theme: theme,
	            themeType: themeType,
	            buttonType: buttonType,
	            disabled: disabled,
	            className: propClassName,
	        }),
	        // pressing enter or space would trigger two click events otherwise.
	        disableEnterClick: true,
	    }), ripples = _k.ripples, className = _k.className, handlers = _k.handlers;
	    var content = icon;
	    if (disableIconSpacing || (children && !icon)) {
	        content = (React__default['default'].createElement(React__default['default'].Fragment, null,
	            !iconAfter && icon,
	            children,
	            iconAfter && icon));
	    }
	    else if (children) {
	        content = (React__default['default'].createElement(TextIconSpacing, { icon: icon, iconAfter: iconAfter }, children));
	    }
	    return (React__default['default'].createElement(React__default['default'].Fragment, null,
	        React__default['default'].createElement("input", __assign$gC({}, props, handlers, { ref: ref, onChange: onChange, value: disableRepeatableFiles ? undefined : "", type: "file", className: block$Y(), multiple: multiple })),
	        React__default['default'].createElement("label", { htmlFor: id, style: style, className: cn("rmd-file-input-label", className) },
	            content,
	            ripples)));
	});

	var __assign$gB = (undefined && undefined.__assign) || function () {
	    __assign$gB = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gB.apply(this, arguments);
	};
	var __rest$1M = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var styles$d = bem("rmd-label");
	/**
	 * A simple util that can generate all the "valid" styles for a label. This
	 * shouldn't really be used, but it's useful if you want the label styles
	 * without rendering a `<label>` element.
	 *
	 * @remarks \@since 2.5.0
	 * @internal
	 */
	var labelStyles = function (_a) {
	    var _b = _a === void 0 ? {} : _a, _c = _b.error, error = _c === void 0 ? false : _c, _d = _b.active, active = _d === void 0 ? false : _d, _e = _b.disabled, disabled = _e === void 0 ? false : _e;
	    return styles$d({ error: error, active: active, disabled: disabled });
	};
	/**
	 * The `Label` component should be used alongside any form elements but is
	 * already built in to the majority of the `react-md` components by default.
	 */
	var Label = React.forwardRef(function Label(_a, ref) {
	    var htmlFor = _a.htmlFor, className = _a.className, _b = _a.error, error = _b === void 0 ? false : _b, _c = _a.active, active = _c === void 0 ? false : _c, _d = _a.disabled, disabled = _d === void 0 ? false : _d, _e = _a.component, Component = _e === void 0 ? "label" : _e, children = _a.children, props = __rest$1M(_a, ["htmlFor", "className", "error", "active", "disabled", "component", "children"]);
	    if (!children) {
	        return null;
	    }
	    return (React__default['default'].createElement(Component, __assign$gB({}, props, { ref: ref, className: cn(labelStyles({ error: error, active: active, disabled: disabled }), className), htmlFor: Component === "label" ? htmlFor : undefined }), children));
	});

	var __assign$gA = (undefined && undefined.__assign) || function () {
	    __assign$gA = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gA.apply(this, arguments);
	};
	var __rest$1L = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$X = bem("rmd-list");
	/**
	 * The `List` component creates an unstyled ordered or unordered list that
	 * should be used with the `ListItem`, `ListItemLink`, and `SimpleListItem`
	 * components.
	 */
	var List = React.forwardRef(function List(_a, ref) {
	    var _b = _a.role, role = _b === void 0 ? "none" : _b, _c = _a.dense, dense = _c === void 0 ? false : _c, _d = _a.ordered, ordered = _d === void 0 ? false : _d, _e = _a.horizontal, horizontal = _e === void 0 ? false : _e, className = _a.className, children = _a.children, props = __rest$1L(_a, ["role", "dense", "ordered", "horizontal", "className", "children"]);
	    var Component = (ordered ? "ol" : "ul");
	    return (React__default['default'].createElement(Component, __assign$gA({}, props, { ref: ref, role: role, className: cn(block$X({ dense: dense, horizontal: horizontal }), className) }), children));
	});

	/**
	 * Gets the expected height for the `ListItem` or `SimpleListItem` based on the
	 * addons and `secondaryText` props.
	 *
	 * Conversions:
	 *
	 * - height !== "auto" -&gt; height
	 * - secondaryText or left/right addon is media/media-large  -&gt; "extra-large"
	 * - left/right addon is avatar -&gt; "large"
	 * - left/right addon is icon -&gt; "medium"
	 * - no addons and no secondary text -&gt; "normal"
	 *
	 * @internal
	 */
	function getListItemHeight(_a) {
	    var _b = _a.height, height = _b === void 0 ? "auto" : _b, leftAddon = _a.leftAddon, _c = _a.leftAddonType, leftAddonType = _c === void 0 ? "icon" : _c, rightAddon = _a.rightAddon, _d = _a.rightAddonType, rightAddonType = _d === void 0 ? "icon" : _d, secondaryText = _a.secondaryText;
	    if (height !== "auto") {
	        return height;
	    }
	    var isIcon = (leftAddon && leftAddonType === "icon") ||
	        (rightAddon && rightAddonType === "icon");
	    var isAvatar = (leftAddon && leftAddonType === "avatar") ||
	        (rightAddon && rightAddonType === "avatar");
	    var isGraphic = (leftAddon &&
	        (leftAddonType === "media" || leftAddonType === "large-media")) ||
	        (rightAddon &&
	            (rightAddonType === "media" || rightAddonType === "large-media"));
	    // secondary text will always be extra large due to the default `line-height`
	    if (isGraphic || secondaryText) {
	        return "extra-large";
	    }
	    if (isAvatar) {
	        return "large";
	    }
	    if (isIcon) {
	        return "medium";
	    }
	    return "normal";
	}

	var __assign$gz = (undefined && undefined.__assign) || function () {
	    __assign$gz = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gz.apply(this, arguments);
	};
	var __rest$1K = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var base = bem("rmd-list-item");
	/**
	 * The `ListItemAddon` is used to create an addon to the left or right of the
	 * text/children of a `ListItem`.
	 */
	function ListItemAddon(_a) {
	    var _b;
	    var className = _a.className, children = _a.children, addon = _a.addon, _c = _a.addonAfter, addonAfter = _c === void 0 ? false : _c, _d = _a.type, type = _d === void 0 ? "icon" : _d, _e = _a.position, position = _e === void 0 ? "middle" : _e, forceAddonWrap = _a.forceAddonWrap, props = __rest$1K(_a, ["className", "children", "addon", "addonAfter", "type", "position", "forceAddonWrap"]);
	    var isMedia = type === "media" || type === "large-media";
	    var isAvatar = type === "avatar";
	    return (React__default['default'].createElement(TextIconSpacing, __assign$gz({}, props, { icon: addon, forceIconWrap: forceAddonWrap !== null && forceAddonWrap !== void 0 ? forceAddonWrap : isMedia, className: cn(base("addon", (_b = {},
	            _b[position] = position !== "middle",
	            _b.before = !addonAfter,
	            _b["avatar-before"] = !addonAfter && isAvatar,
	            _b.media = isMedia,
	            _b["media-large"] = type === "large-media",
	            _b)), className), iconAfter: addonAfter }), children));
	}

	var block$W = bem("rmd-list-item");
	/**
	 * This component us used to create the one to three lines of text within a
	 * `ListItem` or `SimpleListItem`.
	 */
	function ListItemText(_a) {
	    var className = _a.className, secondaryTextClassName = _a.secondaryTextClassName, secondaryText = _a.secondaryText, children = _a.children;
	    var secondaryContent;
	    if (secondaryText) {
	        secondaryContent = (React__default['default'].createElement("span", { className: cn(block$W("text", { secondary: true }), secondaryTextClassName) }, secondaryText));
	    }
	    return (React__default['default'].createElement("span", { className: cn(block$W("text"), className) },
	        children,
	        secondaryContent));
	}

	/**
	 * The `ListItemChildren` component is used to create a styled list item that
	 * can have optional addons to the left or right of the children in the form of
	 * icons, avatars, or media. The `children` can be replaced by the `primaryText`
	 * and `secondaryText` props to create stacked text spanning two or more lines
	 * with the default behavior of using `line-clamp` at three lines.
	 *
	 * Note: This will return a `React.Fragment` of the children and does not wrap
	 * in a DOM node for styling. The parent component should normally have
	 * `display: flex` for the styling to work.
	 */
	function ListItemChildren(_a) {
	    var textClassName = _a.textClassName, secondaryTextClassName = _a.secondaryTextClassName, textChildren = _a.textChildren, primaryText = _a.primaryText, secondaryText = _a.secondaryText, leftAddon = _a.leftAddon, _b = _a.leftAddonType, leftAddonType = _b === void 0 ? "icon" : _b, _c = _a.leftAddonPosition, leftAddonPosition = _c === void 0 ? "middle" : _c, rightAddon = _a.rightAddon, _d = _a.rightAddonType, rightAddonType = _d === void 0 ? "icon" : _d, _e = _a.rightAddonPosition, rightAddonPosition = _e === void 0 ? "middle" : _e, forceAddonWrap = _a.forceAddonWrap, propChildren = _a.children;
	    var stringifiedChildren = typeof propChildren === "number" ? "" + propChildren : propChildren;
	    var children = stringifiedChildren;
	    if (primaryText || secondaryText || textChildren) {
	        children = (React__default['default'].createElement(ListItemText, { className: textClassName, secondaryText: secondaryText, secondaryTextClassName: secondaryTextClassName }, (textChildren && children) || primaryText));
	    }
	    children = (React__default['default'].createElement(ListItemAddon, { addon: leftAddon, type: leftAddonType, position: leftAddonPosition, forceAddonWrap: forceAddonWrap }, children));
	    children = (React__default['default'].createElement(ListItemAddon, { addon: rightAddon, addonAfter: true, type: rightAddonType, position: rightAddonPosition, forceAddonWrap: forceAddonWrap }, children));
	    return (React__default['default'].createElement(React__default['default'].Fragment, null,
	        children,
	        (primaryText && stringifiedChildren) || null));
	}

	var __assign$gy = (undefined && undefined.__assign) || function () {
	    __assign$gy = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gy.apply(this, arguments);
	};
	var __rest$1J = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$V = bem("rmd-list-item");
	/**
	 * The `SimpleListItem` component is used to create a non-clickable item within
	 * a `List`. This is really just useful since it allows for the `ListItem`
	 * styling behavior of left and right icons, avatars, and media.
	 *
	 * Note: Even though this component exists, it is recommended to use the
	 * `ListItemChildren` component instead if you want the "addon" styling/behavior
	 * since screen readers read `li` items within lists differently.
	 */
	var SimpleListItem = React.forwardRef(function SimpleListItem(_a, ref) {
	    var _b;
	    var className = _a.className, textClassName = _a.textClassName, secondaryTextClassName = _a.secondaryTextClassName, textChildren = _a.textChildren, primaryText = _a.primaryText, secondaryText = _a.secondaryText, leftAddon = _a.leftAddon, _c = _a.leftAddonType, leftAddonType = _c === void 0 ? "icon" : _c, _d = _a.leftAddonPosition, leftAddonPosition = _d === void 0 ? "middle" : _d, rightAddon = _a.rightAddon, _e = _a.rightAddonType, rightAddonType = _e === void 0 ? "icon" : _e, _f = _a.rightAddonPosition, rightAddonPosition = _f === void 0 ? "middle" : _f, forceAddonWrap = _a.forceAddonWrap, children = _a.children, _g = _a.height, propHeight = _g === void 0 ? "auto" : _g, _h = _a.threeLines, threeLines = _h === void 0 ? false : _h, _j = _a.clickable, clickable = _j === void 0 ? false : _j, onClick = _a.onClick, _k = _a.disabled, disabled = _k === void 0 ? false : _k, _l = _a.disabledOpacity, disabledOpacity = _l === void 0 ? false : _l, props = __rest$1J(_a, ["className", "textClassName", "secondaryTextClassName", "textChildren", "primaryText", "secondaryText", "leftAddon", "leftAddonType", "leftAddonPosition", "rightAddon", "rightAddonType", "rightAddonPosition", "forceAddonWrap", "children", "height", "threeLines", "clickable", "onClick", "disabled", "disabledOpacity"]);
	    var height = getListItemHeight({
	        height: propHeight,
	        leftAddon: leftAddon,
	        leftAddonType: leftAddonType,
	        rightAddon: rightAddon,
	        rightAddonType: rightAddonType,
	        secondaryText: secondaryText,
	    });
	    var ariaDisabled = props["aria-disabled"];
	    var isDisabled = disabled || ariaDisabled === "true" || ariaDisabled === true;
	    return (React__default['default'].createElement("li", __assign$gy({}, props, { "aria-disabled": isDisabled || undefined, ref: ref, className: cn(block$V((_b = {},
	            _b[height] = height !== "auto" && height !== "normal",
	            _b["three-lines"] = threeLines,
	            _b.clickable = clickable,
	            _b.disabled = isDisabled,
	            _b["disabled-color"] = isDisabled && !disabledOpacity,
	            _b["disabled-opacity"] = isDisabled && disabledOpacity,
	            _b)), className), onClick: isDisabled ? undefined : onClick }),
	        React__default['default'].createElement(ListItemChildren, { textClassName: textClassName, secondaryTextClassName: secondaryTextClassName, textChildren: textChildren, primaryText: primaryText, secondaryText: secondaryText, leftAddon: leftAddon, leftAddonType: leftAddonType, leftAddonPosition: leftAddonPosition, rightAddon: rightAddon, rightAddonType: rightAddonType, rightAddonPosition: rightAddonPosition, forceAddonWrap: forceAddonWrap }, children)));
	});

	var __assign$gx = (undefined && undefined.__assign) || function () {
	    __assign$gx = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gx.apply(this, arguments);
	};
	var __rest$1I = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * The `ListItem` creates a clickable and focusable `<li>` within a `List` that
	 * can optionally render addons to the left and right of the `children` or text.
	 */
	var ListItem = React.forwardRef(function ListItem(_a, ref) {
	    var propClassName = _a.className, textClassName = _a.textClassName, secondaryTextClassName = _a.secondaryTextClassName, _b = _a.textChildren, textChildren = _b === void 0 ? true : _b, primaryText = _a.primaryText, secondaryText = _a.secondaryText, children = _a.children, leftAddon = _a.leftAddon, _c = _a.leftAddonType, leftAddonType = _c === void 0 ? "icon" : _c, _d = _a.leftAddonPosition, leftAddonPosition = _d === void 0 ? "middle" : _d, rightAddon = _a.rightAddon, _e = _a.rightAddonType, rightAddonType = _e === void 0 ? "icon" : _e, _f = _a.rightAddonPosition, rightAddonPosition = _f === void 0 ? "middle" : _f, forceAddonWrap = _a.forceAddonWrap, _g = _a.height, propHeight = _g === void 0 ? "auto" : _g, _h = _a.disableSpacebarClick, disableSpacebarClick = _h === void 0 ? false : _h, _j = _a.disableRipple, disableRipple = _j === void 0 ? false : _j, _k = _a.disableProgrammaticRipple, disableProgrammaticRipple = _k === void 0 ? false : _k, _l = _a.disablePressedFallback, disablePressedFallback = _l === void 0 ? false : _l, rippleTimeout = _a.rippleTimeout, rippleClassNames = _a.rippleClassNames, rippleClassName = _a.rippleClassName, rippleContainerClassName = _a.rippleContainerClassName, _m = _a.role, role = _m === void 0 ? "button" : _m, _o = _a.disabled, disabled = _o === void 0 ? false : _o, _p = _a.tabIndex, tabIndex = _p === void 0 ? disabled ? -1 : 0 : _p, props = __rest$1I(_a, ["className", "textClassName", "secondaryTextClassName", "textChildren", "primaryText", "secondaryText", "children", "leftAddon", "leftAddonType", "leftAddonPosition", "rightAddon", "rightAddonType", "rightAddonPosition", "forceAddonWrap", "height", "disableSpacebarClick", "disableRipple", "disableProgrammaticRipple", "disablePressedFallback", "rippleTimeout", "rippleClassNames", "rippleClassName", "rippleContainerClassName", "role", "disabled", "tabIndex"]);
	    var _q = useInteractionStates({
	        className: propClassName,
	        handlers: props,
	        disabled: disabled,
	        disableRipple: disableRipple,
	        disableProgrammaticRipple: disableProgrammaticRipple,
	        rippleTimeout: rippleTimeout,
	        rippleClassNames: rippleClassNames,
	        rippleClassName: rippleClassName,
	        rippleContainerClassName: rippleContainerClassName,
	        disableSpacebarClick: disableSpacebarClick,
	        disablePressedFallback: disablePressedFallback,
	    }), ripples = _q.ripples, className = _q.className, handlers = _q.handlers;
	    var height = getListItemHeight({
	        height: propHeight,
	        leftAddon: leftAddon,
	        leftAddonType: leftAddonType,
	        rightAddon: rightAddon,
	        rightAddonType: rightAddonType,
	        secondaryText: secondaryText,
	    });
	    return (React__default['default'].createElement(SimpleListItem, __assign$gx({}, props, handlers, { ref: ref, tabIndex: tabIndex, disabled: disabled, role: role, className: className, clickable: true, height: height }),
	        React__default['default'].createElement(ListItemChildren, { textClassName: textClassName, secondaryTextClassName: secondaryTextClassName, textChildren: textChildren, primaryText: primaryText, secondaryText: secondaryText, leftAddon: leftAddon, leftAddonType: leftAddonType, leftAddonPosition: leftAddonPosition, rightAddon: rightAddon, rightAddonType: rightAddonType, rightAddonPosition: rightAddonPosition, forceAddonWrap: forceAddonWrap }, children),
	        ripples));
	});

	var __assign$gw = (undefined && undefined.__assign) || function () {
	    __assign$gw = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gw.apply(this, arguments);
	};
	var __rest$1H = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This component is a really bad attempt at creating a `Link` within a `List`
	 * that has the main `ListItem` styles. It will probably be better to just use
	 * the `ListItemChildren` within your `Link` component instead.
	 */
	var ListItemLink = React.forwardRef(function ListItemLink(_a, ref) {
	    var _b;
	    var propClassName = _a.className, textClassName = _a.textClassName, secondaryTextClassName = _a.secondaryTextClassName, textChildren = _a.textChildren, primaryText = _a.primaryText, secondaryText = _a.secondaryText, children = _a.children, leftAddon = _a.leftAddon, _c = _a.leftAddonType, leftAddonType = _c === void 0 ? "icon" : _c, _d = _a.leftAddonPosition, leftAddonPosition = _d === void 0 ? "middle" : _d, rightAddon = _a.rightAddon, _e = _a.rightAddonType, rightAddonType = _e === void 0 ? "icon" : _e, _f = _a.rightAddonPosition, rightAddonPosition = _f === void 0 ? "middle" : _f, forceAddonWrap = _a.forceAddonWrap, _g = _a.height, propHeight = _g === void 0 ? "auto" : _g, _h = _a.threeLines, threeLines = _h === void 0 ? false : _h, _j = _a.component, Component = _j === void 0 ? "a" : _j, disableSpacebarClick = _a.disableSpacebarClick, disableRipple = _a.disableRipple, disableProgrammaticRipple = _a.disableProgrammaticRipple, disablePressedFallback = _a.disablePressedFallback, rippleTimeout = _a.rippleTimeout, rippleClassNames = _a.rippleClassNames, rippleClassName = _a.rippleClassName, rippleContainerClassName = _a.rippleContainerClassName, props = __rest$1H(_a, ["className", "textClassName", "secondaryTextClassName", "textChildren", "primaryText", "secondaryText", "children", "leftAddon", "leftAddonType", "leftAddonPosition", "rightAddon", "rightAddonType", "rightAddonPosition", "forceAddonWrap", "height", "threeLines", "component", "disableSpacebarClick", "disableRipple", "disableProgrammaticRipple", "disablePressedFallback", "rippleTimeout", "rippleClassNames", "rippleClassName", "rippleContainerClassName"]);
	    var height = getListItemHeight({
	        height: propHeight,
	        leftAddon: leftAddon,
	        leftAddonType: leftAddonType,
	        rightAddon: rightAddon,
	        rightAddonType: rightAddonType,
	        secondaryText: secondaryText,
	    });
	    var _k = useInteractionStates({
	        className: propClassName,
	        handlers: props,
	        disableRipple: disableRipple,
	        disableProgrammaticRipple: disableProgrammaticRipple,
	        rippleTimeout: rippleTimeout,
	        rippleClassNames: rippleClassNames,
	        rippleClassName: rippleClassName,
	        rippleContainerClassName: rippleContainerClassName,
	        disableSpacebarClick: disableSpacebarClick,
	        disablePressedFallback: disablePressedFallback,
	    }), ripples = _k.ripples, className = _k.className, handlers = _k.handlers;
	    return (React__default['default'].createElement(Component, __assign$gw({}, props, handlers, { ref: ref, className: cn("rmd-list-item rmd-list-item--clickable rmd-list-item--link", (_b = {},
	            _b["rmd-list-item--" + height] = height !== "auto" && height !== "normal",
	            _b["rmd-list-item--three-lines"] = !!secondaryText && threeLines,
	            _b), className) }),
	        React__default['default'].createElement(ListItemChildren, { textClassName: textClassName, secondaryTextClassName: secondaryTextClassName, textChildren: textChildren, primaryText: primaryText, secondaryText: secondaryText, leftAddon: leftAddon, leftAddonType: leftAddonType, leftAddonPosition: leftAddonPosition, rightAddon: rightAddon, rightAddonType: rightAddonType, rightAddonPosition: rightAddonPosition, forceAddonWrap: forceAddonWrap }, children),
	        ripples));
	});

	var __assign$gv = (undefined && undefined.__assign) || function () {
	    __assign$gv = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gv.apply(this, arguments);
	};
	var __rest$1G = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$U = bem("rmd-list-subheader");
	/**
	 * This is a simple component that will render a `<li>` with the subheader
	 * typography styles. It also supports an `inset` variant that adds some spacing
	 * to the left of the text to align with other `ListItem` that have left addons.
	 */
	var ListSubheader = React.forwardRef(function ListSubheader(_a, ref) {
	    var className = _a.className, _b = _a.inset, inset = _b === void 0 ? false : _b, props = __rest$1G(_a, ["className", "inset"]);
	    return (React__default['default'].createElement("li", __assign$gv({}, props, { ref: ref, className: cn(block$U({ inset: inset }), className) })));
	});

	var __assign$gu = (undefined && undefined.__assign) || function () {
	    __assign$gu = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gu.apply(this, arguments);
	};
	var __rest$1F = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var styles$c = bem("rmd-toggle");
	/**
	 * @remarks \@since 2.8.0
	 */
	var InputToggleIcon = React.forwardRef(function InputToggleIcon(_a, ref) {
	    var _b = _a.circle, circle = _b === void 0 ? false : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, _d = _a.overlay, overlay = _d === void 0 ? false : _d, _e = _a.checked, checked = _e === void 0 ? false : _e, _f = _a.indeterminate, indeterminate = _f === void 0 ? false : _f, className = _a.className, children = _a.children, props = __rest$1F(_a, ["circle", "disabled", "overlay", "checked", "indeterminate", "className", "children"]);
	    return (React__default['default'].createElement("span", __assign$gu({}, props, { ref: ref, className: cn(styles$c("icon", {
	            circle: circle,
	            disabled: disabled,
	            overlay: overlay,
	            checked: checked,
	            indeterminate: indeterminate,
	        }), className) }), children));
	});

	var __assign$gt = (undefined && undefined.__assign) || function () {
	    __assign$gt = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gt.apply(this, arguments);
	};
	var __rest$1E = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var styles$b = bem("rmd-switch");
	/**
	 * This is most likely an internal only component that is used to render the
	 * switch element either as a checkbox or in the `MenuItemSwitch` component.
	 *
	 * @remarks \@since 2.8.0
	 */
	var SwitchTrack = React.forwardRef(function SwitchTrack(_a, ref) {
	    var id = _a.id, _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.checked, checked = _c === void 0 ? false : _c, className = _a.className, ballStyle = _a.ballStyle, ballClassName = _a.ballClassName, containerProps = _a.containerProps, children = _a.children, props = __rest$1E(_a, ["id", "disabled", "checked", "className", "ballStyle", "ballClassName", "containerProps", "children"]);
	    return (React__default['default'].createElement("span", __assign$gt({}, containerProps, { className: cn(styles$b(), className, containerProps === null || containerProps === void 0 ? void 0 : containerProps.className) }),
	        id && (React__default['default'].createElement(React__default['default'].Fragment, null,
	            React__default['default'].createElement("input", __assign$gt({}, props, { id: id, ref: ref, type: "checkbox", className: cn(styles$b("input")), disabled: disabled })),
	            React__default['default'].createElement("label", { htmlFor: id, "aria-hidden": true, style: ballStyle, className: cn(styles$b("ball"), ballClassName) }, children))),
	        !id && (React__default['default'].createElement("span", { style: ballStyle, className: cn(styles$b("ball", { checked: checked }), ballClassName) }))));
	});

	var __assign$gs = (undefined && undefined.__assign) || function () {
	    __assign$gs = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gs.apply(this, arguments);
	};
	var __rest$1D = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var styles$a = bem("rmd-input-toggle-menu-item");
	/**
	 * This is a low-level component that should probably not be used externally and
	 * instead the `MenuItemCheckbox`, `MenuItemRadio`, or `MenuItemSwitch` should
	 * be used instead.
	 *
	 * @see {@link MenuItemCheckbox} for checkbox examples
	 * @see {@link MenuItemRadio} for radio examples
	 * @see {@link MenuItemSwitch} for switch examples
	 * @remarks \@since 2.8.0
	 */
	var MenuItemInputToggle = React.forwardRef(function MenuItemInputToggle(_a, ref) {
	    var children = _a.children, _b = _a.tabIndex, tabIndex = _b === void 0 ? -1 : _b, checked = _a.checked, type = _a.type, propIcon = _a.icon, _c = _a.iconAfter, iconAfter = _c === void 0 ? false : _c, addon = _a.addon, addonType = _a.addonType, addonPosition = _a.addonPosition, onClick = _a.onClick, onCheckedChange = _a.onCheckedChange, _d = _a.disabled, disabled = _d === void 0 ? false : _d, className = _a.className, props = __rest$1D(_a, ["children", "tabIndex", "checked", "type", "icon", "iconAfter", "addon", "addonType", "addonPosition", "onClick", "onCheckedChange", "disabled", "className"]);
	    var icon = useIcon(type === "radio" ? "radio" : "checkbox", propIcon);
	    if (type === "switch" && typeof propIcon === "undefined") {
	        icon = React__default['default'].createElement(SwitchTrack, { checked: checked });
	    }
	    else if (icon && type !== "switch") {
	        icon = (React__default['default'].createElement("span", { className: "rmd-toggle" },
	            React__default['default'].createElement(InputToggleIcon, { circle: type === "radio", disabled: disabled, overlay: true, checked: checked }, icon)));
	    }
	    var leftAddon;
	    var leftAddonType;
	    var leftAddonPosition;
	    var rightAddon;
	    var rightAddonType;
	    var rightAddonPosition;
	    if (iconAfter) {
	        leftAddon = addon;
	        leftAddonType = addonType;
	        leftAddonPosition = addonPosition;
	        rightAddon = icon;
	    }
	    else {
	        leftAddon = icon;
	        rightAddon = addon;
	        rightAddonType = addonType;
	        rightAddonPosition = addonPosition;
	    }
	    return (React__default['default'].createElement(ListItem, __assign$gs({}, props, { disableRipple: true, "aria-disabled": disabled || undefined, "aria-checked": checked, role: type === "radio" ? "menuitemradio" : "menuitemcheckbox", onClick: function (event) {
	            onClick === null || onClick === void 0 ? void 0 : onClick(event);
	            onCheckedChange(!checked, event);
	        }, ref: ref, className: cn(styles$a({ switch: type === "switch" }), className), tabIndex: tabIndex, leftAddon: leftAddon, leftAddonType: leftAddonType, leftAddonPosition: leftAddonPosition, rightAddon: rightAddon, rightAddonType: rightAddonType, rightAddonPosition: rightAddonPosition }), children));
	});

	var __assign$gr = (undefined && undefined.__assign) || function () {
	    __assign$gr = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gr.apply(this, arguments);
	};
	var __rest$1C = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This is a simple wrapper for the {@link MenuItemInputToggle} component to
	 * render it as a checkbox and pulling the checkbox icon from the
	 * {@link IconProvider}.
	 *
	 * @example
	 * Simple Example
	 * ```tsx
	 * import { ReactElement, useState } from "react";
	 * import { DropdownMenu } from "@react-md/menu";
	 * import { MenuItemCheckbox } from "@react-md/form";
	 *
	 * function Example(): ReactElement {
	 *   const [checked, setChecked] = useState(false);
	 *
	 *   return (
	 *     <DropdownMenu
	 *       id="dropdown-menu-id"
	 *       items={[
	 *         <MenuItemCheckbox
	 *           id="checkbox-1"
	 *           checked={checked}
	 *           onCheckedChange={(nextChecked) => setChecked(nextChecked)}
	 *         >
	 *           Checkbox
	 *        </MenuItemCheckbox>,
	 *       ]}
	 *     >
	 *       Button
	 *     </DropdownMenu>
	 *   );
	 * }
	 * ```
	 */
	var MenuItemCheckbox = React.forwardRef(function MenuItemCheckbox(_a, ref) {
	    var propIcon = _a.icon, props = __rest$1C(_a, ["icon"]);
	    var icon = useIcon("checkbox", propIcon);
	    return (React__default['default'].createElement(MenuItemInputToggle, __assign$gr({}, props, { ref: ref, icon: icon, type: "checkbox" })));
	});

	var __assign$gq = (undefined && undefined.__assign) || function () {
	    __assign$gq = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gq.apply(this, arguments);
	};
	var __rest$1B = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This is a simple wrapper for the {@link MenuItemInputToggle} component to
	 * render it as a radio and pulling the radio icon from the
	 * {@link IconProvider}.
	 *
	 * @remarks
	 * If a menu or menubar contains more than one group of menuitemradio elements,
	 * or if the menu contains one group and other, unrelated menu items, authors
	 * SHOULD nest each set of related menuitemradio elements in an element using
	 * the group role, and authors SHOULD delimit the group from other menu items
	 * with an element using the separator role.
	 * @see {@link https://www.w3.org/TR/wai-aria-1.1/#menuitemradio}
	 *
	 * @example
	 * Only Radio Items
	 * ```tsx
	 * import { ReactElement, useState } from "react";
	 * import { DropdownMenu } from "@react-md/menu";
	 * import { MenuItemRadio } from "@react-md/form";
	 *
	 * function Example(): ReactElement {
	 *   const [value, setValue] = useState("value1");
	 *
	 *   return (
	 *     <DropdownMenu
	 *       id="dropdown-menu-id"
	 *       items={[
	 *         <MenuItemRadio
	 *           id="radio-1"
	 *           checked={value === "value1"}
	 *           onCheckedChange={() => setValue("value1")}
	 *         >
	 *           Radio 1
	 *        </MenuItemRadio>,
	 *         <MenuItemRadio
	 *           id="radio-2"
	 *           checked={value === "value2"}
	 *           onCheckedChange={() => setValue("value2")}
	 *         >
	 *           Radio 2
	 *        </MenuItemRadio>,
	 *         <MenuItemRadio
	 *           id="radio-3"
	 *           checked={value === "value3"}
	 *           onCheckedChange={() => setValue("value3")}
	 *         >
	 *           Radio 3
	 *        </MenuItemRadio>,
	 *       ]}
	 *     >
	 *       Button
	 *     </DropdownMenu>
	 *   );
	 * }
	 * ```
	 *
	 * @example
	 * With Other Items
	 * ```tsx
	 * import { ReactElement, useState } from "react";
	 * import { DropdownMenu, MenuItemSeparator } from "@react-md/menu";
	 * import { MenuItemRadio, MenuItemSwitch } from "@react-md/form";
	 *
	 * function Example(): ReactElement {
	 *   const [value, setValue] = useState("value1");
	 *
	 *   return (
	 *     <DropdownMenu
	 *       id="dropdown-menu-id"
	 *       items={[
	 *         <MenuItemSwitch
	 *           id="switch-id"
	 *           checked={checked}
	 *           onCheckedChange={nextChecked => setChecked(nextChecked)}
	 *         >
	 *           Light mode
	 *         </MenuItemSwitch>,
	 *         <MenuItemSeparator />,
	 *         <div role="group" aria-label="My Group Label">
	 *           <MenuItemRadio
	 *             id="radio-1"
	 *             checked={value === "value1"}
	 *             onCheckedChange={() => setValue("value1")}
	 *           >
	 *             Radio 1
	 *           </MenuItemRadio>,
	 *           <MenuItemRadio
	 *             id="radio-2"
	 *             checked={value === "value2"}
	 *             onCheckedChange={() => setValue("value2")}
	 *           >
	 *             Radio 2
	 *           </MenuItemRadio>,
	 *           <MenuItemRadio
	 *             id="radio-3"
	 *             checked={value === "value3"}
	 *             onCheckedChange={() => setValue("value3")}
	 *           >
	 *             Radio 3
	 *           </MenuItemRadio>
	 *         </div>,
	 *       ]}
	 *     >
	 *       Button
	 *     </DropdownMenu>
	 *   );
	 * }
	 * ```
	 *
	 * @remarks \@since 2.8.0
	 */
	var MenuItemRadio = React.forwardRef(function MenuItemRadio(_a, ref) {
	    var propIcon = _a.icon, props = __rest$1B(_a, ["icon"]);
	    var icon = useIcon("radio", propIcon);
	    return (React__default['default'].createElement(MenuItemInputToggle, __assign$gq({}, props, { ref: ref, icon: icon, type: "radio" })));
	});

	var __assign$gp = (undefined && undefined.__assign) || function () {
	    __assign$gp = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gp.apply(this, arguments);
	};
	/**
	 * This is a simple wrapper for the {@link MenuItemInputToggle} component to
	 * render it as a switch.
	 *
	 * @example
	 * Simple Example
	 * ```tsx
	 * import { ReactElement, useState } from "react";
	 * import { DropdownMenu } from "@react-md/menu";
	 * import { MenuItemSwitch } from "@react-md/form";
	 *
	 * function Example(): ReactElement {
	 *   const [checked, setChecked] = useState(false);
	 *
	 *   return (
	 *     <DropdownMenu
	 *       id="dropdown-menu-id"
	 *       items={[
	 *         <MenuItemSwitch
	 *           id="switch-1"
	 *           checked={checked}
	 *           onCheckedChange={(nextChecked) => setChecked(nextChecked)}
	 *         >
	 *           Switch
	 *        </MenuItemSwitch>,
	 *       ]}
	 *     >
	 *       Button
	 *     </DropdownMenu>
	 *   );
	 * }
	 * ```
	 *
	 * @remarks \@since 2.8.0
	 */
	var MenuItemSwitch = React.forwardRef(function MenuItemSwitch(props, ref) {
	    return React__default['default'].createElement(MenuItemInputToggle, __assign$gp({}, props, { ref: ref, type: "switch" }));
	});

	var __assign$go = (undefined && undefined.__assign) || function () {
	    __assign$go = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$go.apply(this, arguments);
	};
	var __rest$1A = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$T = bem("rmd-floating-label");
	/**
	 * This is an extension of the `Label` component that is used with text fields
	 * and textareas to float above the input area.
	 */
	var FloatingLabel = React.forwardRef(function FloatingLabel(_a, ref) {
	    var className = _a.className, dense = _a.dense, valued = _a.valued, floating = _a.floating, _b = _a.error, error = _b === void 0 ? false : _b, _c = _a.active, active = _c === void 0 ? false : _c, _d = _a.disabled, disabled = _d === void 0 ? false : _d, props = __rest$1A(_a, ["className", "dense", "valued", "floating", "error", "active", "disabled"]);
	    return (React__default['default'].createElement(Label, __assign$go({}, props, { ref: ref, className: cn(block$T({
	            dense: dense,
	            active: floating,
	            inactive: valued && !active && !error && !disabled,
	        }), className), error: error, active: active, disabled: disabled })));
	});

	var __assign$gn = (undefined && undefined.__assign) || function () {
	    __assign$gn = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gn.apply(this, arguments);
	};
	var __rest$1z = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$S = bem("rmd-text-field-addon");
	/**
	 * This component is used to add an an icon before or after the text field with
	 * correct styling.
	 */
	var TextFieldAddon = React.forwardRef(function TextFieldAddon(_a, ref) {
	    var children = _a.children, className = _a.className, _b = _a.presentational, presentational = _b === void 0 ? true : _b, props = __rest$1z(_a, ["children", "className", "presentational"]);
	    if (!children) {
	        return null;
	    }
	    return (React__default['default'].createElement("span", __assign$gn({}, props, { ref: ref, className: cn(block$S({ presentational: presentational }), className) }), children));
	});

	var __assign$gm = (undefined && undefined.__assign) || function () {
	    __assign$gm = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gm.apply(this, arguments);
	};
	var __rest$1y = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$R = bem("rmd-text-field-container");
	/**
	 * This is a container component that is used to structure the text field with
	 * different parts and themes.
	 */
	var TextFieldContainer = React.forwardRef(function TextFieldContainer(_a, ref) {
	    var _b;
	    var className = _a.className, children = _a.children, _c = _a.inline, inline = _c === void 0 ? false : _c, propTheme = _a.theme, _d = _a.error, error = _d === void 0 ? false : _d, active = _a.active, label = _a.label, _e = _a.dense, dense = _e === void 0 ? false : _e, _f = _a.disabled, disabled = _f === void 0 ? false : _f, _g = _a.isLeftAddon, isLeftAddon = _g === void 0 ? true : _g, _h = _a.isRightAddon, isRightAddon = _h === void 0 ? true : _h, leftChildren = _a.leftChildren, rightChildren = _a.rightChildren, propUnderlineDirection = _a.underlineDirection, props = __rest$1y(_a, ["className", "children", "inline", "theme", "error", "active", "label", "dense", "disabled", "isLeftAddon", "isRightAddon", "leftChildren", "rightChildren", "underlineDirection"]);
	    var _j = useFormTheme({
	        theme: propTheme,
	        underlineDirection: propUnderlineDirection,
	    }), theme = _j.theme, underlineDirection = _j.underlineDirection;
	    var underline = theme === "underline";
	    var outline = theme === "outline";
	    var filled = theme === "filled";
	    var isUnderlined = underline || filled;
	    var isOutlineActive = outline && active;
	    return (React__default['default'].createElement("div", __assign$gm({}, props, { ref: ref, className: cn(block$R((_b = {
	                error: error,
	                inline: inline,
	                filled: filled,
	                outline: outline,
	                disabled: disabled,
	                hoverable: !disabled && !isOutlineActive,
	                label: label && !dense,
	                dense: !label && dense,
	                "dense-label": dense && label,
	                "dense-placeholder": dense && isUnderlined && !label,
	                "outline-active": isOutlineActive,
	                "outline-error": outline && error,
	                "outline-left": outline && leftChildren,
	                "outline-right": outline && rightChildren,
	                underline: isUnderlined,
	                "underline-labelled": label && isUnderlined,
	                "underline-active": isUnderlined && active
	            },
	            _b["underline-" + underlineDirection] = isUnderlined,
	            _b["underline-left-addon"] = isUnderlined && leftChildren,
	            _b["underline-right-addon"] = isUnderlined && rightChildren,
	            _b)), className) }),
	        isLeftAddon ? (React__default['default'].createElement(TextFieldAddon, null, leftChildren)) : (leftChildren),
	        children,
	        isRightAddon ? (React__default['default'].createElement(TextFieldAddon, null, rightChildren)) : (rightChildren)));
	});

	/**
	 * This hook is used to handle the different states for the text field based on
	 * the current value and user interaction.
	 *
	 * @internal
	 * @remarks \@since 2.5.2
	 */
	function useFieldStates(_a) {
	    var onBlur = _a.onBlur, onFocus = _a.onFocus, onChange = _a.onChange, value = _a.value, defaultValue = _a.defaultValue;
	    var _b = React.useState(false), focused = _b[0], setFocused = _b[1];
	    var _c = React.useState(function () {
	        if (typeof value === "undefined") {
	            return typeof defaultValue !== "undefined" && defaultValue.length > 0;
	        }
	        return value.length > 0;
	    }), valued = _c[0], setValued = _c[1];
	    var handleBlur = React.useCallback(function (event) {
	        if (onBlur) {
	            onBlur(event);
	        }
	        setFocused(false);
	        var input = event.currentTarget;
	        if (input.getAttribute("type") === "number") {
	            input.checkValidity();
	            setValued(input.validity.badInput || (value !== null && value !== void 0 ? value : input.value).length > 0);
	        }
	    }, [onBlur, value]);
	    var handleFocus = React.useCallback(function (event) {
	        if (onFocus) {
	            onFocus(event);
	        }
	        setFocused(true);
	    }, [onFocus]);
	    var handleChange = React.useCallback(function (event) {
	        if (onChange) {
	            onChange(event);
	        }
	        var input = event.currentTarget;
	        if (input.getAttribute("type") === "number") {
	            input.checkValidity();
	            /* istanbul ignore next */
	            if (input.validity.badInput) {
	                return;
	            }
	        }
	        setValued(input.value.length > 0);
	    }, [onChange]);
	    // another way to handle this could be to just make the `valued` state derived
	    // based on the `value`, but it gets wonky for number fields. This technically
	    // still fails right now for number fields if you don't use the
	    // `useNumberField` hook since the `value` will be set back to the empty
	    // string on invalid numbers.
	    var prevValue = React.useRef(value);
	    if (prevValue.current !== value && typeof value === "string") {
	        prevValue.current = value;
	        setValued(value.length > 0);
	    }
	    return {
	        valued: valued,
	        focused: focused,
	        onBlur: handleBlur,
	        onFocus: handleFocus,
	        onChange: handleChange,
	    };
	}

	var __assign$gl = (undefined && undefined.__assign) || function () {
	    __assign$gl = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gl.apply(this, arguments);
	};
	var __rest$1x = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$Q = bem("rmd-native-select");
	var container$1 = bem("rmd-native-select-container");
	/**
	 * This component is used to render a native `<select>` element with the text
	 * field theme styles. This component is great to use for native behavior and
	 * full accessibility.
	 */
	var NativeSelect = React.forwardRef(function NativeSelect(_a, ref) {
	    var style = _a.style, className = _a.className, labelStyle = _a.labelStyle, labelClassName = _a.labelClassName, selectStyle = _a.selectStyle, selectClassName = _a.selectClassName, propIcon = _a.icon, propTheme = _a.theme, _b = _a.dense, dense = _b === void 0 ? false : _b, _c = _a.inline, inline = _c === void 0 ? false : _c, _d = _a.error, error = _d === void 0 ? false : _d, _e = _a.disabled, disabled = _e === void 0 ? false : _e, label = _a.label, propOnBlur = _a.onBlur, propOnFocus = _a.onFocus, propOnChange = _a.onChange, containerRef = _a.containerRef, isLeftAddon = _a.isLeftAddon, isRightAddon = _a.isRightAddon, leftChildren = _a.leftChildren, rightChildren = _a.rightChildren, propUnderlineDirection = _a.underlineDirection, children = _a.children, props = __rest$1x(_a, ["style", "className", "labelStyle", "labelClassName", "selectStyle", "selectClassName", "icon", "theme", "dense", "inline", "error", "disabled", "label", "onBlur", "onFocus", "onChange", "containerRef", "isLeftAddon", "isRightAddon", "leftChildren", "rightChildren", "underlineDirection", "children"]);
	    var id = props.id, value = props.value, defaultValue = props.defaultValue, multiple = props.multiple;
	    var _f = useFormTheme({
	        theme: propTheme,
	        underlineDirection: propUnderlineDirection,
	    }), theme = _f.theme, underlineDirection = _f.underlineDirection;
	    var underline = theme === "underline" || theme === "filled";
	    var icon = useIcon("dropdown", propIcon);
	    var _g = useFieldStates({
	        onBlur: propOnBlur,
	        onFocus: propOnFocus,
	        onChange: propOnChange,
	        value: value,
	        defaultValue: defaultValue,
	    }), valued = _g.valued, focused = _g.focused, onBlur = _g.onBlur, onFocus = _g.onFocus, onChange = _g.onChange;
	    return (React__default['default'].createElement(TextFieldContainer, { style: style, className: cn(container$1({
	            multi: multiple,
	            padded: multiple && label,
	        }), className), ref: containerRef, theme: theme, error: error, active: focused, label: !!label, dense: dense, inline: inline, disabled: disabled, isLeftAddon: isLeftAddon, isRightAddon: isRightAddon, leftChildren: leftChildren, rightChildren: multiple && rightChildren, underlineDirection: underlineDirection },
	        React__default['default'].createElement(FloatingLabel, { style: labelStyle, className: cn(block$Q("label"), labelClassName), htmlFor: id, error: error, active: valued && focused, valued: valued, floating: valued || multiple, dense: dense, disabled: disabled }, label),
	        React__default['default'].createElement("select", __assign$gl({}, props, { ref: ref, style: selectStyle, className: cn(block$Q({
	                icon: icon,
	                multi: multiple,
	                "label-underline": label && underline,
	                "placeholder-underline": !label && underline,
	                floating: label && theme !== "none",
	            }), selectClassName), disabled: disabled, onFocus: onFocus, onBlur: onBlur, onChange: onChange }), children),
	        !multiple && icon && React__default['default'].createElement("span", { className: block$Q("icon") }, icon)));
	});

	var ENTER = "enter";
	var ENTERING = "entering";
	var ENTERED = "entered";
	var EXIT = "exit";
	var EXITING = "exiting";
	var EXITED = "exited";
	var UNMOUNT = "unmount";
	var COLLAPSE_TIMEOUT = {
	    enter: 250,
	    exit: 200,
	};
	var DEFAULT_COLLAPSE_MIN_HEIGHT = 0;
	var DEFAULT_COLLAPSE_MIN_PADDING_TOP = 0;
	var DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM = 0;
	var CROSS_FADE_TIMEOUT = {
	    enter: 300,
	    exit: 0,
	};
	var CROSS_FADE_CLASSNAMES = {
	    appear: "rmd-cross-fade",
	    appearActive: "rmd-cross-fade--active",
	    enter: "rmd-cross-fade",
	    enterActive: "rmd-cross-fade--active",
	};
	var SCALE_CLASSNAMES = {
	    appear: "rmd-transition--scale-enter",
	    appearActive: "rmd-transition--scale-enter-active",
	    enter: "rmd-transition--scale-enter",
	    enterActive: "rmd-transition--scale-enter-active",
	    enterDone: "",
	    exit: "rmd-transition--scale-exit",
	    exitActive: "rmd-transition--scale-exit-active",
	};
	var SCALE_Y_CLASSNAMES = {
	    appear: "rmd-transition--scale-y-enter",
	    appearActive: "rmd-transition--scale-y-enter-active",
	    enter: "rmd-transition--scale-y-enter",
	    enterActive: "rmd-transition--scale-y-enter-active",
	    enterDone: "",
	    exit: "rmd-transition--scale-y-exit",
	    exitActive: "rmd-transition--scale-y-exit-active",
	};
	var SCALE_TIMEOUT = {
	    enter: 200,
	    exit: 150,
	};

	/**
	 * A small util that will find the max-height, padding-top, and padding-bottom
	 * for the provided element. This is really used to be able to transition the
	 * max-height value since `max-height: auto` does not transition. The only way
	 * to get transition is to change max-height values manually.
	 *
	 * @internal
	 */
	function getElementSizing(element) {
	    var maxHeight;
	    var paddingTop;
	    var paddingBottom;
	    if (element) {
	        maxHeight = element.scrollHeight;
	        // clone the element (not deep) just to figure out it's padding without the
	        // inline styles applied
	        var cloned = element.cloneNode(false);
	        cloned.style.maxHeight = "";
	        cloned.style.padding = "";
	        cloned.style.paddingLeft = element.style.paddingLeft;
	        cloned.style.paddingRight = element.style.paddingRight;
	        cloned.style.visibility = "hidden";
	        var container = element.parentElement || document.body;
	        container.appendChild(cloned);
	        var style = window.getComputedStyle(cloned);
	        if (style.paddingTop) {
	            paddingTop = parseFloat(style.paddingTop);
	        }
	        if (style.paddingBottom) {
	            paddingBottom = parseFloat(style.paddingBottom);
	        }
	        container.removeChild(cloned);
	    }
	    return { maxHeight: maxHeight, paddingTop: paddingTop, paddingBottom: paddingBottom };
	}

	var error = function (part) {
	    throw new RangeError("Minimum " + (part ? part + " " : "") + "timeout allowed is 0");
	};
	/**
	 * @internal
	 */
	function getTimeout(timeout, appear) {
	    var _a, _b, _c;
	    if (typeof timeout === "number") {
	        if (timeout < 0) {
	            error();
	        }
	        return {
	            appear: appear ? timeout : 0,
	            enter: timeout,
	            exit: timeout,
	        };
	    }
	    var appearTime = (_a = timeout.appear) !== null && _a !== void 0 ? _a : ((appear && timeout.enter) || 0);
	    var enter = (_b = timeout.enter) !== null && _b !== void 0 ? _b : 0;
	    var exit = (_c = timeout.exit) !== null && _c !== void 0 ? _c : 0;
	    if (appearTime < 0 && typeof timeout.appear === "number") {
	        error("appear");
	    }
	    if (enter < 0) {
	        error("enter");
	    }
	    if (exit < 0) {
	        error("exit");
	    }
	    return {
	        appear: appearTime,
	        enter: enter,
	        exit: exit,
	    };
	}

	/**
	 *
	 * @internal
	 */
	function getNextStage(stage) {
	    switch (stage) {
	        case ENTER:
	            return ENTERING;
	        case ENTERING:
	            return ENTERED;
	        case EXIT:
	            return EXITING;
	        case EXITING:
	            return EXITED;
	        default:
	            return stage;
	    }
	}

	/**
	 * Gets the `window.setTimeout` duration that should be used for a given stage.
	 * This will return `0` for all stagees except for `ENTERING` and `EXITING`.
	 *
	 * @internal
	 */
	function getTimeoutDuration(stage, appear, enter, exit, appearing) {
	    if (stage === ENTERING) {
	        return appearing ? appear : enter;
	    }
	    if (stage === EXITING) {
	        return exit;
	    }
	    return 0;
	}

	var __assign$gk = (undefined && undefined.__assign) || function () {
	    __assign$gk = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gk.apply(this, arguments);
	};
	/**
	 *
	 * @internal
	 */
	var reducer = function (state, action) {
	    switch (action) {
	        case ENTER:
	        case ENTERING:
	        case EXIT:
	        case EXITING:
	        case EXITED:
	            return __assign$gk(__assign$gk({}, state), { rendered: true, stage: action });
	        case ENTERED:
	            return { rendered: true, stage: action, appearing: false };
	        case UNMOUNT:
	            return { stage: EXITED, rendered: false, appearing: false };
	        default:
	            return state;
	    }
	};
	/**
	 *
	 * @internal
	 */
	var INITIAL_STATE = {
	    appearing: false,
	    rendered: true,
	    stage: ENTERED,
	};
	/**
	 *
	 * @internal
	 */
	var getInitialState = function (transitionIn, temporary, appear) { return function () {
	    return {
	        rendered: !temporary || transitionIn,
	        appearing: appear && transitionIn,
	        stage: transitionIn && !appear ? ENTERED : EXITED,
	    };
	}; };
	/**
	 * This is heavily inspired by the `Transition` component from
	 * `react-transition-group` since it's really just a hook version of it.
	 *
	 * This hook allows you to transition between an enter and exit state with
	 * defined timeouts, but you'll most likely be looking for the
	 * `useCSSTransition` instead.
	 *
	 * @param options - All the options used for the transition.
	 * @returns An object describing the current transition stage and props that
	 * should be passed to a component.
	 */
	function useTransition(_a) {
	    var _b = _a.appear, appear = _b === void 0 ? false : _b, _c = _a.repaint, repaint = _c === void 0 ? false : _c, _d = _a.temporary, temporary = _d === void 0 ? false : _d, transitionIn = _a.transitionIn, propTimeout = _a.timeout, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, propRef = _a.ref;
	    var _e = React.useReducer(reducer, INITIAL_STATE, getInitialState(transitionIn, temporary, appear)), _f = _e[0], stage = _f.stage, rendered = _f.rendered, appearing = _f.appearing, dispatch = _e[1];
	    // need to store in mutable ref since these are mostly going to be arrow
	    // functions and shouldn't cause the transitions to change
	    var handlers = React.useRef({
	        onEnter: onEnter,
	        onEntering: onEntering,
	        onEntered: onEntered,
	        onExit: onExit,
	        onExiting: onExiting,
	        onExited: onExited,
	    });
	    React.useEffect(function () {
	        handlers.current = {
	            onEnter: onEnter,
	            onEntering: onEntering,
	            onEntered: onEntered,
	            onExit: onExit,
	            onExiting: onExiting,
	            onExited: onExited,
	        };
	    });
	    var timeout = getTimeout(propTimeout, appear);
	    var _g = useEnsuredRef(propRef), nodeRef = _g[0], refHandler = _g[1];
	    var disableEnterExitTransition = React.useRef(!appear || !transitionIn);
	    // this effect handles the transition from:
	    // - EXITED -> ENTER
	    // - ENTERED -> EXIT
	    // - EXITED -> ENTERED (when enter timeout is 0)
	    // - ENTERED -> EXITED (when exit timeout is 0)
	    //
	    // all the dependencies are ignored except for `transitionIn` since the
	    // other values changing would actually cause more bugs and this effect
	    // really doesn't care if they changed.
	    React.useEffect(function () {
	        // should never trigger a transition on mount unless both the `appear` and
	        // `transitionIn` are enabled for the appear transition
	        if (disableEnterExitTransition.current) {
	            disableEnterExitTransition.current = false;
	            return;
	        }
	        var duration = 0;
	        if (transitionIn) {
	            duration = appearing ? timeout.appear : timeout.enter;
	        }
	        else {
	            duration = timeout.exit;
	        }
	        if (duration > 0) {
	            dispatch(transitionIn ? ENTER : EXIT);
	        }
	        else {
	            dispatch(transitionIn ? ENTERED : EXITED);
	        }
	        // see comment above about why it's only `transitionIn`
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, [transitionIn]);
	    var isFirstRender = React.useRef(true);
	    // this effect handles the transitions for:
	    // - ENTER -> ENTERING
	    // - ENTERING -> ENTERED
	    // - EXIT -> EXITING
	    // - EXITING -> EXIT
	    React.useEffect(function () {
	        // need to skip the effects on first render since it should only be called
	        // after a transition change
	        if (isFirstRender.current) {
	            isFirstRender.current = false;
	            return;
	        }
	        var node = nodeRef.current;
	        if (node) {
	            if (repaint && stage !== EXITED && stage !== ENTERED) {
	                // force repaint for CSS transitions
	                // eslint-disable-next-line no-unused-expressions
	                node.scrollTop;
	            }
	            var _a = handlers.current, onEnter_1 = _a.onEnter, onEntering_1 = _a.onEntering, onEntered_1 = _a.onEntered, onExit_1 = _a.onExit, onExiting_1 = _a.onExiting, onExited_1 = _a.onExited;
	            switch (stage) {
	                case ENTER:
	                    if (onEnter_1) {
	                        onEnter_1(node, appearing);
	                    }
	                    break;
	                case ENTERING:
	                    if (onEntering_1) {
	                        onEntering_1(node, appearing);
	                    }
	                    break;
	                case ENTERED:
	                    if (onEntered_1) {
	                        onEntered_1(node, appearing);
	                    }
	                    break;
	                case EXIT:
	                    if (onExit_1) {
	                        onExit_1(node);
	                    }
	                    break;
	                case EXITING:
	                    if (onExiting_1) {
	                        onExiting_1(node);
	                    }
	                    break;
	                case EXITED:
	                    if (onExited_1) {
	                        onExited_1(node);
	                    }
	                    break;
	                // no default
	            }
	        }
	        var nextStage = getNextStage(stage);
	        if (stage === nextStage) {
	            if (stage === EXITED && temporary) {
	                dispatch(UNMOUNT);
	            }
	            return;
	        }
	        var duration = getTimeoutDuration(stage, timeout.appear, timeout.enter, timeout.exit, appearing);
	        if (duration <= 0) {
	            dispatch(nextStage);
	            return;
	        }
	        var dispatchTimeout = window.setTimeout(function () {
	            dispatch(nextStage);
	        }, duration);
	        return function () {
	            window.clearTimeout(dispatchTimeout);
	        };
	    }, [
	        nodeRef,
	        appearing,
	        repaint,
	        stage,
	        temporary,
	        timeout.appear,
	        timeout.enter,
	        timeout.exit,
	    ]);
	    return {
	        ref: refHandler,
	        stage: stage,
	        rendered: rendered,
	        appearing: appearing,
	        dispatch: dispatch,
	    };
	}

	/**
	 * The `useCollapse` hook is used to transition a child element in and
	 * out of view by animating it's `max-height`. This means that the child
	 * must either be an HTMLElement or a component that forwards the `ref`
	 * to an HTMLElement and applies the `style`, `className`, and `hidden`
	 * props to an HTMLElement.
	 *
	 * Simple Example:
	 *
	 * ```tsx
	 * const Example = () => {
	 *   const [collapsed, setCollapsed] = useState(true);
	 *   const [rendered, transitionProps] = useCollapse(collapsed);
	 *
	 *   return (
	 *     <>
	 *       <Button onClick={() => setCollapsed(!collapsed)}>Toggle</Button>
	 *       {rendered && (
	 *         <div {...transitionProps}>
	 *          <Text>Stuff that should be animated</Text>
	 *          <div>Whatever content...</div>
	 *         </div>
	 *       )}
	 *     </>
	 *   );
	 * }
	 * ```
	 *
	 * Note: This **should not be used for `position: absolute` or `position: fixed`
	 * elements**. Instead, the `ScaleTransition` or just a simple `transform`
	 * transition should be used instead. Animating `max-height`, `padding-top`, and
	 * `padding-bottom` is much less performant than `transform` transition since it
	 * forces the DOM to repaint during the
	 *
	 * @param collapsed - Boolean if the element is currently collapsed. Changing
	 * this value will cause the animation to trigger.
	 * @param options - All the additional options available for the collapse
	 * transition.
	 * @returns An ordered list containing a boolean if the collapse should be
	 * rendered in the DOM followed by an object of props to pass to the collapsible
	 * element to handle the transition.
	 */
	function useCollapse(collapsed, _a) {
	    var _b = _a === void 0 ? {} : _a, className = _b.className, _c = _b.appear, appear = _c === void 0 ? false : _c, _d = _b.timeout, timeout = _d === void 0 ? COLLAPSE_TIMEOUT : _d, onEnter = _b.onEnter, onEntering = _b.onEntering, onEntered = _b.onEntered, onExit = _b.onExit, onExiting = _b.onExiting, onExited = _b.onExited, _e = _b.minHeight, minHeight = _e === void 0 ? DEFAULT_COLLAPSE_MIN_HEIGHT : _e, _f = _b.minPaddingTop, minPaddingTop = _f === void 0 ? DEFAULT_COLLAPSE_MIN_PADDING_TOP : _f, _g = _b.minPaddingBottom, minPaddingBottom = _g === void 0 ? DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM : _g, _h = _b.temporary, temporary = _h === void 0 ? minHeight === 0 &&
	        minPaddingTop === 0 &&
	        minPaddingBottom === 0 : _h;
	    var _j = React.useState(function () {
	        if (!collapsed) {
	            return undefined;
	        }
	        return {
	            maxHeight: minHeight,
	            paddingTop: minPaddingTop,
	            paddingBottom: minPaddingBottom,
	        };
	    }), style = _j[0], setStyle = _j[1];
	    var _k = useTransition({
	        appear: appear,
	        repaint: true,
	        timeout: timeout,
	        temporary: temporary,
	        transitionIn: !collapsed,
	        onEnter: function (node, isAppearing) {
	            if (onEnter) {
	                onEnter(node, isAppearing);
	            }
	            setStyle({
	                maxHeight: minHeight,
	                paddingTop: minPaddingTop,
	                paddingBottom: minPaddingBottom,
	            });
	        },
	        onEntering: function (node, isAppearing) {
	            if (onEntering) {
	                onEntering(node, isAppearing);
	            }
	            var _a = getElementSizing(node), maxHeight = _a.maxHeight, paddingTop = _a.paddingTop, paddingBottom = _a.paddingBottom;
	            var defaultedTimeout = getTimeout(timeout, isAppearing);
	            var duration = isAppearing
	                ? defaultedTimeout.appear
	                : defaultedTimeout.enter;
	            setStyle({
	                maxHeight: maxHeight,
	                paddingTop: paddingTop,
	                paddingBottom: paddingBottom,
	                transitionDuration: duration + "ms",
	            });
	        },
	        onEntered: function (node, isAppearing) {
	            if (onEntered) {
	                onEntered(node, isAppearing);
	            }
	            setStyle(undefined);
	        },
	        onExit: function (node) {
	            if (onExit) {
	                onExit(node);
	            }
	            var _a = getElementSizing(node), maxHeight = _a.maxHeight, paddingTop = _a.paddingTop, paddingBottom = _a.paddingBottom;
	            setStyle({
	                maxHeight: maxHeight,
	                paddingTop: paddingTop,
	                paddingBottom: paddingBottom,
	                transitionDuration: getTimeout(timeout, false).exit + "ms",
	            });
	        },
	        onExiting: function (node) {
	            if (onExiting) {
	                onExiting(node);
	            }
	            setStyle({
	                maxHeight: minHeight,
	                paddingTop: minPaddingTop,
	                paddingBottom: minPaddingBottom,
	                transitionDuration: getTimeout(timeout, false).exit + "ms",
	            });
	        },
	        onExited: function (node) {
	            if (onExited) {
	                onExited(node);
	            }
	            setStyle({
	                maxHeight: minHeight,
	                paddingTop: minPaddingTop,
	                paddingBottom: minPaddingBottom,
	            });
	        },
	    }), rendered = _k.rendered, stage = _k.stage, ref = _k.ref;
	    var entering = stage === ENTER || stage === ENTERING;
	    var exiting = stage === EXIT || stage === EXITING;
	    var collapsable = React.useMemo(function () { return Object.values(getTimeout(timeout, false)).some(function (v) { return v !== 0; }); }, [timeout]);
	    var hidden = collapsed &&
	        rendered &&
	        stage === EXITED &&
	        !temporary &&
	        minHeight === 0 &&
	        minPaddingTop === 0 &&
	        minPaddingBottom === 0;
	    return [
	        rendered,
	        {
	            ref: ref,
	            hidden: hidden,
	            style: style,
	            className: cn({
	                "rmd-collapse": collapsable,
	                "rmd-collapse--enter": entering,
	                "rmd-collapse--leave": exiting,
	                "rmd-collapse--no-overflow": collapsed || style,
	            }, className),
	        },
	    ];
	}

	var __assign$gj = (undefined && undefined.__assign) || function () {
	    __assign$gj = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gj.apply(this, arguments);
	};
	/**
	 * The `Collapse` component is used to transition a child element in and
	 * out of view by animating it's `max-height`. This means that the child must
	 * either be an HTMLElement or a component that forwards the `ref` to an
	 * HTMLElement and applies the `style`, `className`, and `hidden` props to an
	 * HTMLElement.
	 *
	 * Note: This component **should not be used for `position: absolute` or
	 * `position: fixed` elements**. Instead, the `ScaleTransition` or just a simple
	 * `transform` transition should be used instead. Animating `max-height`,
	 * `padding-top`, and `padding-bottom` is much less performant than `transform`
	 * transition since it forces DOM repaints.
	 */
	function Collapse(_a) {
	    var children = _a.children, collapsed = _a.collapsed, className = _a.className, _b = _a.appear, appear = _b === void 0 ? false : _b, _c = _a.timeout, timeout = _c === void 0 ? COLLAPSE_TIMEOUT : _c, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, _d = _a.minHeight, minHeight = _d === void 0 ? DEFAULT_COLLAPSE_MIN_HEIGHT : _d, _e = _a.minPaddingTop, minPaddingTop = _e === void 0 ? DEFAULT_COLLAPSE_MIN_PADDING_TOP : _e, _f = _a.minPaddingBottom, minPaddingBottom = _f === void 0 ? DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM : _f, _g = _a.temporary, temporary = _g === void 0 ? minHeight === 0 && minPaddingTop === 0 && minPaddingBottom === 0 : _g;
	    var _h = useCollapse(collapsed, {
	        appear: appear,
	        temporary: temporary,
	        className: className,
	        timeout: timeout,
	        onEnter: onEnter,
	        onEntering: onEntering,
	        onEntered: onEntered,
	        onExit: onExit,
	        onExiting: onExiting,
	        onExited: onExited,
	        minHeight: minHeight,
	        minPaddingBottom: minPaddingBottom,
	        minPaddingTop: minPaddingTop,
	    }), rendered = _h[0], transitionProps = _h[1];
	    if (!rendered) {
	        return null;
	    }
	    var child = React.Children.only(children);
	    var transitionStyle = transitionProps.style;
	    var childStyle = child.props.style;
	    return React.cloneElement(child, __assign$gj(__assign$gj({}, transitionProps), { style: transitionStyle ? __assign$gj(__assign$gj({}, transitionStyle), childStyle) : childStyle, className: cn(transitionProps.className, child.props.className) }));
	}

	/**
	 * Gets an object of al the CSS class names to use for the useCSSTransition
	 * hook. This will do some nice things like default the `appear` classes to the
	 * `enter` classes if the provided classNames left the `appear` classes as
	 * undefined but enabled the `appear` state.
	 *
	 * @internal
	 */
	function getClassNames(classNames, timeout) {
	    if (typeof classNames === "string") {
	        return {
	            appear: timeout.appear ? classNames + "--appear" : "",
	            appearActive: timeout.appear ? classNames + "--appear-active" : "",
	            appearDone: "",
	            enter: timeout.enter ? classNames + "--enter" : "",
	            enterActive: timeout.enter ? classNames + "--enter-active" : "",
	            enterDone: "",
	            exit: timeout.exit ? classNames + "--exit" : "",
	            exitActive: timeout.exit ? classNames + "--exit-active" : "",
	            exitDone: "",
	        };
	    }
	    return defaults(classNames, {
	        appear: (timeout.appear && classNames.enter) || "",
	        appearActive: (timeout.appear && classNames.enterActive) || "",
	        appearDone: (timeout.appear && classNames.enterDone) || "",
	        enter: "",
	        enterActive: "",
	        enterDone: "",
	        exit: "",
	        exitActive: "",
	        exitDone: "",
	    });
	}

	/**
	 * This hook is heavily inspired by the `CSSTransition` component from
	 * `react-transition-group` since it's really just a hook version for it.
	 *
	 * This hook allows you to transition class names for an element for enter and
	 * exit transitions.
	 *
	 * There are two different ways to create an "appear-only"/"on-mount-only"
	 * transition: use the `onEntered` callback to reset the `transitionIn` to
	 * false, or manually fire the `ENTERED` action with the returned `dispatch`
	 * function when it should be fired again.
	 *
	 * Example changing `transitionIn` for pathname changes:
	 * ```ts
	 * const [transitionIn, setTransitionIn] = useState(true);
	 * const [rendered, transitionProps] = useCSSTransition({
	 *   appear: true,
	 *   timeout: { enter: 200 },
	 *   transitionIn,
	 *   onEntered: () => setTransitionIn(false),
	 * });
	 *
	 * const prevPathname = useRef(pathname);
	 * if (pathname !== prevPathname.current) {
	 *   prevPathname.current = pathname;
	 *   setTransitionIn(true)
	 * }
	 *
	 * return (
	 *   <div {...transitionProps}>
	 *     <Switch>
	 *       <Route path="/" component={Home} />
	 *       <Route path="/other" component={Other} />
	 *    </Switch>
	 *   </div>
	 * );
	 * ```
	 *
	 * Example with `dispatch` for pathname changes:
	 * ```ts
	 * const [rendered, transitionProps, dispatch] = useCSSTransition({
	 *   appear: true,
	 *   timeout: { enter: 200 },
	 *   transitionIn: true,
	 * });
	 *
	 * const prevPathname = useRef(pathname);
	 * if (pathname !== prevPathname.current) {
	 *   prevPathname.current = pathname;
	 *   dispatch(ENTERED);
	 * }
	 *
	 * return (
	 *   <div {...transitionProps}>
	 *     <Switch>
	 *       <Route path="/" component={Home} />
	 *       <Route path="/other" component={Other} />
	 *    </Switch>
	 *   </div>
	 * );
	 * ```
	 *
	 * @see useCrossFade The `useCrossFade` is a good example of using this hook for
	 * a custom CSS Transition.
	 * @param options - The transition options
	 * @returns An ordered list of a boolean if the component should be rendered,
	 * transition props to provide to the transitioning element, a dispatch function
	 * for triggering the transition manually (should not be used much), and the
	 * current transition stage.
	 */
	function useCSSTransition(_a) {
	    var _b = _a.appear, appear = _b === void 0 ? false : _b, _c = _a.temporary, temporary = _c === void 0 ? false : _c, timeout = _a.timeout, transitionIn = _a.transitionIn, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, className = _a.className, propClassNames = _a.classNames, propRef = _a.ref;
	    var _d = useTransition({
	        ref: propRef,
	        appear: appear,
	        repaint: true,
	        timeout: timeout,
	        temporary: temporary,
	        transitionIn: transitionIn,
	        onEnter: onEnter,
	        onEntering: onEntering,
	        onEntered: onEntered,
	        onExit: onExit,
	        onExiting: onExiting,
	        onExited: onExited,
	    }), rendered = _d.rendered, stage = _d.stage, ref = _d.ref, appearing = _d.appearing, dispatch = _d.dispatch;
	    var classNames = getClassNames(propClassNames, getTimeout(timeout, appear));
	    var isEntering = stage === ENTERING;
	    var isEnter = isEntering || stage === ENTER;
	    var isEntered = stage === ENTERED;
	    var isExiting = stage === EXITING;
	    var isExit = isExiting || stage === EXIT;
	    var isExited = stage === EXITED;
	    return [
	        rendered,
	        {
	            ref: ref,
	            className: cn(className, 
	            // Note: can't use the object syntax for classNames since it'll fail
	            // if the same classes are used for different phases since they'd have
	            // the same key in the object...
	            appearing && classNames.appear, appearing && isEntering && classNames.appearActive, appearing && isEntered && classNames.appearDone, !appearing && isEnter && classNames.enter, !appearing && isEntering && classNames.enterActive, !appearing && isEntered && classNames.enterDone, isExit && classNames.exit, isExiting && classNames.exitActive, isExited && classNames.exitDone) || undefined,
	        },
	        dispatch,
	        stage,
	    ];
	}

	/**
	 * This is a simple wrapper for the `useCSSTransition` that will allow you to
	 * trigger cross fade transitions. The default behavior for this hook triggers
	 * the transition immediately once mounted. This is great if it is being used
	 * for new data appearing in a list, but not super great for route transitions.
	 *
	 * If you want to create a route transition, it's recommended to set the
	 * `appear` option to `false` and then manually fire the `ENTER` transition from
	 * the `dispatch` function. Here's a quick example using the `Layout` component
	 * from `@react-md/layout` and `react-router`.
	 *
	 * ```tsx
	 * import { useLocation, BrowserRouter } from "react-router-dom";
	 * import { useCrossFade, ENTER } from "@react-md/transition";
	 *
	 * const App = () => {
	 *   const { pathname } = useLocation();
	 *   const [, { ref, className }, dispatch] = useCrossFade({
	 *     appear: false,
	 *   });
	 *
	 *   const prevPathname = useRef(pathname);
	 *   if (pathname !== prevPathname.current) {
	 *     prevPathname.current = pathname;
	 *     dispatch(ENTER);
	 *   }
	 *
	 *   return (
	 *     <Layout
	 *       {...useLayoutNavigation(navItems, pathname)}
	 *       appBarTitle="My App"
	 *       mainRef={ref}
	 *       mainClassName={className}
	 *     >
	 *       {children}
	 *     </Layout>
	 *   );
	 * }
	 * ```
	 *
	 * @param options - Any additional options and configuration that should be used
	 * for the transition.
	 * @returns An ordered list of a boolean if the component should be rendered,
	 * transition props to provide to the transitioning element, a dispatch function
	 * for triggering the transition manually (should not be used much), and the
	 * current transition stage.
	 */
	function useCrossFade(_a) {
	    var _b = _a === void 0 ? {} : _a, _c = _b.appear, appear = _c === void 0 ? false : _c, _d = _b.temporary, temporary = _d === void 0 ? false : _d, _e = _b.transitionIn, transitionIn = _e === void 0 ? true : _e, className = _b.className, onEnter = _b.onEnter, onEntering = _b.onEntering, onEntered = _b.onEntered, onExit = _b.onExit, onExiting = _b.onExiting, onExited = _b.onExited;
	    return useCSSTransition({
	        appear: appear,
	        timeout: CROSS_FADE_TIMEOUT,
	        classNames: CROSS_FADE_CLASSNAMES,
	        transitionIn: transitionIn,
	        className: className,
	        onEnter: onEnter,
	        onEntering: onEntering,
	        onEntered: onEntered,
	        onExit: onExit,
	        onExiting: onExiting,
	        onExited: onExited,
	        temporary: temporary,
	    });
	}

	var __assign$gi = (undefined && undefined.__assign) || function () {
	    __assign$gi = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gi.apply(this, arguments);
	};
	var __rest$1w = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * The `Collapse` is really just a convenience wrapper for the `useCrossFade`
	 * hook that triggers the transition by cloning the `ref` and `className` into
	 * the `children` of this component.
	 *
	 * This transition will only fire on mount and when the `appear` prop is set to
	 * `true`, so the way to trigger new animations is by changing the `key` for
	 * this component so it re-mounts. However it is generally not recommended to
	 * fire this transition on first page load especially when dealing with server
	 * side rendering. A simple way to work around this is have the `CrossFade` near
	 * the root of the app and just disable the `appear` prop until the first
	 * render.
	 *
	 * If you want more fine-grain control over the transition, it is recommended to
	 * use the `useCrossFade` hook instead.
	 */
	var CrossFade = React.forwardRef(function CrossFade(_a, forwardedRef) {
	    var _b = _a.wrap, wrap = _b === void 0 ? false : _b, _c = _a.appear, appear = _c === void 0 ? true : _c, _d = _a.temporary, temporary = _d === void 0 ? false : _d, propClassName = _a.className, _e = _a.transitionIn, transitionIn = _e === void 0 ? true : _e, children = _a.children, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, props = __rest$1w(_a, ["wrap", "appear", "temporary", "className", "transitionIn", "children", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited"]);
	    var _f = useCrossFade({
	        ref: forwardedRef,
	        appear: appear,
	        className: propClassName,
	        onEnter: onEnter,
	        onEntering: onEntering,
	        onEntered: onEntered,
	        onExit: onExit,
	        onExiting: onExiting,
	        onExited: onExited,
	        temporary: temporary,
	        transitionIn: transitionIn,
	    }), rendered = _f[0], _g = _f[1], ref = _g.ref, className = _g.className;
	    if (!rendered) {
	        return null;
	    }
	    if (!wrap && React.isValidElement(children)) {
	        var child = React.Children.only(children);
	        return React.cloneElement(child, {
	            ref: ref,
	            className: cn(child.props.className, className),
	        });
	    }
	    return (React__default['default'].createElement("div", __assign$gi({}, props, { className: className, ref: ref }), children));
	});

	var __assign$gh = (undefined && undefined.__assign) || function () {
	    __assign$gh = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gh.apply(this, arguments);
	};
	var __rest$1v = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This `ScaleTransition` component is used to trigger an animation that
	 * switches between an opacity of `0` and `1` and using a `transform: scale(0)`
	 * to `transform: scale(1)`. It is recommended to also manually apply a
	 * `transform-origin` style or use the `useFixedPositioning` hook to generate
	 * for you so that the animation starts from a specific point.
	 *
	 * Since the default scale animation is X and Y, you can enable the `vertical`
	 * prop which will update the transition to use `transform: scaleY(0)` to
	 * `transform: scaleY(1)` instead.
	 */
	function ScaleTransition(_a) {
	    var visible = _a.visible, children = _a.children, propClassNames = _a.classNames, _b = _a.vertical, vertical = _b === void 0 ? false : _b, _c = _a.timeout, timeout = _c === void 0 ? SCALE_TIMEOUT : _c, _d = _a.portal, portal = _d === void 0 ? false : _d, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, _e = _a.mountOnEnter, mountOnEnter = _e === void 0 ? true : _e, _f = _a.unmountOnExit, unmountOnExit = _f === void 0 ? true : _f, props = __rest$1v(_a, ["visible", "children", "classNames", "vertical", "timeout", "portal", "portalInto", "portalIntoId", "mountOnEnter", "unmountOnExit"]);
	    var classNames = propClassNames;
	    if (!classNames) {
	        classNames = vertical ? SCALE_Y_CLASSNAMES : SCALE_CLASSNAMES;
	    }
	    return (React__default['default'].createElement(ConditionalPortal, { portal: portal, portalInto: portalInto, portalIntoId: portalIntoId },
	        React__default['default'].createElement(CSSTransition, __assign$gh({}, props, { in: visible, timeout: timeout, classNames: classNames, mountOnEnter: mountOnEnter, unmountOnExit: unmountOnExit }), children)));
	}

	var __assign$gg = (undefined && undefined.__assign) || function () {
	    __assign$gg = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gg.apply(this, arguments);
	};
	function getFixedTo(fixedTo) {
	    if (!fixedTo) {
	        return null;
	    }
	    if (typeof fixedTo === "string") {
	        return (document.getElementById(fixedTo) ||
	            document.querySelector(fixedTo));
	    }
	    if (typeof fixedTo === "function") {
	        return fixedTo();
	    }
	    if ("current" in fixedTo) {
	        return fixedTo.current;
	    }
	    return fixedTo;
	}
	/**
	 * This hook is used to automatically handle fixed positioning when an element
	 * is used alongside a `Transition` from `react-transition-group`. This will
	 * provide merged `onEnter`, `onEntering`, `onEntered`, and `onExited` handlers
	 * to pass down as well as the current style object to apply to the element.
	 *
	 * Until the element has been removed from the DOM and is visible, the position
	 * will automatically update when the user scrolls or resizes the screen.
	 *
	 * @remarks
	 *
	 * It is recommended to start the exit animation when that happens though.
	 */
	function useFixedPositioning(_a) {
	    var propStyle = _a.style, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExited = _a.onExited, fixedTo = _a.fixedTo, getOptions = _a.getOptions, onResize = _a.onResize, onScroll = _a.onScroll, _b = _a.anchor, currentAnchor = _b === void 0 ? {} : _b, initialX = _a.initialX, initialY = _a.initialY, _c = _a.xMargin, xMargin = _c === void 0 ? 0 : _c, _d = _a.vwMargin, vwMargin = _d === void 0 ? 16 : _d, _e = _a.yMargin, yMargin = _e === void 0 ? 0 : _e, _f = _a.vhMargin, vhMargin = _f === void 0 ? 16 : _f, _g = _a.width, width = _g === void 0 ? "auto" : _g, onPositionChange = _a.onPositionChange, _h = _a.transformOrigin, transformOrigin = _h === void 0 ? false : _h, _j = _a.preventOverlap, preventOverlap = _j === void 0 ? false : _j, _k = _a.disableSwapping, disableSwapping = _k === void 0 ? false : _k, _l = _a.disableVHBounds, disableVHBounds = _l === void 0 ? false : _l;
	    var _m = React.useState(), style = _m[0], setStyle = _m[1];
	    var _o = React.useState(null), element = _o[0], setElement = _o[1];
	    var updateStyle = React.useCallback(function (nextElement) {
	        var node = nextElement !== null && nextElement !== void 0 ? nextElement : element;
	        if (typeof nextElement !== "undefined") {
	            setElement(nextElement);
	        }
	        if (!node) {
	            return;
	        }
	        var anchor = {
	            x: currentAnchor.x || "center",
	            y: currentAnchor.y || "below",
	        };
	        var overrides = typeof getOptions === "function" ? getOptions(node) : {};
	        var opts = __assign$gg({ initialX: initialX,
	            initialY: initialY,
	            xMargin: xMargin,
	            vwMargin: vwMargin,
	            yMargin: yMargin,
	            vhMargin: vhMargin,
	            width: width,
	            transformOrigin: transformOrigin,
	            preventOverlap: preventOverlap,
	            disableSwapping: disableSwapping,
	            disableVHBounds: disableVHBounds,
	            anchor: anchor, container: getFixedTo(fixedTo), element: node }, overrides);
	        var _a = getFixedPosition(opts), style = _a.style, actualX = _a.actualX, actualY = _a.actualY;
	        var actual = { x: actualX, y: actualY };
	        if (onPositionChange &&
	            (anchor.x !== actual.x || anchor.y !== actual.y)) {
	            onPositionChange(anchor, actual);
	        }
	        setStyle(style);
	    }, [
	        currentAnchor.x,
	        currentAnchor.y,
	        disableSwapping,
	        disableVHBounds,
	        fixedTo,
	        getOptions,
	        initialX,
	        initialY,
	        onPositionChange,
	        preventOverlap,
	        transformOrigin,
	        vhMargin,
	        vwMargin,
	        width,
	        xMargin,
	        yMargin,
	        element,
	    ]);
	    var handleEnter = React.useCallback(function (node, appear) {
	        if (onEnter) {
	            onEnter(node, appear);
	        }
	        updateStyle(node);
	    }, [onEnter, updateStyle]);
	    var handleEntering = React.useCallback(function (node, appear) {
	        if (onEntering) {
	            onEntering(node, appear);
	        }
	        updateStyle(node);
	    }, [onEntering, updateStyle]);
	    var handleEntered = React.useCallback(function (node, appear) {
	        if (onEntered) {
	            onEntered(node, appear);
	        }
	        updateStyle(node);
	    }, [onEntered, updateStyle]);
	    var handleExited = React.useCallback(function (node) {
	        if (onExited) {
	            onExited(node);
	        }
	        setElement(null);
	    }, [onExited]);
	    useResizeListener({
	        enabled: !!element,
	        onResize: function (event) {
	            if (onResize) {
	                onResize(event);
	            }
	            updateStyle();
	        },
	    });
	    useScrollListener({
	        enabled: !!element,
	        onScroll: function (event) {
	            if (onScroll) {
	                var container = getFixedTo(fixedTo);
	                var containerRect = container && container.getBoundingClientRect();
	                var elementRect = element && element.getBoundingClientRect();
	                var visible = false;
	                if (containerRect && elementRect) {
	                    var vh = getViewportSize("height");
	                    var vw = getViewportSize("width");
	                    var top_1 = Math.min(elementRect.top, containerRect.top);
	                    var right = Math.max(elementRect.right, containerRect.right);
	                    var bottom = Math.max(elementRect.bottom, containerRect.bottom);
	                    var left = Math.min(elementRect.left, containerRect.left);
	                    visible = bottom >= 0 && top_1 <= vh && right >= 0 && left <= vw;
	                }
	                onScroll(event, {
	                    element: element,
	                    fixedTo: container,
	                    visible: visible,
	                });
	            }
	            updateStyle();
	        },
	    });
	    React.useEffect(function () {
	        updateStyle();
	        // Need to only update when the initialX and initialY values are changed.
	        // If this is triggered each time the updateStyle is changed, it causes an
	        // infinite loop.
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, [initialX, initialY]);
	    return {
	        style: __assign$gg(__assign$gg({}, style), propStyle),
	        updateStyle: updateStyle,
	        onEnter: handleEnter,
	        onEntering: handleEntering,
	        onEntered: handleEntered,
	        onExited: handleExited,
	    };
	}

	/**
	 * @internal
	 */
	function useFocusState(_a) {
	    var onFocus = _a.onFocus, onBlur = _a.onBlur;
	    var _b = useToggle(false), focused = _b[0], setFocused = _b[1], setBlurred = _b[2];
	    var handleFocus = React.useCallback(function (event) {
	        if (onFocus) {
	            onFocus(event);
	        }
	        setFocused();
	    }, [setFocused, onFocus]);
	    var handleBlur = React.useCallback(function (event) {
	        if (onBlur) {
	            onBlur(event);
	        }
	        setBlurred();
	    }, [setBlurred, onBlur]);
	    return [focused, handleFocus, handleBlur];
	}

	var __assign$gf = (undefined && undefined.__assign) || function () {
	    __assign$gf = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gf.apply(this, arguments);
	};
	var __rest$1u = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$P = bem("rmd-option");
	/**
	 * The Option component is a simple wrapper for the `SimpleListItem` that adds
	 * some required a11y for behaving as the `option` role.
	 */
	var Option = React.forwardRef(function Option(_a, ref) {
	    var className = _a.className, _b = _a.selected, selected = _b === void 0 ? false : _b, focused = _a.focused, children = _a.children, _c = _a.textChildren, textChildren = _c === void 0 ? true : _c, props = __rest$1u(_a, ["className", "selected", "focused", "children", "textChildren"]);
	    return (React__default['default'].createElement(SimpleListItem, __assign$gf({}, props, { ref: ref, role: "option", "aria-selected": selected || undefined, clickable: true, className: cn(block$P({
	            selected: selected,
	            focused: focused,
	        }), className), textChildren: textChildren }), children));
	});

	/**
	 * A type guard that simply checks if the option is considered an object of list
	 * item props.
	 *
	 * @param option - The option to check
	 * @returns true if the option is considered a object of list item props and
	 * will ensure that the option is typed as ListboxOptionProps
	 * @internal
	 */
	function isListboxOptionProps(option) {
	    return (option !== "" && option !== 0 && !!option && typeof option === "object");
	}
	/**
	 * The default implementation to check if an option is disabled. It will just
	 * check if the option is an object and if it has the disabled prop enabled.
	 *
	 * @param option - The option to check
	 * @returns true if the option is disabled
	 * @internal
	 */
	function defaultIsOptionDisabled(option) {
	    return isListboxOptionProps(option) && !!option.disabled;
	}
	/**
	 * The default way to generate a "unique" id for each option within the listbox
	 * by concatenating the current index with a base id.
	 *
	 * Note: The index will be incremented by 1 so the ids start from 1 instead of
	 * 0. This is so that it matches how paginated results work with `aria-posinset`
	 * + `aria-setsize`.
	 *
	 * @param baseId - The base id of the listbox.
	 * @param index - The current index of the option
	 * @returns a "unique" id for the option
	 */
	function getOptionId(baseId, index) {
	    return baseId + "-option-" + (index + 1);
	}
	/**
	 * A function that will get the label for an option. The default behavior is to
	 * check if the option is an object. If it is, it'll use the `labelKey` property
	 * and fallback to the `children` property. If it is anything else, the option
	 * itself will be returned.
	 *
	 * This is used in both the select's button element to show the current value as
	 * well as rendering each option within the listbox component.
	 *
	 * @param option - The option that should be converted into a renderable label
	 * element.
	 * @param labelKey - The object key to use to extract the label from an option
	 * object.
	 * @returns a renderable label to display.
	 */
	function getOptionLabel(option, labelKey) {
	    if (isListboxOptionProps(option)) {
	        if (typeof option.children !== "undefined") {
	            return option.children;
	        }
	        var label = option[labelKey];
	        return typeof label === "undefined" ? null : label;
	    }
	    return option;
	}
	/**
	 * A function that will get the display value for the `Select` field based on
	 * the current selected option. The default behavior will be to return null if
	 * an option is not currently selected so the placeholder text can be shown
	 * instead. If there is an option selected, it will:
	 * - get the option's label using the general `getOptionLabel` util
	 * - check if includeLeft is enabled and the option is an object with
	 *   `leftAddon`
	 *   - if there is a `leftAddon`, use the `TextIconSpacing` of
	 *     the label + the icon or avatar.
	 *
	 * @param option - The option to get a display label for
	 * @param labelKey - The key to use to extract a label from the option when it
	 * is an object
	 * @param includeLeft - Boolean if a `leftAddon` should be added with
	 * `TextIconSpacing` to the result.
	 * @returns A renderable node to display in a `Select` field.
	 */
	function getDisplayLabel(option, labelKey, includeLeft) {
	    if (!option && option !== 0) {
	        return null;
	    }
	    var label = getOptionLabel(option, labelKey);
	    if (!includeLeft || !isListboxOptionProps(option)) {
	        return label;
	    }
	    var leftAddon = option.leftAddon;
	    return React.createElement(TextIconSpacing, { icon: leftAddon }, label);
	}

	var __assign$ge = (undefined && undefined.__assign) || function () {
	    __assign$ge = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ge.apply(this, arguments);
	};
	var __rest$1t = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$O = bem("rmd-listbox");
	/**
	 * This component is used to render the list part of a `<select>` element with
	 * built-in accessibility and the ability to add custom styles. This should
	 * probably not be used much outside of `react-md` itself and the `Select`
	 * component, but I'm planning on adding support for an inline listbox at some
	 * point.
	 */
	var Listbox = React.forwardRef(function Listbox(_a, ref) {
	    var className = _a.className, _b = _a.visible, visible = _b === void 0 ? true : _b, _c = _a.temporary, temporary = _c === void 0 ? false : _c, _d = _a.labelKey, labelKey = _d === void 0 ? "label" : _d, _e = _a.valueKey, valueKey = _e === void 0 ? "value" : _e, _f = _a.getOptionId, getOptionId$1 = _f === void 0 ? getOptionId : _f, _g = _a.getOptionLabel, getOptionLabel$1 = _g === void 0 ? getOptionLabel : _g, _h = _a.getOptionValue, getOptionValue = _h === void 0 ? DEFAULT_GET_ITEM_VALUE : _h, _j = _a.isOptionDisabled, isOptionDisabled = _j === void 0 ? defaultIsOptionDisabled : _j, _k = _a.disableMovementChange, disableMovementChange = _k === void 0 ? false : _k, onFocus = _a.onFocus, propOnKeyDown = _a.onKeyDown, name = _a.name, options = _a.options, value = _a.value, onChange = _a.onChange, propTabIndex = _a.tabIndex, portal = _a.portal, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, onRequestClose = _a.onRequestClose, timeout = _a.timeout, readOnly = _a.readOnly, classNames = _a.classNames, mountOnEnter = _a.mountOnEnter, unmountOnExit = _a.unmountOnExit, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, props = __rest$1t(_a, ["className", "visible", "temporary", "labelKey", "valueKey", "getOptionId", "getOptionLabel", "getOptionValue", "isOptionDisabled", "disableMovementChange", "onFocus", "onKeyDown", "name", "options", "value", "onChange", "tabIndex", "portal", "portalInto", "portalIntoId", "onRequestClose", "timeout", "readOnly", "classNames", "mountOnEnter", "unmountOnExit", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited"]);
	    var id = props.id;
	    var tabIndex = propTabIndex;
	    if (temporary) {
	        tabIndex = -1;
	    }
	    else if (typeof propTabIndex === "undefined") {
	        tabIndex = 0;
	    }
	    /**
	     * Gets the current index of the option that has the same value as the
	     * provided prop value.
	     */
	    var getIndex = React.useCallback(function () {
	        return options.findIndex(function (option) { return value === getOptionValue(option, valueKey); });
	    }, [getOptionValue, options, value, valueKey]);
	    /**
	     * Conditionally calls the onChange callback with the new value and option if
	     * the value has changed. This will be called when:
	     * - the user presses the enter or space key while "focusing" an option
	     * - the user keyboard navigates to a new option while the
	     *   `disableMovementChange` prop is `false`
	     * - the user clicks the option with a mouse or touch
	     */
	    var handleChange = React.useCallback(function (index) {
	        if (readOnly) {
	            return;
	        }
	        var option = options[index];
	        if (!option || isOptionDisabled(option)) {
	            return;
	        }
	        var optionValue = getOptionValue(option, valueKey);
	        if (value !== optionValue) {
	            onChange(optionValue, options[index], {
	                id: id,
	                name: name,
	                value: value,
	                valueKey: valueKey,
	                options: options,
	            });
	        }
	    }, [
	        getOptionValue,
	        id,
	        isOptionDisabled,
	        name,
	        onChange,
	        options,
	        readOnly,
	        value,
	        valueKey,
	    ]);
	    var handleKeyboardClick = React.useCallback(function (focusedIndex) {
	        handleChange(focusedIndex);
	        if (temporary && onRequestClose) {
	            onRequestClose();
	        }
	    }, [handleChange, onRequestClose, temporary]);
	    var _l = useActiveDescendantMovement(__assign$ge(__assign$ge({}, VERTICAL_LISTBOX), { defaultFocusedIndex: getIndex, items: options, baseId: id, valueKey: labelKey, getId: getOptionId$1, getItemValue: function (option, key) {
	            if (!isListboxOptionProps(option)) {
	                return "" + option;
	            }
	            var search = option[key];
	            if (typeof search === "number" || typeof search === "string") {
	                return "" + search;
	            }
	            return "";
	        },
	        onChange: function (data) {
	            if (disableMovementChange) {
	                return;
	            }
	            handleChange(data.index);
	        }, onEnter: handleKeyboardClick, onSpace: handleKeyboardClick, onKeyDown: function (event) {
	            if (propOnKeyDown) {
	                propOnKeyDown(event);
	            }
	            switch (event.key) {
	                case "Tab":
	                case "Escape":
	                    if (event.key === "Escape") {
	                        event.stopPropagation();
	                    }
	                    if (temporary && onRequestClose) {
	                        onRequestClose();
	                    }
	                    break;
	                // no default
	            }
	        } })), activeId = _l.activeId, itemRefs = _l.itemRefs, onKeyDown = _l.onKeyDown, focusedIndex = _l.focusedIndex, setFocusedIndex = _l.setFocusedIndex;
	    var prevVisible = React.useRef(visible);
	    if (visible !== prevVisible.current) {
	        prevVisible.current = visible;
	        // whenever it gains visibility, try to set the focused index to the
	        // current active value
	        if (visible) {
	            setFocusedIndex(getIndex());
	        }
	    }
	    var handleFocus = React.useCallback(function (event) {
	        if (onFocus) {
	            onFocus(event);
	        }
	        var item = itemRefs[focusedIndex] && itemRefs[focusedIndex].current;
	        if (item) {
	            scrollIntoView(event.currentTarget, item);
	        }
	    }, [focusedIndex, itemRefs, onFocus]);
	    return (React__default['default'].createElement(ScaleTransition, { portal: portal, portalInto: portalInto, portalIntoId: portalIntoId, visible: !temporary || visible, vertical: true, timeout: timeout, classNames: classNames, mountOnEnter: mountOnEnter, unmountOnExit: unmountOnExit, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited },
	        React__default['default'].createElement(List, __assign$ge({}, props, { "aria-activedescendant": activeId, ref: ref, role: "listbox", tabIndex: tabIndex, className: cn(block$O({ temporary: temporary }), className), onFocus: handleFocus, onKeyDown: onKeyDown }), options.map(function (option, i) {
	            var optionId = getOptionId$1(id, i);
	            var optionValue = getOptionValue(option, valueKey);
	            var optionLabel = getOptionLabel$1(option, labelKey);
	            var optionProps;
	            if (isListboxOptionProps(option)) {
	                optionProps = omit(option, [labelKey, valueKey]);
	            }
	            var disabled = isOptionDisabled(option);
	            var onClick;
	            if (!readOnly && !disabled) {
	                onClick = function () {
	                    handleChange(i);
	                    setFocusedIndex(i);
	                };
	            }
	            return (React__default['default'].createElement(Option, __assign$ge({ key: optionValue, id: optionId, disabled: disabled }, optionProps, { ref: itemRefs[i], focused: optionId === activeId, selected: value === optionValue, onClick: onClick }), optionLabel));
	        }))));
	});

	var __assign$gd = (undefined && undefined.__assign) || function () {
	    __assign$gd = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gd.apply(this, arguments);
	};
	var __rest$1s = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$N = bem("rmd-select");
	/**
	 * This component is an accessible version of the `<select>` element that allows
	 * for some more custom styles by using the `@react-md/list` package to render
	 * the list of options.
	 *
	 * The `Select` component **must be controlled** with a `value` and `onChange`
	 * handler.
	 *
	 * Note: Since this is not a native `<select>` component, the current value will
	 * be rendered in an `<input type="hidden" />` element so that the value can be
	 * sent along in forms. It is highly recommended to always provide a `name` prop
	 * so this value is sent.
	 */
	var Select = React.forwardRef(function Select(_a, forwardedRef) {
	    var onBlur = _a.onBlur, onFocus = _a.onFocus, onKeyDown = _a.onKeyDown, onClick = _a.onClick, className = _a.className, label = _a.label, labelStyle = _a.labelStyle, labelClassName = _a.labelClassName, displayLabelStyle = _a.displayLabelStyle, displayLabelClassName = _a.displayLabelClassName, propListboxStyle = _a.listboxStyle, listboxClassName = _a.listboxClassName, _b = _a.anchor, anchor = _b === void 0 ? BELOW_CENTER_ANCHOR : _b, propTheme = _a.theme, _c = _a.dense, dense = _c === void 0 ? false : _c, _d = _a.inline, inline = _d === void 0 ? false : _d, _e = _a.error, error = _e === void 0 ? false : _e, _f = _a.disabled, disabled = _f === void 0 ? false : _f, _g = _a.isLeftAddon, isLeftAddon = _g === void 0 ? true : _g, _h = _a.isRightAddon, isRightAddon = _h === void 0 ? true : _h, propUnderlineDirection = _a.underlineDirection, _j = _a.listboxWidth, listboxWidth = _j === void 0 ? "equal" : _j, _k = _a.portal, portal = _k === void 0 ? true : _k, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, name = _a.name, options = _a.options, _l = _a.labelKey, labelKey = _l === void 0 ? "label" : _l, _m = _a.valueKey, valueKey = _m === void 0 ? "value" : _m, _o = _a.getOptionId, getOptionId$1 = _o === void 0 ? getOptionId : _o, _p = _a.getOptionLabel, getOptionLabel$1 = _p === void 0 ? getOptionLabel : _p, _q = _a.getOptionValue, getOptionValue = _q === void 0 ? DEFAULT_GET_ITEM_VALUE : _q, _r = _a.getDisplayLabel, getDisplayLabel$1 = _r === void 0 ? getDisplayLabel : _r, _s = _a.isOptionDisabled, isOptionDisabled = _s === void 0 ? defaultIsOptionDisabled : _s, _t = _a.disableLeftAddon, disableLeftAddon = _t === void 0 ? false : _t, _u = _a.disableMovementChange, disableMovementChange = _u === void 0 ? false : _u, _v = _a.closeOnResize, closeOnResize = _v === void 0 ? false : _v, _w = _a.closeOnScroll, closeOnScroll = _w === void 0 ? false : _w, readOnly = _a.readOnly, placeholder = _a.placeholder, value = _a.value, onChange = _a.onChange, propRightChildren = _a.rightChildren, props = __rest$1s(_a, ["onBlur", "onFocus", "onKeyDown", "onClick", "className", "label", "labelStyle", "labelClassName", "displayLabelStyle", "displayLabelClassName", "listboxStyle", "listboxClassName", "anchor", "theme", "dense", "inline", "error", "disabled", "isLeftAddon", "isRightAddon", "underlineDirection", "listboxWidth", "portal", "portalInto", "portalIntoId", "name", "options", "labelKey", "valueKey", "getOptionId", "getOptionLabel", "getOptionValue", "getDisplayLabel", "isOptionDisabled", "disableLeftAddon", "disableMovementChange", "closeOnResize", "closeOnScroll", "readOnly", "placeholder", "value", "onChange", "rightChildren"]);
	    var id = props.id;
	    var rightChildren = useIcon("dropdown", propRightChildren);
	    var _x = useFormTheme({
	        theme: propTheme,
	        underlineDirection: propUnderlineDirection,
	    }), theme = _x.theme, underlineDirection = _x.underlineDirection;
	    var valued = typeof value === "number" || !!value;
	    var displayValue = React.useMemo(function () {
	        var currentOption = options.find(function (option) { return getOptionValue(option, valueKey) === value; }) ||
	            null;
	        return getDisplayLabel$1(currentOption, labelKey, !disableLeftAddon);
	    }, [
	        options,
	        getDisplayLabel$1,
	        labelKey,
	        disableLeftAddon,
	        getOptionValue,
	        valueKey,
	        value,
	    ]);
	    var _y = useToggle(false), visible = _y[0], show = _y[1], hide = _y[2];
	    var _z = useFocusState({ onBlur: onBlur, onFocus: onFocus }), focused = _z[0], handleFocus = _z[1], handleBlur = _z[2];
	    var handleKeyDown = React.useCallback(function (event) {
	        if (onKeyDown) {
	            onKeyDown(event);
	        }
	        if (tryToSubmitRelatedForm(event)) {
	            return;
	        }
	        switch (event.key) {
	            case " ":
	            case "ArrowUp":
	            case "ArrowDown":
	                // prevent page scroll
	                event.preventDefault();
	                show();
	                break;
	            // no default
	        }
	    }, [onKeyDown, show]);
	    var _0 = useEnsuredRef(forwardedRef), ref = _0[0], refHandler = _0[1];
	    useCloseOnOutsideClick({
	        enabled: visible,
	        element: ref.current,
	        onOutsideClick: hide,
	    });
	    var _1 = useFixedPositioning({
	        style: propListboxStyle,
	        fixedTo: function () { return ref.current; },
	        anchor: anchor,
	        onScroll: closeOnScroll ? hide : undefined,
	        onResize: closeOnResize ? hide : undefined,
	        transformOrigin: true,
	        width: listboxWidth,
	        onEntering: function (node) {
	            // can't do onEnter since the positioning styles haven't been applied to the
	            // dom node at this time. this means the list is the last element in the DOM
	            // when portalled, which causes the page to scroll to the end. Moving it to
	            // onEntering will ensure the styles have been applied and won't cause page
	            // scrolling
	            node.focus();
	        },
	    }), listboxStyle = _1.style, onEnter = _1.onEnter, onEntering = _1.onEntering, onEntered = _1.onEntered, onExited = _1.onExited;
	    var handleClick = React.useCallback(function (event) {
	        if (onClick) {
	            onClick(event);
	        }
	        show();
	    }, [onClick, show]);
	    var handleKeyboardClose = React.useCallback(function () {
	        hide();
	        if (ref.current) {
	            ref.current.focus();
	        }
	    }, [hide, ref]);
	    var labelId = id + "-label";
	    var valueId = id + "-value";
	    var listboxId = id + "-listbox";
	    var displayValueId = id + "-display-value";
	    return (React__default['default'].createElement(React__default['default'].Fragment, null,
	        React__default['default'].createElement(TextFieldContainer, __assign$gd({}, props, { "aria-haspopup": "listbox", "aria-disabled": disabled || undefined, ref: refHandler, role: "button", dense: dense, tabIndex: disabled ? undefined : 0, label: !!label, onFocus: handleFocus, onBlur: handleBlur, onKeyDown: disabled ? undefined : handleKeyDown, onClick: disabled ? undefined : handleClick, theme: theme, error: error, active: focused || visible, inline: inline, disabled: disabled, underlineDirection: underlineDirection, isLeftAddon: isLeftAddon, isRightAddon: isRightAddon, rightChildren: rightChildren, className: cn(block$N({ disabled: disabled }), className) }),
	            React__default['default'].createElement(FloatingLabel, { id: labelId, style: labelStyle, className: cn(block$N("label"), labelClassName), htmlFor: id, error: error, active: valued && (focused || visible), valued: valued, floating: focused || valued || visible, dense: dense, disabled: disabled, component: "span" }, label),
	            React__default['default'].createElement("span", { id: displayValueId, style: displayLabelStyle, className: cn(block$N("value", {
	                    disabled: disabled,
	                    readonly: readOnly,
	                    placeholder: !valued && placeholder,
	                    "placeholder-active": !valued && placeholder && (focused || visible),
	                }), displayLabelClassName) }, displayValue || (!valued && placeholder)),
	            React__default['default'].createElement("input", { id: valueId, type: "hidden", name: name, value: value })),
	        React__default['default'].createElement(Listbox, { id: listboxId, "aria-labelledby": id, style: listboxStyle, className: listboxClassName, name: name, readOnly: readOnly, portal: portal, portalInto: portalInto, portalIntoId: portalIntoId, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExited: onExited, value: value, onChange: onChange, visible: visible, temporary: true, onRequestClose: handleKeyboardClose, options: options, labelKey: labelKey, valueKey: valueKey, getOptionId: getOptionId$1, getOptionLabel: getOptionLabel$1, getOptionValue: getOptionValue, isOptionDisabled: isOptionDisabled, disableMovementChange: disableMovementChange })));
	});

	/**
	 * @remarks \@since 2.5.0
	 */
	var DEFAULT_SLIDER_GET_VALUE_TEXT = function () { return ""; };
	/**
	 * @remarks \@since 2.5.0
	 */
	var DEFAULT_SLIDER_MIN = 0;
	/**
	 * @remarks \@since 2.5.0
	 */
	var DEFAULT_SLIDER_MAX = 100;
	/**
	 * @remarks \@since 2.5.0
	 */
	var DEFAULT_SLIDER_STEP = 1;
	/**
	 * @remarks \@since 2.5.0
	 */
	var DEFAULT_SLIDER_ANIMATION_TIME = 150;
	/**
	 * @remarks \@since 2.5.0
	 */
	var THUMB_1_VAR = "--offset1";
	/**
	 * @remarks \@since 2.5.0
	 */
	var THUMB_2_VAR = "--offset2";

	var __assign$gc = (undefined && undefined.__assign) || function () {
	    __assign$gc = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gc.apply(this, arguments);
	};
	var __rest$1r = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var styles$9 = bem("rmd-slider-container");
	/**
	 * The `SliderContainer` component is mostly an interal component that is
	 * built-in to the `Slider` and `RangeSlider` components to add addons to the
	 * left or right of the `SliderTrack`. When vertical, it will add addons to the
	 * bottom or top instead.
	 *
	 * @remarks \@since 2.5.0
	 */
	var SliderContainer = React.forwardRef(function SliderContainer(_a, ref) {
	    var className = _a.className, beforeAddon = _a.beforeAddon, afterAddon = _a.afterAddon, children = _a.children, _b = _a.vertical, vertical = _b === void 0 ? false : _b, label = _a.label, labelId = _a.labelId, labelProps = _a.labelProps, _c = _a.disabled, disabled = _c === void 0 ? false : _c, props = __rest$1r(_a, ["className", "beforeAddon", "afterAddon", "children", "vertical", "label", "labelId", "labelProps", "disabled"]);
	    return (React__default['default'].createElement(React__default['default'].Fragment, null,
	        label && (React__default['default'].createElement("span", __assign$gc({}, labelProps, { id: labelId, className: cn(labelStyles({ disabled: disabled }), labelProps === null || labelProps === void 0 ? void 0 : labelProps.className) }), label)),
	        React__default['default'].createElement("div", __assign$gc({}, props, { ref: ref, className: cn(styles$9({
	                h: !vertical,
	                "pad-left": !vertical && !beforeAddon,
	                "pad-right": !vertical && !afterAddon,
	                "pad-bottom": vertical && !beforeAddon,
	                "pad-top": vertical && !afterAddon,
	                v: vertical,
	            }), className) }),
	            React__default['default'].createElement(TextIconSpacing, { icon: beforeAddon, stacked: vertical, flexReverse: vertical },
	                React__default['default'].createElement(TextIconSpacing, { icon: afterAddon, iconAfter: true, stacked: vertical, flexReverse: vertical }, children)))));
	});

	var DEFAULT_TOOLTIP_CLASSNAMES = {
	    appear: "rmd-tooltip--enter",
	    appearActive: "rmd-tooltip--visible",
	    enter: "rmd-tooltip--enter",
	    enterActive: "rmd-tooltip--visible",
	    enterDone: "rmd-tooltip--visible",
	    exit: "rmd-tooltip--visible rmd-tooltip--exit",
	    exitActive: "rmd-tooltip--exit-active",
	};
	var DEFAULT_TOOLTIP_TIMEOUT = {
	    enter: 200,
	    exit: 150,
	};
	var DEFAULT_TOOLTIP_DELAY = 1000;
	var DEFAULT_TOOLTIP_THRESHOLD = 0.75;
	/** @remarks \@since 2.8.0 */
	var DEFAULT_TOOLTIP_SPACING = "1.5rem";
	/** @remarks \@since 2.8.0 */
	var DEFAULT_TOOLTIP_DENSE_SPACING = "0.875rem";
	/** @remarks \@since 2.8.0 */
	var DEFAULT_TOOLTIP_MARGIN = 16;
	/** @remarks \@since 2.8.0 */
	var DEFAULT_TOOLTIP_POSITION = "below";
	/**
	 * @internal
	 * @remarks \@since 2.8.0
	 */
	var TOOLTIP_SPACING_VAR = "--rmd-tooltip-spacing";

	var __assign$gb = (undefined && undefined.__assign) || function () {
	    __assign$gb = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$gb.apply(this, arguments);
	};
	var __rest$1q = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$M = bem("rmd-tooltip");
	/**
	 * This is the base tooltip component that can only be used to render a tooltip
	 * with an animation when the visibility changes. If this component is used, you
	 * will need to manually add all the event listeners and triggers to change the
	 * `visible` prop.
	 *
	 * @example
	 * Simple Usage
	 * ```tsx
	 * import { Button } from "@react-md/button";
	 * import { useTooltip, Tooltip } from "@react-md/tooltip";
	 *
	 * function Example() {
	 *   const { tooltipProps, elementProps } = useTooltip({
	 *     baseId: 'my-element',
	 *   });
	 *
	 *   return (
	 *     <>
	 *       <Button {...elementProps}>Button</Button>
	 *       <Tooltip {...tooltipProps}>
	 *         Tooltip Content
	 *       </Tooltip>
	 *     </>
	 *   );
	 * }
	 * ```
	 */
	var Tooltip = React.forwardRef(function Tooltip(_a, ref) {
	    var _b;
	    var className = _a.className, _c = _a.classNames, classNames = _c === void 0 ? DEFAULT_TOOLTIP_CLASSNAMES : _c, visible = _a.visible, _d = _a.timeout, timeout = _d === void 0 ? DEFAULT_TOOLTIP_TIMEOUT : _d, _e = _a.dense, dense = _e === void 0 ? false : _e, _f = _a.lineWrap, lineWrap = _f === void 0 ? true : _f, _g = _a.position, position = _g === void 0 ? DEFAULT_TOOLTIP_POSITION : _g, children = _a.children, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, _h = _a.portal, portal = _h === void 0 ? true : _h, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, _j = _a.mountOnEnter, mountOnEnter = _j === void 0 ? true : _j, _k = _a.unmountOnExit, unmountOnExit = _k === void 0 ? true : _k, props = __rest$1q(_a, ["className", "classNames", "visible", "timeout", "dense", "lineWrap", "position", "children", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "portal", "portalInto", "portalIntoId", "mountOnEnter", "unmountOnExit"]);
	    return (React__default['default'].createElement(ConditionalPortal, { portal: portal, portalInto: portalInto, portalIntoId: portalIntoId },
	        React__default['default'].createElement(CSSTransition, { classNames: classNames, in: visible, timeout: timeout, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited, mountOnEnter: mountOnEnter, unmountOnExit: unmountOnExit },
	            React__default['default'].createElement("span", __assign$gb({}, props, { ref: ref, role: "tooltip", className: cn(block$M((_b = {
	                        dense: dense,
	                        "line-wrap": lineWrap,
	                        "dense-line-wrap": dense && lineWrap
	                    },
	                    _b[position] = true,
	                    _b)), className) }), children))));
	});

	/** @internal */
	var noop$8 = function () {
	    // do nothing
	};
	/**
	 * A hook that's used to determine the "best" position to render the tooltip
	 * within the viewport.
	 *
	 * @internal
	 * @remarks \@since 2.8.0
	 */
	function useTooltipPosition(_a) {
	    var determinedPosition = _a.position, _b = _a.defaultPosition, defaultPosition = _b === void 0 ? "below" : _b, _c = _a.threshold, threshold = _c === void 0 ? DEFAULT_TOOLTIP_THRESHOLD : _c;
	    var _d = React.useState(defaultPosition), position = _d[0], setPosition = _d[1];
	    var updatePosition = React.useCallback(function (container) {
	        var _a = container.getBoundingClientRect(), top = _a.top, left = _a.left;
	        var vh = getViewportSize("height");
	        var vw = getViewportSize("width");
	        var nextPosition = defaultPosition;
	        if (defaultPosition === "above" && top < vh * threshold) {
	            nextPosition = "below";
	        }
	        else if (defaultPosition === "below" && top > vh * threshold) {
	            nextPosition = "above";
	        }
	        else if (defaultPosition === "left" && left < vw * threshold) {
	            nextPosition = "right";
	        }
	        else if (defaultPosition === "right" && left > vw * threshold) {
	            nextPosition = "left";
	        }
	        setPosition(nextPosition);
	    }, [defaultPosition, threshold]);
	    if (typeof determinedPosition !== "undefined") {
	        return [determinedPosition, noop$8];
	    }
	    return [position, updatePosition];
	}

	var __assign$ga = (undefined && undefined.__assign) || function () {
	    __assign$ga = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ga.apply(this, arguments);
	};
	var __rest$1p = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/** @internal */
	function getAnchor(position) {
	    switch (position) {
	        case "above":
	            return ABOVE_CENTER_ANCHOR;
	        case "below":
	            return BELOW_CENTER_ANCHOR;
	        case "left":
	            return CENTER_LEFT_ANCHOR;
	        case "right":
	            return CENTER_RIGHT_ANCHOR;
	        default:
	            throw new Error("Invalid position: " + position);
	    }
	}
	/**
	 * This hook is used to handle the positioning and visibility of the tooltip
	 * component mostly within the {@link Tooltipped} component.
	 *
	 * @example
	 * Simple Usage
	 * ```tsx
	 * import { Button } from "@react-md/button";
	 * import { useTooltip, Tooltip } from "@react-md/tooltip";
	 *
	 * function Example() {
	 *   const { tooltipProps, elementProps } = useTooltip({
	 *     baseId: 'my-element',
	 *   });
	 *
	 *   return (
	 *     <>
	 *       <Button {...elementProps}>Button</Button>
	 *       <Tooltip {...tooltipProps}>
	 *         Tooltip Content
	 *       </Tooltip>
	 *     </>
	 *   );
	 * }
	 * ```
	 *
	 * @remarks \@since 2.8.0
	 * @param options - All the {@link TooltipHookOptions} to configure the tooltip behavior.
	 * @returns The {@link TooltipHookReturnValue}
	 */
	function useTooltip(_a) {
	    var baseId = _a.baseId, style = _a.style, describedBy = _a.describedBy, _b = _a.dense, dense = _b === void 0 ? false : _b, _c = _a.spacing, spacing = _c === void 0 ? DEFAULT_TOOLTIP_SPACING : _c, _d = _a.denseSpacing, denseSpacing = _d === void 0 ? DEFAULT_TOOLTIP_DENSE_SPACING : _d, determinedPosition = _a.position, _e = _a.defaultPosition, defaultPosition = _e === void 0 ? DEFAULT_TOOLTIP_POSITION : _e, _f = _a.vwMargin, vwMargin = _f === void 0 ? DEFAULT_TOOLTIP_MARGIN : _f, _g = _a.vhMargin, vhMargin = _g === void 0 ? DEFAULT_TOOLTIP_MARGIN : _g, _h = _a.threshold, threshold = _h === void 0 ? DEFAULT_TOOLTIP_THRESHOLD : _h, _j = _a.touchTime, touchTime = _j === void 0 ? DEFAULT_TOOLTIP_DELAY : _j, _k = _a.focusTime, focusTime = _k === void 0 ? DEFAULT_TOOLTIP_DELAY : _k, propOnFocus = _a.onFocus, propOnBlur = _a.onBlur, propOnKeyDown = _a.onKeyDown, onClick = _a.onClick, onMouseEnter = _a.onMouseEnter, onMouseLeave = _a.onMouseLeave, propOnTouchStart = _a.onTouchStart, propOnContextMenu = _a.onContextMenu, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExited = _a.onExited, disableSwapping = _a.disableSwapping, disabled = _a.disableHoverMode, _l = _a.disableAutoSpacing, disableAutoSpacing = _l === void 0 ? "production" === "test" : _l;
	    var containerRef = React.useRef(null);
	    var _m = useTooltipPosition({
	        position: determinedPosition,
	        defaultPosition: defaultPosition,
	        threshold: threshold,
	    }), position = _m[0], updatePosition = _m[1];
	    var mode = useUserInteractionMode();
	    var _o = React.useState(null), initiatedBy = _o[0], setInitiatedBy = _o[1];
	    var windowFocusEvent = React.useRef(false);
	    var timeout = React.useRef(undefined);
	    var _p = useHoverMode({
	        disabled: disabled,
	        onClick: function (event) {
	            onClick === null || onClick === void 0 ? void 0 : onClick(event);
	            if (event.isPropagationStopped()) {
	                return;
	            }
	            setVisible(false);
	            setInitiatedBy(null);
	        },
	        onMouseEnter: function (event) {
	            onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(event);
	            if (initiatedBy !== null) {
	                event.stopPropagation();
	                return;
	            }
	            containerRef.current = event.currentTarget;
	            updatePosition(event.currentTarget);
	            setInitiatedBy("mouse");
	        },
	        onMouseLeave: function (event) {
	            onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(event);
	            if (initiatedBy !== "mouse") {
	                event.stopPropagation();
	                return;
	            }
	            setInitiatedBy(null);
	        },
	    }), visible = _p.visible, setVisible = _p.setVisible, mouseHandlers = _p.handlers, disableHoverMode = _p.disableHoverMode, others = __rest$1p(_p, ["visible", "setVisible", "handlers", "disableHoverMode"]);
	    var hide = React.useCallback(function () {
	        window.clearTimeout(timeout.current);
	        setVisible(false);
	        setInitiatedBy(null);
	    }, [setVisible]);
	    var onBlur = function (event) {
	        propOnBlur === null || propOnBlur === void 0 ? void 0 : propOnBlur(event);
	        if (initiatedBy !== "keyboard") {
	            return;
	        }
	        hide();
	    };
	    var onFocus = function (event) {
	        propOnFocus === null || propOnFocus === void 0 ? void 0 : propOnFocus(event);
	        // if the element gained focus immediately after the browser window gains
	        // focus, do not start timer and ignore this event instead
	        if (windowFocusEvent.current) {
	            windowFocusEvent.current = false;
	            return;
	        }
	        if (mode !== "keyboard" || initiatedBy !== null) {
	            return;
	        }
	        setInitiatedBy("keyboard");
	        window.clearTimeout(timeout.current);
	        containerRef.current = event.currentTarget;
	        updatePosition(event.currentTarget);
	        timeout.current = window.setTimeout(function () {
	            setVisible(true);
	        }, focusTime);
	    };
	    var onKeyDown = function (event) {
	        propOnKeyDown === null || propOnKeyDown === void 0 ? void 0 : propOnKeyDown(event);
	        if (initiatedBy !== "keyboard" || event.key !== "Escape") {
	            return;
	        }
	        hide();
	    };
	    var onTouchStart = function (event) {
	        propOnTouchStart === null || propOnTouchStart === void 0 ? void 0 : propOnTouchStart(event);
	        if (event.isPropagationStopped() || mode !== "touch") {
	            return;
	        }
	        setInitiatedBy("touch");
	        window.clearTimeout(timeout.current);
	        timeout.current = window.setTimeout(function () {
	            setVisible(true);
	        }, touchTime);
	        containerRef.current = event.currentTarget;
	        updatePosition(event.currentTarget);
	    };
	    var onContextMenu = function (event) {
	        var _a;
	        propOnContextMenu === null || propOnContextMenu === void 0 ? void 0 : propOnContextMenu(event);
	        if (event.isPropagationStopped() || mode !== "touch") {
	            return;
	        }
	        // Need to prevent the context menu from displaying and display the tooltip
	        // instead.
	        event.preventDefault();
	        var selection = window.getSelection();
	        var node = (_a = selection === null || selection === void 0 ? void 0 : selection.anchorNode) === null || _a === void 0 ? void 0 : _a.parentElement;
	        /* istanbul ignore next */
	        if (selection && node && event.currentTarget.contains(node)) {
	            selection.empty();
	        }
	        setVisible(true);
	    };
	    React.useEffect(function () {
	        if (mode !== "keyboard") {
	            windowFocusEvent.current = false;
	            return;
	        }
	        var handler = function () {
	            if (document.hidden) {
	                hide();
	                windowFocusEvent.current =
	                    document.activeElement === containerRef.current;
	            }
	        };
	        window.addEventListener("visibilitychange", handler);
	        return function () {
	            window.removeEventListener("visibilitychange", handler);
	        };
	    }, [hide, mode]);
	    React.useEffect(function () {
	        if (initiatedBy !== "touch") {
	            return;
	        }
	        window.addEventListener("touchmove", hide, true);
	        window.addEventListener("touchend", hide, true);
	        return function () {
	            window.removeEventListener("touchmove", hide, true);
	            window.removeEventListener("touchend", hide, true);
	        };
	    }, [hide, initiatedBy, setVisible]);
	    useOnUnmount(function () {
	        window.clearTimeout(timeout.current);
	    });
	    var _q = useFixedPositioning({
	        style: style,
	        anchor: getAnchor(position),
	        disableSwapping: disableSwapping !== null && disableSwapping !== void 0 ? disableSwapping : !!determinedPosition,
	        fixedTo: containerRef,
	        getOptions: function (node) {
	            var tooltipSpacing = dense ? denseSpacing : spacing;
	            /* istanbul ignore next */
	            if (!disableAutoSpacing) {
	                tooltipSpacing = window
	                    .getComputedStyle(node)
	                    .getPropertyValue(TOOLTIP_SPACING_VAR);
	            }
	            var currentSpacing = unitToNumber(tooltipSpacing);
	            return {
	                vwMargin: vwMargin,
	                vhMargin: vhMargin,
	                xMargin: currentSpacing,
	                yMargin: currentSpacing,
	            };
	        },
	        onResize: hide,
	        onScroll: hide,
	        onEnter: onEnter,
	        onEntering: onEntering,
	        onEntered: onEntered,
	        onExited: onExited,
	    }), positionProps = __rest$1p(_q, ["updateStyle"]);
	    var tooltipHandlers = __assign$ga(__assign$ga({}, mouseHandlers), { onFocus: onFocus,
	        onBlur: onBlur,
	        onKeyDown: onKeyDown,
	        onTouchStart: onTouchStart,
	        onContextMenu: onContextMenu });
	    var tooltipId = baseId + "-tooltip";
	    var elementProps = __assign$ga({ id: baseId, "aria-describedby": cn(visible && tooltipId, describedBy) || undefined }, tooltipHandlers);
	    var tooltipProps = __assign$ga({ id: tooltipId, dense: dense,
	        visible: visible,
	        position: position }, positionProps);
	    return __assign$ga(__assign$ga({}, others), { visible: visible,
	        setVisible: setVisible, handlers: tooltipHandlers, elementProps: elementProps,
	        tooltipProps: tooltipProps,
	        disableHoverMode: disableHoverMode });
	}

	var __assign$g9 = (undefined && undefined.__assign) || function () {
	    __assign$g9 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$g9.apply(this, arguments);
	};
	var __rest$1o = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var MERGABLE_PROPS = [
	    "onClick",
	    "onMouseEnter",
	    "onMouseLeave",
	    "onTouchStart",
	    "onFocus",
	    "onKeyDown",
	    "onContextMenu",
	];
	/**
	 * The `Tooltipped` component can be used to dynamically add a tooltip to child
	 * element by cloning the required event handlers and accessibility props into
	 * the child with `React.cloneChild`.
	 *
	 * Note: This component is _kind of_ deprecated in favor of using the
	 * `useTooltip` hook and `Tooltip` component instead.
	 *
	 * @see {@link Tooltip} for an example
	 */
	function Tooltipped(_a) {
	    var id = _a.id, style = _a.style, children = _a.children, tooltipChildren = _a.tooltip, _b = _a.dense, dense = _b === void 0 ? false : _b, _c = _a.vhMargin, vhMargin = _c === void 0 ? DEFAULT_TOOLTIP_MARGIN : _c, _d = _a.vwMargin, vwMargin = _d === void 0 ? DEFAULT_TOOLTIP_MARGIN : _d, _e = _a.spacing, spacing = _e === void 0 ? DEFAULT_TOOLTIP_SPACING : _e, _f = _a.denseSpacing, denseSpacing = _f === void 0 ? DEFAULT_TOOLTIP_DENSE_SPACING : _f, propPosition = _a.position, positionThreshold = _a.positionThreshold, _g = _a.threshold, threshold = _g === void 0 ? positionThreshold !== null && positionThreshold !== void 0 ? positionThreshold : DEFAULT_TOOLTIP_THRESHOLD : _g, onClick = _a.onClick, onMouseEnter = _a.onMouseEnter, onMouseLeave = _a.onMouseLeave, onTouchStart = _a.onTouchStart, onContextMenu = _a.onContextMenu, onBlur = _a.onBlur, onFocus = _a.onFocus, onKeyDown = _a.onKeyDown, describedBy = _a["aria-describedby"], _h = _a.defaultPosition, defaultPosition = _h === void 0 ? DEFAULT_TOOLTIP_POSITION : _h, _j = _a.mountOnEnter, mountOnEnter = _j === void 0 ? true : _j, _k = _a.unmountOnExit, unmountOnExit = _k === void 0 ? true : _k, disableSwapping = _a.disableSwapping, disableHoverMode = _a.disableHoverMode, _l = _a.disableAutoSpacing, disableAutoSpacing = _l === void 0 ? "production" === "test" : _l; _a.tooltipId; _a.hoverDelay; _a.focusDelay; _a.touchTimeout; _a.onShow; _a.onHide; var props = __rest$1o(_a, ["id", "style", "children", "tooltip", "dense", "vhMargin", "vwMargin", "spacing", "denseSpacing", "position", "positionThreshold", "threshold", "onClick", "onMouseEnter", "onMouseLeave", "onTouchStart", "onContextMenu", "onBlur", "onFocus", "onKeyDown", "aria-describedby", "defaultPosition", "mountOnEnter", "unmountOnExit", "disableSwapping", "disableHoverMode", "disableAutoSpacing", "tooltipId", "hoverDelay", "focusDelay", "touchTimeout", "onShow", "onHide"]);
	    var _m = useTooltip({
	        baseId: id,
	        style: style,
	        dense: dense,
	        spacing: spacing,
	        denseSpacing: denseSpacing,
	        vwMargin: vwMargin,
	        vhMargin: vhMargin,
	        position: propPosition,
	        defaultPosition: defaultPosition,
	        disableSwapping: disableSwapping,
	        disableHoverMode: disableHoverMode,
	        disableAutoSpacing: disableAutoSpacing,
	        onFocus: onFocus,
	        onBlur: onBlur,
	        onKeyDown: onKeyDown,
	        onClick: onClick,
	        onMouseEnter: onMouseEnter,
	        onMouseLeave: onMouseLeave,
	        onTouchStart: onTouchStart,
	        onContextMenu: onContextMenu,
	        threshold: threshold,
	    }), elementProps = _m.elementProps, tooltipProps = _m.tooltipProps;
	    if (!tooltipChildren) {
	        if (typeof children === "function") {
	            return children({ id: id, tooltip: null, "aria-describedby": describedBy });
	        }
	        var child_1 = React.Children.only(children);
	        return React.cloneElement(child_1, { id: id, "aria-describedby": describedBy });
	    }
	    var tooltip = (React__default['default'].createElement(Tooltip, __assign$g9({}, tooltipProps, props, { mountOnEnter: mountOnEnter, unmountOnExit: unmountOnExit }), tooltipChildren));
	    if (typeof children === "function") {
	        return children(__assign$g9(__assign$g9({}, elementProps), { tooltip: tooltip }));
	    }
	    var child = React.Children.only(children);
	    // TODO: remove this mess since you should provide handlers to the
	    // `Tooltipped` component instead of the child element.
	    /* istanbul ignore next */
	    var merged = MERGABLE_PROPS.reduce(function (result, propName) {
	        var propHandler = child.props[propName];
	        var configHandler = elementProps[propName];
	        if (!propHandler) {
	            result[propName] = configHandler;
	        }
	        else if (!configHandler) {
	            result[propName] = propHandler;
	        }
	        else {
	            // not sure of a way to actually strongly type this nicely.
	            // eslint-disable-next-line @typescript-eslint/no-explicit-any
	            result[propName] = function (event) {
	                propHandler(event);
	                configHandler(event);
	            };
	        }
	        return result;
	    }, __assign$g9({}, elementProps));
	    return (React__default['default'].createElement(React__default['default'].Fragment, null,
	        React.cloneElement(child, merged),
	        tooltip));
	}

	/* istanbul ignore file */
	/**
	 * This component is used so that tooltips can gain the "hover mode"
	 * functionality in that once a tooltip has become visible by hover, all other
	 * tooltips will become visible immediately until 3 seconds have passed.
	 *
	 * @deprecated \@since 2.8.0 Use the {@link HoverModeProvider} instead.
	 */
	function TooltipHoverModeConfig(_a) {
	    var _b = _a.defaultDelay, defaultDelay = _b === void 0 ? DEFAULT_TOOLTIP_DELAY : _b, _c = _a.delayTimeout, delayTimeout = _c === void 0 ? DEFAULT_TOOLTIP_DELAY : _c, _d = _a.enabled, enabled = _d === void 0 ? true : _d, children = _a.children;
	    return (React__default['default'].createElement(HoverModeProvider, { disabled: !enabled, defaultVisibleInTime: defaultDelay, deactivateTime: delayTimeout }, children));
	}

	var __assign$g8 = (undefined && undefined.__assign) || function () {
	    __assign$g8 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$g8.apply(this, arguments);
	};
	var __rest$1n = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var styles$8 = bem("rmd-slider-value");
	var HORIZONTAL_CLASS_NAMES = {
	    enter: "rmd-slider-value--h-off",
	    enterActive: "rmd-slider-value--h-on rmd-slider-value--animate",
	    exit: "rmd-slider-value--animate",
	    exitActive: "rmd-slider-value--h-off",
	};
	var VERTICAL_CLASS_NAMES = {
	    enter: "rmd-slider-value--v-off",
	    enterActive: "rmd-slider-value--v-on rmd-slider-value--animate",
	    exit: "rmd-slider-value--animate",
	    exitActive: "rmd-slider-value--v-off",
	};
	/**
	 * This component creates the "discrete" slider thumb value by rendering a
	 * tooltip when needed.
	 *
	 * @remarks \@since 2.5.0
	 * @internal
	 */
	function SliderValue(_a) {
	    var _b;
	    var index = _a.index, animate = _a.animate, discrete = _a.discrete, vertical = _a.vertical, children = _a.children, className = _a.className, _c = _a.portal, portal = _c === void 0 ? false : _c, props = __rest$1n(_a, ["index", "animate", "discrete", "vertical", "children", "className", "portal"]);
	    if (!discrete) {
	        return null;
	    }
	    return (React__default['default'].createElement(Tooltip, __assign$g8({}, props, { portal: portal, className: cn(styles$8({
	            h: !vertical,
	            v: vertical,
	        }), (_b = {
	                "rmd-slider-thumb--animate": animate
	            },
	            _b["rmd-slider-thumb--h" + (index + 1)] = !vertical,
	            _b["rmd-slider-thumb--v" + (index + 1)] = vertical,
	            _b), className), classNames: vertical ? VERTICAL_CLASS_NAMES : HORIZONTAL_CLASS_NAMES, position: vertical ? "left" : "above", dense: true }), children));
	}

	/**
	 * @internal
	 */
	var noop$7 = function () {
	    // do nothing
	};
	/**
	 * This is a completely internal hook that helps control the visibility of the
	 * discrete value tooltip's visibility for the `Slider` and `RangeSlider`.
	 *
	 * Note: This isn't 100% there since the tooltip doesn't animate in when the
	 * user holds the mouse down in the same spot for the `animationDuration`.
	 *
	 * @internal
	 * @remarks \@since 2.5.0
	 */
	function useDiscreteValueVisibility(_a) {
	    var active = _a.active, animate = _a.animate, animationDuration = _a.animationDuration, discrete = _a.discrete, disabled = _a.disabled, _b = _a.onBlur, propOnBlur = _b === void 0 ? noop$7 : _b, _c = _a.onFocus, propOnFocus = _c === void 0 ? noop$7 : _c;
	    var ref = React.useRef(null);
	    var isKeyboard = useIsUserInteractionMode("keyboard");
	    // when the user interaction mode changes from keyboard -> mouse by clicking
	    // on the track, need to make sure that the thumb value has the animation
	    // state enabled so it moves at the same speed as the thumb instead of jumping
	    // immediately
	    var _d = React.useState(false), isModeTransition = _d[0], setModeTransition = _d[1];
	    var _e = React.useState(false), visible = _e[0], setVisible = _e[1];
	    if (discrete && visible && disabled) {
	        setVisible(false);
	    }
	    React.useEffect(function () {
	        if (!discrete) {
	            setVisible(false);
	            setModeTransition(false);
	            return;
	        }
	        if (!isKeyboard) {
	            // only considered a "transition" when the tooltip is already visible and
	            // switching away from keyboard mode
	            setModeTransition(visible);
	            return;
	        }
	        // when swapping from mouse/touch -> keyboard, the tooltip's visibility will
	        // need to be enabled since default drag behavior is to hide on drag end.
	        // The drag process automatically focuses the current "target" thumb to help
	        // the user switch between the modes more easily so if the active element is
	        // the current thumb, we're good to go
	        setModeTransition(false);
	        setVisible(document.activeElement === ref.current);
	    }, [isKeyboard, visible, discrete]);
	    React.useEffect(function () {
	        if (!discrete) {
	            return;
	        }
	        if (!active) {
	            setVisible(false);
	            setModeTransition(false);
	            return;
	        }
	        // need to delay the visibility for the same `animationDuration` as the
	        // thumb's active state so that the tooltip appears at the same time the
	        // thumb stops animating with click drag events
	        var timeout = window.setTimeout(function () {
	            setVisible(true);
	            setModeTransition(false);
	        }, animationDuration);
	        return function () {
	            window.clearTimeout(timeout);
	        };
	    }, [active, animationDuration, discrete]);
	    var onBlur = React.useCallback(function (event) {
	        propOnBlur(event);
	        var track = event.currentTarget.parentElement;
	        // need to hide on blur because it _usually_ means the user clicked
	        // somewhere else on the page after using the keyboard. However, it is
	        // possible the user used the keyboard to update the value and then
	        // clicked on the track to update more quickly, so verify that the next
	        // focus element isn't the track or any children of the track.
	        if (!track ||
	            document.activeElement ||
	            !track.contains(document.activeElement)) {
	            ref.current = null;
	            setVisible(false);
	        }
	    }, [propOnBlur]);
	    var onFocus = React.useCallback(function (event) {
	        ref.current = event.currentTarget;
	        propOnFocus(event);
	        if (discrete && isKeyboard) {
	            setVisible(true);
	        }
	    }, [discrete, propOnFocus, isKeyboard]);
	    return {
	        onBlur: onBlur,
	        onFocus: onFocus,
	        animateValue: isModeTransition || (animate && isKeyboard),
	        visible: visible,
	    };
	}

	var __assign$g7 = (undefined && undefined.__assign) || function () {
	    __assign$g7 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$g7.apply(this, arguments);
	};
	var __rest$1m = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var styles$7 = bem("rmd-slider-thumb");
	/**
	 * The slider thumb implements the `role="slider"` for the `Slider` and
	 * `RangeSlider` components.
	 *
	 * @remarks \@since 2.5.0
	 */
	var SliderThumb = React.forwardRef(function SliderThumb(_a, ref) {
	    var propId = _a.id, baseId = _a.baseId, className = _a.className, _b = _a.min, min = _b === void 0 ? DEFAULT_SLIDER_MIN : _b, _c = _a.max, max = _c === void 0 ? DEFAULT_SLIDER_MAX : _c, _d = _a.animationDuration, animationDuration = _d === void 0 ? DEFAULT_SLIDER_ANIMATION_TIME : _d, _e = _a.getValueText, getValueText = _e === void 0 ? DEFAULT_SLIDER_GET_VALUE_TEXT : _e, name = _a.name, value = _a.value, index = _a.index, _f = _a.active, active = _f === void 0 ? false : _f, _g = _a.animate, animate = _g === void 0 ? false : _g, _h = _a.discrete, discrete = _h === void 0 ? false : _h, _j = _a.disabled, disabled = _j === void 0 ? false : _j, _k = _a.vertical, vertical = _k === void 0 ? false : _k, _l = _a.tabIndex, tabIndex = _l === void 0 ? disabled ? -1 : 0 : _l, propOnBlur = _a.onBlur, propOnFocus = _a.onFocus, props = __rest$1m(_a, ["id", "baseId", "className", "min", "max", "animationDuration", "getValueText", "name", "value", "index", "active", "animate", "discrete", "disabled", "vertical", "tabIndex", "onBlur", "onFocus"]);
	    var id = propId || baseId + "-thumb-" + (index + 1);
	    var isFirst = index === 0;
	    var _m = useDiscreteValueVisibility({
	        active: active,
	        animate: animate,
	        discrete: discrete,
	        disabled: disabled,
	        onBlur: propOnBlur,
	        onFocus: propOnFocus,
	        animationDuration: animationDuration,
	    }), onBlur = _m.onBlur, onFocus = _m.onFocus, animateValue = _m.animateValue, visible = _m.visible;
	    var styleOptions = {
	        h: !vertical,
	        h1: !vertical && isFirst,
	        h2: !vertical && !isFirst,
	        v: vertical,
	        v1: vertical && isFirst,
	        v2: vertical && !isFirst,
	        active: active,
	        animate: animate,
	        disabled: disabled,
	    };
	    return (React__default['default'].createElement(React__default['default'].Fragment, null,
	        disabled && (React__default['default'].createElement("span", { className: cn(styles$7(__assign$g7(__assign$g7({}, styleOptions), { mask: true, "mask-h": !vertical, "mask-v": vertical })), className) })),
	        React__default['default'].createElement("span", __assign$g7({}, props, { id: id, ref: ref, role: "slider", "aria-valuemin": min, "aria-valuemax": max, "aria-valuenow": value, "aria-valuetext": getValueText(value) || undefined, "aria-disabled": disabled || undefined, "aria-orientation": (vertical && "vertical") || undefined, tabIndex: tabIndex, onBlur: onBlur, onFocus: onFocus, className: cn(styles$7(__assign$g7(__assign$g7({}, styleOptions), { "disabled-h": disabled && !vertical, "disabled-v": disabled && vertical })), className) })),
	        React__default['default'].createElement("input", { id: id + "-value", type: "hidden", name: name, value: value }),
	        React__default['default'].createElement(SliderValue, { id: id + "-value", visible: visible, index: index, animate: animateValue, discrete: discrete, vertical: vertical }, value)));
	});

	var __assign$g6 = (undefined && undefined.__assign) || function () {
	    __assign$g6 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$g6.apply(this, arguments);
	};
	var __rest$1l = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var styles$6 = bem("rmd-slider-track");
	/**
	 * The `SliderTrack` component is used to show the distance that the slider can
	 * be dragged as well as a visual indication of the value. The main usage is to
	 * update the custom css properties for the thumb's values.
	 *
	 * @remarks \@since 2.5.0
	 */
	var SliderTrack = React.forwardRef(function SliderTrack(_a, ref) {
	    var _b;
	    var propStyle = _a.style, className = _a.className, children = _a.children, _c = _a.animate, animate = _c === void 0 ? false : _c, _d = _a.vertical, vertical = _d === void 0 ? false : _d, _e = _a.disabled, disabled = _e === void 0 ? false : _e, thumb1Percentage = _a.thumb1Percentage, thumb2Percentage = _a.thumb2Percentage, props = __rest$1l(_a, ["style", "className", "children", "animate", "vertical", "disabled", "thumb1Percentage", "thumb2Percentage"]);
	    var style = __assign$g6(__assign$g6({}, propStyle), (_b = {}, _b[THUMB_1_VAR] = thumb1Percentage, _b[THUMB_2_VAR] = thumb2Percentage, _b));
	    return (React__default['default'].createElement("span", __assign$g6({}, props, { ref: ref, style: style, className: cn(styles$6({
	            animate: animate,
	            hoverable: !disabled,
	            disabled: disabled,
	            h: !vertical,
	            h1: !vertical && !thumb2Percentage,
	            h2: !vertical && thumb2Percentage,
	            v: vertical,
	            v1: vertical && !thumb2Percentage,
	            v2: vertical && thumb2Percentage,
	        }), className) }), children));
	});

	/**
	 * Gets the number of steps in the allowed range of values.
	 *
	 * @internal
	 * @remarks \@since 2.5.0
	 */
	var getSteps = function (min, max, step) {
	    return Math.abs(max - min) / step;
	};
	/**
	 *
	 * @internal
	 * @remarks \@since 2.5.0
	 */
	var getJumpValue = function (min, max, step, jump) {
	    var steps = getSteps(min, max, step);
	    var value = jump !== null && jump !== void 0 ? jump : (steps / 10) * step;
	    if (Number.isInteger(step)) {
	        return Math.ceil(value);
	    }
	    return value;
	};
	/**
	 * @internal
	 * @remarks \@since 2.5.0
	 */
	var isMouseEvent = function (event) {
	    return event.type === "mousedown" ||
	        event.type === "mousemove" ||
	        event.type === "mouseup";
	};
	/**
	 * @internal
	 * @remarks \@since 2.5.0
	 */
	var isTouchEvent = function (event) {
	    return event.type === "touchstart" ||
	        event.type === "touchmove" ||
	        event.type === "touchend";
	};
	/**
	 * @internal
	 * @remarks \@since 2.5.0
	 */
	var isRangeSlider = function (controls) { return Array.isArray(controls.value); };
	/**
	 * This is used to get the next value for the slider while being dragged via
	 * mouse or touch.
	 *
	 * @internal
	 * @remarks \@since 2.5.0
	 */
	var getDragValue = function (_a) {
	    var min = _a.min, max = _a.max, step = _a.step, vertical = _a.vertical, clientX = _a.clientX, clientY = _a.clientY, left = _a.left, top = _a.top, height = _a.height, width = _a.width, isRtl = _a.isRtl, minValue = _a.minValue, maxValue = _a.maxValue;
	    var sliderSize = vertical ? height : width;
	    var sliderPosition = vertical ? top + height : left;
	    var cursorPosition = vertical ? clientY : clientX;
	    var difference = vertical
	        ? sliderPosition - cursorPosition
	        : cursorPosition - sliderPosition;
	    var distanceDragged = Math.min(Math.max(0, difference), sliderSize);
	    var percentageDragged = distanceDragged / sliderSize;
	    if (isRtl && !vertical) {
	        percentageDragged = 1 - percentageDragged;
	    }
	    var range = max - min;
	    var steps = getSteps(min, max, step);
	    var value = percentageDragged * range + min;
	    var rounded = nearest(value, minValue, maxValue, steps, range);
	    return {
	        value: rounded,
	        current: percentageDragged,
	    };
	};
	/**
	 * Small util to get the drag percentage for the thumbs within a slider. This
	 * makes sure to use the current `dragValue` when possible so that the thumb
	 * moves with the mouse/touch instead of only for the current values. See
	 * {@link getDragValue} for more examples.
	 *
	 * @remarks \@since 2.5.0
	 * @internal
	 */
	var getDragPercentage = function (_a) {
	    var min = _a.min, max = _a.max, dragging = _a.dragging, dragValue = _a.dragValue, draggingIndex = _a.draggingIndex, thumb1Value = _a.thumb1Value, thumb2Value = _a.thumb2Value;
	    var thumb1Percentage = dragging && draggingIndex === 0
	        ? dragValue
	        : getPercentage(min, max, thumb1Value);
	    var thumb2Percentage;
	    if (typeof thumb2Value === "number") {
	        var percentage = getPercentage(min, max, thumb2Value);
	        thumb1Percentage = Math.min(thumb1Percentage, percentage);
	        thumb2Percentage =
	            dragging && draggingIndex === 1
	                ? Math.max(thumb1Percentage, dragValue)
	                : percentage;
	    }
	    return {
	        thumb1Percentage: thumb1Percentage * 100 + "%",
	        thumb2Percentage: typeof thumb2Percentage === "number"
	            ? thumb2Percentage * 100 + "%"
	            : undefined,
	    };
	};

	var __assign$g5 = (undefined && undefined.__assign) || function () {
	    __assign$g5 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$g5.apply(this, arguments);
	};
	var __rest$1k = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var VALID_KEYS = [
	    "ArrowDown",
	    "ArrowUp",
	    "ArrowLeft",
	    "ArrowRight",
	    "Home",
	    "End",
	    "PageUp",
	    "PageDown",
	];
	/**
	 * This hook provides all the logic for updating the slider's when the user
	 * intracts with the slider.
	 *
	 * @internal
	 * @remarks \@since 2.5.0
	 */
	function useSliderControls(_a) {
	    var _b, _c;
	    var ref = _a.ref, propThumb1Ref = _a.thumb1Ref, propThumb2Ref = _a.thumb2Ref, min = _a.min, max = _a.max, step = _a.step, _d = _a.disabled, disabled = _d === void 0 ? false : _d, _e = _a.vertical, vertical = _e === void 0 ? false : _e, onBlur = _a.onBlur, onKeyDown = _a.onKeyDown, onMouseDown = _a.onMouseDown, onTouchStart = _a.onTouchStart, _f = _a.animationDuration, animationDuration = _f === void 0 ? DEFAULT_SLIDER_ANIMATION_TIME : _f, controls = __rest$1k(_a, ["ref", "thumb1Ref", "thumb2Ref", "min", "max", "step", "disabled", "vertical", "onBlur", "onKeyDown", "onMouseDown", "onTouchStart", "animationDuration"]);
	    var trackRef = React.useRef(null);
	    var thumb1Ref = React.useRef(null);
	    var thumb2Ref = React.useRef(null);
	    var _g = React.useState(false), dragging = _g[0], setDragging = _g[1];
	    var _h = React.useState(min), dragValue = _h[0], setDragValue = _h[1];
	    var _j = React.useState(null), draggingBy = _j[0], setDraggingBy = _j[1];
	    var _k = React.useState(null), draggingIndex = _k[0], setDraggingIndex = _k[1];
	    var controlsRef = React.useRef(controls);
	    useIsomorphicLayoutEffect(function () {
	        controlsRef.current = controls;
	    });
	    var dir = useDir().dir;
	    var isRtl = dir === "rtl";
	    var thumb1Value;
	    var thumb1Percentage;
	    var thumb2Value;
	    var thumb2Percentage;
	    if (isRangeSlider(controls)) {
	        _b = controls.value, thumb1Value = _b[0], thumb2Value = _b[1];
	        (_c = getDragPercentage({
	            min: min,
	            max: max,
	            thumb1Value: thumb1Value,
	            thumb2Value: thumb2Value,
	            dragging: dragging,
	            dragValue: dragValue,
	            draggingIndex: draggingIndex,
	        }), thumb1Percentage = _c.thumb1Percentage, thumb2Percentage = _c.thumb2Percentage);
	    }
	    else {
	        thumb1Value = controls.value;
	        (thumb1Percentage = getDragPercentage({
	            min: min,
	            max: max,
	            thumb1Value: thumb1Value,
	            dragging: dragging,
	            dragValue: dragValue,
	            draggingIndex: draggingIndex,
	        }).thumb1Percentage);
	    }
	    /**
	     * The main handler for updating the value of the slider. To help keep the
	     * drag experience smooth, some values are stored in refs to prevent the
	     * `useEffect` from being run during renders which adds and removes the move
	     * event handlers
	     */
	    var drag = React.useCallback(function (event) {
	        var track = trackRef.current;
	        var slider1 = thumb1Ref.current;
	        var slider2 = thumb2Ref.current;
	        var altKey = event.altKey, ctrlKey = event.ctrlKey, metaKey = event.metaKey, shiftKey = event.shiftKey;
	        if (altKey ||
	            ctrlKey ||
	            metaKey ||
	            shiftKey ||
	            disabled ||
	            !track ||
	            !slider1 ||
	            (isMouseEvent(event) && event.button !== 0) ||
	            (isTouchEvent(event) && event.changedTouches.length !== 1) ||
	            (!isMouseEvent(event) && !isTouchEvent(event))) {
	            return;
	        }
	        // prevent text from being highlighted while dragging the slider
	        // can't do it on touch events due to being passive events in later
	        // versions of React
	        if (!isTouchEvent(event)) {
	            event.preventDefault();
	        }
	        event.stopPropagation();
	        // get the current mouse/touch position to help determine hwo far the
	        // slider is being dragged
	        var clientX;
	        var clientY;
	        if (isMouseEvent(event)) {
	            (clientX = event.clientX, clientY = event.clientY);
	        }
	        else {
	            var touch = event.changedTouches[0];
	            (clientX = touch.clientX, clientY = touch.clientY);
	        }
	        var index = 0;
	        var slider = slider1;
	        if (slider2) {
	            // if we aren't dragging yet, try to find the slider closest to the
	            // mouse/touch position and use that one
	            if (draggingIndex === null) {
	                var x1 = slider1.getBoundingClientRect().x;
	                var x2 = slider2.getBoundingClientRect().x;
	                var y1 = slider1.getBoundingClientRect().y;
	                var y2 = slider2.getBoundingClientRect().y;
	                if (vertical) {
	                    index = Math.abs(clientY - y1) < Math.abs(clientY - y2) ? 0 : 1;
	                }
	                else {
	                    index = Math.abs(clientX - x1) < Math.abs(clientX - x2) ? 0 : 1;
	                }
	            }
	            else {
	                index = draggingIndex;
	            }
	            slider = index === 0 ? slider1 : slider2;
	        }
	        // if we aren't dragging yet, want to focus the slider element to make it
	        // easier to switch between mouse dragging and keyboard "dragging"
	        if (draggingIndex !== index) {
	            slider.focus();
	            setDraggingIndex(index);
	        }
	        setDraggingBy(isMouseEvent(event) ? "mouse" : "touch");
	        var _a = track.getBoundingClientRect(), left = _a.left, top = _a.top, height = _a.height, width = _a.width;
	        var options = {
	            min: min,
	            max: max,
	            step: step,
	            vertical: vertical,
	            clientX: clientX,
	            clientY: clientY,
	            left: left,
	            top: top,
	            height: height,
	            width: width,
	            isRtl: isRtl,
	            minValue: min,
	            maxValue: max,
	        };
	        var controls = controlsRef.current;
	        if (isRangeSlider(controls)) {
	            var _b = controls.value, thumb1Value_1 = _b[0], thumb2Value_1 = _b[1];
	            var _c = getDragValue(__assign$g5(__assign$g5({}, options), { minValue: index === 0 ? min : thumb1Value_1 + step, maxValue: index === 1 ? max : thumb2Value_1 - step })), value = _c.value, current = _c.current;
	            setDragValue(current);
	            controls.setValue(index === 0 ? [value, thumb2Value_1] : [thumb1Value_1, value]);
	        }
	        else {
	            var _d = getDragValue(options), value = _d.value, current = _d.current;
	            setDragValue(current);
	            controls.setValue(value);
	        }
	    }, [disabled, isRtl, draggingIndex, max, min, step, vertical]);
	    var stop = React.useCallback(function () {
	        controlsRef.current.persist();
	        setDragging(false);
	        setDraggingIndex(null);
	        setDraggingBy(null);
	    }, []);
	    React.useEffect(function () {
	        if (draggingBy === null) {
	            return;
	        }
	        if (draggingBy === "mouse") {
	            window.addEventListener("mousemove", drag);
	            window.addEventListener("mouseup", stop);
	        }
	        else {
	            window.addEventListener("touchmove", drag);
	            window.addEventListener("touchend", stop);
	        }
	        return function () {
	            if (draggingBy === "mouse") {
	                window.removeEventListener("mousemove", drag);
	                window.removeEventListener("mouseup", stop);
	            }
	            else {
	                window.removeEventListener("touchmove", drag);
	                window.removeEventListener("touchend", stop);
	            }
	        };
	    }, [draggingBy, drag, stop]);
	    React.useEffect(function () {
	        if (draggingIndex === null && draggingBy === null) {
	            return;
	        }
	        // I don't know how to reach this flow.. so maybe can be removed?
	        /* istanbul ignore if */
	        if (draggingIndex === null) {
	            setDragging(false);
	            return;
	        }
	        var timeout = window.setTimeout(function () {
	            setDragging(true);
	        }, animationDuration);
	        return function () {
	            window.clearTimeout(timeout);
	        };
	    }, [draggingIndex, draggingBy, animationDuration]);
	    var handleBlur = React.useCallback(function (event) {
	        if (onBlur) {
	            onBlur(event);
	        }
	        controlsRef.current.persist();
	    }, [onBlur]);
	    /**
	     * Note: this should be attached to the `SliderTrack` component.
	     */
	    var handleMouseDown = React.useCallback(function (event) {
	        if (onMouseDown) {
	            onMouseDown(event);
	        }
	        // only call drag again when the dragging by isn't null since it can cause
	        // the "drag" events to be re-started if the mouse appears over the slider
	        // thumb again
	        if (draggingBy === null) {
	            drag(event);
	        }
	    }, [drag, draggingBy, onMouseDown]);
	    /**
	     * Note: this should be attached to the `SliderTrack` component.
	     */
	    var handleTouchStart = React.useCallback(function (event) {
	        if (onTouchStart) {
	            onTouchStart(event);
	        }
	        // only call drag again when the dragging by isn't null since it can cause
	        // the "drag" events to be re-started if the user's finger appears over
	        // the slider thumb again
	        if (draggingBy === null) {
	            drag(event);
	        }
	    }, [drag, draggingBy, onTouchStart]);
	    /**
	     * Note: this should be attached to each `SliderThumb` component.
	     */
	    var handleKeyDown = React.useCallback(function (event) {
	        if (onKeyDown) {
	            onKeyDown(event);
	        }
	        var key = event.key, altKey = event.altKey, ctrlKey = event.ctrlKey, metaKey = event.metaKey, shiftKey = event.shiftKey;
	        if (altKey ||
	            ctrlKey ||
	            metaKey ||
	            shiftKey ||
	            disabled ||
	            !VALID_KEYS.includes(key)) {
	            return;
	        }
	        var controls;
	        if (isRangeSlider(controlsRef.current)) {
	            var _a = controlsRef.current, increment_1 = _a.increment, incrementJump_1 = _a.incrementJump, decrement_1 = _a.decrement, decrementJump_1 = _a.decrementJump, minimum_1 = _a.minimum, maximum_1 = _a.maximum;
	            var index = event.currentTarget === thumb2Ref.current ? 1 : 0;
	            controls = {
	                increment: increment_1.bind(null, index),
	                incrementJump: incrementJump_1.bind(null, index),
	                decrement: decrement_1.bind(null, index),
	                decrementJump: decrementJump_1.bind(null, index),
	                minimum: minimum_1.bind(null, index),
	                maximum: maximum_1.bind(null, index),
	            };
	        }
	        else {
	            controls = controlsRef.current;
	        }
	        var increment = controls.increment, incrementJump = controls.incrementJump, decrement = controls.decrement, decrementJump = controls.decrementJump, minimum = controls.minimum, maximum = controls.maximum;
	        event.preventDefault();
	        event.stopPropagation();
	        switch (key) {
	            case "ArrowUp":
	            case "ArrowRight":
	                increment();
	                break;
	            case "ArrowDown":
	            case "ArrowLeft":
	                decrement();
	                break;
	            case "Home":
	                minimum();
	                break;
	            case "End":
	                maximum();
	                break;
	            case "PageUp":
	                incrementJump();
	                break;
	            case "PageDown":
	                decrementJump();
	                break;
	        }
	    }, [onKeyDown, disabled]);
	    var trackRefHandler = React.useCallback(function (instance) {
	        applyRef(instance, ref);
	        trackRef.current = instance;
	    }, [ref]);
	    var thumb1RefHandler = React.useCallback(function (instance) {
	        applyRef(instance, propThumb1Ref);
	        thumb1Ref.current = instance;
	    }, [propThumb1Ref]);
	    var thumb2RefHandler = React.useCallback(function (instance) {
	        applyRef(instance, propThumb2Ref);
	        thumb2Ref.current = instance;
	    }, [propThumb2Ref]);
	    return {
	        thumb1Ref: thumb1RefHandler,
	        thumb1Value: thumb1Value,
	        thumb1Percentage: thumb1Percentage,
	        thumb2Ref: thumb2RefHandler,
	        thumb2Value: thumb2Value,
	        thumb2Percentage: thumb2Percentage,
	        dragging: dragging,
	        draggingIndex: draggingIndex,
	        ref: trackRefHandler,
	        onBlur: handleBlur,
	        onKeyDown: handleKeyDown,
	        onMouseDown: handleMouseDown,
	        onTouchStart: handleTouchStart,
	    };
	}

	var __assign$g4 = (undefined && undefined.__assign) || function () {
	    __assign$g4 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$g4.apply(this, arguments);
	};
	var __rest$1j = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * The `Slider` component allows the user to select a single value from a range
	 * of numbers. The functionality for controlling the value of this component is
	 * provided by the `useSlider` hook.
	 *
	 * @remarks \@since 2.5.0
	 */
	var Slider = React.forwardRef(function Slider(_a, ref) {
	    var baseId = _a.baseId, propTrackProps = _a.trackProps, label = _a.label, labelProps = _a.labelProps, thumbLabel = _a.thumbLabel, thumbLabelledBy = _a.thumbLabelledBy, thumbProps = _a.thumbProps, min = _a.min, max = _a.max, step = _a.step, _b = _a.discrete, discrete = _b === void 0 ? false : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, _d = _a.vertical, vertical = _d === void 0 ? false : _d, onBlur = _a.onBlur, onMouseDown = _a.onMouseDown, onTouchStart = _a.onTouchStart, _e = _a.getValueText, getValueText = _e === void 0 ? DEFAULT_SLIDER_GET_VALUE_TEXT : _e, _f = _a.animationDuration, animationDuration = _f === void 0 ? DEFAULT_SLIDER_ANIMATION_TIME : _f, value = _a.value, minimum = _a.minimum, maximum = _a.maximum, increment = _a.increment, incrementJump = _a.incrementJump, decrement = _a.decrement, decrementJump = _a.decrementJump, persist = _a.persist, setValue = _a.setValue, props = __rest$1j(_a, ["baseId", "trackProps", "label", "labelProps", "thumbLabel", "thumbLabelledBy", "thumbProps", "min", "max", "step", "discrete", "disabled", "vertical", "onBlur", "onMouseDown", "onTouchStart", "getValueText", "animationDuration", "value", "minimum", "maximum", "increment", "incrementJump", "decrement", "decrementJump", "persist", "setValue"]);
	    var _g = useSliderControls({
	        ref: propTrackProps === null || propTrackProps === void 0 ? void 0 : propTrackProps.ref,
	        thumb1Ref: thumbProps === null || thumbProps === void 0 ? void 0 : thumbProps.ref,
	        min: min,
	        max: max,
	        step: step,
	        value: value,
	        disabled: disabled,
	        vertical: vertical,
	        onBlur: onBlur,
	        onKeyDown: thumbProps === null || thumbProps === void 0 ? void 0 : thumbProps.onKeyDown,
	        onMouseDown: onMouseDown,
	        onTouchStart: onTouchStart,
	        animationDuration: animationDuration,
	        minimum: minimum,
	        maximum: maximum,
	        increment: increment,
	        incrementJump: incrementJump,
	        decrement: decrement,
	        decrementJump: decrementJump,
	        persist: persist,
	        setValue: setValue,
	    }), thumb1Ref = _g.thumb1Ref, thumb1Value = _g.thumb1Value, dragging = _g.dragging, draggingIndex = _g.draggingIndex, onKeyDown = _g.onKeyDown, trackProps = __rest$1j(_g, ["thumb1Ref", "thumb1Value", "thumb2Ref", "thumb2Value", "dragging", "draggingIndex", "onKeyDown"]);
	    var labelId = "";
	    if (label) {
	        labelId = (labelProps === null || labelProps === void 0 ? void 0 : labelProps.id) || baseId + "-label";
	    }
	    return (React__default['default'].createElement(SliderContainer, __assign$g4({}, props, { ref: ref, label: label, labelId: labelId, labelProps: labelProps, disabled: disabled, vertical: vertical }),
	        React__default['default'].createElement(SliderTrack, __assign$g4({ id: baseId }, propTrackProps, trackProps, { animate: !dragging, disabled: disabled, vertical: vertical }),
	            React__default['default'].createElement(SliderThumb, __assign$g4({}, thumbProps, { "aria-label": thumbLabel, "aria-labelledby": thumbLabelledBy || labelId, baseId: baseId, ref: thumb1Ref, getValueText: getValueText, min: min, max: max, discrete: discrete, disabled: disabled, vertical: vertical, animate: !dragging, animationDuration: animationDuration, value: thumb1Value, index: 0, active: draggingIndex === 0, onKeyDown: onKeyDown })))));
	});

	var __assign$g3 = (undefined && undefined.__assign) || function () {
	    __assign$g3 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$g3.apply(this, arguments);
	};
	var __rest$1i = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * The `RangeSlider` component allows the user to select a min and max value from
	 * a predefined range of numbers. The functionality for controlling the value of
	 * this component is provided by the `useRangeSlider` hook.
	 *
	 * @remarks \@since 2.5.0
	 */
	var RangeSlider = React.forwardRef(function RangeSlider(_a, ref) {
	    var baseId = _a.baseId, min = _a.min, max = _a.max, step = _a.step, _b = _a.discrete, discrete = _b === void 0 ? false : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, _d = _a.vertical, vertical = _d === void 0 ? false : _d, label = _a.label, labelProps = _a.labelProps, propTrackProps = _a.trackProps, onBlur = _a.onBlur, onMouseDown = _a.onMouseDown, onTouchStart = _a.onTouchStart, _e = _a.getValueText, getValueText = _e === void 0 ? DEFAULT_SLIDER_GET_VALUE_TEXT : _e, _f = _a.animationDuration, animationDuration = _f === void 0 ? DEFAULT_SLIDER_ANIMATION_TIME : _f, value = _a.value, minimum = _a.minimum, maximum = _a.maximum, increment = _a.increment, incrementJump = _a.incrementJump, decrement = _a.decrement, decrementJump = _a.decrementJump, persist = _a.persist, setValue = _a.setValue, thumb1Props = _a.thumb1Props, _g = _a.thumb1Label, thumb1Label = _g === void 0 ? "Min" : _g, thumb1LabelledBy = _a.thumb1LabelledBy, thumb2Props = _a.thumb2Props, _h = _a.thumb2Label, thumb2Label = _h === void 0 ? "Max" : _h, thumb2LabelledBy = _a.thumb2LabelledBy, props = __rest$1i(_a, ["baseId", "min", "max", "step", "discrete", "disabled", "vertical", "label", "labelProps", "trackProps", "onBlur", "onMouseDown", "onTouchStart", "getValueText", "animationDuration", "value", "minimum", "maximum", "increment", "incrementJump", "decrement", "decrementJump", "persist", "setValue", "thumb1Props", "thumb1Label", "thumb1LabelledBy", "thumb2Props", "thumb2Label", "thumb2LabelledBy"]);
	    var _j = useSliderControls({
	        ref: propTrackProps === null || propTrackProps === void 0 ? void 0 : propTrackProps.ref,
	        thumb1Ref: thumb1Props === null || thumb1Props === void 0 ? void 0 : thumb1Props.ref,
	        thumb2Ref: thumb2Props === null || thumb2Props === void 0 ? void 0 : thumb2Props.ref,
	        min: min,
	        max: max,
	        step: step,
	        value: value,
	        disabled: disabled,
	        vertical: vertical,
	        onBlur: onBlur,
	        onMouseDown: onMouseDown,
	        onTouchStart: onTouchStart,
	        animationDuration: animationDuration,
	        minimum: minimum,
	        maximum: maximum,
	        increment: increment,
	        incrementJump: incrementJump,
	        decrement: decrement,
	        decrementJump: decrementJump,
	        persist: persist,
	        setValue: setValue,
	    }), thumb1Ref = _j.thumb1Ref, thumb1Value = _j.thumb1Value, thumb2Ref = _j.thumb2Ref, thumb2Value = _j.thumb2Value, dragging = _j.dragging, draggingIndex = _j.draggingIndex, onKeyDown = _j.onKeyDown, trackProps = __rest$1i(_j, ["thumb1Ref", "thumb1Value", "thumb2Ref", "thumb2Value", "dragging", "draggingIndex", "onKeyDown"]);
	    var thumb1KeyDown = React.useCallback(function (event) {
	        if (thumb1Props === null || thumb1Props === void 0 ? void 0 : thumb1Props.onKeyDown) {
	            thumb1Props.onKeyDown(event);
	        }
	        onKeyDown(event);
	    }, [thumb1Props, onKeyDown]);
	    var thumb2KeyDown = React.useCallback(function (event) {
	        if (thumb2Props === null || thumb2Props === void 0 ? void 0 : thumb2Props.onKeyDown) {
	            thumb2Props.onKeyDown(event);
	        }
	        onKeyDown(event);
	    }, [thumb2Props, onKeyDown]);
	    var thumbProps = {
	        baseId: baseId,
	        min: min,
	        max: max,
	        discrete: discrete,
	        disabled: disabled,
	        vertical: vertical,
	        animate: !dragging,
	        animationDuration: animationDuration,
	        getValueText: getValueText,
	    };
	    var labelId = "";
	    if (label) {
	        labelId = (labelProps === null || labelProps === void 0 ? void 0 : labelProps.id) || baseId + "-label";
	    }
	    return (React__default['default'].createElement(SliderContainer, __assign$g3({}, props, { ref: ref, label: label, labelId: labelId, labelProps: labelProps, disabled: disabled, vertical: vertical }),
	        React__default['default'].createElement(SliderTrack, __assign$g3({ id: baseId }, propTrackProps, trackProps, { animate: !dragging, disabled: disabled, vertical: vertical }),
	            React__default['default'].createElement(SliderThumb, __assign$g3({ "aria-label": thumb1Label, "aria-labelledby": thumb1LabelledBy }, thumb1Props, thumbProps, { ref: thumb1Ref, value: thumb1Value, index: 0, active: draggingIndex === 0, onKeyDown: thumb1KeyDown })),
	            React__default['default'].createElement(SliderThumb, __assign$g3({ "aria-label": thumb2Label, "aria-labelledby": thumb2LabelledBy }, thumb2Props, thumbProps, { ref: thumb2Ref, value: thumb2Value, index: 1, active: draggingIndex === 1, onKeyDown: thumb2KeyDown })))));
	});

	var noop$6 = function () {
	    // do nothing
	};
	/**
	 * This hook is used to control the value and behavior of the `Slider`
	 * component. The first argument will contain the current slider value while
	 * the second argument will be all the props required to control the `Slider`
	 * component.
	 *
	 * @param defaultValue - An optional default value to use for the slider. This
	 * will default to the `min` option when undefined.
	 * @param options - An object containing the `min` and `max` values allowed for
	 * the slider as well as a `step` to indicate valid values between the `min` and
	 * `max`.
	 * @returns an ordered list containing the current value followed by the
	 * `Slider` props
	 * @remarks \@since 2.5.0
	 */
	function useSlider(defaultValue, _a) {
	    var _b = _a === void 0 ? {} : _a, _c = _b.min, min = _c === void 0 ? DEFAULT_SLIDER_MIN : _c, _d = _b.max, max = _d === void 0 ? DEFAULT_SLIDER_MAX : _d, _e = _b.step, step = _e === void 0 ? DEFAULT_SLIDER_STEP : _e, propJump = _b.jump, _f = _b.updateOn, updateOn = _f === void 0 ? "change" : _f, _g = _b.onChange, onChange = _g === void 0 ? noop$6 : _g;
	    var jump = React.useMemo(function () { return getJumpValue(min, max, step, propJump); }, [
	        min,
	        max,
	        step,
	        propJump,
	    ]);
	    // since the `currentValue` is a ref, this state is used to force a re-render
	    // to get the updated value from the ref.
	    var _h = React.useState([]), hack = _h[1];
	    var _j = React.useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : min), value = _j[0], setValue = _j[1];
	    var currentValue = React.useRef(value);
	    var increment = React.useCallback(function () {
	        setValue(function (prevValue) { return Math.max(min, Math.min(max, prevValue + step)); });
	    }, [min, max, step]);
	    var incrementJump = React.useCallback(function () {
	        setValue(function (prevValue) { return Math.max(min, Math.min(max, prevValue + jump)); });
	    }, [min, max, jump]);
	    var decrement = React.useCallback(function () {
	        setValue(function (prevValue) { return Math.max(min, Math.min(max, prevValue - step)); });
	    }, [min, max, step]);
	    var decrementJump = React.useCallback(function () {
	        setValue(function (prevValue) { return Math.max(min, Math.min(max, prevValue - jump)); });
	    }, [min, max, jump]);
	    var minimum = React.useCallback(function () {
	        setValue(min);
	    }, [min]);
	    var maximum = React.useCallback(function () {
	        setValue(max);
	    }, [max]);
	    var persist = React.useCallback(function () {
	        if (currentValue.current === value) {
	            return;
	        }
	        onChange(value);
	        currentValue.current = value;
	        hack([]);
	    }, [onChange, value]);
	    var prev = React.useRef({ min: min, max: max, step: step });
	    if (prev.current.min !== min ||
	        prev.current.max !== max ||
	        prev.current.step !== step) {
	        // ensure that if the `min`, `max`, or `step` value changes that the value
	        // is updated as well. Without this, there will be a runtime error if the
	        // value is not within the new range.
	        prev.current = { min: min, max: max, step: step };
	        var nextValue = nearest(value, min, max, getSteps(min, max, step));
	        currentValue.current = nextValue;
	        setValue(nextValue);
	    }
	    if (updateOn === "change" && currentValue.current !== value) {
	        currentValue.current = value;
	    }
	    return [
	        currentValue.current,
	        {
	            min: min,
	            max: max,
	            step: step,
	            value: value,
	            increment: increment,
	            incrementJump: incrementJump,
	            decrement: decrement,
	            decrementJump: decrementJump,
	            minimum: minimum,
	            maximum: maximum,
	            persist: persist,
	            setValue: setValue,
	        },
	    ];
	}

	var noop$5 = function () {
	    // do nothing
	};
	/**
	 * This hook is used to control the value and behavior of the `RangeSlider`
	 * component. The first argument will contain the current slider value while the
	 * second argument will be all the props required to control the `RangeSlider`
	 * component.
	 *
	 * @param defaultValue - An optional default value to use. When omitted, this
	 * will be the `[min, max]` values
	 * @param options - An object containing the `min` and `max` values allowed for
	 * the slider as well as a `step` to indicate valid values between the `min` and
	 * `max`.
	 * @returns an ordered list containing the current value followed by the
	 * `RangeSlider` props
	 * @remarks \@since 2.5.0
	 */
	function useRangeSlider(defaultValue, _a) {
	    var _b = _a === void 0 ? {} : _a, _c = _b.min, min = _c === void 0 ? DEFAULT_SLIDER_MIN : _c, _d = _b.max, max = _d === void 0 ? DEFAULT_SLIDER_MAX : _d, _e = _b.step, step = _e === void 0 ? DEFAULT_SLIDER_STEP : _e, propJump = _b.jump, _f = _b.updateOn, updateOn = _f === void 0 ? "change" : _f, _g = _b.onChange, onChange = _g === void 0 ? noop$5 : _g;
	    var jump = React.useMemo(function () { return getJumpValue(min, max, step, propJump); }, [
	        min,
	        max,
	        step,
	        propJump,
	    ]);
	    // since the `currentValue` is a ref, this state is used to force a re-render
	    // to get the updated value from the ref.
	    var _h = React.useState([]), hack = _h[1];
	    var _j = React.useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : [min, max]), value = _j[0], setValue = _j[1];
	    var currentValue = React.useRef(value);
	    var update = React.useCallback(function (_a) {
	        var index = _a.index, type = _a.type;
	        setValue(function (_a) {
	            var thumb1Value = _a[0], thumb2Value = _a[1];
	            var value;
	            var minValue = min;
	            var maxValue = max;
	            if (index === 0) {
	                value = thumb1Value;
	                maxValue = thumb2Value - step;
	            }
	            else {
	                value = thumb2Value;
	                minValue = thumb1Value + step;
	            }
	            switch (type) {
	                case "min":
	                    value = minValue;
	                    break;
	                case "max":
	                    value = maxValue;
	                    break;
	                case "increment":
	                    value += step;
	                    break;
	                case "decrement":
	                    value -= step;
	                    break;
	                case "increment-jump":
	                    value += jump;
	                    break;
	                case "decrement-jump":
	                    value -= jump;
	                    break;
	            }
	            value = Math.max(minValue, Math.min(maxValue, value));
	            return index === 0 ? [value, thumb2Value] : [thumb1Value, value];
	        });
	    }, [jump, max, min, step]);
	    var increment = React.useCallback(function (index) { return update({ index: index, type: "increment" }); }, [update]);
	    var incrementJump = React.useCallback(function (index) { return update({ index: index, type: "increment-jump" }); }, [update]);
	    var decrement = React.useCallback(function (index) { return update({ index: index, type: "decrement" }); }, [update]);
	    var decrementJump = React.useCallback(function (index) { return update({ index: index, type: "decrement-jump" }); }, [update]);
	    var minimum = React.useCallback(function (index) { return update({ index: index, type: "min" }); }, [update]);
	    var maximum = React.useCallback(function (index) { return update({ index: index, type: "max" }); }, [update]);
	    var persist = React.useCallback(function () {
	        var _a = currentValue.current, prev1 = _a[0], prev2 = _a[1];
	        if (prev1 === value[0] && prev2 === value[1]) {
	            return;
	        }
	        onChange(value);
	        currentValue.current = value;
	        hack([]);
	    }, [onChange, value]);
	    var prev = React.useRef({ min: min, max: max, step: step });
	    if (prev.current.min !== min ||
	        prev.current.max !== max ||
	        prev.current.step !== step) {
	        // ensure that if the `min`, `max`, or `step` value changes that the value
	        // is updated as well. Without this, there will be a runtime error if the
	        // value is not within the new range.
	        prev.current = { min: min, max: max, step: step };
	        var steps = getSteps(min, max, step);
	        var nextValue = [
	            nearest(value[0], min, max, steps),
	            nearest(value[1], min, max, steps),
	        ];
	        currentValue.current = nextValue;
	        setValue(nextValue);
	    }
	    if (updateOn === "change" && currentValue.current !== value) {
	        currentValue.current = value;
	    }
	    return [
	        currentValue.current,
	        {
	            min: min,
	            max: max,
	            step: step,
	            value: value,
	            minimum: minimum,
	            maximum: maximum,
	            increment: increment,
	            incrementJump: incrementJump,
	            decrement: decrement,
	            decrementJump: decrementJump,
	            persist: persist,
	            setValue: setValue,
	        },
	    ];
	}

	var __assign$g2 = (undefined && undefined.__assign) || function () {
	    __assign$g2 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$g2.apply(this, arguments);
	};
	var __rest$1h = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$L = bem("rmd-text-field");
	var SPECIAL_TYPES = [
	    "date",
	    "time",
	    "datetime-local",
	    "month",
	    "week",
	    "color",
	];
	/**
	 * The text field is a wrapper of the `<input type="text" />` component with
	 * some nice default themes. It can also be used to render other text input
	 * types with _some_ support.
	 */
	var TextField = React.forwardRef(function TextField(_a, ref) {
	    var style = _a.style, className = _a.className, inputStyle = _a.inputStyle, inputClassName = _a.inputClassName, label = _a.label, labelStyle = _a.labelStyle, labelClassName = _a.labelClassName, _b = _a.type, type = _b === void 0 ? "text" : _b, propTheme = _a.theme, _c = _a.dense, dense = _c === void 0 ? false : _c, _d = _a.inline, inline = _d === void 0 ? false : _d, _e = _a.error, error = _e === void 0 ? false : _e, _f = _a.disabled, disabled = _f === void 0 ? false : _f, propOnBlur = _a.onBlur, propOnFocus = _a.onFocus, propOnChange = _a.onChange, containerRef = _a.containerRef, _g = _a.isLeftAddon, isLeftAddon = _g === void 0 ? true : _g, _h = _a.isRightAddon, isRightAddon = _h === void 0 ? true : _h, leftChildren = _a.leftChildren, rightChildren = _a.rightChildren, propUnderlineDirection = _a.underlineDirection, containerProps = _a.containerProps, props = __rest$1h(_a, ["style", "className", "inputStyle", "inputClassName", "label", "labelStyle", "labelClassName", "type", "theme", "dense", "inline", "error", "disabled", "onBlur", "onFocus", "onChange", "containerRef", "isLeftAddon", "isRightAddon", "leftChildren", "rightChildren", "underlineDirection", "containerProps"]);
	    var id = props.id, value = props.value, defaultValue = props.defaultValue;
	    var _j = useFieldStates({
	        onBlur: propOnBlur,
	        onFocus: propOnFocus,
	        onChange: propOnChange,
	        value: value,
	        defaultValue: defaultValue,
	    }), valued = _j.valued, focused = _j.focused, onBlur = _j.onBlur, onFocus = _j.onFocus, onChange = _j.onChange;
	    var _k = useFormTheme({
	        theme: propTheme,
	        underlineDirection: propUnderlineDirection,
	    }), theme = _k.theme, underlineDirection = _k.underlineDirection;
	    return (React__default['default'].createElement(TextFieldContainer, __assign$g2({}, containerProps, { style: style, className: className, ref: containerRef, theme: theme, error: error, active: focused, label: !!label, dense: dense, inline: inline, disabled: disabled, isLeftAddon: isLeftAddon, isRightAddon: isRightAddon, leftChildren: leftChildren, rightChildren: rightChildren, underlineDirection: underlineDirection }),
	        React__default['default'].createElement(FloatingLabel, { style: labelStyle, className: labelClassName, htmlFor: id, error: error, active: focused, floating: focused || valued || SPECIAL_TYPES.includes(type), valued: valued, dense: dense, disabled: disabled }, label),
	        React__default['default'].createElement("input", __assign$g2({}, props, { ref: ref, type: type, disabled: disabled, onFocus: onFocus, onBlur: onBlur, onChange: onChange, style: inputStyle, className: cn(block$L({
	                floating: label && theme !== "none",
	            }), inputClassName) }))));
	});

	var __assign$g1 = (undefined && undefined.__assign) || function () {
	    __assign$g1 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$g1.apply(this, arguments);
	};
	var __rest$1g = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$K = bem("rmd-password");
	function isConfigurableIcon(icon) {
	    return !!icon && !React.isValidElement(icon);
	}
	/**
	 * This component is a simple wrapper of the `TextField` that can only be
	 * rendered for password inputs. There is built-in functionality to be able to
	 * temporarily show the password's value by swapping the `type` to `"text"`.
	 */
	var Password = React.forwardRef(function Password(_a, ref) {
	    var className = _a.className, inputClassName = _a.inputClassName, propVisibilityIcon = _a.visibilityIcon, visibilityStyle = _a.visibilityStyle, visibilityClassName = _a.visibilityClassName, _b = _a.visibilityLabel, visibilityLabel = _b === void 0 ? "Show password" : _b, onVisibilityClick = _a.onVisibilityClick, getVisibilityIcon = _a.getVisibilityIcon, _c = _a.disableVisibility, disableVisibility = _c === void 0 ? false : _c, propRightChildren = _a.rightChildren, _d = _a.isRightAddon, isRightAddon = _d === void 0 ? disableVisibility : _d, props = __rest$1g(_a, ["className", "inputClassName", "visibilityIcon", "visibilityStyle", "visibilityClassName", "visibilityLabel", "onVisibilityClick", "getVisibilityIcon", "disableVisibility", "rightChildren", "isRightAddon"]);
	    var id = props.id;
	    var _e = React.useState("password"), type = _e[0], setType = _e[1];
	    var toggle = React.useCallback(function (event) {
	        if (onVisibilityClick) {
	            onVisibilityClick(event);
	        }
	        setType(function (prevType) { return (prevType === "password" ? "text" : "password"); });
	    }, [onVisibilityClick]);
	    var visible = type === "text";
	    var visibilityIcon = useIcon("password", propVisibilityIcon);
	    if (isConfigurableIcon(propVisibilityIcon)) {
	        visibilityIcon = visible
	            ? propVisibilityIcon.visible
	            : propVisibilityIcon.invisible;
	    }
	    var rightChildren = propRightChildren;
	    if (!disableVisibility) {
	        rightChildren = (React__default['default'].createElement(Button, { id: id + "-password-toggle", "aria-label": visibilityLabel, "aria-pressed": visible, buttonType: "icon", onClick: toggle, style: visibilityStyle, className: cn(block$K("toggle"), visibilityClassName) }, typeof getVisibilityIcon === "function"
	            ? getVisibilityIcon(type)
	            : visibilityIcon));
	    }
	    return (React__default['default'].createElement(TextField, __assign$g1({}, props, { className: cn(block$K({ offset: !disableVisibility }), className), inputClassName: cn(block$K("input", { offset: !disableVisibility }), inputClassName), ref: ref, type: type, isRightAddon: isRightAddon, rightChildren: rightChildren })));
	});

	var __assign$g0 = (undefined && undefined.__assign) || function () {
	    __assign$g0 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$g0.apply(this, arguments);
	};
	var __rest$1f = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$J = bem("rmd-textarea");
	var container = bem("rmd-textarea-container");
	var PADDING_VARIABLES = "var(--rmd-form-text-padding-top, 0px) + var(--rmd-form-textarea-padding, 0px)";
	// this is the default of 1.5rem line-height in the styles
	var DEFAULT_LINE_HEIGHT = "24";
	var TextArea = React.forwardRef(function TextArea(_a, forwardedRef) {
	    var style = _a.style, className = _a.className, areaStyle = _a.areaStyle, areaClassName = _a.areaClassName, containerRef = _a.containerRef, containerProps = _a.containerProps, label = _a.label, labelStyle = _a.labelStyle, labelClassName = _a.labelClassName, _b = _a.rows, rows = _b === void 0 ? 2 : _b, _c = _a.maxRows, maxRows = _c === void 0 ? -1 : _c, _d = _a.resize, resize = _d === void 0 ? "auto" : _d, propTheme = _a.theme, _e = _a.dense, dense = _e === void 0 ? false : _e, _f = _a.inline, propInline = _f === void 0 ? false : _f, _g = _a.error, error = _g === void 0 ? false : _g, _h = _a.disabled, disabled = _h === void 0 ? false : _h, _j = _a.animate, animate = _j === void 0 ? true : _j, _k = _a.isLeftAddon, isLeftAddon = _k === void 0 ? true : _k, _l = _a.isRightAddon, isRightAddon = _l === void 0 ? true : _l, propUnderlineDirection = _a.underlineDirection, propOnBlur = _a.onBlur, propOnFocus = _a.onFocus, propOnChange = _a.onChange, leftChildren = _a.leftChildren, rightChildren = _a.rightChildren, props = __rest$1f(_a, ["style", "className", "areaStyle", "areaClassName", "containerRef", "containerProps", "label", "labelStyle", "labelClassName", "rows", "maxRows", "resize", "theme", "dense", "inline", "error", "disabled", "animate", "isLeftAddon", "isRightAddon", "underlineDirection", "onBlur", "onFocus", "onChange", "leftChildren", "rightChildren"]);
	    var id = props.id, value = props.value, defaultValue = props.defaultValue;
	    var _m = useFormTheme({
	        theme: propTheme,
	        underlineDirection: propUnderlineDirection,
	    }), theme = _m.theme, underlineDirection = _m.underlineDirection;
	    var _o = React.useState(), height = _o[0], setHeight = _o[1];
	    if (resize !== "auto" && typeof height === "number") {
	        setHeight(undefined);
	    }
	    var maskRef = React.useRef(null);
	    var _p = React.useState(false), scrollable = _p[0], setScrollable = _p[1];
	    var updateHeight = React.useCallback(function () {
	        var mask = maskRef.current;
	        /* istanbul ignore if */
	        if (!mask) {
	            return;
	        }
	        var nextHeight = mask.scrollHeight;
	        /* istanbul ignore if */
	        if (maxRows > 0) {
	            var lineHeight = parseFloat(window.getComputedStyle(mask).lineHeight || DEFAULT_LINE_HEIGHT);
	            var maxHeight = maxRows * lineHeight;
	            nextHeight = Math.min(maxHeight, nextHeight);
	            // only want the textarea to be scrollable if there's a limit on the rows
	            // since it'll flash the scrollbar on most OS during the height transition
	            if (nextHeight === maxHeight && !scrollable) {
	                setScrollable(true);
	            }
	            else if (nextHeight !== maxHeight && scrollable) {
	                setScrollable(false);
	            }
	        }
	        if (height !== nextHeight) {
	            setHeight(nextHeight);
	        }
	    }, [height, maxRows, scrollable]);
	    // the window can be resized while there is text inside the textarea so need to
	    // recalculate the height when the width changes as well.
	    var _q = useResizeObserver(updateHeight, {
	        ref: maskRef,
	        disableHeight: true,
	    }), maskRefHandler = _q[1];
	    var _r = useFieldStates({
	        onBlur: propOnBlur,
	        onFocus: propOnFocus,
	        onChange: function (event) {
	            var mask = maskRef.current;
	            if (propOnChange) {
	                propOnChange(event);
	            }
	            /* istanbul ignore if */
	            if (!mask || resize !== "auto") {
	                return;
	            }
	            // to get the height transition to work, you have to set the height on:
	            // - the main container element (including padding) that has the height
	            //    transition enabled
	            // - a child div wrapper (without padding) that has the height transition
	            //    enabled
	            // - the textarea element (without padding) and without a height transition
	            //
	            // if it isn't done this way, the height transition will look weird since
	            // the text will be fixed to the bottom of the area and more text at the top
	            // will become visible as the height transition completes. applying the
	            // transition on the two parent elements work because:
	            // - the height is set immediately on the text field so it expands to show all
	            //    the text
	            // - the height is correctly applied to both parent elements, but their height
	            //    haven't fully been adjusted due to the animation
	            // - the parent divs have overflow visible by default, so the textarea's text
	            //    will expand past the boundaries of the divs and not cause the upwards
	            //    animation weirdness.
	            mask.value = event.currentTarget.value;
	            updateHeight();
	        },
	        value: value,
	        defaultValue: defaultValue,
	    }), valued = _r.valued, focused = _r.focused, onBlur = _r.onBlur, onFocus = _r.onFocus, onChange = _r.onChange;
	    var _s = useEnsuredRef(forwardedRef), ref = _s[0], refHandler = _s[1];
	    // the container element adds some padding so that the content can scroll and
	    // not be covered by the floating label. unfortunately, this means that the entire
	    // container is no longer clickable to focus the input. This is used to add that
	    // functionality back.
	    var handleClick = React.useCallback(function (event) {
	        if (ref.current && event.target === event.currentTarget) {
	            ref.current.focus();
	        }
	    }, [ref]);
	    var area = (React__default['default'].createElement("textarea", __assign$g0({}, props, { ref: refHandler, rows: rows, disabled: disabled, onFocus: onFocus, onBlur: onBlur, onChange: onChange, style: __assign$g0(__assign$g0({}, areaStyle), { height: height }), className: cn(block$J({
	            scrollable: scrollable || resize === "none",
	            floating: label && theme !== "none",
	            rh: resize === "horizontal",
	            rv: resize === "vertical",
	            rn: resize === "auto" || resize === "none",
	        }), areaClassName) })));
	    var children = area;
	    if (resize === "auto") {
	        children = (React__default['default'].createElement("div", { style: { height: height }, className: container("inner", { animate: animate }) },
	            area,
	            React__default['default'].createElement("textarea", { "aria-hidden": true, defaultValue: value || defaultValue, id: id + "-mask", ref: maskRefHandler, readOnly: true, rows: rows, tabIndex: -1, style: areaStyle, className: cn(block$J({
	                    rn: true,
	                    mask: true,
	                    floating: label && theme !== "none",
	                }), areaClassName) })));
	    }
	    var inline = propInline;
	    if (resize === "horizontal" || resize === "both") {
	        // have to force it inline or else you won't be able to resize
	        // it horizontally.
	        inline = true;
	    }
	    return (React__default['default'].createElement(TextFieldContainer, __assign$g0({}, containerProps, { style: __assign$g0(__assign$g0({}, style), { height: height
	                ? "calc(" + PADDING_VARIABLES + " + " + height + "px)"
	                : undefined }), className: cn(container({
	            animate: animate && resize === "auto",
	            cursor: !disabled,
	        }), className), ref: containerRef, theme: theme, error: error, active: focused, label: !!label, dense: dense, inline: inline, disabled: disabled, isLeftAddon: isLeftAddon, isRightAddon: isRightAddon, leftChildren: leftChildren, rightChildren: rightChildren, underlineDirection: underlineDirection, onClick: !disabled ? handleClick : undefined }),
	        React__default['default'].createElement(FloatingLabel, { style: labelStyle, className: labelClassName, htmlFor: id, error: error, active: focused, floating: focused || valued, valued: valued, dense: dense, disabled: disabled }, label),
	        children));
	});

	var __assign$f$ = (undefined && undefined.__assign) || function () {
	    __assign$f$ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$f$.apply(this, arguments);
	};
	var __rest$1e = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This component is a simple wrapper for the `TextField` and `FormMessage`
	 * components that should be used along with the `useTextField` hook to
	 * conditionally show help and error messages with a `TextField`.
	 *
	 * Simple example:
	 *
	 * ```ts
	 * const [value, fieldProps] = useTextField({
	 *   id: "field-id",
	 * });
	 *
	 * return (
	 *   <TextFieldWithMessage
	 *     label="Label"
	 *     placeholder="Placeholder"
	 *     {...fieldProps}
	 *   />
	 * );
	 * ```
	 *
	 * @remarks \@since 2.5.0
	 */
	var TextFieldWithMessage = React.forwardRef(function TextFieldWithMessage(_a, ref) {
	    var messageProps = _a.messageProps, messageContainerProps = _a.messageContainerProps, props = __rest$1e(_a, ["messageProps", "messageContainerProps"]);
	    return (React__default['default'].createElement(FormMessageContainer, __assign$f$({}, messageContainerProps, { messageProps: messageProps }),
	        React__default['default'].createElement(TextField, __assign$f$({}, props, { ref: ref }))));
	});

	var __assign$f_ = (undefined && undefined.__assign) || function () {
	    __assign$f_ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$f_.apply(this, arguments);
	};
	var __rest$1d = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This component is a simple wrapper for the `TextArea` and `FormMessage`
	 * components that should be used along with the `useTextField` hook to
	 * conditionally show help and error messages with a `TextArea`.
	 *
	 * Simple example:
	 *
	 * ```ts
	 * const [value, areaProps] = useTextField({
	 *   id: "area-id",
	 * });
	 *
	 * return (
	 *   <TextFieldWithMessage
	 *     label="Label"
	 *     placeholder="Placeholder"
	 *     {...areaProps}
	 *   />
	 * );
	 * ```
	 *
	 * @remarks \@since 2.5.0
	 */
	var TextAreaWithMessage = React.forwardRef(function TextAreaWithMessage(_a, ref) {
	    var messageProps = _a.messageProps, messageContainerProps = _a.messageContainerProps, props = __rest$1d(_a, ["messageProps", "messageContainerProps"]);
	    return (React__default['default'].createElement(FormMessageContainer, __assign$f_({}, messageContainerProps, { messageProps: messageProps }),
	        React__default['default'].createElement(TextArea, __assign$f_({}, props, { ref: ref }))));
	});

	var __assign$fZ = (undefined && undefined.__assign) || function () {
	    __assign$fZ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fZ.apply(this, arguments);
	};
	var __rest$1c = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This component is a simple wrapper for the `Password` and `FormMessage`
	 * components that should be used along with the `useTextField` hook to
	 * conditionally show help and error messages with a `Password`.
	 *
	 * Simple example:
	 *
	 * ```ts
	 * const [value, fieldProps] = useTextField({
	 *   id: "field-id",
	 *   required: true,
	 *   minLength: 10,
	 * });
	 *
	 * return (
	 *   <PasswordWithMessage
	 *     label="Label"
	 *     placeholder="Placeholder"
	 *     {...fieldProps}
	 *   />
	 * );
	 * ```
	 *
	 * Note: Unline the `TextFieldWithMessage` and `TextAreaWithMessage`, the error
	 * icon will do nothing for this component unless the `disableVisibility` prop
	 * is enabled.
	 *
	 * @remarks \@since 2.5.0
	 */
	var PasswordWithMessage = React.forwardRef(function PasswordWithMessage(_a, ref) {
	    var messageProps = _a.messageProps, messageContainerProps = _a.messageContainerProps, props = __rest$1c(_a, ["messageProps", "messageContainerProps"]);
	    return (React__default['default'].createElement(FormMessageContainer, __assign$fZ({}, messageContainerProps, { messageProps: messageProps }),
	        React__default['default'].createElement(Password, __assign$fZ({}, props, { ref: ref }))));
	});

	/**
	 * The default implementation for checking if a `TextField` or `TextArea` is
	 * errored by returning `true` if the `errorMessage` string is truthy or the
	 * value is not within the `minLength` and `maxLength` constraints when they
	 * exist.
	 *
	 * @remarks \@since 2.5.0
	 */
	var defaultIsErrored = function (_a) {
	    var value = _a.value, errorMessage = _a.errorMessage, minLength = _a.minLength, maxLength = _a.maxLength, isBlurEvent = _a.isBlurEvent;
	    return !!errorMessage ||
	        (typeof maxLength === "number" && value.length > maxLength) ||
	        (isBlurEvent && typeof minLength === "number" && value.length < minLength);
	};

	/**
	 * The default implementation for showing an error icon in `TextField` and
	 * `TextArea` components that will only display when the error flag is enabled.
	 *
	 * @remarks \@since 2.5.0
	 */
	var defaultGetErrorIcon = function (_message, error, errorIcon) {
	    return error && errorIcon;
	};

	var __spreadArray$6 = (undefined && undefined.__spreadArray) || function (to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	};
	/**
	 * @internal
	 * @remarks \@since 2.5.0
	 */
	var VALIDITY_STATE_KEYS = [
	    "badInput",
	    "customError",
	    "patternMismatch",
	    "rangeOverflow",
	    "rangeUnderflow",
	    "stepMismatch",
	    "tooLong",
	    "tooShort",
	    "typeMismatch",
	    "valueMissing",
	];
	/**
	 * @internal
	 * @remarks \@since 2.5.0
	 */
	var RECOMMENDED_STATE_KEYS = [
	    "badInput",
	    "tooLong",
	    "valueMissing",
	];
	/**
	 * @internal
	 * @remarks \@since 2.5.0
	 */
	var RECOMMENDED_NUMBER_STATE_KEYS = __spreadArray$6(__spreadArray$6([], RECOMMENDED_STATE_KEYS), [
	    "rangeOverflow",
	    "rangeUnderflow",
	    "tooShort",
	    "typeMismatch",
	]);
	/**
	 * The validation message is actually kind of weird since it's possible for a
	 * form element to have multiple errors at once. The validation message will be
	 * the first error that appears, so need to make sure that the first error is
	 * one of the recommended state keys so the message appears for only those types
	 * of errors.
	 *
	 * @internal
	 * @remarks \@since 2.5.0
	 */
	var isRecommended = function (validity, isNumber) {
	    var errorable = isNumber
	        ? RECOMMENDED_NUMBER_STATE_KEYS
	        : RECOMMENDED_STATE_KEYS;
	    return VALIDITY_STATE_KEYS.every(function (key) {
	        var errored = validity[key];
	        return !errored || errorable.includes(key);
	    });
	};
	/**
	 * The default implementation for getting an error message for the `TextField`
	 * or `TextArea` components that relies on the behavior of the
	 * {@link ChangeValidationBehavior}
	 *
	 * @remarks \@since 2.5.0
	 */
	var defaultGetErrorMessage = function (_a) {
	    var isBlurEvent = _a.isBlurEvent, validity = _a.validity, validationMessage = _a.validationMessage, validateOnChange = _a.validateOnChange;
	    if (isBlurEvent || !validationMessage || validateOnChange === true) {
	        return validationMessage;
	    }
	    if (!validateOnChange) {
	        return "";
	    }
	    if (validateOnChange === "recommended" ||
	        validateOnChange === "number-recommended") {
	        return isRecommended(validity, validateOnChange === "number-recommended")
	            ? validationMessage
	            : "";
	    }
	    var keys = typeof validateOnChange === "string"
	        ? [validateOnChange]
	        : validateOnChange;
	    return keys.length &&
	        VALIDITY_STATE_KEYS.some(function (key) { return validity[key] && keys.includes(key); })
	        ? validationMessage
	        : "";
	};

	var __assign$fY = (undefined && undefined.__assign) || function () {
	    __assign$fY = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fY.apply(this, arguments);
	};
	var noop$4 = function () {
	    // do nothing
	};
	/**
	 * This hook is used to control the `value` for a `TextField` or `TextArea`
	 * component along with some simple validation checks using the browser validity
	 * api/constraint validation. This also provides props that can be passed to the
	 * `FormMessage` component to display error messages or help text.
	 *
	 * Note: Even though this hook exists, it is highly recommended to use a form
	 * helper library like [react-hook-form](https://react-hook-form.com/) for more
	 * complex forms
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation
	 * @param options - All the options used to control the functionality of this
	 * hook.
	 * @returns @see {@link TextFieldHookReturnType}
	 * @remarks \@since 2.5.0
	 */
	function useTextField(_a) {
	    var id = _a.id, _b = _a.defaultValue, defaultValue = _b === void 0 ? "" : _b, theme = _a.theme, pattern = _a.pattern, required = _a.required, minLength = _a.minLength, maxLength = _a.maxLength, _c = _a.disableMaxLength, disableMaxLength = _c === void 0 ? false : _c, onBlur = _a.onBlur, onChange = _a.onChange, helpText = _a.helpText, propErrorIcon = _a.errorIcon, _d = _a.counter, counter = _d === void 0 ? false : _d, _e = _a.disableMessage, disableMessage = _e === void 0 ? false : _e, _f = _a.validateOnChange, validateOnChange = _f === void 0 ? "recommended" : _f, _g = _a.isErrored, isErrored = _g === void 0 ? defaultIsErrored : _g, _h = _a.onErrorChange, onErrorChange = _h === void 0 ? noop$4 : _h, _j = _a.getErrorIcon, getErrorIcon = _j === void 0 ? defaultGetErrorIcon : _j, _k = _a.getErrorMessage, getErrorMessage = _k === void 0 ? defaultGetErrorMessage : _k;
	    var _l = React.useState(function () {
	        var value = typeof defaultValue === "function" ? defaultValue() : defaultValue;
	        return {
	            value: value,
	            error: false,
	            errorMessage: "",
	        };
	    }), state = _l[0], setState = _l[1];
	    var value = state.value, error = state.error, errorMessage = state.errorMessage;
	    var errored = React.useRef(false);
	    var fieldRef = React.useRef(null);
	    var messageId = id + "-message";
	    var isCounting = counter && typeof maxLength === "number";
	    var reset = React.useCallback(function () {
	        /* istanbul ignore next */
	        if (fieldRef.current) {
	            fieldRef.current.setCustomValidity("");
	        }
	        setState({
	            value: "",
	            error: false,
	            errorMessage: "",
	        });
	    }, []);
	    var updateState = React.useCallback(function (field, isBlurEvent) {
	        fieldRef.current = field;
	        // need to temporarily set the `maxLength` back so it can be "verified"
	        // through the validity api
	        /* istanbul ignore next */
	        if (isBlurEvent && disableMaxLength && typeof maxLength === "number") {
	            field.maxLength = maxLength;
	        }
	        var value = field.value;
	        field.setCustomValidity("");
	        field.checkValidity();
	        // remove the temporarily set `maxLength` attribute after checking the
	        // validity
	        /* istanbul ignore next */
	        if (disableMaxLength && typeof maxLength === "number") {
	            field.removeAttribute("maxLength");
	        }
	        var options = {
	            value: value,
	            pattern: pattern,
	            required: required,
	            minLength: minLength,
	            maxLength: maxLength,
	            isBlurEvent: isBlurEvent,
	            validity: field.validity,
	            validationMessage: field.validationMessage,
	            validateOnChange: validateOnChange,
	        };
	        var errorMessage = getErrorMessage(options);
	        var error = isErrored(__assign$fY(__assign$fY({}, options), { errorMessage: errorMessage }));
	        if (errored.current !== error) {
	            errored.current = error;
	            onErrorChange(id, error);
	        }
	        /* istanbul ignore next */
	        if (errorMessage !== field.validationMessage) {
	            field.setCustomValidity(errorMessage);
	        }
	        setState({ value: value, error: error, errorMessage: errorMessage });
	    }, [
	        disableMaxLength,
	        getErrorMessage,
	        id,
	        isErrored,
	        maxLength,
	        minLength,
	        onErrorChange,
	        pattern,
	        required,
	        validateOnChange,
	    ]);
	    var handleBlur = React.useCallback(function (event) {
	        if (onBlur) {
	            onBlur(event);
	        }
	        if (event.isPropagationStopped()) {
	            return;
	        }
	        updateState(event.currentTarget, true);
	    }, [onBlur, updateState]);
	    var handleChange = React.useCallback(function (event) {
	        if (onChange) {
	            onChange(event);
	        }
	        if (event.isPropagationStopped()) {
	            return;
	        }
	        if (!validateOnChange ||
	            (Array.isArray(validateOnChange) && !validateOnChange.length)) {
	            setState(function (prevState) { return (__assign$fY(__assign$fY({}, prevState), { value: event.currentTarget.value })); });
	            return;
	        }
	        updateState(event.currentTarget, false);
	    }, [onChange, updateState, validateOnChange]);
	    var errorIcon = useIcon("error", propErrorIcon);
	    var props = {
	        id: id,
	        value: value,
	        theme: theme,
	        error: error,
	        required: required,
	        pattern: pattern,
	        minLength: minLength,
	        maxLength: disableMaxLength ? undefined : maxLength,
	        rightChildren: getErrorIcon(errorMessage, error, errorIcon),
	        onBlur: handleBlur,
	        onChange: handleChange,
	    };
	    if (!disableMessage) {
	        props["aria-describedby"] = messageId;
	        props.messageProps = {
	            id: messageId,
	            error: error,
	            theme: theme,
	            length: counter ? value.length : undefined,
	            maxLength: isCounting ? maxLength : undefined,
	            children: errorMessage || helpText,
	        };
	    }
	    return [
	        value,
	        props,
	        {
	            reset: reset,
	            setState: setState,
	        },
	    ];
	}

	var __assign$fX = (undefined && undefined.__assign) || function () {
	    __assign$fX = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fX.apply(this, arguments);
	};
	/**
	 * This hook is used to control the value for the `TextField` component acting
	 * as an `<input type="number">` and ensuring that a "valid" `number` is
	 * available. There is also built-in support for using the validity
	 * api/constraint validation so that real-time errors can be presented to the
	 * user as they type along with the `FormMessage` component.
	 *
	 * Simple example:
	 *
	 * ```tsx
	 * const [value, fieldProps] = useNumberField({
	 *   id: 'field-id',
	 *   min: 0,
	 *   max: 10,
	 *   defaultValue: 0,
	 *   disableMessage: true,
	 * });
	 *
	 * return <TextField {...fieldProps} label="Label" placeholder="0" />;
	 * ```
	 *
	 * Step example and messaging:
	 *
	 * ```tsx
	 * const [value, fieldProps] = useNumberField({
	 *   id: 'field-id',
	 *   min: 0,
	 *   max: 10,
	 *   step: 2,
	 *   defaultValue: 0,
	 * });
	 *
	 * return <TextFieldWithMessage {...fieldProps} label="Label" placeholder="0" />;
	 * ```
	 *
	 * @see https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/Constraint_validation
	 * @see {@link useTextField}
	 * @param options - All the options used to control the functionality of this
	 * hook.
	 * @returns @see {@link NumberFieldHookReturnType}
	 * @remarks \@since 2.5.0
	 */
	function useNumberField(_a) {
	    var id = _a.id, defaultValue = _a.defaultValue, theme = _a.theme, pattern = _a.pattern, required = _a.required, minLength = _a.minLength, maxLength = _a.maxLength, _b = _a.disableMaxLength, disableMaxLength = _b === void 0 ? false : _b, onBlur = _a.onBlur, onChange = _a.onChange, helpText = _a.helpText, errorIcon = _a.errorIcon, _c = _a.counter, counter = _c === void 0 ? false : _c, _d = _a.disableMessage, disableMessage = _d === void 0 ? false : _d, _e = _a.validateOnChange, validateOnChange = _e === void 0 ? "number-recommended" : _e, isErrored = _a.isErrored, onErrorChange = _a.onErrorChange, getErrorIcon = _a.getErrorIcon, getErrorMessage = _a.getErrorMessage, min = _a.min, max = _a.max, step = _a.step, _f = _a.fixOnBlur, fixOnBlur = _f === void 0 ? true : _f, _g = _a.updateOnChange, updateOnChange = _g === void 0 ? true : _g;
	    var _h = React.useState(defaultValue), number = _h[0], setNumber = _h[1];
	    var initial = React.useRef(number);
	    var handleBlur = React.useCallback(function (event) {
	        if (onBlur) {
	            onBlur(event);
	        }
	        if (event.isPropagationStopped()) {
	            return;
	        }
	        var input = event.currentTarget;
	        input.setCustomValidity("");
	        input.checkValidity();
	        if (!fixOnBlur ||
	            // do nothing else since it's a weird value like: `"--0"` which causes
	            // the value to be `""` and `numberAsValue` to be `NaN`
	            input.validity.badInput ||
	            (input.validity.rangeUnderflow && fixOnBlur === "max") ||
	            (input.validity.rangeOverflow && fixOnBlur === "min")) {
	            return;
	        }
	        var value = input.valueAsNumber;
	        if (input.value === "" && typeof initial.current === "number") {
	            value = min !== null && min !== void 0 ? min : initial.current;
	        }
	        // can't have both rangeUnderflow and rangeOverflow at the same time, so
	        // it's "safe" to always provide both
	        value = withinRange(value, min, max);
	        if (!Number.isNaN(value)) {
	            setNumber(value);
	            input.value = "" + value;
	        }
	        else if (typeof initial.current === "undefined") {
	            setNumber(undefined);
	        }
	    }, [onBlur, fixOnBlur, min, max]);
	    var handleChange = React.useCallback(function (event) {
	        if (onChange) {
	            onChange(event);
	        }
	        if (event.isPropagationStopped() || !updateOnChange) {
	            return;
	        }
	        var input = event.currentTarget;
	        input.checkValidity();
	        var value = withinRange(event.currentTarget.valueAsNumber, min, max);
	        if (!input.validity.valid &&
	            !input.validity.rangeUnderflow &&
	            !input.validity.rangeOverflow) {
	            return;
	        }
	        if (!Number.isNaN(value)) {
	            setNumber(value);
	        }
	        else if (initial.current === undefined) {
	            setNumber(undefined);
	        }
	    }, [onChange, updateOnChange, min, max]);
	    var _j = useTextField({
	        id: id,
	        defaultValue: "" + (number !== null && number !== void 0 ? number : ""),
	        theme: theme,
	        pattern: pattern,
	        required: required,
	        minLength: minLength,
	        maxLength: maxLength,
	        disableMaxLength: disableMaxLength,
	        onBlur: handleBlur,
	        onChange: handleChange,
	        helpText: helpText,
	        errorIcon: errorIcon,
	        counter: counter,
	        disableMessage: disableMessage,
	        validateOnChange: validateOnChange,
	        isErrored: isErrored,
	        onErrorChange: onErrorChange,
	        getErrorIcon: getErrorIcon,
	        getErrorMessage: getErrorMessage,
	    }), props = _j[1], setState = _j[2].setState;
	    var reset = React.useCallback(function () {
	        var _a;
	        setNumber(initial.current);
	        setState({
	            value: "" + ((_a = initial.current) !== null && _a !== void 0 ? _a : ""),
	            error: false,
	            errorMessage: "",
	        });
	    }, [setState]);
	    var updateNumber = React.useCallback(function (value) {
	        if (typeof value === "function") {
	            setNumber(function (prevNumber) {
	                var updated = value(prevNumber);
	                setState(function (prevState) { return (__assign$fX(__assign$fX({}, prevState), { value: "" + (updated !== null && updated !== void 0 ? updated : "") })); });
	                return updated;
	            });
	            return;
	        }
	        setNumber(value);
	        setState(function (prevState) { return (__assign$fX(__assign$fX({}, prevState), { value: "" + (value !== null && value !== void 0 ? value : "") })); });
	    }, [setState]);
	    return [
	        number,
	        __assign$fX(__assign$fX({}, props), { min: min, max: max, step: step, type: "number" }),
	        {
	            reset: reset,
	            setNumber: updateNumber,
	        },
	    ];
	}

	var __assign$fW = (undefined && undefined.__assign) || function () {
	    __assign$fW = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fW.apply(this, arguments);
	};
	var __rest$1b = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$I = bem("rmd-toggle-container");
	/**
	 * The `ToggleContainer` component should generally be used around a
	 * custom `"checkbox"`, `"radio"`, or `"switch"` component to help with
	 * additional styles. This is mostly an internal component so I'm not
	 * sure useful it will be though.
	 */
	var ToggleContainer = React.forwardRef(function ToggleContainer(_a, ref) {
	    var className = _a.className, _b = _a.inline, inline = _b === void 0 ? false : _b, _c = _a.stacked, stacked = _c === void 0 ? false : _c, children = _a.children, props = __rest$1b(_a, ["className", "inline", "stacked", "children"]);
	    return (React__default['default'].createElement("div", __assign$fW({}, props, { ref: ref, className: cn(block$I({ stacked: stacked, inline: inline }), className) }), children));
	});

	var __assign$fV = (undefined && undefined.__assign) || function () {
	    __assign$fV = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fV.apply(this, arguments);
	};
	var __rest$1a = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$H = bem("rmd-toggle");
	var InputToggle = React.forwardRef(function InputToggle(allProps, ref) {
	    var _a = allProps, style = _a.style, className = _a.className, iconStyle = _a.iconStyle, iconClassName = _a.iconClassName, toggleStyle = _a.toggleStyle, propToggleClassName = _a.toggleClassName, inputStyle = _a.inputStyle, inputClassName = _a.inputClassName, icon = _a.icon, propOnFocus = _a.onFocus, propOnBlur = _a.onBlur, _b = _a.error, error = _b === void 0 ? false : _b, _c = _a.inline, inline = _c === void 0 ? false : _c, _d = _a.stacked, stacked = _d === void 0 ? false : _d, _e = _a.disabled, disabled = _e === void 0 ? false : _e, label = _a.label, labelStyle = _a.labelStyle, labelClassName = _a.labelClassName, labelDisabled = _a.labelDisabled, _f = _a.iconAfter, iconAfter = _f === void 0 ? false : _f, _g = _a.disableIconOverlay, disableIconOverlay = _g === void 0 ? false : _g, disableRipple = _a.disableRipple, disableProgrammaticRipple = _a.disableProgrammaticRipple, rippleTimeout = _a.rippleTimeout, rippleClassNames = _a.rippleClassNames, children = _a.children, indeterminate = _a.indeterminate, props = __rest$1a(_a, ["style", "className", "iconStyle", "iconClassName", "toggleStyle", "toggleClassName", "inputStyle", "inputClassName", "icon", "onFocus", "onBlur", "error", "inline", "stacked", "disabled", "label", "labelStyle", "labelClassName", "labelDisabled", "iconAfter", "disableIconOverlay", "disableRipple", "disableProgrammaticRipple", "rippleTimeout", "rippleClassNames", "children", "indeterminate"]);
	    var id = props.id, type = props.type;
	    var _h = useInteractionStates({
	        handlers: props,
	        disabled: disabled,
	        className: propToggleClassName,
	        disableRipple: disableRipple,
	        disableProgrammaticRipple: disableProgrammaticRipple,
	        rippleTimeout: rippleTimeout,
	        rippleClassNames: rippleClassNames,
	    }), ripples = _h.ripples, handlers = _h.handlers, toggleClassName = _h.className;
	    var _j = useFocusState({
	        onFocus: propOnFocus,
	        onBlur: propOnBlur,
	    }), focused = _j[0], onFocus = _j[1], onBlur = _j[2];
	    var labelEl = (React__default['default'].createElement(Label, { style: labelStyle, className: labelClassName, htmlFor: id, error: error, disabled: typeof labelDisabled === "boolean" ? labelDisabled : disabled }, label));
	    return (React__default['default'].createElement(ToggleContainer, { style: style, className: className, inline: inline, stacked: stacked },
	        iconAfter && labelEl,
	        React__default['default'].createElement("span", { style: toggleStyle, className: cn(block$H({
	                focused: focused,
	                disabled: disabled,
	            }), toggleClassName) },
	            React__default['default'].createElement("input", __assign$fV({}, props, handlers, { ref: ref, style: inputStyle, disabled: disabled, onFocus: onFocus, onBlur: onBlur, className: cn(block$H("input"), inputClassName) })),
	            React__default['default'].createElement(InputToggleIcon, { circle: !disableIconOverlay && type === "radio", disabled: disabled, overlay: !disableIconOverlay, indeterminate: indeterminate, style: iconStyle, className: iconClassName }, icon),
	            ripples,
	            children),
	        !iconAfter && labelEl));
	});

	var __assign$fU = (undefined && undefined.__assign) || function () {
	    __assign$fU = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fU.apply(this, arguments);
	};
	var __rest$19 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * The `Checkbox` component is just a wrapper for the `InputToggle` that
	 * defaults to reasonable defaults for a checkbox input.
	 */
	var Checkbox = React.forwardRef(function Checkbox(_a, ref) {
	    var propIcon = _a.icon, _b = _a.indeterminate, indeterminate = _b === void 0 ? false : _b, props = __rest$19(_a, ["icon", "indeterminate"]);
	    var icon = useIcon("checkbox", propIcon);
	    return (React__default['default'].createElement(InputToggle, __assign$fU({}, props, { icon: icon, ref: ref, type: "checkbox", indeterminate: indeterminate })));
	});

	var __assign$fT = (undefined && undefined.__assign) || function () {
	    __assign$fT = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fT.apply(this, arguments);
	};
	var __rest$18 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * The `Radio` component is just a wrapper for the `InputToggle` that
	 * defaults to reasonable defaults for a radio input.
	 */
	var Radio = React.forwardRef(function Radio(_a, ref) {
	    var propIcon = _a.icon, props = __rest$18(_a, ["icon"]);
	    var icon = useIcon("radio", propIcon);
	    return React__default['default'].createElement(InputToggle, __assign$fT({}, props, { icon: icon, ref: ref, type: "radio" }));
	});

	var __assign$fS = (undefined && undefined.__assign) || function () {
	    __assign$fS = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fS.apply(this, arguments);
	};
	var __rest$17 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var Switch = React.forwardRef(function Switch(_a, ref) {
	    var style = _a.style, className = _a.className, ballStyle = _a.ballStyle, ballClassName = _a.ballClassName, trackStyle = _a.trackStyle, trackClassName = _a.trackClassName, label = _a.label, labelStyle = _a.labelStyle, labelClassName = _a.labelClassName, labelDisabled = _a.labelDisabled, _b = _a.error, error = _b === void 0 ? false : _b, _c = _a.disabled, disabled = _c === void 0 ? false : _c, _d = _a.stacked, stacked = _d === void 0 ? false : _d, _e = _a.inline, inline = _e === void 0 ? false : _e, _f = _a.iconAfter, iconAfter = _f === void 0 ? false : _f, children = _a.children, props = __rest$17(_a, ["style", "className", "ballStyle", "ballClassName", "trackStyle", "trackClassName", "label", "labelStyle", "labelClassName", "labelDisabled", "error", "disabled", "stacked", "inline", "iconAfter", "children"]);
	    var id = props.id;
	    return (React__default['default'].createElement(ToggleContainer, { style: style, className: cn("rmd-switch-container", className), inline: inline, stacked: stacked },
	        React__default['default'].createElement(TextIconSpacing, { icon: React__default['default'].createElement(Label, { style: labelStyle, className: labelClassName, htmlFor: id, error: error, disabled: labelDisabled !== null && labelDisabled !== void 0 ? labelDisabled : disabled }, label), iconAfter: !iconAfter },
	            React__default['default'].createElement(SwitchTrack, __assign$fS({}, props, { ref: ref, style: trackStyle, className: trackClassName, disabled: disabled, ballStyle: ballStyle, ballClassName: ballClassName }), children))));
	});

	var __assign$fR = (undefined && undefined.__assign) || function () {
	    __assign$fR = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fR.apply(this, arguments);
	};
	var __rest$16 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$G = bem("rmd-linear-progress");
	var LinearProgress = React.forwardRef(function LinearProgress(_a, ref) {
	    var propStyle = _a.style, className = _a.className, propBarStyle = _a.barStyle, barClassName = _a.barClassName, _b = _a.min, min = _b === void 0 ? 0 : _b, _c = _a.max, max = _c === void 0 ? 100 : _c, value = _a.value, _d = _a.reverse, reverse = _d === void 0 ? false : _d, _e = _a.animate, animate = _e === void 0 ? true : _e, _f = _a.vertical, vertical = _f === void 0 ? false : _f, _g = _a.verticalHeight, verticalHeight = _g === void 0 ? 240 : _g, props = __rest$16(_a, ["style", "className", "barStyle", "barClassName", "min", "max", "value", "reverse", "animate", "vertical", "verticalHeight"]);
	    var style = React.useMemo(function () {
	        if (!vertical || verticalHeight === null) {
	            return propStyle;
	        }
	        return __assign$fR(__assign$fR({}, propStyle), { height: verticalHeight });
	    }, [propStyle, vertical, verticalHeight]);
	    var progress;
	    if (typeof value === "number") {
	        progress = getPercentage(min, max, value);
	    }
	    var barStyle = React.useMemo(function () {
	        var _a;
	        if (typeof progress !== "number") {
	            return propBarStyle;
	        }
	        var key = vertical ? "height" : "width";
	        return __assign$fR(__assign$fR({}, propBarStyle), (_a = {}, _a[key] = progress * 100 + "%", _a));
	    }, [progress, propBarStyle, vertical]);
	    var determinate = typeof progress === "number";
	    var indeterminate = !determinate;
	    return (React__default['default'].createElement("span", __assign$fR({}, props, { ref: ref, style: style, role: "progressbar", "aria-valuemin": min, "aria-valuemax": max, "aria-valuenow": value, className: cn(block$G({
	            vertical: vertical,
	            determinate: determinate,
	            indeterminate: indeterminate,
	        }), className) }),
	        React__default['default'].createElement("span", { style: barStyle, className: cn(block$G("bar", {
	                vertical: vertical,
	                "vertical-reverse": vertical && reverse,
	                horizontal: !vertical,
	                "horizontal-reverse": !vertical && reverse,
	                animate: animate && determinate,
	                determinate: determinate,
	                indeterminate: indeterminate,
	                "determinate-reverse": determinate && reverse && !vertical,
	                "determinate-vertical-reverse": determinate && reverse && vertical,
	                "indeterminate-reverse": indeterminate && reverse && !vertical,
	                "indeterminate-vertical": indeterminate && vertical,
	                "indeterminate-vertical-reverse": indeterminate && reverse && vertical,
	            }), barClassName) })));
	});

	var __assign$fQ = (undefined && undefined.__assign) || function () {
	    __assign$fQ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fQ.apply(this, arguments);
	};
	var __rest$15 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$F = bem("rmd-circular-progress");
	var CircularProgress = React.forwardRef(function CircularProgress(_a, ref) {
	    var className = _a.className, propSvgStyle = _a.svgStyle, svgClassName = _a.svgClassName, propCircleStyle = _a.circleStyle, circleClassName = _a.circleClassName, value = _a.value, _b = _a.min, min = _b === void 0 ? 0 : _b, _c = _a.max, max = _c === void 0 ? 100 : _c, _d = _a.radius, radius = _d === void 0 ? 30 : _d, _e = _a.center, center = _e === void 0 ? 33 : _e, _f = _a.viewBox, viewBox = _f === void 0 ? "0 0 66 66" : _f, _g = _a.dashoffset, dashoffset = _g === void 0 ? 187 : _g, _h = _a.animate, animate = _h === void 0 ? true : _h, _j = _a.centered, centered = _j === void 0 ? true : _j, _k = _a.maxRotation, maxRotation = _k === void 0 ? 360 * 1.75 : _k, _l = _a.small, small = _l === void 0 ? false : _l, props = __rest$15(_a, ["className", "svgStyle", "svgClassName", "circleStyle", "circleClassName", "value", "min", "max", "radius", "center", "viewBox", "dashoffset", "animate", "centered", "maxRotation", "small"]);
	    var progress;
	    if (typeof value === "number") {
	        progress = getPercentage(min, max, value);
	    }
	    var svgStyle = React.useMemo(function () {
	        if (typeof progress !== "number") {
	            return propSvgStyle;
	        }
	        var transform = propSvgStyle && propSvgStyle.transform;
	        if (maxRotation > 0) {
	            var rotate = "rotate(" + maxRotation * progress + "deg)";
	            transform = "" + rotate + (transform ? " " + transform : "");
	        }
	        return __assign$fQ(__assign$fQ({}, propSvgStyle), { WebkitTransform: transform, transform: transform });
	    }, [progress, maxRotation, propSvgStyle]);
	    var circleStyle = React.useMemo(function () {
	        if (typeof progress !== "number") {
	            return propCircleStyle;
	        }
	        return __assign$fQ(__assign$fQ({}, propCircleStyle), { strokeDashoffset: dashoffset - dashoffset * progress });
	    }, [progress, propCircleStyle, dashoffset]);
	    var determinate = typeof progress === "number";
	    var indeterminate = !determinate;
	    return (React__default['default'].createElement("span", __assign$fQ({}, props, { ref: ref, role: "progressbar", "aria-valuemin": min, "aria-valuemax": max, "aria-valuenow": value, className: cn(block$F({ centered: centered, small: small }), className) }),
	        React__default['default'].createElement("svg", { style: svgStyle, className: cn(block$F("svg", {
	                animate: animate && determinate,
	                determinate: determinate,
	                indeterminate: indeterminate,
	            }), svgClassName), viewBox: viewBox },
	            React__default['default'].createElement("circle", { style: circleStyle, className: cn(block$F("circle", {
	                    animate: animate && determinate,
	                    determinate: determinate,
	                    indeterminate: indeterminate,
	                }), circleClassName), r: radius, cx: center, cy: center }))));
	});

	/**
	 * An extremely simple util that can be used to get the required a11y props for
	 * another component that relies on a progress component.
	 *
	 * @param progressId - The id for the progress bar
	 * @param progressing - Boolean if the progress bar is visible and progressing
	 */
	function getProgressA11y(progressId, progressing) {
	    if (!progressing) {
	        return undefined;
	    }
	    return {
	        "aria-busy": true,
	        "aria-describedby": progressId,
	    };
	}

	var __assign$fP = (undefined && undefined.__assign) || function () {
	    __assign$fP = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fP.apply(this, arguments);
	};
	var __rest$14 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	// this is used while the loading state is enabled to "disable" the switch
	// toggle. If we disable the entire switch, keyboard focus is lost which is not
	// desired.
	var noop$3 = function () {
	    // do nothing
	};
	/**
	 * This component will create an async switch that will show a loading indicator
	 * and prevent the switch from being toggled while the loading state is true.
	 */
	var AsyncSwitch = React.forwardRef(function AsyncSwitch(_a, ref) {
	    var id = _a.id, disabled = _a.disabled, className = _a.className, progressStyle = _a.progressStyle, progressClassName = _a.progressClassName, loading = _a.loading, onChange = _a.onChange, props = __rest$14(_a, ["id", "disabled", "className", "progressStyle", "progressClassName", "loading", "onChange"]);
	    var progressId = id + "-loading";
	    return (React__default['default'].createElement(Switch, __assign$fP({}, props, getProgressA11y(progressId, loading), { id: id, ref: ref, disabled: disabled, className: cn("rmd-switch--async", className), labelDisabled: disabled || false, onChange: loading ? noop$3 : onChange }), loading && (React__default['default'].createElement(CircularProgress, { id: progressId, style: progressStyle, className: cn("rmd-switch__progress", progressClassName), centered: false }))));
	});
	/* istanbul ignore next */
	{
	    try {
	        var PropTypes = require("prop-types");
	        AsyncSwitch.propTypes = {
	            id: PropTypes.string.isRequired,
	            className: PropTypes.string,
	            onChange: PropTypes.func,
	            disabled: PropTypes.bool,
	            loading: PropTypes.bool.isRequired,
	            progressStyle: PropTypes.object,
	            progressClassName: PropTypes.string,
	        };
	    }
	    catch (e) { }
	}

	/**
	 * A small hook that can be used for controlling the state of a single Checkbox
	 * component.
	 *
	 * @param defaultChecked - Boolean if the input should be checked by default.
	 * Changing this value will not update the state after initial render.
	 * @param onChange - An optional change event handler to also call when the
	 * checked state changes.
	 * @returns a list containing the checked state, a change event handler, and
	 * then a manual set checked action.
	 */
	function useChecked(defaultChecked, onChange) {
	    var _a = React.useState(defaultChecked), checked = _a[0], setChecked = _a[1];
	    var handleChange = React.useCallback(function (event) {
	        if (onChange) {
	            onChange(event);
	        }
	        setChecked(event.currentTarget.checked);
	    }, [onChange]);
	    return [checked, handleChange, setChecked];
	}

	/**
	 * This hook can be used to control the state of a radio group or a select
	 * element.
	 *
	 * @param defaultValue - The default value. If you want the user to specifically
	 * choose a value, set this to the empty string.
	 * @param onChange - An optional change event handler to also call when the
	 * change event is triggered.
	 * @returns a list containing the current value, a change event handler, and
	 * then a manual value setter.
	 */
	function useChoice(defaultValue, onChange) {
	    var _a = React.useState(defaultValue), value = _a[0], setValue = _a[1];
	    var handleChange = React.useCallback(function (event) {
	        if (onChange) {
	            onChange(event);
	        }
	        setValue(event.currentTarget.value);
	    }, [onChange]);
	    return [value, handleChange, setValue];
	}

	/**
	 * This is a simple hook that will allow you to "strongly" type a `Select`
	 * component's value since the `onChange` handler only returns a `string`.
	 *
	 * @param defaultValue - The default value to use
	 * @returns an ordered list containing the current value followed by the
	 * dispatch function to update the state.
	 */
	function useSelectState(defaultValue) {
	    var _a = React.useState(defaultValue), value = _a[0], setValue = _a[1];
	    var setTypedValue = React.useCallback(function (nextValue) {
	        setValue(nextValue);
	    }, []);
	    return [value, setTypedValue];
	}

	/**
	 * This hook allows you to toggle the state of multiple checkboxes in a single
	 * place along with an indeterminate checkbox that can check/uncheck all
	 * checkboxes at once.
	 *
	 * ### Examples:
	 *
	 * #### Simple value list with labels lookup:
	 *
	 * ```tsx
	 * const values = ["a", "b", "c", "d"];
	 * const LABELS = { a: "Label 1", b: "Label 2", c: "Label 3", d: "Label 4" };
	 * const { getProps, rootProps } = useIndeterminateChecked(values);
	 *
	 * return (
	 *   <>
	 *     <Checkbox id="root-checkbox" {...rootProps} label="Root Checkbox" />
	 *     {values.map((value, i) => (
	 *       <Checkbox
	 *         id={`child-checkbox-${i + 1}`}
	 *         label={LABELS[value]}
	 *         {...getProps(value)}
	 *       />
	 *     ))}
	 *   </>
	 * );
	 * ```
	 *
	 * #### Fetch Data From Server and check first result
	 * ```tsx
	 * interface ServerFetchedData {
	 *   id: Guid;
	 *   name: string;
	 * }
	 *
	 *
	 * const [data, setData] = useState<ServerFetchedData[]>([]);
	 * const { getProps, rootProps, setCheckedValues } = useIndeterminateChecked(
	 *   data.map(({ id }) => id),
	 * );
	 *
	 * useEffect(() => {
	 *   let cancelled = false;
	 *   (async function load() {
	 *     const response = await fetch("/my-api");
	 *     const json = await response.json();
	 *     if (!cancelled) {
	 *       // pretend validation and sanity checks
	 *       setData(json as ServerFetchedData[]);
	 *       setCheckedValues(json[0].id);
	 *     }
	 *   })();

	 *   return () => {
	 *     cancelled = true;
	 *   };
	 * }, []);
	 *
	 * return (
	 *   <>
	 *     <Checkbox id="root-checkbox" {...rootProps} label="Root Checkbox" />
	 *     {data.map(({ id, name }, i) => (
	 *       <Checkbox
	 *         id={`child-checkbox-${i + 1}`}
	 *         label={name}
	 *         {...getProps(id)}
	 *       />
	 *     ))}
	 *   </>
	 * );
	 * ```
	 *
	 * @param values - All the checkbox values that the indeterminate checkbox can
	 * control. The values will **need** to be unique as they are passed to each
	 * checkbox to determine if it is checked or not. This will directly map to
	 * the `value` attribute for each checkbox.
	 * @param defaultCheckedValues - An optional list of all the values that are
	 * checked on first render. Changing this value will not update the checked
	 * values.
	 * @param onChange - An optional function to call whenever the checked values
	 * list updates that will provide the next list of all the checked values. This
	 * isn't a super helpful prop since this hook will always return the checked
	 * values anyways.
	 * @returns An object containing a function to get the props for each controlled
	 * checkbox, the props for the root indeterminate checkbox, a list of all the
	 * checked values, and a general `setCheckboxValues` function from `useState` if
	 * the list of values can be changed from external sources as well.
	 */
	function useIndeterminateChecked(values, defaultCheckedValues, onChange) {
	    if (defaultCheckedValues === void 0) { defaultCheckedValues = []; }
	    var _a = React.useState(defaultCheckedValues), checkedValues = _a[0], setCheckedValues = _a[1];
	    var checked = checkedValues.length > 0;
	    var indeterminate = checked && checkedValues.length < values.length;
	    var updateCheckedValues = function (values) {
	        if (onChange) {
	            onChange(values);
	        }
	        setCheckedValues(values);
	    };
	    var rootProps = {
	        "aria-checked": indeterminate ? "mixed" : undefined,
	        checked: checked,
	        indeterminate: indeterminate,
	        onChange: function () {
	            return updateCheckedValues(checkedValues.length === 0 || indeterminate ? values : []);
	        },
	    };
	    var getProps = function (value) { return ({
	        value: value,
	        checked: checkedValues.includes(value),
	        onChange: function () {
	            var i = checkedValues.indexOf(value);
	            var nextChecked = checkedValues.slice();
	            if (i === -1) {
	                nextChecked.push(value);
	            }
	            else {
	                nextChecked.splice(i, 1);
	            }
	            updateCheckedValues(nextChecked);
	        },
	    }); };
	    return {
	        getProps: getProps,
	        rootProps: rootProps,
	        checkedValues: checkedValues,
	        setCheckedValues: setCheckedValues,
	    };
	}

	/**
	 * The `HighlightedResult` component can be used to bold specific letters
	 * within the `children` if the `children` is a string.
	 */
	function HighlightedResult(_a) {
	    var propId = _a.id, style = _a.style, className = _a.className, _b = _a.enabled, enabled = _b === void 0 ? true : _b, value = _a.value, children = _a.children, _c = _a.repeatable, repeatable = _c === void 0 ? false : _c, _d = _a.index, index = _d === void 0 ? 0 : _d;
	    if (!enabled || !value || typeof children !== "string") {
	        return React__default['default'].createElement(React__default['default'].Fragment, null, children);
	    }
	    var i = children.toLowerCase().indexOf(value.toLowerCase());
	    if (i === -1) {
	        return React__default['default'].createElement(React__default['default'].Fragment, null, children);
	    }
	    var end = i + value.length;
	    var id = propId;
	    if (id && index > 0) {
	        id = id + "-" + index;
	    }
	    return (React__default['default'].createElement(React__default['default'].Fragment, null,
	        i > 0 && children.substring(0, i),
	        React__default['default'].createElement("span", { id: id, style: style, className: cn("rmd-typography--bold", className) }, children.substring(i, end)),
	        end < children.length && (React__default['default'].createElement(HighlightedResult, { style: style, className: className, value: value, enabled: enabled && repeatable, repeatable: repeatable, index: index + 1 }, children.substring(end)))));
	}

	/**
	 * Generates an id for each result in the autocomplete's listbox.
	 *
	 * @param id - The listbox's id
	 * @param index - The index of the result in the list
	 * @returns an id string
	 */
	function getResultId(id, index) {
	    return id + "-result-" + (index + 1);
	}
	/**
	 * Gets a renderable label for each result in the autocomplete's listbox. This
	 * will be applied as the `children` for the `Option` element.
	 *
	 * @param datum - The current result datum to get a label for
	 * @param labelKey - The key to extract a label from if the datum is an object
	 * @param query - The current search query. This is useful if you want to
	 * implement text "highlighting" (bold) of all the letters that match in the
	 * item.
	 * @returns a renderable node to display
	 */
	function getResultLabel(datum, labelKey, _query) {
	    if (typeof datum === "string") {
	        return datum;
	    }
	    var label = datum[labelKey];
	    return datum.children || (typeof label === "undefined" ? null : label);
	}
	/**
	 * Gets a value string from each result that can be searched.
	 *
	 * @param datum - The current result datum that should have a string extracted
	 * @param valueKey - The key to use to extract a string value from if the datum
	 * is an object
	 * @returns a searchable string.
	 */
	function getResultValue(datum, valueKey) {
	    if (typeof datum === "string") {
	        return datum;
	    }
	    var value = datum[valueKey];
	    return "" + value;
	}
	/**
	 * This is used to disable filtering and just return the data list immediately.
	 * Useful when the filtering is done somewhere else like a server/API
	 * @internal
	 */
	var noFilter = function (_, data) { return data; };
	/**
	 * Gets the filter function to use within the Autocomplete based on the provided
	 * filter prop
	 *
	 * @internal
	 */
	function getFilterFunction(filter) {
	    if (typeof filter === "function") {
	        return filter;
	    }
	    switch (filter) {
	        case "fuzzy":
	            return fuzzyFilter;
	        case "case-insensitive":
	            return caseInsensitiveFilter;
	        case "none":
	            return noFilter;
	        default:
	            return noFilter;
	    }
	}
	/**
	 * This is an extremely simple type guard that is useful when using the
	 * `onAutoComplete` handler since I'm terrible at typescript types. This will
	 * ensure that if the result is an object, it will match the provided data type
	 * of your data list.
	 *
	 * Example:
	 *
	 * ```ts
	 * interface Example {
	 *   name: string;
	 *   value: string;
	 * }
	 *
	 *
	 * const [example, setExample] = useState<Example | null>(null);
	 * const onAutoComplete = useCallback<AuoCompleteHandler>((_name, example) => {
	 *   if (isResultOf<Example>(example)) {
	 *     setExample(example);
	 *   }
	 * }, [])
	 * ```
	 *
	 * @param datum - The result data to type guard against.
	 */
	function isResultOf(datum) {
	    return !!datum && typeof datum === "object";
	}

	var __assign$fO = (undefined && undefined.__assign) || function () {
	    __assign$fO = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fO.apply(this, arguments);
	};
	/**
	 * This hook handles all the autocomplete's "logic" and behavior.
	 *
	 * @internal
	 */
	function useAutoComplete(_a) {
	    var _b;
	    var suggestionsId = _a.suggestionsId, data = _a.data, propValue = _a.propValue, _c = _a.defaultValue, defaultValue = _c === void 0 ? "" : _c, filterFn = _a.filter, filterOptions = _a.filterOptions, filterOnNoValue = _a.filterOnNoValue, valueKey = _a.valueKey, getResultId = _a.getResultId, getResultValue = _a.getResultValue, onBlur = _a.onBlur, onFocus = _a.onFocus, onClick = _a.onClick, onChange = _a.onChange, onKeyDown = _a.onKeyDown, forwardedRef = _a.forwardedRef, onAutoComplete = _a.onAutoComplete, clearOnAutoComplete = _a.clearOnAutoComplete, anchor = _a.anchor, xMargin = _a.xMargin, yMargin = _a.yMargin, vwMargin = _a.vwMargin, vhMargin = _a.vhMargin, transformOrigin = _a.transformOrigin, listboxWidth = _a.listboxWidth, listboxStyle = _a.listboxStyle, preventOverlap = _a.preventOverlap, disableSwapping = _a.disableSwapping, disableVHBounds = _a.disableVHBounds, closeOnResize = _a.closeOnResize, closeOnScroll = _a.closeOnScroll, propDisableShowOnFocus = _a.disableShowOnFocus, isListAutocomplete = _a.isListAutocomplete, isInlineAutocomplete = _a.isInlineAutocomplete;
	    var _d = useEnsuredRef(forwardedRef), ref = _d[0], refHandler = _d[1];
	    var filter = getFilterFunction(filterFn);
	    var _e = React.useState(function () {
	        var _a;
	        var options = __assign$fO(__assign$fO({}, filterOptions), { valueKey: valueKey, getItemValue: getResultValue, startsWith: (_a = filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.startsWith) !== null && _a !== void 0 ? _a : isInlineAutocomplete });
	        var value = propValue !== null && propValue !== void 0 ? propValue : defaultValue;
	        var filteredData = filterOnNoValue || value ? filter(value, data, options) : data;
	        var match = value;
	        if (isInlineAutocomplete && filteredData.length) {
	            match = getResultValue(filteredData[0], valueKey);
	        }
	        return {
	            value: value,
	            match: match,
	            filteredData: filteredData,
	        };
	    }), _f = _e[0], stateValue = _f.value, match = _f.match, stateFilteredData = _f.filteredData, setState = _e[1];
	    var filteredData = filterFn === "none" ? data : stateFilteredData;
	    var startsWith = (_b = filterOptions === null || filterOptions === void 0 ? void 0 : filterOptions.startsWith) !== null && _b !== void 0 ? _b : isInlineAutocomplete;
	    var value = propValue !== null && propValue !== void 0 ? propValue : stateValue;
	    var setValue = React.useCallback(function (nextValue) {
	        var isBackspace = value.length > nextValue.length ||
	            (!!match && value.length === nextValue.length);
	        var filtered = data;
	        if (nextValue || filterOnNoValue) {
	            var options = __assign$fO(__assign$fO({}, filterOptions), { valueKey: valueKey, getItemValue: getResultValue, startsWith: startsWith });
	            filtered = filter(nextValue, data, options);
	        }
	        var nextMatch = nextValue;
	        if (isInlineAutocomplete && filtered.length && !isBackspace) {
	            nextMatch = getResultValue(filtered[0], valueKey);
	            var input = ref.current;
	            if (input && !isBackspace) {
	                input.value = nextMatch;
	                input.setSelectionRange(nextValue.length, nextMatch.length);
	            }
	        }
	        setState({ value: nextValue, match: nextMatch, filteredData: filtered });
	    }, [
	        ref,
	        data,
	        filter,
	        filterOnNoValue,
	        filterOptions,
	        isInlineAutocomplete,
	        getResultValue,
	        value,
	        match,
	        startsWith,
	        valueKey,
	    ]);
	    // this is really just a hacky way to make sure that once a value has been
	    // autocompleted, the menu doesn't immediately re-appear due to the hook below
	    // for showing when the value/ filtered data list change
	    var autocompleted = React.useRef(false);
	    var handleChange = React.useCallback(function (event) {
	        if (onChange) {
	            onChange(event);
	        }
	        autocompleted.current = false;
	        setValue(event.currentTarget.value);
	    }, [setValue, onChange]);
	    var _g = useToggle(false), visible = _g[0], show = _g[1], hide = _g[2];
	    var isTouch = useIsUserInteractionMode("touch");
	    var disableShowOnFocus = propDisableShowOnFocus !== null && propDisableShowOnFocus !== void 0 ? propDisableShowOnFocus : isTouch;
	    var focused = React.useRef(false);
	    var handleBlur = React.useCallback(function (event) {
	        if (onBlur) {
	            onBlur(event);
	        }
	        focused.current = false;
	    }, [onBlur]);
	    var handleFocus = React.useCallback(function (event) {
	        if (onFocus) {
	            onFocus(event);
	        }
	        if (disableShowOnFocus) {
	            return;
	        }
	        focused.current = true;
	        if (isListAutocomplete && filteredData.length) {
	            show();
	        }
	    }, [filteredData, isListAutocomplete, onFocus, show, disableShowOnFocus]);
	    var handleClick = React.useCallback(function (event) {
	        if (onClick) {
	            onClick(event);
	        }
	        // since click events also trigger focus events right beforehand, want to
	        // skip the first click handler and require a second click to show it.
	        // this is why the focused.current isn't set onFocus for
	        // disableShowOnFocus
	        if (disableShowOnFocus && !focused.current) {
	            focused.current = true;
	            return;
	        }
	        if (isListAutocomplete && filteredData.length) {
	            show();
	        }
	    }, [disableShowOnFocus, filteredData.length, isListAutocomplete, onClick, show]);
	    var handleAutoComplete = React.useCallback(function (index) {
	        var result = filteredData[index];
	        var resultValue = getResultValue(result, valueKey);
	        if (onAutoComplete) {
	            onAutoComplete({
	                value: resultValue,
	                index: index,
	                result: result,
	                dataIndex: data.findIndex(function (datum) { return getResultValue(datum, valueKey) === resultValue; }),
	                filteredData: filteredData,
	            });
	        }
	        setValue(clearOnAutoComplete ? "" : resultValue);
	        autocompleted.current = true;
	    }, [
	        clearOnAutoComplete,
	        data,
	        filteredData,
	        getResultValue,
	        onAutoComplete,
	        valueKey,
	        setValue,
	    ]);
	    var listboxRef = React.useRef(null);
	    var _h = useActiveDescendantMovement(__assign$fO(__assign$fO({}, VERTICAL_COMBOBOX), { getId: getResultId, items: filteredData, baseId: suggestionsId, onChange: function (_a, itemRefs) {
	            var index = _a.index, items = _a.items, target = _a.target;
	            // the default scroll into view behavior for aria-activedescendant
	            // movement won't work here since the "target" element will actually be
	            // the input element instead of the listbox. So need to implement the
	            // scroll into view behavior manually from the listbox instead.
	            var item = itemRefs[index] && itemRefs[index].current;
	            var listbox = listboxRef.current;
	            if (item && listbox && listbox.scrollHeight > listbox.offsetHeight) {
	                scrollIntoView(listbox, item);
	            }
	            if (!isInlineAutocomplete) {
	                return;
	            }
	            var nextMatch = getResultValue(items[index], valueKey);
	            target.value = nextMatch;
	            target.setSelectionRange(0, nextMatch.length);
	            setState(function (prevState) { return (__assign$fO(__assign$fO({}, prevState), { value: nextMatch, match: nextMatch })); });
	        },
	        onKeyDown: function (event) {
	            if (onKeyDown) {
	                onKeyDown(event);
	            }
	            var input = event.currentTarget;
	            switch (event.key) {
	                case "ArrowDown":
	                    if (isListAutocomplete &&
	                        event.altKey &&
	                        !visible &&
	                        filteredData.length) {
	                        // don't want the cursor to move if there is text
	                        event.preventDefault();
	                        event.stopPropagation();
	                        show();
	                        setFocusedIndex(-1);
	                    }
	                    break;
	                case "ArrowUp":
	                    if (isListAutocomplete && event.altKey && visible) {
	                        // don't want the cursor to move if there is text
	                        event.preventDefault();
	                        event.stopPropagation();
	                        hide();
	                    }
	                    break;
	                case "Tab":
	                    event.stopPropagation();
	                    hide();
	                    break;
	                case "ArrowRight":
	                    if (isInlineAutocomplete &&
	                        input.selectionStart !== input.selectionEnd) {
	                        var index = focusedIndex !== -1 ? focusedIndex : 0;
	                        hide();
	                        handleAutoComplete(index);
	                    }
	                    break;
	                case "Enter":
	                    if (visible && focusedIndex >= 0) {
	                        event.stopPropagation();
	                        handleAutoComplete(focusedIndex);
	                        hide();
	                    }
	                    break;
	                case "Escape":
	                    if (visible) {
	                        event.stopPropagation();
	                        hide();
	                    }
	                    else if (value) {
	                        event.stopPropagation();
	                        setValue("");
	                    }
	                    break;
	                // no default
	            }
	        } })), activeId = _h.activeId, itemRefs = _h.itemRefs, handleKeyDown = _h.onKeyDown, focusedIndex = _h.focusedIndex, setFocusedIndex = _h.setFocusedIndex;
	    useCloseOnOutsideClick({
	        enabled: visible,
	        element: ref.current,
	        onOutsideClick: hide,
	    });
	    var _j = useFixedPositioning({
	        fixedTo: function () { return ref.current; },
	        anchor: anchor,
	        onScroll: function (_event, _a) {
	            var visible = _a.visible;
	            if (closeOnScroll || !visible) {
	                hide();
	            }
	        },
	        onResize: closeOnResize ? hide : undefined,
	        width: listboxWidth,
	        xMargin: xMargin,
	        yMargin: yMargin,
	        vwMargin: vwMargin,
	        vhMargin: vhMargin,
	        transformOrigin: transformOrigin,
	        preventOverlap: preventOverlap,
	        disableSwapping: disableSwapping,
	        disableVHBounds: disableVHBounds,
	    }), style = _j.style, onEnter = _j.onEnter, onEntering = _j.onEntering, onEntered = _j.onEntered, onExited = _j.onExited, updateStyle = _j.updateStyle;
	    React.useEffect(function () {
	        if (!focused.current || autocompleted.current) {
	            return;
	        }
	        if (filteredData.length && !visible && value.length && isListAutocomplete) {
	            show();
	        }
	        else if (!filteredData.length && visible) {
	            hide();
	        }
	        // this effect is just for toggling the visibility states as needed if the
	        // value or filter data list changes
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, [filteredData, value]);
	    React.useEffect(function () {
	        if (!visible) {
	            setFocusedIndex(-1);
	            return;
	        }
	        updateStyle();
	        // only want to trigger on data changes and setFocusedIndex shouldn't change
	        // anyways
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, [visible, filteredData]);
	    return {
	        ref: refHandler,
	        value: value,
	        match: match,
	        visible: visible,
	        activeId: activeId,
	        itemRefs: itemRefs,
	        filteredData: filteredData,
	        fixedStyle: __assign$fO(__assign$fO({}, style), listboxStyle),
	        transitionHooks: {
	            onEnter: onEnter,
	            onEntering: onEntering,
	            onEntered: onEntered,
	            onExited: onExited,
	        },
	        listboxRef: listboxRef,
	        handleBlur: handleBlur,
	        handleFocus: handleFocus,
	        handleClick: handleClick,
	        handleChange: handleChange,
	        handleKeyDown: handleKeyDown,
	        handleAutoComplete: handleAutoComplete,
	    };
	}

	var __assign$fN = (undefined && undefined.__assign) || function () {
	    __assign$fN = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fN.apply(this, arguments);
	};
	var __rest$13 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var __spreadArray$5 = (undefined && undefined.__spreadArray) || function (to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	};
	var block$E = bem("rmd-autocomplate");
	var listbox = bem("rmd-listbox");
	var DEFAULT_FILTER_OPTIONS = {
	    trim: true,
	    ignoreWhitespace: true,
	};
	var EMPTY_LIST = [];
	/**
	 * An AutoComplete is an accessible combobox widget that allows for real-time
	 * suggestions as the user types.
	 */
	var AutoComplete = React.forwardRef(function AutoComplete(_a, forwardedRef) {
	    var _b = _a.autoComplete, autoComplete = _b === void 0 ? "list" : _b, data = _a.data, _c = _a.filter, filter = _c === void 0 ? "case-insensitive" : _c, _d = _a.filterOptions, filterOptions = _d === void 0 ? DEFAULT_FILTER_OPTIONS : _d, _e = _a.filterOnNoValue, filterOnNoValue = _e === void 0 ? false : _e, className = _a.className, onBlur = _a.onBlur, onFocus = _a.onFocus, onClick = _a.onClick, onKeyDown = _a.onKeyDown, onChange = _a.onChange, containerProps = _a.containerProps, _f = _a.portal, portal = _f === void 0 ? false : _f, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, listboxStyle = _a.listboxStyle, listboxClassName = _a.listboxClassName, onAutoComplete = _a.onAutoComplete, _g = _a.clearOnAutoComplete, clearOnAutoComplete = _g === void 0 ? false : _g, _h = _a.labelKey, labelKey = _h === void 0 ? "label" : _h, _j = _a.valueKey, valueKey = _j === void 0 ? "value" : _j, _k = _a.getResultId, getResultId$1 = _k === void 0 ? getResultId : _k, _l = _a.getResultLabel, getResultLabel$1 = _l === void 0 ? getResultLabel : _l, _m = _a.getResultValue, getResultValue$1 = _m === void 0 ? getResultValue : _m, _o = _a.highlight, highlight = _o === void 0 ? false : _o, _p = _a.highlightReapeating, highlightReapeating = _p === void 0 ? false : _p, highlightStyle = _a.highlightStyle, highlightClassName = _a.highlightClassName, _q = _a.anchor, anchor = _q === void 0 ? BELOW_CENTER_ANCHOR : _q, _r = _a.listboxWidth, listboxWidth = _r === void 0 ? "equal" : _r, _s = _a.xMargin, xMargin = _s === void 0 ? 0 : _s, _t = _a.yMargin, yMargin = _t === void 0 ? 0 : _t, _u = _a.vwMargin, vwMargin = _u === void 0 ? 16 : _u, _v = _a.vhMargin, vhMargin = _v === void 0 ? 16 : _v, _w = _a.transformOrigin, transformOrigin = _w === void 0 ? true : _w, _x = _a.preventOverlap, preventOverlap = _x === void 0 ? true : _x, _y = _a.disableVHBounds, disableVHBounds = _y === void 0 ? false : _y, _z = _a.disableSwapping, disableSwapping = _z === void 0 ? true : _z, disableShowOnFocus = _a.disableShowOnFocus, _0 = _a.closeOnResize, closeOnResize = _0 === void 0 ? false : _0, _1 = _a.closeOnScroll, closeOnScroll = _1 === void 0 ? false : _1, _2 = _a.omitKeys, omitKeys = _2 === void 0 ? EMPTY_LIST : _2, propValue = _a.value, defaultValue = _a.defaultValue, beforeResultsChildren = _a.beforeResultsChildren, afterResultsChildren = _a.afterResultsChildren, props = __rest$13(_a, ["autoComplete", "data", "filter", "filterOptions", "filterOnNoValue", "className", "onBlur", "onFocus", "onClick", "onKeyDown", "onChange", "containerProps", "portal", "portalInto", "portalIntoId", "listboxStyle", "listboxClassName", "onAutoComplete", "clearOnAutoComplete", "labelKey", "valueKey", "getResultId", "getResultLabel", "getResultValue", "highlight", "highlightReapeating", "highlightStyle", "highlightClassName", "anchor", "listboxWidth", "xMargin", "yMargin", "vwMargin", "vhMargin", "transformOrigin", "preventOverlap", "disableVHBounds", "disableSwapping", "disableShowOnFocus", "closeOnResize", "closeOnScroll", "omitKeys", "value", "defaultValue", "beforeResultsChildren", "afterResultsChildren"]);
	    var id = props.id;
	    var comboboxId = id + "-combobox";
	    var suggestionsId = id + "-listbox";
	    var isListAutocomplete = autoComplete === "list" || autoComplete === "both";
	    var isInlineAutocomplete = autoComplete === "inline" || autoComplete === "both";
	    var _3 = useAutoComplete({
	        suggestionsId: suggestionsId,
	        defaultValue: defaultValue,
	        data: data,
	        filter: filter,
	        filterOptions: filterOptions,
	        filterOnNoValue: filterOnNoValue,
	        valueKey: valueKey,
	        getResultId: getResultId$1,
	        getResultValue: getResultValue$1,
	        onBlur: onBlur,
	        onFocus: onFocus,
	        onClick: onClick,
	        onChange: onChange,
	        onKeyDown: onKeyDown,
	        forwardedRef: forwardedRef,
	        onAutoComplete: onAutoComplete,
	        clearOnAutoComplete: clearOnAutoComplete,
	        isListAutocomplete: isListAutocomplete,
	        isInlineAutocomplete: isInlineAutocomplete,
	        anchor: anchor,
	        xMargin: xMargin,
	        yMargin: yMargin,
	        vwMargin: vwMargin,
	        vhMargin: vhMargin,
	        transformOrigin: transformOrigin,
	        listboxWidth: listboxWidth,
	        listboxStyle: listboxStyle,
	        preventOverlap: preventOverlap,
	        disableSwapping: disableSwapping,
	        disableVHBounds: disableVHBounds,
	        closeOnResize: closeOnResize,
	        closeOnScroll: closeOnScroll,
	        disableShowOnFocus: disableShowOnFocus,
	    }), ref = _3.ref, match = _3.match, value = _3.value, visible = _3.visible, activeId = _3.activeId, itemRefs = _3.itemRefs, filteredData = _3.filteredData, listboxRef = _3.listboxRef, fixedStyle = _3.fixedStyle, transitionHooks = _3.transitionHooks, handleBlur = _3.handleBlur, handleFocus = _3.handleFocus, handleClick = _3.handleClick, handleChange = _3.handleChange, handleKeyDown = _3.handleKeyDown, handleAutoComplete = _3.handleAutoComplete;
	    return (React__default['default'].createElement(React__default['default'].Fragment, null,
	        React__default['default'].createElement(TextField, __assign$fN({}, props, { "aria-autocomplete": autoComplete, "aria-controls": comboboxId, "aria-activedescendant": activeId, autoComplete: "off", value: propValue !== null && propValue !== void 0 ? propValue : match, onBlur: handleBlur, onFocus: handleFocus, onClick: handleClick, onKeyDown: handleKeyDown, onChange: handleChange, ref: ref, className: cn(block$E(), className), containerProps: __assign$fN(__assign$fN({}, containerProps), { "aria-haspopup": "listbox", "aria-owns": suggestionsId, "aria-expanded": visible, id: comboboxId, role: "combobox" }) })),
	        React__default['default'].createElement(ScaleTransition, __assign$fN({ portal: portal, portalInto: portalInto, portalIntoId: portalIntoId, vertical: true, visible: visible }, transitionHooks),
	            React__default['default'].createElement(List, { id: suggestionsId, role: "listbox", ref: listboxRef, style: fixedStyle, className: cn(listbox({ temporary: true }), listboxClassName) },
	                beforeResultsChildren,
	                filteredData.map(function (datum, i) {
	                    var resultId = getResultId$1(suggestionsId, i);
	                    var optionProps;
	                    if (isListboxOptionProps(datum)) {
	                        optionProps = omit(datum, __spreadArray$5([labelKey, valueKey], omitKeys));
	                    }
	                    return (React__default['default'].createElement(Option, __assign$fN({ key: resultId }, optionProps, { id: resultId, selected: false, focused: resultId === activeId, ref: itemRefs[i], onClick: function () { return handleAutoComplete(i); } }),
	                        React__default['default'].createElement(HighlightedResult, { id: resultId + "-match", style: highlightStyle, className: highlightClassName, value: propValue !== null && propValue !== void 0 ? propValue : value, enabled: highlight, repeatable: highlightReapeating }, getResultLabel$1(datum, labelKey, value))));
	                }),
	                afterResultsChildren))));
	});

	var __assign$fM = (undefined && undefined.__assign) || function () {
	    __assign$fM = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fM.apply(this, arguments);
	};
	var __rest$12 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$D = bem("rmd-avatar");
	/**
	 * An `Avatar` is generally used to represent objects or people within your app.
	 * The avatar can consist of an image, an icon, or some text to display. When
	 * the avatar is not an image, different themes can be applied to make the
	 * avatar more unique.
	 */
	var Avatar = React.forwardRef(function Avatar(_a, ref) {
	    var _b;
	    var className = _a.className, children = _a.children, src = _a.src, _c = _a.alt, alt = _c === void 0 ? "" : _c, _d = _a.color, color = _d === void 0 ? "" : _d, imgProps = _a.imgProps, referrerPolicy = _a.referrerPolicy, props = __rest$12(_a, ["className", "children", "src", "alt", "color", "imgProps", "referrerPolicy"]);
	    var img;
	    if (src || imgProps) {
	        img = (React__default['default'].createElement("img", __assign$fM({ src: src, alt: alt, referrerPolicy: referrerPolicy }, imgProps, { className: cn(block$D("image"), imgProps === null || imgProps === void 0 ? void 0 : imgProps.className) })));
	    }
	    return (React__default['default'].createElement("span", __assign$fM({}, props, { ref: ref, className: cn(block$D((_b = {}, _b[color] = color, _b)), className) }),
	        img,
	        children));
	});

	/**
	 * A small util to check if the badge is considered empty.
	 *
	 * @internal
	 */
	function isEmpty(children, disableNullOnZero) {
	    return (!disableNullOnZero &&
	        (children === 0 || children === "0" || children === null));
	}

	var __assign$fL = (undefined && undefined.__assign) || function () {
	    __assign$fL = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fL.apply(this, arguments);
	};
	var __rest$11 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$C = bem("rmd-badge");
	/**
	 * This component is generally used for displaying notifications with a count
	 * relative to another element with the `BadgeContainer` component. However, it
	 * can be used by itself to display any subpplementary content if needed.
	 */
	var Badge = React.forwardRef(function Badge(_a, ref) {
	    var _b;
	    var className = _a.className, _c = _a.theme, theme = _c === void 0 ? "default" : _c, _d = _a.children, children = _d === void 0 ? null : _d, _e = _a.disableNullOnZero, disableNullOnZero = _e === void 0 ? false : _e, props = __rest$11(_a, ["className", "theme", "children", "disableNullOnZero"]);
	    if (isEmpty(children, disableNullOnZero)) {
	        return null;
	    }
	    return (React__default['default'].createElement("span", __assign$fL({}, props, { ref: ref, className: cn(block$C((_b = {}, _b[theme] = theme !== "clear", _b)), className) }), children));
	});

	var __assign$fK = (undefined && undefined.__assign) || function () {
	    __assign$fK = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fK.apply(this, arguments);
	};
	var __rest$10 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$B = bem("rmd-badge-container");
	/**
	 * This is a really simple component that will just allow you to position a
	 * badge relative to another component.
	 */
	var BadgeContainer = React.forwardRef(function BadgeContainer(_a, ref) {
	    var className = _a.className, children = _a.children, props = __rest$10(_a, ["className", "children"]);
	    return (React__default['default'].createElement("span", __assign$fK({}, props, { className: cn(block$B(), className), ref: ref }), children));
	});

	var __assign$fJ = (undefined && undefined.__assign) || function () {
	    __assign$fJ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fJ.apply(this, arguments);
	};
	var __rest$$ = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This is a small wrapper for the `Button` component that will automatically
	 * apply the `aria-describedby` attribute when it has been "badged". It also
	 * adds some reasonable defaults for the most common use-case for badges:
	 * notifications.
	 */
	var BadgedButton = React.forwardRef(function BadgedButton(_a, ref) {
	    var _b = _a["aria-label"], ariaLabel = _b === void 0 ? "Notifications" : _b, badgeStyle = _a.badgeStyle, badgeClassName = _a.badgeClassName, badgeRef = _a.badgeRef, propBadgeId = _a.badgeId, propButtonChildren = _a.buttonChildren, _c = _a.buttonType, buttonType = _c === void 0 ? "icon" : _c, badgeTheme = _a.badgeTheme, _d = _a.children, children = _d === void 0 ? null : _d, _e = _a.disableNullOnZero, disableNullOnZero = _e === void 0 ? false : _e, propDescribedBy = _a["aria-describedby"], props = __rest$$(_a, ["aria-label", "badgeStyle", "badgeClassName", "badgeRef", "badgeId", "buttonChildren", "buttonType", "badgeTheme", "children", "disableNullOnZero", "aria-describedby"]);
	    var id = props.id;
	    var buttonChildren = useIcon("notification", propButtonChildren);
	    var badgeId = propBadgeId || "";
	    if (!badgeId && id) {
	        badgeId = id + "-badge";
	    }
	    var describedBy = propDescribedBy;
	    if (!isEmpty(children, disableNullOnZero)) {
	        describedBy = cn(describedBy, badgeId);
	    }
	    return (React__default['default'].createElement(Button, __assign$fJ({}, props, { "aria-label": ariaLabel, "aria-describedby": describedBy, ref: ref, buttonType: buttonType }),
	        buttonChildren,
	        React__default['default'].createElement(Badge, { id: badgeId, ref: badgeRef, theme: badgeTheme, style: badgeStyle, className: badgeClassName, disableNullOnZero: disableNullOnZero }, children)));
	});

	var __assign$fI = (undefined && undefined.__assign) || function () {
	    __assign$fI = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fI.apply(this, arguments);
	};
	var __rest$_ = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$A = bem("rmd-card");
	/**
	 * This is the root card component that should be used along side all the other
	 * card parts. It adds some general styles and elevation to help show
	 * prominence.
	 */
	var Card = React.forwardRef(function Card(_a, ref) {
	    var className = _a.className, children = _a.children, _b = _a.raiseable, raiseable = _b === void 0 ? false : _b, _c = _a.fullWidth, fullWidth = _c === void 0 ? false : _c, _d = _a.bordered, bordered = _d === void 0 ? false : _d, props = __rest$_(_a, ["className", "children", "raiseable", "fullWidth", "bordered"]);
	    return (React__default['default'].createElement("div", __assign$fI({}, props, { ref: ref, className: cn(block$A({
	            bordered: bordered,
	            shadowed: !bordered,
	            raiseable: !bordered && raiseable,
	            "full-width": fullWidth,
	        }), className) }), children));
	});

	var __assign$fH = (undefined && undefined.__assign) || function () {
	    __assign$fH = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fH.apply(this, arguments);
	};
	var __rest$Z = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$z = bem("rmd-card");
	/**
	 * This component is used to dynamically add addons to the `CardHeader`
	 * component. When no children are provided, nothing will be rendered.
	 *
	 * @internal
	 */
	function CardHeaderAddon(_a) {
	    var className = _a.className, children = _a.children, props = __rest$Z(_a, ["className", "children"]);
	    if (!children) {
	        return null;
	    }
	    return (React__default['default'].createElement("span", __assign$fH({}, props, { className: cn(block$z("header-addon"), className) }), children));
	}

	var __assign$fG = (undefined && undefined.__assign) || function () {
	    __assign$fG = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fG.apply(this, arguments);
	};
	var __rest$Y = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$y = bem("rmd-card");
	/**
	 * The header for a `Card`. There should only be up to 1 `CardHeader` within a
	 * card and normally contains the `CardTitle` and optionally `CardSubtitle`
	 * components. There is also additional functionality built in to render items
	 * before or after the main children with some additional spacing.
	 */
	var CardHeader = React.forwardRef(function CardHeader(_a, ref) {
	    var _b;
	    var _c = _a.align, align = _c === void 0 ? "center" : _c, className = _a.className, contentClassName = _a.contentClassName, children = _a.children, beforeChildren = _a.beforeChildren, afterChildren = _a.afterChildren, props = __rest$Y(_a, ["align", "className", "contentClassName", "children", "beforeChildren", "afterChildren"]);
	    return (React__default['default'].createElement("header", __assign$fG({}, props, { ref: ref, className: cn(block$y("header", (_b = {},
	            _b[align] = align !== "none",
	            _b)), className) }),
	        React__default['default'].createElement(TextIconSpacing, { icon: React__default['default'].createElement(CardHeaderAddon, null, beforeChildren) },
	            React__default['default'].createElement(TextIconSpacing, { icon: React__default['default'].createElement(CardHeaderAddon, null, afterChildren), iconAfter: true },
	                React__default['default'].createElement("span", { className: cn(block$y("header-content"), contentClassName) }, children)))));
	});

	var __assign$fF = (undefined && undefined.__assign) || function () {
	    __assign$fF = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fF.apply(this, arguments);
	};
	var __rest$X = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$x = bem("rmd-card");
	/**
	 * The `Cardtitle` component should normally be used within the `CardHeader` to
	 * create a nicely styled `<h5>` title for your card. This can also be used
	 * along with the `CardSubtitle` component within the `CardHeader` for a main
	 * title and a subtitle.
	 */
	var CardTitle = React.forwardRef(function CardTitle(_a, ref) {
	    var className = _a.className, children = _a.children, _b = _a.small, small = _b === void 0 ? false : _b, _c = _a.noWrap, noWrap = _c === void 0 ? false : _c, props = __rest$X(_a, ["className", "children", "small", "noWrap"]);
	    return (React__default['default'].createElement("h5", __assign$fF({}, props, { ref: ref, className: cn(block$x("title", { small: small }), {
	            "rmd-card--no-wrap": noWrap,
	        }, className) }), children));
	});

	var __assign$fE = (undefined && undefined.__assign) || function () {
	    __assign$fE = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fE.apply(this, arguments);
	};
	var __rest$W = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$w = bem("rmd-card");
	/**
	 * A subtitle for the `Card`. This is usually used with the `CardHeader`
	 * component after the `CardTitle`.
	 */
	var CardSubtitle = React.forwardRef(function CardSubtitle(_a, ref) {
	    var className = _a.className, children = _a.children, _b = _a.noWrap, noWrap = _b === void 0 ? false : _b, _c = _a.disableSecondaryColor, disableSecondaryColor = _c === void 0 ? false : _c, props = __rest$W(_a, ["className", "children", "noWrap", "disableSecondaryColor"]);
	    return (React__default['default'].createElement("h6", __assign$fE({}, props, { ref: ref, className: cn(block$w("subtitle", {
	            secondary: !disableSecondaryColor,
	        }), {
	            "rmd-card--no-wrap": noWrap,
	        }, className) }), children));
	});

	var __assign$fD = (undefined && undefined.__assign) || function () {
	    __assign$fD = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fD.apply(this, arguments);
	};
	var __rest$V = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$v = bem("rmd-card");
	/**
	 * The main content for the `Card`. This adds some additional padding and removes
	 * margin from `<p>` tags by default.
	 */
	var CardContent = React.forwardRef(function CardContent(_a, ref) {
	    var _b = _a.disablePadding, disablePadding = _b === void 0 ? false : _b, _c = _a.disableExtraPadding, disableExtraPadding = _c === void 0 ? false : _c, _d = _a.disableSecondaryColor, disableSecondaryColor = _d === void 0 ? false : _d, _e = _a.disableParagraphMargin, disableParagraphMargin = _e === void 0 ? false : _e, className = _a.className, children = _a.children, props = __rest$V(_a, ["disablePadding", "disableExtraPadding", "disableSecondaryColor", "disableParagraphMargin", "className", "children"]);
	    return (React__default['default'].createElement("div", __assign$fD({}, props, { ref: ref, className: cn(block$v("content", {
	            padded: !disablePadding,
	            "extra-padding": !disablePadding && !disableExtraPadding,
	            "remove-margin": !disableParagraphMargin,
	            secondary: !disableSecondaryColor,
	        }), className) }), children));
	});

	var __assign$fC = (undefined && undefined.__assign) || function () {
	    __assign$fC = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fC.apply(this, arguments);
	};
	var __rest$U = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$u = bem("rmd-card");
	/**
	 * This component is generally used to hold the main actions for the `Card`.
	 * It's a good place to add additional buttons or expansion toggles.
	 */
	var CardActions = React.forwardRef(function CardActions(_a, ref) {
	    var _b;
	    var className = _a.className, _c = _a.align, align = _c === void 0 ? "end" : _c, children = _a.children, props = __rest$U(_a, ["className", "align", "children"]);
	    return (React__default['default'].createElement("div", __assign$fC({}, props, { ref: ref, className: cn(block$u("actions", (_b = {},
	            _b[align] = align !== "end",
	            _b)), className) }), children));
	});

	var __assign$fB = (undefined && undefined.__assign) || function () {
	    __assign$fB = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fB.apply(this, arguments);
	};
	var __rest$T = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$t = bem("rmd-chip");
	/**
	 * A chip is a simplified and condensed button component that be used to create
	 * compact radio groups, checkboxes, and trigger actions. The chip only has a
	 * `"solid"` and `"outline"` theme but can be raisable once clicked or
	 * selectable with an inline icon. A chip also supports rendering icons, avatars,
	 * or circular progress bars to the left and right of the children.
	 */
	var Chip = React.forwardRef(function Chip(_a, ref) {
	    var _b;
	    var ariaPressed = _a["aria-pressed"], propClassName = _a.className, children = _a.children, _c = _a.theme, theme = _c === void 0 ? "solid" : _c, propLeftIcon = _a.leftIcon, rightIcon = _a.rightIcon, _d = _a.raisable, raisable = _d === void 0 ? false : _d, _e = _a.disabled, disabled = _e === void 0 ? false : _e, selected = _a.selected, _f = _a.selectedThemed, selectedThemed = _f === void 0 ? false : _f, contentStyle = _a.contentStyle, contentClassName = _a.contentClassName, _g = _a.disableContentWrap, disableContentWrap = _g === void 0 ? false : _g, propSelectedIcon = _a.selectedIcon, _h = _a.noninteractable, noninteractable = _h === void 0 ? false : _h, _j = _a.disableIconTransition, disableIconTransition = _j === void 0 ? false : _j, props = __rest$T(_a, ["aria-pressed", "className", "children", "theme", "leftIcon", "rightIcon", "raisable", "disabled", "selected", "selectedThemed", "contentStyle", "contentClassName", "disableContentWrap", "selectedIcon", "noninteractable", "disableIconTransition"]);
	    var _k = useInteractionStates({
	        handlers: props,
	        className: propClassName,
	        disabled: disabled || noninteractable,
	        enablePressedAndRipple: raisable && !noninteractable,
	    }), ripples = _k.ripples, className = _k.className, handlers = _k.handlers;
	    var content = children;
	    if (!disableContentWrap) {
	        content = (React__default['default'].createElement("span", { style: contentStyle, className: cn(block$t("content"), contentClassName) }, children));
	    }
	    var leftIcon = propLeftIcon;
	    var selectable = typeof selected === "boolean";
	    var selectedIcon = useIcon("selected", propSelectedIcon);
	    var isHiddenIcon = false;
	    if (selectable &&
	        !selectedThemed &&
	        typeof leftIcon === "undefined" &&
	        selectedIcon) {
	        leftIcon = selectedIcon;
	        if (!disableIconTransition && React.isValidElement(selectedIcon)) {
	            isHiddenIcon = !selected;
	            leftIcon = React.cloneElement(selectedIcon, {
	                className: block$t("selected-icon", { visible: selected }),
	            });
	        }
	        else if (disableIconTransition && !selected) {
	            // don't want to render it when not selected if there's no transition
	            leftIcon = null;
	        }
	    }
	    var leading = leftIcon && !isHiddenIcon;
	    var trailing = rightIcon;
	    var Component = noninteractable ? "span" : "button";
	    var buttonProps = {
	        "aria-pressed": ariaPressed !== null && ariaPressed !== void 0 ? ariaPressed : (!!selected || undefined),
	        type: "button",
	        disabled: disabled,
	    };
	    return (React__default['default'].createElement(Component, __assign$fB({}, (noninteractable ? {} : buttonProps), props, handlers, { ref: ref, className: cn(block$t((_b = {},
	            _b[theme] = true,
	            _b.disabled = disabled,
	            _b.selected = !disabled && selected && !selectedThemed,
	            _b.themed = !disabled && selected && selectedThemed,
	            _b["solid-disabled"] = disabled && theme === "solid",
	            _b["leading-icon"] = leading && !trailing,
	            _b["trailing-icon"] = trailing && !leading,
	            _b.surrounded = leading && trailing,
	            _b.noninteractable = noninteractable,
	            _b)), className) }),
	        React__default['default'].createElement(TextIconSpacing, { icon: leftIcon, beforeClassName: isHiddenIcon ? "" : undefined },
	            React__default['default'].createElement(TextIconSpacing, { icon: rightIcon, iconAfter: true }, content)),
	        ripples));
	});

	var DEFAULT_OVERLAY_TIMEOUT = 150;
	var DEFAULT_OVERLAY_CLASSNAMES = {
	    appearActive: "rmd-overlay--active",
	    enterActive: "rmd-overlay--active",
	    enterDone: "rmd-overlay--active",
	};

	var __assign$fA = (undefined && undefined.__assign) || function () {
	    __assign$fA = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fA.apply(this, arguments);
	};
	var __rest$S = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$s = bem("rmd-overlay");
	/**
	 * The `Overlay` component is a simple component used to render a full page
	 * overlay in the page with an enter and exit animation. If there are overflow
	 * issues or you need to portal the overlay to a different area within your app,
	 * you should use the `OverlayPortal` component instead.
	 */
	var Overlay = React.forwardRef(function Overlay(_a, ref) {
	    var className = _a.className, visible = _a.visible, _b = _a.hidden, hidden = _b === void 0 ? false : _b, _c = _a.clickable, clickable = _c === void 0 ? true : _c, _d = _a.timeout, timeout = _d === void 0 ? DEFAULT_OVERLAY_TIMEOUT : _d, _e = _a.classNames, classNames = _e === void 0 ? DEFAULT_OVERLAY_CLASSNAMES : _e, children = _a.children, _f = _a.mountOnEnter, mountOnEnter = _f === void 0 ? true : _f, _g = _a.unmountOnExit, unmountOnExit = _g === void 0 ? true : _g, onRequestClose = _a.onRequestClose, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, portal = _a.portal, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, _h = _a.tabIndex, tabIndex = _h === void 0 ? -1 : _h, props = __rest$S(_a, ["className", "visible", "hidden", "clickable", "timeout", "classNames", "children", "mountOnEnter", "unmountOnExit", "onRequestClose", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "portal", "portalInto", "portalIntoId", "tabIndex"]);
	    return (React__default['default'].createElement(ConditionalPortal, { portal: portal, portalInto: portalInto, portalIntoId: portalIntoId },
	        React__default['default'].createElement(CSSTransition, { appear: true, in: visible, classNames: hidden ? "" : classNames, timeout: hidden ? 0 : timeout, mountOnEnter: mountOnEnter, unmountOnExit: unmountOnExit, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited }, function (state) { return (React__default['default'].createElement("span", __assign$fA({}, props, { ref: ref, className: cn(block$s({
	                // have to manually set the active state here since react-transition-group doesn't
	                // clone in the transition `classNames` and if the overlay re-renders while the
	                // animation has finished, the active className will disappear
	                active: !hidden && state === "entered",
	                visible: visible,
	                clickable: clickable,
	            }), className), onClick: onRequestClose, tabIndex: tabIndex }), children)); })));
	});

	/* eslint-disable react/prop-types */
	var noop$2 = function () {
	    // do nothing
	};
	var context$6 = React.createContext({
	    stack: [],
	    add: noop$2,
	    remove: noop$2,
	});
	var Provider$2 = context$6.Provider;
	/**
	 * This component is used to help with handling nested dialogs by:
	 * - preventing all dialogs to be closed when the escape key is pressed
	 * - hiding the overlays for dialogs that are not the top-most focus
	 *
	 * This should be added to the root of your app if you would like to enable this
	 * feature.
	 */
	function NestedDialogContextProvider(_a) {
	    var children = _a.children;
	    var _b = React.useState([]), stack = _b[0], setStack = _b[1];
	    var add = React.useCallback(function (dialogId) {
	        setStack(function (prevStack) {
	            return prevStack.concat(dialogId);
	        });
	    }, []);
	    var remove = React.useCallback(function (dialogId) {
	        setStack(function (prevStack) { return prevStack.filter(function (id) { return id !== dialogId; }); });
	    }, []);
	    var value = React.useMemo(function () { return ({ stack: stack, add: add, remove: remove }); }, [add, remove, stack]);
	    return React__default['default'].createElement(Provider$2, { value: value }, children);
	}
	/**
	 * Gets the current nested dialog context. This shouldn't really be used
	 * externally and is a private context hook.
	 *
	 * @internal
	 */
	function useNestedDialogContext() {
	    return React.useContext(context$6);
	}

	/**
	 * This hook is used to fix the nested overlays and the escape keypress when
	 * multiple dialogs are rendered at the same time on a page. All it really does
	 * is keep a stack of the dialog ids that are current visible. If there is more
	 * than 1 dialog visible and the dialog is not at the top of the stack, the
	 * overlay and escape keypress will be disabled.
	 *
	 * NOTE: This will not work if you nest dialogs together and have them become
	 * visible at the same time because the ids will get added from child to parent
	 * instead of parent -&gt; child. This flow shouldn't really happen though so it
	 * isn't planned on being fixed.
	 */
	function useNestedDialogFixes(_a) {
	    var id = _a.id, visible = _a.visible, disabled = _a.disabled, propDisableEscapeClose = _a.disableEscapeClose;
	    var _b = useNestedDialogContext(), add = _b.add, remove = _b.remove, stack = _b.stack;
	    React.useEffect(function () {
	        if (disabled || !visible) {
	            return;
	        }
	        add(id);
	        return function () {
	            remove(id);
	        };
	    }, [visible, disabled, id, add, remove]);
	    return React.useMemo(function () {
	        var disableOverlay = false;
	        var disableEscapeClose = propDisableEscapeClose;
	        if (!disabled && visible && stack.length > 1) {
	            var lastIndex = stack.length - 1;
	            var i = stack.findIndex(function (dialogId) { return id === dialogId; });
	            disableOverlay = i < lastIndex;
	            if (!propDisableEscapeClose) {
	                disableEscapeClose = i < lastIndex;
	            }
	        }
	        return {
	            disableOverlay: disableOverlay,
	            disableEscapeClose: disableEscapeClose,
	        };
	    }, [id, propDisableEscapeClose, disabled, visible, stack]);
	}

	var __assign$fz = (undefined && undefined.__assign) || function () {
	    __assign$fz = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fz.apply(this, arguments);
	};
	var __rest$R = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	// used to disable the overlay click-to-close functionality when the `modal` prop is enabled.
	var noop$1 = function () {
	    // do nothing
	};
	var block$r = bem("rmd-dialog");
	var DEFAULT_DIALOG_CLASSNAMES = {
	    appear: "rmd-dialog--enter",
	    appearActive: "rmd-dialog--enter-active",
	    enter: "rmd-dialog--enter",
	    enterActive: "rmd-dialog--enter-active",
	    exit: "rmd-dialog--exit",
	    exitActive: "rmd-dialog--exit-active",
	};
	var DEFAULT_DIALOG_TIMEOUT = {
	    enter: 200,
	    exit: 150,
	};
	var Dialog = React.forwardRef(function Dialog(_a, ref) {
	    var _b = _a.component, component = _b === void 0 ? "div" : _b, _c = _a.tabIndex, tabIndex = _c === void 0 ? -1 : _c, children = _a.children, className = _a.className, containerStyle = _a.containerStyle, containerClassName = _a.containerClassName, propOverlay = _a.overlay, overlayStyle = _a.overlayStyle, overlayClassName = _a.overlayClassName, _d = _a.overlayHidden, overlayHidden = _d === void 0 ? false : _d, visible = _a.visible, onRequestClose = _a.onRequestClose, _e = _a.forceContainer, forceContainer = _e === void 0 ? false : _e, _f = _a.defaultFocus, defaultFocus = _f === void 0 ? "first" : _f, _g = _a.portal, portal = _g === void 0 ? true : _g, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, _h = _a.appear, appear = _h === void 0 ? false : _h, _j = _a.enter, enter = _j === void 0 ? true : _j, _k = _a.exit, exit = _k === void 0 ? true : _k, _l = _a.disableTransition, disableTransition = _l === void 0 ? false : _l, _m = _a.classNames, classNames = _m === void 0 ? DEFAULT_DIALOG_CLASSNAMES : _m, _o = _a.timeout, timeout = _o === void 0 ? DEFAULT_DIALOG_TIMEOUT : _o, _p = _a.mountOnEnter, mountOnEnter = _p === void 0 ? true : _p, _q = _a.unmountOnExit, unmountOnExit = _q === void 0 ? true : _q, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, _r = _a.modal, modal = _r === void 0 ? false : _r, _s = _a.role, role = _s === void 0 ? "dialog" : _s, _t = _a.type, type = _t === void 0 ? "centered" : _t, _u = _a.disableScrollLock, disableScrollLock = _u === void 0 ? false : _u, _v = _a.disableEscapeClose, propDisableEscapeClose = _v === void 0 ? false : _v, _w = _a.disableFocusContainer, disableFocusContainer = _w === void 0 ? false : _w, _x = _a.disableTabFocusWrap, disableTabFocusWrap = _x === void 0 ? false : _x, _y = _a.disableFocusOnMount, disableFocusOnMount = _y === void 0 ? false : _y, _z = _a.disableFocusOnUnmount, disableFocusOnUnmount = _z === void 0 ? false : _z, _0 = _a.disableNestedDialogFixes, disableNestedDialogFixes = _0 === void 0 ? false : _0, onKeyDown = _a.onKeyDown, props = __rest$R(_a, ["component", "tabIndex", "children", "className", "containerStyle", "containerClassName", "overlay", "overlayStyle", "overlayClassName", "overlayHidden", "visible", "onRequestClose", "forceContainer", "defaultFocus", "portal", "portalInto", "portalIntoId", "appear", "enter", "exit", "disableTransition", "classNames", "timeout", "mountOnEnter", "unmountOnExit", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "modal", "role", "type", "disableScrollLock", "disableEscapeClose", "disableFocusContainer", "disableTabFocusWrap", "disableFocusOnMount", "disableFocusOnUnmount", "disableNestedDialogFixes", "onKeyDown"]);
	    var id = props.id;
	    var isNoneRole = role === "none";
	    var isFullPage = type === "full-page";
	    var isCentered = type === "centered";
	    var _1 = useNestedDialogFixes({
	        id: id,
	        visible: visible,
	        disabled: disableNestedDialogFixes,
	        disableEscapeClose: propDisableEscapeClose,
	    }), disableOverlay = _1.disableOverlay, disableEscapeClose = _1.disableEscapeClose;
	    useScrollLock(visible && !isNoneRole && !disableScrollLock);
	    var overlayEl = null;
	    if (typeof propOverlay === "boolean" ? propOverlay : !isFullPage) {
	        // do not add the portal props to the overlay element since the portalling
	        // is handled in here. With how portals work, this would be rendered **after**
	        // the dialog instead of before which breaks some dialog styles
	        overlayEl = (React__default['default'].createElement(Overlay, { id: id + "-overlay", style: overlayStyle, className: cn("rmd-dialog-overlay", overlayClassName), hidden: overlayHidden || disableOverlay, visible: visible, clickable: !modal, onRequestClose: modal ? noop$1 : onRequestClose }));
	    }
	    var dialog = (React__default['default'].createElement(FocusContainer, __assign$fz({}, props, { ref: ref, role: isNoneRole ? undefined : role, "aria-modal": (!isNoneRole && !!overlayEl) || undefined, tabIndex: tabIndex, component: component, defaultFocus: defaultFocus, disableTabFocusWrap: isNoneRole || disableTabFocusWrap || disableFocusContainer, disableFocusOnMount: isNoneRole || disableFocusContainer || disableFocusOnMount, disableFocusOnMountScroll: true, disableFocusOnUnmount: isNoneRole || disableFocusContainer || disableFocusOnUnmount, onKeyDown: useCloseOnEscape(onRequestClose, disableEscapeClose || isNoneRole, onKeyDown), className: cn(block$r({
	            centered: isCentered,
	            "full-page": isFullPage,
	        }), className) }), children));
	    if (isCentered || forceContainer) {
	        // the additional container is only required when we don't have a full page dialog. it's just
	        // used to apply flex center to the dialog and add some margin
	        dialog = (React__default['default'].createElement("span", { id: id + "-container", style: containerStyle, className: cn("rmd-dialog-container", containerClassName) }, dialog));
	    }
	    return (React__default['default'].createElement(ConditionalPortal, { portal: !isNoneRole && portal, portalInto: portalInto, portalIntoId: portalIntoId },
	        React__default['default'].createElement(React__default['default'].Fragment, null,
	            overlayEl,
	            React__default['default'].createElement(CSSTransition, { appear: !disableTransition && appear, enter: !disableTransition && enter, exit: !disableTransition && exit, in: visible, classNames: classNames, timeout: timeout, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited, mountOnEnter: mountOnEnter, unmountOnExit: unmountOnExit }, dialog))));
	});

	var __assign$fy = (undefined && undefined.__assign) || function () {
	    __assign$fy = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fy.apply(this, arguments);
	};
	var __rest$Q = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$q = bem("rmd-dialog");
	/**
	 * This component doesn't do anything to complex. It really just applies custom
	 * styles so that when the `DialogContent` component is used, the header will be
	 * "fixed" to the top of the dialog while the content scrolls. It also applies
	 * some minimal padding.
	 */
	var DialogHeader = React.forwardRef(function DialogHeader(_a, ref) {
	    var children = _a.children, className = _a.className, props = __rest$Q(_a, ["children", "className"]);
	    return (React__default['default'].createElement("header", __assign$fy({}, props, { ref: ref, className: cn(block$q("header"), className) }), children));
	});

	var __assign$fx = (undefined && undefined.__assign) || function () {
	    __assign$fx = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fx.apply(this, arguments);
	};
	var __rest$P = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$p = bem("rmd-dialog");
	/**
	 * This component adds some base styles to an `<h2>` element for a title within
	 * a `Dialog`.
	 */
	var DialogTitle = React.forwardRef(function DialogTitle(_a, ref) {
	    var children = _a.children, className = _a.className, props = __rest$P(_a, ["children", "className"]);
	    return (React__default['default'].createElement("h2", __assign$fx({}, props, { ref: ref, className: cn(block$p("title"), className) }), children));
	});

	var __assign$fw = (undefined && undefined.__assign) || function () {
	    __assign$fw = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fw.apply(this, arguments);
	};
	var __rest$O = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$o = bem("rmd-dialog");
	/**
	 * This component is used to render the main content within a dialog. There are
	 * really only benefits when using the component alongside the `DialogHeader`
	 * and/or `DialogFooter` since it is set up so only the content will scroll
	 * while the header and footer will be "fixed".
	 */
	var DialogContent = React.forwardRef(function DialogContent(_a, ref) {
	    var children = _a.children, className = _a.className, _b = _a.disablePadding, disablePadding = _b === void 0 ? false : _b, props = __rest$O(_a, ["children", "className", "disablePadding"]);
	    return (React__default['default'].createElement("div", __assign$fw({}, props, { ref: ref, className: cn(block$o("content", {
	            padded: !disablePadding,
	        }), className) }), children));
	});

	var __assign$fv = (undefined && undefined.__assign) || function () {
	    __assign$fv = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fv.apply(this, arguments);
	};
	var __rest$N = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$n = bem("rmd-dialog");
	var DialogFooter = React.forwardRef(function DialogFooter(_a, ref) {
	    var _b;
	    var children = _a.children, className = _a.className, _c = _a.align, align = _c === void 0 ? "end" : _c, props = __rest$N(_a, ["children", "className", "align"]);
	    return (React__default['default'].createElement("footer", __assign$fv({}, props, { ref: ref, className: cn(block$n("footer", (_b = {
	                flex: align !== "none"
	            },
	            _b[align] = align !== "none",
	            _b)), className) }), children));
	});

	var __assign$fu = (undefined && undefined.__assign) || function () {
	    __assign$fu = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fu.apply(this, arguments);
	};
	var __rest$M = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var DEFAULT_CLASSNAMES = {
	    appear: "rmd-dialog--fixed-enter",
	    appearActive: "rmd-dialog--fixed-enter-active",
	    enter: "rmd-dialog--fixed-enter",
	    enterActive: "rmd-dialog--fixed-enter-active",
	    exit: "rmd-dialog--fixed-exit",
	    exitActive: "rmd-dialog--fixed-exit-active",
	};
	/**
	 * The `FixedDialog` is a wrapper for the `Dialog` component that can be used to
	 * be fix itself to another element. Another term for this component might be a
	 * "Pop out Dialog".
	 */
	var FixedDialog = React.forwardRef(function FixedDialog(_a, ref) {
	    var fixedTo = _a.fixedTo, propStyle = _a.style, _b = _a.anchor, anchor = _b === void 0 ? TOP_INNER_RIGHT_ANCHOR : _b, options = _a.options, getOptions = _a.getOptions, children = _a.children, className = _a.className, _c = _a.classNames, classNames = _c === void 0 ? DEFAULT_CLASSNAMES : _c, _d = _a.overlayHidden, overlayHidden = _d === void 0 ? true : _d, _e = _a.disableScrollLock, disableScrollLock = _e === void 0 ? true : _e, props = __rest$M(_a, ["fixedTo", "style", "anchor", "options", "getOptions", "children", "className", "classNames", "overlayHidden", "disableScrollLock"]);
	    var onRequestClose = props.onRequestClose;
	    var _f = useFixedPositioning(__assign$fu(__assign$fu({ style: propStyle, transformOrigin: true }, options), { onScroll: function (_event, _a) {
	            var visible = _a.visible;
	            if (!visible) {
	                onRequestClose();
	            }
	        }, fixedTo: fixedTo,
	        anchor: anchor,
	        getOptions: getOptions })), style = _f.style, onEnter = _f.onEnter, onEntering = _f.onEntering, onEntered = _f.onEntered, onExited = _f.onExited;
	    return (React__default['default'].createElement(Dialog, __assign$fu({}, props, { ref: ref, type: "custom", style: style, className: cn("rmd-dialog--fixed", className), classNames: classNames, overlayHidden: overlayHidden, disableScrollLock: disableScrollLock, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExited: onExited }), children));
	});

	var __assign$ft = (undefined && undefined.__assign) || function () {
	    __assign$ft = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ft.apply(this, arguments);
	};
	var __rest$L = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$m = bem("rmd-divider");
	var Divider = React.forwardRef(function Divider(_a, ref) {
	    var _b = _a.inset, inset = _b === void 0 ? false : _b, _c = _a.vertical, vertical = _c === void 0 ? false : _c, _d = _a.role, role = _d === void 0 ? "separator" : _d, className = _a.className, props = __rest$L(_a, ["inset", "vertical", "role", "className"]);
	    var Component = (vertical ? "div" : "hr");
	    return (React__default['default'].createElement(Component, __assign$ft({}, props, { ref: ref, role: role, className: cn(block$m({ inset: !vertical && inset, vertical: vertical }), className) })));
	});

	var __assign$fs = (undefined && undefined.__assign) || function () {
	    __assign$fs = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fs.apply(this, arguments);
	};
	var __rest$K = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This is a small hook that is used to automatically create a vertical divider
	 * based on the computed height of its parent element.
	 *
	 * @param maxHeight - The max height for the vertical divider. When the value is
	 * between 0 and 1, it will be used as a percentage. Otherwise the smaller value
	 * of parent element height and this will be used.
	 */
	function useVerticalDividerHeight(maxHeight, forwardedRef) {
	    var _a = React.useState(undefined), height = _a[0], setHeight = _a[1];
	    var ref = React.useCallback(function (instance) {
	        applyRef(instance, forwardedRef);
	        if (!instance || !instance.parentElement) {
	            return;
	        }
	        var height = instance.parentElement.offsetHeight;
	        if (maxHeight <= 1) {
	            setHeight(height * maxHeight);
	        }
	        else {
	            setHeight(Math.min(height, maxHeight));
	        }
	    }, [maxHeight, forwardedRef]);
	    return { ref: ref, height: height };
	}
	/**
	 * This component is used to create a vertical divider based on a parent
	 * element's height. This is really only needed when the parent element **has no
	 * defined height**.  If there is a defined height, this component is not worth
	 * much as the height can be computed in css as normal. This really just fixes
	 * the issue that the height would be set to `auto` (which computes to 0 most of
	 * the time) when it is not set on a parent element.
	 */
	var VerticalDivider = React.forwardRef(function VerticalDivider(_a, forwardedRef) {
	    var style = _a.style, _b = _a.maxHeight, maxHeight = _b === void 0 ? 1 : _b, props = __rest$K(_a, ["style", "maxHeight"]);
	    var _c = useVerticalDividerHeight(maxHeight, forwardedRef), ref = _c.ref, height = _c.height;
	    return (React__default['default'].createElement(Divider, __assign$fs({}, props, { style: __assign$fs(__assign$fs({}, style), { height: height }), ref: ref, vertical: true })));
	});

	var __assign$fr = (undefined && undefined.__assign) || function () {
	    __assign$fr = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fr.apply(this, arguments);
	};
	var __rest$J = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$l = bem("rmd-expansion-panel");
	/**
	 * The header for a panel that controls the expansion state. This is really just
	 * a simple button that displays the children before an expander icon.
	 *
	 * Reminder: Since this is a `<button>`, only `inline` elements should be
	 * rendered within (so use `<span>` instead of `<div>` for children).
	 */
	var ExpansionPanelHeader = React.forwardRef(function ExpansionPanelHeader(_a, ref) {
	    var propIcon = _a.icon, expanded = _a.expanded, children = _a.children, className = _a.className, _b = _a.disableTransition, disableTransition = _b === void 0 ? false : _b, props = __rest$J(_a, ["icon", "expanded", "children", "className", "disableTransition"]);
	    var icon = useIcon("expander", propIcon);
	    return (React__default['default'].createElement(UnstyledButton, __assign$fr({}, props, { ref: ref, "aria-expanded": expanded || undefined, className: cn(block$l("header"), className) }),
	        children,
	        icon && (React__default['default'].createElement("span", { className: block$l("icon") },
	            React__default['default'].createElement(IconRotator, { animate: !disableTransition, rotated: expanded }, icon)))));
	});

	var __assign$fq = (undefined && undefined.__assign) || function () {
	    __assign$fq = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fq.apply(this, arguments);
	};
	var __rest$I = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$k = bem("rmd-expansion-panel");
	/**
	 * The expansion panel renders a header element (that is just a button) and
	 * dynamically shows content once expanded.
	 */
	var ExpansionPanel = React.forwardRef(function ExpansionPanel(_a, ref) {
	    var className = _a.className, children = _a.children, headerStyle = _a.headerStyle, headerClassName = _a.headerClassName, contentStyle = _a.contentStyle, contentClassName = _a.contentClassName, headerRef = _a.headerRef, _b = _a.disablePadding, disablePadding = _b === void 0 ? false : _b, _c = _a.disableSecondaryColor, disableSecondaryColor = _c === void 0 ? false : _c, customHeader = _a.customHeader, header = _a.header, expanded = _a.expanded, onExpandClick = _a.onExpandClick, expanderIcon = _a.expanderIcon, _d = _a.marginTop, marginTop = _d === void 0 ? false : _d, _e = _a.fullWidth, fullWidth = _e === void 0 ? true : _e, _f = _a.persistent, persistent = _f === void 0 ? false : _f, _g = _a.disabled, disabled = _g === void 0 ? false : _g, _h = _a.disableTransition, disableTransition = _h === void 0 ? false : _h, props = __rest$I(_a, ["className", "children", "headerStyle", "headerClassName", "contentStyle", "contentClassName", "headerRef", "disablePadding", "disableSecondaryColor", "customHeader", "header", "expanded", "onExpandClick", "expanderIcon", "marginTop", "fullWidth", "persistent", "disabled", "disableTransition"]);
	    var id = props.id;
	    var contentId = id + "-content";
	    return (React__default['default'].createElement(Card, __assign$fq({}, props, { id: id + "-container", ref: ref, fullWidth: fullWidth, className: cn(block$k({ expanded: expanded, "margin-top": marginTop }), className) }),
	        customHeader || (React__default['default'].createElement(ExpansionPanelHeader, { "aria-disabled": disabled || undefined, id: id, ref: headerRef, style: headerStyle, className: headerClassName, icon: expanderIcon, expanded: expanded, onClick: onExpandClick, disableTransition: disableTransition }, header)),
	        React__default['default'].createElement(Collapse, { collapsed: !expanded, timeout: disableTransition ? 0 : undefined, temporary: !persistent },
	            React__default['default'].createElement(CardContent, { id: contentId, "aria-labelledby": id, role: "region", style: contentStyle, className: contentClassName, disableSecondaryColor: disableSecondaryColor, disablePadding: disablePadding, disableExtraPadding: true }, children))));
	});

	var __assign$fp = (undefined && undefined.__assign) || function () {
	    __assign$fp = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fp.apply(this, arguments);
	};
	var __rest$H = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This component is honestly not very helpful since it does not apply any
	 * styles. It is a simple wrapper for a `<div>` that updates the props to
	 * require the `children` and `onKeyDown` props.
	 */
	var ExpansionList = React.forwardRef(function ExpansionList(_a, ref) {
	    var children = _a.children, props = __rest$H(_a, ["children"]);
	    return (React__default['default'].createElement("div", __assign$fp({}, props, { ref: ref }), children));
	});

	/**
	 * @internal
	 */
	var attemptFocus = function (index, panels) {
	    var _a;
	    var panel = (_a = panels[index]) === null || _a === void 0 ? void 0 : _a.headerRef.current;
	    if (panel) {
	        panel.focus();
	    }
	};
	/**
	 * This hook is used to control the expansion of a list of panels along with
	 * providing some of the required props for each panel. This hook will provide
	 * an ordered list of:
	 *
	 * - the list of panel props that include the `id`, `key`, `expanded`, and
	 *   `onExpandChange`.
	 * - a keydown event handler to pass to a parent component (normally the
	 *   ExpansionList) to allow keyboard movement with the arrow keys, and home+end
	 *   keys. This should only be used when there are multiple panels.
	 * - the current list of panel ids that are expanded
	 * - the React setState dispatcher for controlling the expanded list of ids
	 *   manually if desired
	 * - a function to create a handler for toggling the expansion of a specific
	 *   panel
	 *
	 * This hook is usually used to control a list of expansion panels, but can also
	 * control a single panel if desired.
	 *
	 * Examples:
	 *
	 * Single panel:
	 *
	 * ```tsx
	 * const [panels] = usePanels({ count: 1, idPrefix: "my-panel" });
	 * // since the count is one, it'll just be a list of only one panel props
	 * const [panelProps] = panels;
	 *
	 * return (
	 *   <ExpansionPanel {...panelProps}>
	 *     Content within the panel...
	 *   </ExpansionPanel>
	 * );
	 * ```
	 *
	 * Multiple Panels:
	 *
	 * ```tsx
	 * const [panels, onKeyDown] = usePanels({ count: 3, idPrefix: "panel-list" });
	 *
	 * const [panel1Props, panel2Props, panel3Props] = panels;
	 *
	 * return (
	 *   <ExpansionList onKeyDown={onKeyDown}>
	 *     <ExpansionPanel {...panel1Props}>
	 *       Panel 1 Content...
	 *     </ExpansionPanel>
	 *     <ExpansionPanel {...panel2Props}>
	 *       Panel 2 Content...
	 *     </ExpansionPanel>
	 *     <ExpansionPanel {...panel3Props}>
	 *       Panel 3 Content...
	 *     </ExpansionPanel>
	 *   </ExpansionList>
	 * );
	 * ```
	 */
	function usePanels(_a) {
	    var idPrefix = _a.idPrefix, count = _a.count, _b = _a.multiple, multiple = _b === void 0 ? false : _b, _c = _a.preventAllClosed, preventAllClosed = _c === void 0 ? false : _c, defaultExpandedIndex = _a.defaultExpandedIndex;
	    var panels = React.useMemo(function () {
	        return Array.from({ length: count }, function (_, i) { return ({
	            id: idPrefix + "-" + (i + 1),
	            headerRef: React.createRef(),
	        }); });
	    }, [idPrefix, count]);
	    var _d = React.useState(function () {
	        if (typeof defaultExpandedIndex === "undefined") {
	            return preventAllClosed ? [panels[0].id] : [];
	        }
	        if (typeof defaultExpandedIndex === "number") {
	            return defaultExpandedIndex === -1
	                ? panels.map(function (_a) {
	                    var id = _a.id;
	                    return id;
	                })
	                : [panels[Math.min(defaultExpandedIndex, panels.length)].id];
	        }
	        return panels
	            .filter(function (_, i) { return defaultExpandedIndex.includes(i); })
	            .map(function (_a) {
	            var id = _a.id;
	            return id;
	        });
	    }), expandedIds = _d[0], setExpandedIds = _d[1];
	    var createExpandClick = function (panelId) { return function () {
	        setExpandedIds(function (prevIds) {
	            var i = prevIds.indexOf(panelId);
	            if (!multiple) {
	                if (prevIds[0] === panelId && prevIds.length === 1) {
	                    return preventAllClosed ? prevIds : [];
	                }
	                return [panelId];
	            }
	            var nextSelectedIds = prevIds.slice();
	            if (i === -1) {
	                nextSelectedIds.push(panelId);
	            }
	            else {
	                nextSelectedIds.splice(i, 1);
	            }
	            if (preventAllClosed && nextSelectedIds.length === 0) {
	                return [panelId];
	            }
	            return nextSelectedIds;
	        });
	    }; };
	    var previousExpanded = false;
	    var panelPropList = panels.map(function (_a, i) {
	        var id = _a.id, headerRef = _a.headerRef;
	        var expanded = expandedIds.includes(id);
	        var marginTop = i > 0 && (expanded || previousExpanded);
	        previousExpanded = expanded;
	        return {
	            id: id,
	            disabled: expanded && preventAllClosed && expandedIds.length === 1,
	            expanded: expanded,
	            headerRef: headerRef,
	            marginTop: marginTop,
	            onExpandClick: createExpandClick(id),
	        };
	    });
	    var onKeyDown = React.useCallback(function (event) {
	        if (event.shiftKey || event.ctrlKey || event.metaKey || event.altKey) {
	            return;
	        }
	        var key = event.key;
	        var increment = key === "ArrowDown";
	        var decrement = key === "ArrowUp";
	        var jumpToFirst = key === "Home";
	        var jumpToLast = key === "End";
	        if (!increment && !decrement && !jumpToFirst && !jumpToLast) {
	            return;
	        }
	        var currentIndex = panels.findIndex(function (_a) {
	            var headerRef = _a.headerRef;
	            return event.target === headerRef.current;
	        });
	        if (currentIndex === -1) {
	            return;
	        }
	        // don't want page scroll behavior
	        event.preventDefault();
	        if (jumpToFirst) {
	            attemptFocus(0, panels);
	            return;
	        }
	        if (jumpToLast) {
	            attemptFocus(panels.length - 1, panels);
	            return;
	        }
	        attemptFocus(loop({
	            value: currentIndex,
	            max: panels.length - 1,
	            increment: increment,
	        }), panels);
	    }, [panels]);
	    return [
	        panelPropList,
	        onKeyDown,
	        expandedIds,
	        setExpandedIds,
	        createExpandClick,
	    ];
	}

	var __assign$fo = (undefined && undefined.__assign) || function () {
	    __assign$fo = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fo.apply(this, arguments);
	};
	/**
	 * This component allows you to quickly configure different functionality within
	 * `react-md` in one place with reasonable defaults.
	 */
	function Configuration(_a) {
	    var onAppResize = _a.onAppResize, children = _a.children, icons = _a.icons, formTheme = _a.formTheme, _b = _a.defaultDir, defaultDir = _b === void 0 ? DEFAULT_DIR : _b, _c = _a.phoneMaxWidth, phoneMaxWidth = _c === void 0 ? DEFAULT_PHONE_MAX_WIDTH : _c, _d = _a.tabletMinWidth, tabletMinWidth = _d === void 0 ? DEFAULT_TABLET_MIN_WIDTH : _d, _e = _a.tabletMaxWidth, tabletMaxWidth = _e === void 0 ? DEFAULT_TABLET_MAX_WIDTH : _e, _f = _a.desktopMinWidth, desktopMinWidth = _f === void 0 ? DEFAULT_DESKTOP_MIN_WIDTH : _f, _g = _a.desktopLargeMinWidth, desktopLargeMinWidth = _g === void 0 ? DEFAULT_DESKTOP_LARGE_MIN_WIDTH : _g, _h = _a.defaultSize, defaultSize = _h === void 0 ? DEFAULT_APP_SIZE : _h, _j = _a.rippleTimeout, rippleTimeout = _j === void 0 ? DEFAULT_RIPPLE_TIMEOUT : _j, _k = _a.rippleClassNames, rippleClassNames = _k === void 0 ? DEFAULT_RIPPLE_CLASSNAMES : _k, _l = _a.disableRipple, disableRipple = _l === void 0 ? false : _l, _m = _a.disableProgrammaticRipple, disableProgrammaticRipple = _m === void 0 ? false : _m, disableTooltipHoverMode = _a.disableTooltipHoverMode, tooltipDefaultDelay = _a.tooltipDefaultDelay, tooltipDelayTimeout = _a.tooltipDelayTimeout, hoverMode = _a.hoverMode;
	    return (React__default['default'].createElement(Dir, { defaultDir: defaultDir },
	        React__default['default'].createElement(AppSizeListener, { defaultSize: defaultSize, onChange: onAppResize, phoneMaxWidth: phoneMaxWidth, tabletMinWidth: tabletMinWidth, tabletMaxWidth: tabletMaxWidth, desktopMinWidth: desktopMinWidth, desktopLargeMinWidth: desktopLargeMinWidth },
	            React__default['default'].createElement(NestedDialogContextProvider, null,
	                React__default['default'].createElement(UserInteractionModeListener, null,
	                    React__default['default'].createElement(StatesConfig, { disableRipple: disableRipple, disableProgrammaticRipple: disableProgrammaticRipple, rippleTimeout: rippleTimeout, rippleClassNames: rippleClassNames },
	                        React__default['default'].createElement(HoverModeProvider, __assign$fo({ disabled: disableTooltipHoverMode, defaultVisibleInTime: tooltipDefaultDelay, deactivateTime: tooltipDelayTimeout }, hoverMode),
	                            React__default['default'].createElement(IconProvider, __assign$fo({}, icons),
	                                React__default['default'].createElement(FormThemeProvider, __assign$fo({}, formTheme), children)))))))));
	}

	var DEFAULT_PHONE_LAYOUT = "temporary";
	var DEFAULT_TABLET_LAYOUT = "toggleable";
	var DEFAULT_LANDSCAPE_TABLET_LAYOUT = "toggleable";
	var DEFAULT_DESKTOP_LAYOUT = "full-height";
	var DEFAULT_LAYOUT_MAIN_CLASSNAMES = {
	    enter: "rmd-layout-transition--enter",
	    enterActive: "rmd-layout-main--nav-offset",
	    enterDone: "rmd-layout-main--nav-offset",
	    exit: "rmd-layout-transition--exit",
	};
	var DEFFAULT_LAYOUT_NAV_TOGGLE_CLASSNAMES = {
	    enter: "rmd-layout-transition--enter",
	    enterActive: "rmd-layout-nav-toggle--offset",
	    enterDone: "rmd-layout-nav-toggle--offset",
	    exit: "rmd-layout-transition--exit",
	};

	/**
	 * A hook that implements the base functionality for expanding different tree
	 * items.
	 *
	 * @param defaultExpandedIds - Either a list of tree item ids to be expanded by
	 * default or a function that will return the list of tree item ids to be
	 * expanded by default
	 * @returns An object containing props that can be passed to the `Tree`
	 * component to handle the expansion state within the tree.
	 */
	function useTreeItemExpansion(defaultExpandedIds) {
	    var _a = React.useState(defaultExpandedIds), expandedIds = _a[0], setExpandedIds = _a[1];
	    var onItemExpansion = React.useCallback(function (itemId, expanded) {
	        setExpandedIds(function (expandedIds) {
	            var nextExpandedIds = expandedIds;
	            var i = expandedIds.indexOf(itemId);
	            if (i === -1 && expanded) {
	                nextExpandedIds = expandedIds.slice();
	                nextExpandedIds.push(itemId);
	            }
	            else if (i !== -1 && !expanded) {
	                nextExpandedIds = expandedIds.slice();
	                nextExpandedIds.splice(i, 1);
	            }
	            return nextExpandedIds;
	        });
	    }, []);
	    var onMultiItemExpansion = React.useCallback(function (itemIds) {
	        setExpandedIds(itemIds);
	    }, []);
	    return {
	        expandedIds: expandedIds,
	        onItemExpansion: onItemExpansion,
	        onMultiItemExpansion: onMultiItemExpansion,
	    };
	}

	/**
	 * A hook that implements the base functionality for selecting different tree
	 * items.
	 *
	 * @param defaultSelectedIds - The default list of tree item ids that should be
	 * expanded by default
	 * @param multiSelect - Boolean if the tree can have multiple items selected or
	 * not.
	 * @returns an object containing props that can be passed to the `Tree`
	 * component to handle the selection state within the tree
	 */
	function useTreeItemSelection(defaultSelectedIds, multiSelect) {
	    if (multiSelect === void 0) { multiSelect = false; }
	    var _a = React.useState(defaultSelectedIds), selectedIds = _a[0], setSelectedIds = _a[1];
	    var onItemSelect = React.useCallback(function (itemId) {
	        setSelectedIds(function (selectedIds) {
	            if (!multiSelect) {
	                if (selectedIds[0] === itemId && selectedIds.length === 1) {
	                    return selectedIds;
	                }
	                return [itemId];
	            }
	            var i = selectedIds.indexOf(itemId);
	            var nextSelectedIds = selectedIds.slice();
	            if (i === -1) {
	                nextSelectedIds.push(itemId);
	            }
	            else {
	                nextSelectedIds.splice(i, 1);
	            }
	            return nextSelectedIds;
	        });
	    }, [multiSelect]);
	    var onMultiItemSelect = React.useCallback(function (itemIds) {
	        setSelectedIds(itemIds);
	    }, []);
	    return {
	        selectedIds: selectedIds,
	        multiSelect: multiSelect,
	        onItemSelect: onItemSelect,
	        onMultiItemSelect: onMultiItemSelect,
	    };
	}

	/**
	 * A "reasonable" default implementation for rendering a label for a tree item.
	 *
	 * @internal
	 */
	function defaultGetItemLabel(item, labelKey) {
	    var result = item[labelKey];
	    if (typeof result === "undefined") {
	        result = item.children;
	    }
	    if (typeof result === "undefined") {
	        result = null;
	    }
	    return result;
	}

	/**
	 * A "reasonable" default implementation for the getItemValue prop on a tree
	 * that will warn about items that are not keyboard searchable in non-production
	 * environments.
	 *
	 * @internal
	 */
	function defaultGetItemValue(item, valueKey) {
	    var result = item[valueKey];
	    return "" + result;
	}

	var __assign$fn = (undefined && undefined.__assign) || function () {
	    __assign$fn = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fn.apply(this, arguments);
	};
	var __rest$G = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * The `TreeGroup` component is used to render a tree item's nested items
	 * whenever the `expanded` prop is `true`. It uses the `Collapse` component
	 * behind the scenes to animate in-and-out of view and will fully unrender when
	 * the `expanded` prop is `false`.
	 */
	var TreeGroup = React.forwardRef(function TreeGroup(_a, ref) {
	    var style = _a.style, className = _a.className, collapsed = _a.collapsed, minHeight = _a.minHeight, minPaddingBottom = _a.minPaddingBottom, minPaddingTop = _a.minPaddingTop, timeout = _a.timeout, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, children = _a.children, temporary = _a.temporary, props = __rest$G(_a, ["style", "className", "collapsed", "minHeight", "minPaddingBottom", "minPaddingTop", "timeout", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "children", "temporary"]);
	    return (React__default['default'].createElement(Collapse, { style: style, className: cn("rmd-tree-group", className), collapsed: collapsed, minHeight: minHeight, minPaddingBottom: minPaddingBottom, minPaddingTop: minPaddingTop, timeout: timeout, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited, temporary: temporary },
	        React__default['default'].createElement(List, __assign$fn({}, props, { ref: ref, role: "group" }), children)));
	});

	var __assign$fm = (undefined && undefined.__assign) || function () {
	    __assign$fm = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fm.apply(this, arguments);
	};
	var __rest$F = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$j = bem("rmd-tree-item");
	/**
	 * The `TreeItemExpanderIcon` is a simple wrapper of the `IconRotator` prop to
	 * be used within a `TreeView`.
	 */
	function TreeItemExpanderIcon(_a) {
	    var className = _a.className, children = _a.children, _b = _a.rotated, rotated = _b === void 0 ? false : _b, props = __rest$F(_a, ["className", "children", "rotated"]);
	    var icon = useIcon("expander", children);
	    return (React__default['default'].createElement(IconRotator, __assign$fm({}, props, { rotated: rotated, className: cn(block$j("rotator-icon"), className) }), icon));
	}

	var __assign$fl = (undefined && undefined.__assign) || function () {
	    __assign$fl = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fl.apply(this, arguments);
	};
	var __rest$E = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$i = bem("rmd-tree-item");
	/**
	 * This component renders an item within a tree with optional child items. This
	 * should almost always be used from the `itemRenderer` prop from the `Tree`
	 * component as it provides a lot of the required a11y props for you.
	 */
	var TreeItem = React.forwardRef(function TreeItem(_a, ref) {
	    var _b;
	    var id = _a.id, propClassName = _a.className, liStyle = _a.liStyle, liClassName = _a.liClassName, liRef = _a.liRef, depth = _a.depth, listSize = _a.listSize, itemIndex = _a.itemIndex, renderChildItems = _a.renderChildItems, expanded = _a.expanded, selected = _a.selected, focused = _a.focused, propExpanderIcon = _a.expanderIcon, _c = _a.expanderLeft, expanderLeft = _c === void 0 ? false : _c, textClassName = _a.textClassName, secondaryTextClassName = _a.secondaryTextClassName, _d = _a.textChildren, textChildren = _d === void 0 ? true : _d, primaryText = _a.primaryText, secondaryText = _a.secondaryText, propLeftAddon = _a.leftAddon, _e = _a.leftAddonType, leftAddonType = _e === void 0 ? "icon" : _e, _f = _a.leftAddonPosition, leftAddonPosition = _f === void 0 ? "middle" : _f, propRightAddon = _a.rightAddon, _g = _a.rightAddonType, rightAddonType = _g === void 0 ? "icon" : _g, _h = _a.rightAddonPosition, rightAddonPosition = _h === void 0 ? "middle" : _h, forceAddonWrap = _a.forceAddonWrap, _j = _a.height, height = _j === void 0 ? "auto" : _j, _k = _a.threeLines, threeLines = _k === void 0 ? false : _k, children = _a.children, _l = _a.contentComponent, Content = _l === void 0 ? "span" : _l, propIsLink = _a.isLink, _m = _a.disabled, disabled = _m === void 0 ? false : _m, readOnly = _a.readOnly, onFocus = _a.onFocus, props = __rest$E(_a, ["id", "className", "liStyle", "liClassName", "liRef", "depth", "listSize", "itemIndex", "renderChildItems", "expanded", "selected", "focused", "expanderIcon", "expanderLeft", "textClassName", "secondaryTextClassName", "textChildren", "primaryText", "secondaryText", "leftAddon", "leftAddonType", "leftAddonPosition", "rightAddon", "rightAddonType", "rightAddonPosition", "forceAddonWrap", "height", "threeLines", "children", "contentComponent", "isLink", "disabled", "readOnly", "onFocus"]);
	    var expanderIcon = useIcon("expander", propExpanderIcon);
	    var isLink = typeof propIsLink === "boolean"
	        ? propIsLink
	        : typeof Content !== "string" || Content === "a";
	    var _o = useInteractionStates({
	        disabled: disabled,
	        className: propClassName,
	        handlers: isLink ? props : undefined,
	        disableSpacebarClick: isLink,
	    }), ripples = _o.ripples, className = _o.className, handlers = _o.handlers;
	    var group;
	    var leftAddon = propLeftAddon;
	    var rightAddon = propRightAddon;
	    if (renderChildItems) {
	        var icon = (React__default['default'].createElement(TreeItemExpanderIcon, { rotated: expanded }, expanderIcon));
	        if (expanderLeft) {
	            leftAddon = icon;
	        }
	        else {
	            rightAddon = icon;
	        }
	        group = React__default['default'].createElement(TreeGroup, { collapsed: !expanded }, renderChildItems());
	    }
	    var handleFocus = React.useCallback(function (event) {
	        if (onFocus) {
	            onFocus(event);
	        }
	        event.preventDefault();
	        var tree = event.currentTarget.closest('[role="tree"]');
	        if (tree) {
	            tree.focus();
	        }
	    }, [onFocus]);
	    var a11y = __assign$fl(__assign$fl({ "aria-expanded": renderChildItems ? expanded : undefined, "aria-level": depth + 1, "aria-setsize": listSize, "aria-posinset": itemIndex + 1, "aria-disabled": disabled ? "true" : undefined, id: id, role: "treeitem", tabIndex: -1 }, handlers), { onFocus: handleFocus });
	    var noA11y = { role: "none" };
	    return (React__default['default'].createElement("li", __assign$fl({}, (isLink ? noA11y : a11y), { ref: liRef, style: liStyle, className: cn(block$i(), liClassName) }),
	        React__default['default'].createElement(Content, __assign$fl({}, props, (isLink ? a11y : undefined), { ref: ref, className: cn(block$i("content", (_b = {
	                    link: isLink,
	                    clickable: !disabled && !readOnly
	                },
	                _b[height] = height !== "auto" && height !== "normal",
	                _b["three-lines"] = !!secondaryText && threeLines,
	                _b.selected = selected,
	                _b.focused = focused,
	                _b)), className) }),
	            React__default['default'].createElement(ListItemChildren, { textClassName: textClassName, secondaryTextClassName: secondaryTextClassName, textChildren: textChildren, primaryText: primaryText, secondaryText: secondaryText, leftAddon: leftAddon, leftAddonType: leftAddonType, leftAddonPosition: leftAddonPosition, rightAddon: rightAddon, rightAddonType: rightAddonType, rightAddonPosition: rightAddonPosition, forceAddonWrap: forceAddonWrap }, children),
	            ripples),
	        group));
	});

	var __assign$fk = (undefined && undefined.__assign) || function () {
	    __assign$fk = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fk.apply(this, arguments);
	};
	function isElementType(contentComponent) {
	    return typeof contentComponent !== "undefined";
	}
	/**
	 * A "reasonable" default implementation for rendering a tree item that extracts
	 * the most used ListItem props and passes them down to the `TreeItem`.
	 *
	 * This is actually exported from this package so it can be used along with a
	 * custom renderer for all items that have `isCustom` enabled.
	 *
	 * ```tsx
	 * const itemRenderer: TreeItemRenderer<MyTreeItem> = (
	 *   itemProps,
	 *   item,
	 *   treeProps
	 * ) => {
	 *   const { key } = itemProps;
	 *   const { isCustom } = item;
	 *   if (isCustom) {
	 *     return <MyFancyNonTreeItem item={item} key={key} />
	 *   }
	 *
	 *   return defaultTreeItemRenderer(itemProps, item, treeProps);
	 * }
	 * ```
	 *
	 * @param itemProps - The providied tree item props that should be passed down
	 * for keyboard functionality, accessibility, and a `key` for the item.
	 * @param item - The item itself. This is used to extract any of the common
	 * ListItemChildren props.
	 * @param treeProps - The props for the Tree this item is being rendered in.
	 * This is really used so the `expanderLeft`, `expanderIcon`, `labelKey`,
	 * `getItemLabel`, and `getItemProps` can be used to render the TreeItem
	 * itself.
	 * @returns a `TreeItem` or a custom `ReactElement`
	 */
	function defaultTreeItemRenderer(itemProps, item, treeProps) {
	    var treeItem = item;
	    var focused = itemProps.focused, selected = itemProps.selected, expanded = itemProps.expanded;
	    var expanderLeft = treeProps.expanderLeft, expanderIcon = treeProps.expanderIcon, labelKey = treeProps.labelKey, getItemLabel = treeProps.getItemLabel, getItemProps = treeProps.getItemProps, linkComponent = treeProps.linkComponent;
	    var leftAddon = treeItem.leftAddon, leftAddonType = treeItem.leftAddonType, leftAddonPosition = treeItem.leftAddonPosition, rightAddon = treeItem.rightAddon, rightAddonType = treeItem.rightAddonType, rightAddonPosition = treeItem.rightAddonPosition, as = treeItem.as, to = treeItem.to, href = treeItem.href;
	    var isLink;
	    var readOnly;
	    var disabled;
	    var className;
	    var liClassName;
	    if (typeof treeItem.isLink === "boolean") {
	        (isLink = treeItem.isLink);
	    }
	    if (typeof treeItem.readOnly === "boolean") {
	        (readOnly = treeItem.readOnly);
	    }
	    if (typeof treeItem.disabled === "boolean") {
	        (disabled = treeItem.disabled);
	    }
	    if (typeof treeItem.className === "string") {
	        (className = treeItem.className);
	    }
	    if (typeof treeItem.liClassName === "string") {
	        (liClassName = treeItem.liClassName);
	    }
	    var overrides = getItemProps(__assign$fk(__assign$fk({}, treeItem), { focused: focused,
	        selected: selected,
	        expanded: expanded }));
	    var children = (overrides && overrides.children) || undefined;
	    if (typeof children === "undefined") {
	        children = getItemLabel(treeItem, labelKey);
	    }
	    var contentComponent;
	    if (isElementType(treeItem.contentComponent)) {
	        (contentComponent = treeItem.contentComponent);
	    }
	    if (isLink !== false && (to || href || isLink)) {
	        contentComponent = contentComponent || linkComponent;
	    }
	    return (React__default['default'].createElement(TreeItem, __assign$fk({}, itemProps, { as: as, to: to, href: href, isLink: isLink, contentComponent: contentComponent, readOnly: readOnly, disabled: disabled, leftAddon: leftAddon, leftAddonType: leftAddonType, leftAddonPosition: leftAddonPosition, rightAddon: rightAddon, rightAddonType: rightAddonType, rightAddonPosition: rightAddonPosition, expanderLeft: expanderLeft, expanderIcon: expanderIcon, className: className, liClassName: liClassName }, overrides), children));
	}

	/**
	 * A small util for recursively generating a unique id for each tree item based
	 * on the current depth within the tree and the index within the current list.
	 *
	 * @param treeId - The base id of the tree element
	 * @param index - The current index of the item
	 * @param parentIndexes - A list of parent indexes that are joined together with
	 * `'-'` to generate the full id.
	 * @internal
	 */
	function getTreeItemId(treeId, index, parentIndexes) {
	    if (parentIndexes === void 0) { parentIndexes = []; }
	    if (!parentIndexes.length) {
	        return treeId + "-item-" + (index + 1);
	    }
	    return treeId + "-item-" + parentIndexes.join("-") + "-" + (index + 1);
	}

	var __spreadArray$4 = (undefined && undefined.__spreadArray) || function (to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	};
	function flatten(_a) {
	    var list = _a.list, item = _a.item, index = _a.index, baseId = _a.baseId, parentIndexes = _a.parentIndexes, valueKey = _a.valueKey, getItemValue = _a.getItemValue;
	    if (item.isCustom) {
	        return list;
	    }
	    var id = getTreeItemId(baseId, index, parentIndexes);
	    var value = getItemValue(item, valueKey);
	    var itemId = item.itemId, parentId = item.parentId, childItems = item.childItems;
	    list.push({
	        id: id,
	        itemId: itemId,
	        parentId: parentId,
	        isParent: !!childItems,
	        value: value,
	    });
	    if (!childItems) {
	        return list;
	    }
	    var nextIndexes = __spreadArray$4(__spreadArray$4([], parentIndexes), [index + 1]);
	    childItems.forEach(function (child, childIndex) {
	        flatten({
	            list: list,
	            item: child,
	            index: childIndex,
	            valueKey: valueKey,
	            getItemValue: getItemValue,
	            baseId: baseId,
	            parentIndexes: nextIndexes,
	        });
	    });
	    return list;
	}
	/**
	 * Creates a flattened and ordered list of all the tree items that are current visible
	 * in the DOM based on the expanded ids. This is only required for handling keyboard
	 * navigation with `aria-activedescendant` movement so the items can be "focused" with
	 * typeahead and keyboard movement since the keyboard movement API requires DOM refs
	 * to be passed to each element.
	 *
	 * This flattened list will remove the `childItems` (if it existed) on each item for
	 * simplicity and the child items aren't needed for this flattened list.
	 *
	 * @internal
	 */
	function useFlattenedTreeList(_a) {
	    var id = _a.id, items = _a.items, rootId = _a.rootId, expandedIds = _a.expandedIds, valueKey = _a.valueKey, getItemValue = _a.getItemValue;
	    var flattenedItems = React.useMemo(function () {
	        return items.reduce(function (list, item, index) {
	            return flatten({
	                list: list,
	                item: item,
	                index: index,
	                valueKey: valueKey,
	                getItemValue: getItemValue,
	                baseId: id,
	                parentIndexes: [],
	            });
	        }, []);
	    }, [getItemValue, id, items, valueKey]);
	    var _b = React.useMemo(function () {
	        var index = 0;
	        return flattenedItems.reduce(function (collection, item) {
	            var _a, _b;
	            var parentId = item.parentId, itemId = item.itemId;
	            var isVisible = parentId === rootId;
	            if (parentId !== null && expandedIds.includes(parentId)) {
	                // need to also make sure that the parent is visible
	                isVisible =
	                    ((_b = (_a = collection.itemRefs[parentId]) === null || _a === void 0 ? void 0 : _a.visibleIndex) !== null && _b !== void 0 ? _b : -1) !== -1;
	            }
	            collection.itemRefs[itemId] = {
	                id: item.id,
	                ref: { current: null },
	                visibleIndex: isVisible ? index : -1,
	            };
	            if (isVisible) {
	                index += 1;
	                collection.visibleItems.push(item);
	            }
	            return collection;
	        }, { visibleItems: [], itemRefs: {} });
	    }, [expandedIds, flattenedItems, rootId]), visibleItems = _b.visibleItems, itemRefs = _b.itemRefs;
	    return [visibleItems, itemRefs, flattenedItems];
	}

	var __assign$fj = (undefined && undefined.__assign) || function () {
	    __assign$fj = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fj.apply(this, arguments);
	};
	/**
	 * This util performantly builds a nested list of tree items from a giant flat
	 * list of items by linking items together with the provided `parentId`. This
	 * will also recursively build the tree and _hopefully_ all items will be added.
	 *
	 * If there are no children for a specific item
	 *
	 * TODO: Add a dev-only warning/error if the tree is built, but there are some
	 * items that never referenced another `itemId`
	 *
	 * @internal
	 */
	function buildTree(parentId, items, sort) {
	    var childItems = [];
	    // doing a "reverse" order filter/move so that the items array shrinks while
	    // looping. This makes it so that the entire items array doesn't need to
	    // continually be looped through as more items are added to the tree, only the
	    // remaining items will have to be looped
	    var i = items.length;
	    while (i > 0) {
	        i -= 1;
	        if (items[i] && items[i].parentId === parentId) {
	            var item = items.splice(i, 1)[0];
	            // shallow cloning so childItems doesn't get applied to the original data
	            // set
	            childItems.unshift(__assign$fj({}, item));
	        }
	    }
	    if (!childItems.length) {
	        return undefined;
	    }
	    childItems.forEach(function (childItem) {
	        childItem.childItems = buildTree(childItem.itemId, items, sort);
	    });
	    return sort ? sort(childItems) : childItems;
	}
	/**
	 * This is an internal hook that will create a renderable nested list view of
	 * the tree data.
	 *
	 * @internal
	 * @param tree - The full tree to convert to a nested list representation
	 * @param sort - An optional function that sorts the items at each level
	 * @param rootId - The starting `parentId` to use while building the tree. This
	 * defaults to `null` since this is most likely the general use case, but if
	 * there's a different unique identifier for the "root level" items, that can be
	 * used instead.
	 */
	function useNestedTreeList(tree, sort, rootId) {
	    if (rootId === void 0) { rootId = null; }
	    return React.useMemo(function () { return buildTree(rootId, Object.values(tree), sort) || []; }, [
	        rootId,
	        sort,
	        tree,
	    ]);
	}

	var __assign$fi = (undefined && undefined.__assign) || function () {
	    __assign$fi = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fi.apply(this, arguments);
	};
	var __spreadArray$3 = (undefined && undefined.__spreadArray) || function (to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	};
	/**
	 * This is a temporary workaround for allowing the navigation tree to scroll
	 * correctly with keyboard movement since it manually sets the
	 * `overflow: visible` which prevents scrolling. I'll need to think of a better
	 * way to find/get the scrollable element (if any). It might also just go into
	 * the `scrollIntoView` util.
	 *
	 * @remarks \@since 2.5.3
	 * @internal
	 */
	var getScrollContainer = function (target) {
	    if (target.classList.contains("rmd-layout-tree")) {
	        return target.parentElement;
	    }
	    return target;
	};
	/**
	 * This hook handles all the complex and "fun" stuff for selecting keyboard
	 * accessibility within a tree and enabling keyboard movement, selection, and
	 * expansion.
	 *
	 * @internal
	 */
	function useTreeMovement(_a) {
	    var id = _a.id, data = _a.data, rootId = _a.rootId, sort = _a.sort, onBlur = _a.onBlur, onFocus = _a.onFocus, onKeyDown = _a.onKeyDown, multiSelect = _a.multiSelect, selectedIds = _a.selectedIds, onItemSelect = _a.onItemSelect, onMultiItemSelect = _a.onMultiItemSelect, expandedIds = _a.expandedIds, onItemExpansion = _a.onItemExpansion, onMultiItemExpansion = _a.onMultiItemExpansion, valueKey = _a.valueKey, getItemValue = _a.getItemValue;
	    var items = useNestedTreeList(data, sort, rootId);
	    var _b = useFlattenedTreeList({
	        id: id,
	        items: items,
	        expandedIds: expandedIds,
	        rootId: rootId,
	        valueKey: valueKey,
	        getItemValue: getItemValue,
	    }), visibleItems = _b[0], itemIdRefs = _b[1], flattenedItems = _b[2];
	    var isKeyboard = useIsUserInteractionMode("keyboard");
	    var _c = useActiveDescendantMovement(__assign$fi(__assign$fi({}, VERTICAL_TREE), { items: visibleItems, baseId: id, getId: function (_baseId, index) {
	            return (visibleItems[index] || { id: "" }).id;
	        },
	        onSpace: function (focusedIndex) {
	            var item = visibleItems[focusedIndex];
	            if (!item) {
	                return;
	            }
	            var itemId = item.itemId;
	            onItemSelect(itemId);
	        },
	        onChange: function (data) {
	            var index = data.index, target = data.target, query = data.query;
	            var itemId = visibleItems[index].itemId;
	            // Note: have to do a custom `scrollIntoView` here instead of relying on
	            // the `useActiveDescendantMovement`'s `scrollIntoView` because of how the
	            // tree renders with the ref behavior.
	            var item = itemIdRefs[itemId].ref.current;
	            var container = getScrollContainer(target);
	            if (item &&
	                container &&
	                container.scrollHeight > container.offsetHeight) {
	                scrollIntoView(container, item);
	            }
	            if (!multiSelect) {
	                return;
	            }
	            var isToStart = query.endsWith(exports.JumpMovementKey.ControlShiftHome);
	            var isToEnd = query.endsWith(exports.JumpMovementKey.ControlShiftEnd);
	            if (!isToStart && !isToEnd) {
	                return;
	            }
	            var start = isToStart ? 0 : focusedIndex;
	            var end = isToStart ? focusedIndex + 1 : undefined;
	            var jumpSelectedIds = visibleItems
	                .slice(start, end)
	                .map(function (_a) {
	                var itemId = _a.itemId;
	                return itemId;
	            });
	            var uniqueSelectedIds = Array.from(new Set(__spreadArray$3(__spreadArray$3([], selectedIds), jumpSelectedIds)));
	            if (selectedIds.length !== uniqueSelectedIds.length) {
	                onMultiItemSelect(uniqueSelectedIds);
	            }
	        },
	        onKeyDown: function (event) {
	            var _a, _b, _c, _d;
	            if (onKeyDown) {
	                onKeyDown(event);
	            }
	            var item = visibleItems[focusedIndex];
	            if (!item) {
	                return;
	            }
	            var itemId = item.itemId, parentId = item.parentId, isParent = item.isParent;
	            switch (event.key) {
	                case "Enter": {
	                    if (isParent) {
	                        onItemExpansion(itemId, !expandedIds.includes(itemId));
	                        return;
	                    }
	                    var node = itemIdRefs[itemId].ref.current;
	                    var anchor = node &&
	                        node.getAttribute("role") === "none" &&
	                        node.querySelector("a[href]");
	                    if (!anchor) {
	                        onItemSelect(itemId);
	                        return;
	                    }
	                    // if a user is navigating through the app with a keyboard and presses
	                    // cmd+shift+enter (Mac) or ctrl+shift+enter (Windows), the link will
	                    // be forcefully opened in a new tab irregardless of the target
	                    // attribute on the anchor tag. Since a tree doesn't actually focus
	                    // the link in this case, need to "polyfill" it with this workaround.
	                    // the `meta` key is for Mac and `ctrlKey` for Windows
	                    var forceNewTab = event.shiftKey && (event.metaKey || event.ctrlKey);
	                    var prevTarget = anchor.target;
	                    if (forceNewTab) {
	                        anchor.target = "_blank";
	                    }
	                    anchor.click();
	                    if (forceNewTab) {
	                        anchor.target = prevTarget;
	                    }
	                    break;
	                }
	                case "ArrowRight":
	                    if (!isParent) {
	                        return;
	                    }
	                    if (!expandedIds.includes(itemId)) {
	                        onItemExpansion(itemId, true);
	                    }
	                    else {
	                        var nextIndex = focusedIndex + 1;
	                        var nextItem = (_b = itemIdRefs[(_a = visibleItems[nextIndex]) === null || _a === void 0 ? void 0 : _a.itemId]) === null || _b === void 0 ? void 0 : _b.ref.current;
	                        setFocusedIndex(nextIndex);
	                        scrollIntoView(event.currentTarget, nextItem);
	                    }
	                    break;
	                case "ArrowLeft":
	                    if (isParent && expandedIds.includes(itemId)) {
	                        onItemExpansion(itemId, false);
	                    }
	                    else if (parentId !== rootId) {
	                        var parentIndex = visibleItems.findIndex(function (item) { return item.itemId === parentId; });
	                        var parentItem = (_d = itemIdRefs[(_c = visibleItems[parentIndex]) === null || _c === void 0 ? void 0 : _c.itemId]) === null || _d === void 0 ? void 0 : _d.ref.current;
	                        setFocusedIndex(parentIndex);
	                        scrollIntoView(event.currentTarget, parentItem);
	                    }
	                    break;
	                case "a": {
	                    if (!multiSelect || !event.ctrlKey) {
	                        return;
	                    }
	                    event.preventDefault();
	                    var allItemIds = visibleItems.map(function (_a) {
	                        var itemId = _a.itemId;
	                        return itemId;
	                    });
	                    if (selectedIds.length === allItemIds.length) {
	                        onMultiItemSelect([]);
	                    }
	                    else {
	                        onMultiItemSelect(allItemIds);
	                    }
	                    break;
	                }
	                case "*": {
	                    var item_1 = visibleItems[focusedIndex];
	                    if (!item_1) {
	                        return;
	                    }
	                    var expectedExpandedIds = visibleItems
	                        .filter(function (_a) {
	                        var isParent = _a.isParent, parentId = _a.parentId;
	                        return isParent && parentId === item_1.parentId;
	                    })
	                        .map(function (_a) {
	                        var itemId = _a.itemId;
	                        return itemId;
	                    });
	                    var nextIds = Array.from(new Set(__spreadArray$3(__spreadArray$3([], expandedIds), expectedExpandedIds)));
	                    if (nextIds.length !== expandedIds.length) {
	                        onMultiItemExpansion(nextIds);
	                        // since new items will be rendered, need to also update the focused
	                        // index so the currently active item is still the "focused" item
	                        //
	                        // TODO: Look into a much better way to handle this sort of stuff..
	                        // This still doesn't correctly scroll the active element into view.
	                        // I should probably move all the scroll behavior into a useEffect
	                        // for whenever the focusedIndex changes.
	                        var visibleCount = 0;
	                        var lookup = {};
	                        for (var i = 0; i < flattenedItems.length; i += 1) {
	                            var item_2 = flattenedItems[i];
	                            var isVisible = item_2.parentId === rootId;
	                            if (item_2.parentId !== null && nextIds.includes(item_2.parentId)) {
	                                isVisible = !!lookup[item_2.parentId];
	                            }
	                            lookup[item_2.itemId] = isVisible;
	                            if (itemId === item_2.itemId) {
	                                setFocusedIndex(visibleCount);
	                                return;
	                            }
	                            if (isVisible) {
	                                visibleCount += 1;
	                            }
	                        }
	                    }
	                }
	                // no default
	            }
	        } })), activeId = _c.activeId, handleKeyDown = _c.onKeyDown, focusedIndex = _c.focusedIndex, setFocusedIndex = _c.setFocusedIndex;
	    var lastFocus = React.useRef(0);
	    var handleBlur = React.useCallback(function (event) {
	        if (onBlur) {
	            onBlur(event);
	        }
	        if (document.activeElement &&
	            event.currentTarget.contains(document.activeElement)) {
	            return;
	        }
	        lastFocus.current = focusedIndex;
	        setFocusedIndex(-1);
	    }, [focusedIndex, onBlur, setFocusedIndex]);
	    var handleFocus = React.useCallback(function (event) {
	        var _a, _b;
	        if (onFocus) {
	            onFocus(event);
	        }
	        if (focusedIndex !== -1) {
	            // this happens when a tree item is clicked with the mouse or touch
	            return;
	        }
	        var index = -1;
	        // try to "focus" the first selected itemId if there is a selection.
	        if (selectedIds.length) {
	            index = visibleItems.findIndex(function (item) {
	                return selectedIds.includes(item.itemId);
	            });
	        }
	        // fallback to the first visible tree item if there were no selected ids
	        if (index === -1) {
	            index = Math.max(0, Math.min(lastFocus.current, visibleItems.length));
	        }
	        var currentItem = (_b = itemIdRefs[(_a = visibleItems[index]) === null || _a === void 0 ? void 0 : _a.itemId]) === null || _b === void 0 ? void 0 : _b.ref.current;
	        if (currentItem && isKeyboard) {
	            scrollIntoView(getScrollContainer(event.currentTarget), currentItem);
	        }
	        setFocusedIndex(index);
	    }, [
	        focusedIndex,
	        isKeyboard,
	        itemIdRefs,
	        onFocus,
	        selectedIds,
	        setFocusedIndex,
	        visibleItems,
	    ]);
	    var setActiveId = React.useCallback(function (itemId) {
	        var index = visibleItems.findIndex(function (item) { return item.itemId === itemId; });
	        if (index !== -1) {
	            setFocusedIndex(index);
	        }
	    }, [setFocusedIndex, visibleItems]);
	    return {
	        items: items,
	        activeId: activeId,
	        setActiveId: setActiveId,
	        itemIdRefs: itemIdRefs,
	        handleBlur: handleBlur,
	        handleFocus: handleFocus,
	        handleKeyDown: handleKeyDown,
	    };
	}

	var __assign$fh = (undefined && undefined.__assign) || function () {
	    __assign$fh = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fh.apply(this, arguments);
	};
	var __rest$D = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var __spreadArray$2 = (undefined && undefined.__spreadArray) || function (to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	};
	var block$h = bem("rmd-tree");
	var defaultGetItemProps = function () { return undefined; };
	/**
	 * Creates an accessible tree widget that allows you to show hierarchical data
	 * in a list presentation view. This component requires the selection and
	 * expansion state to be provided/controlled but you can use the
	 * `useTreeItemSelection` and `useTreeItemExpansion` hooks for a great starting
	 * point for this functionality.
	 */
	var Tree = React.forwardRef(function Tree(// eslint-disable-line @typescript-eslint/no-explicit-any
	_a, ref) {
	    var id = _a.id, className = _a.className, _b = _a.itemRenderer, itemRenderer = _b === void 0 ? defaultTreeItemRenderer : _b, data = _a.data, _c = _a.multiSelect, multiSelect = _c === void 0 ? false : _c, selectedIds = _a.selectedIds, onItemSelect = _a.onItemSelect, onMultiItemSelect = _a.onMultiItemSelect, expandedIds = _a.expandedIds, onItemExpansion = _a.onItemExpansion, onMultiItemExpansion = _a.onMultiItemExpansion, _d = _a.expanderLeft, expanderLeft = _d === void 0 ? false : _d, propExpanderIcon = _a.expanderIcon, _e = _a.labelKey, labelKey = _e === void 0 ? "name" : _e, _f = _a.valueKey, valueKey = _f === void 0 ? "name" : _f, _g = _a.getItemLabel, getItemLabel = _g === void 0 ? defaultGetItemLabel : _g, _h = _a.getItemValue, getItemValue = _h === void 0 ? defaultGetItemValue : _h, _j = _a.getItemProps, getItemProps = _j === void 0 ? defaultGetItemProps : _j, linkComponent = _a.linkComponent, sort = _a.sort, _k = _a.rootId, rootId = _k === void 0 ? null : _k, onBlur = _a.onBlur, onFocus = _a.onFocus, onKeyDown = _a.onKeyDown, props = __rest$D(_a, // eslint-disable-line @typescript-eslint/no-explicit-any
	    ["id", "className", "itemRenderer", "data", "multiSelect", "selectedIds", "onItemSelect", "onMultiItemSelect", "expandedIds", "onItemExpansion", "onMultiItemExpansion", "expanderLeft", "expanderIcon", "labelKey", "valueKey", "getItemLabel", "getItemValue", "getItemProps", "linkComponent", "sort", "rootId", "onBlur", "onFocus", "onKeyDown"]);
	    var expanderIcon = useIcon("dropdown", propExpanderIcon);
	    var _l = useTreeMovement({
	        id: id,
	        data: data,
	        sort: sort,
	        rootId: rootId,
	        onBlur: onBlur,
	        onFocus: onFocus,
	        onKeyDown: onKeyDown,
	        multiSelect: multiSelect,
	        selectedIds: selectedIds,
	        onItemSelect: onItemSelect,
	        onMultiItemSelect: onMultiItemSelect,
	        expandedIds: expandedIds,
	        onItemExpansion: onItemExpansion,
	        onMultiItemExpansion: onMultiItemExpansion,
	        valueKey: valueKey,
	        getItemValue: getItemValue,
	    }), items = _l.items, activeId = _l.activeId, setActiveId = _l.setActiveId, itemIdRefs = _l.itemIdRefs, handleBlur = _l.handleBlur, handleFocus = _l.handleFocus, handleKeyDown = _l.handleKeyDown;
	    var renderChildItems = function (items, depth, parentIndexes) {
	        var listSize = items.length;
	        return items.map(function (item, index) {
	            var _a;
	            var itemId = item.itemId, childItems = item.childItems, isCustom = item.isCustom;
	            var selected = selectedIds.includes(itemId);
	            var expanded = expandedIds.includes(itemId);
	            var id = "";
	            var ref;
	            var visibleIndex = -1;
	            if (!isCustom) {
	                (_a = itemIdRefs[itemId], id = _a.id, ref = _a.ref, visibleIndex = _a.visibleIndex);
	            }
	            var focused = id === activeId;
	            return itemRenderer({
	                key: itemId,
	                id: id,
	                liRef: ref,
	                depth: depth,
	                listSize: listSize,
	                itemIndex: index,
	                selected: selected,
	                expanded: expanded,
	                focused: focused,
	                onClick: function () {
	                    setActiveId(itemId);
	                    onItemSelect(itemId);
	                    if (childItems) {
	                        onItemExpansion(itemId, !expanded);
	                    }
	                },
	                renderChildItems: childItems
	                    ? function () {
	                        return renderChildItems(childItems, depth + 1, __spreadArray$2(__spreadArray$2([], parentIndexes), [
	                            index + 1,
	                        ]));
	                    }
	                    : undefined,
	            }, __assign$fh(__assign$fh({}, item), { visibleIndex: visibleIndex }), __assign$fh({ id: id,
	                expanderLeft: expanderLeft, expanderIcon: expanderIcon, multiSelect: multiSelect,
	                labelKey: labelKey,
	                valueKey: valueKey,
	                getItemLabel: getItemLabel,
	                getItemValue: getItemValue,
	                getItemProps: getItemProps,
	                linkComponent: linkComponent,
	                rootId: rootId }, props));
	        });
	    };
	    return (React__default['default'].createElement(List, __assign$fh({}, props, { ref: ref, id: id, "aria-activedescendant": activeId, "aria-multiselectable": multiSelect || undefined, role: "tree", tabIndex: 0, className: cn(block$h(), className), onBlur: handleBlur, onFocus: handleFocus, onKeyDown: handleKeyDown }), renderChildItems(items, 0, [])));
	});

	var __spreadArray$1 = (undefined && undefined.__spreadArray) || function (to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	};
	/**
	 * Gets all the child items for a specific parent item id. If the `recursive`
	 * argument is enabled, all children of the items will also be returned instead
	 * of only the top level items.
	 *
	 * @param data - Either the flattened tree data or a list of all the tree data
	 * to iterate over
	 * @param parentId - The parent id to get children of
	 * @param recursive - Boolean if the children's children should also be returned
	 * @returns a list of all the items for a specific parent item id. Note: if the
	 * recursive param is enabled, the list will be ordered so that the children of
	 * a item will appear before the next item at the same level. So you either need
	 * to sort by `parentId` or something else if you want a specific order.
	 */
	function getChildItems(data, parentId, recursive) {
	    if (recursive === void 0) { recursive = false; }
	    var items = Array.isArray(data) ? data : Object.values(data);
	    return items.reduce(function (list, item) {
	        if (parentId !== item.parentId) {
	            return list;
	        }
	        return __spreadArray$1(__spreadArray$1(__spreadArray$1([], list), [
	            item
	        ]), (recursive ? getChildItems(items, item.itemId, recursive) : []));
	    }, []);
	}

	/**
	 * This will get all the items from the provided itemId up to the root of the
	 * tree that can be used for drag and drop behavior or building a breadcrumb
	 * list.
	 *
	 * @param data - The flattened tree data to navigate.
	 * @param itemId - The item id to start the search at.
	 * @returns an ordered list of the current item followed by all the direct
	 * parents of that item.
	 */
	function getItemsFrom(data, itemId) {
	    var items = [];
	    var currentId = itemId;
	    while (currentId) {
	        var item = data[currentId];
	        currentId = (item && item.parentId) || null;
	        if (item) {
	            items.push(item);
	        }
	    }
	    return items;
	}

	var __assign$fg = (undefined && undefined.__assign) || function () {
	    __assign$fg = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fg.apply(this, arguments);
	};
	var __rest$C = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This is the default mini navigation item renderer provided by the layout
	 * package that has some reasonable defaults for creating a navigation tree.
	 *
	 * This renderer behaves a bit differently than the
	 * `defaultNavigationItemRenderer` since it will only render the tree item if:
	 *
	 * - the item is at the root -- `parentId === null`
	 * - the item is a divider at the root
	 * - the item is not a subheader -- there isn't enough space
	 * - the item does not have any child items -- not enough space to show nesting
	 * - the item has a `leftAddon` -- the mini variant only renders icons
	 *
	 * This rendered `TreeItem` will only display the `leftAddon` as the children
	 * but will also render the tree item's label in the `SrOnly` component so an
	 * accessible label still exists for the icon `TreeItem`.
	 *
	 * @see {@link TreeItemRenderer}
	 * @see {@link defaultNavigationItemRenderer}
	 */
	var defaultMiniNavigationItemRenderer = function (itemProps, item, _a) {
	    var _b, _c, _d, _e;
	    var linkComponent = _a.linkComponent, getItemProps = _a.getItemProps, getItemLabel = _a.getItemLabel, labelKey = _a.labelKey;
	    var key = itemProps.key, renderChildItems = itemProps.renderChildItems, props = __rest$C(itemProps, ["key", "renderChildItems"]);
	    var divider = item.divider, subheader = item.subheader, leftAddon = item.leftAddon, parentId = item.parentId, style = item.style, className = item.className, liStyle = item.liStyle, liClassName = item.liClassName, as = item.as, to = item.to, href = item.href, isLink = item.isLink, propContentComponent = item.contentComponent;
	    if (divider && parentId === null) {
	        return React__default['default'].createElement(Divider, { key: key });
	    }
	    if (subheader || parentId !== null || !leftAddon || renderChildItems) {
	        return null;
	    }
	    var contentComponent = propContentComponent;
	    if (!contentComponent && isLink !== false && (to || href || isLink)) {
	        contentComponent = linkComponent;
	    }
	    var focused = itemProps.focused, selected = itemProps.selected, expanded = itemProps.expanded;
	    var overrides = getItemProps(__assign$fg(__assign$fg({}, item), { focused: focused,
	        selected: selected,
	        expanded: expanded }));
	    var children = (overrides && overrides.children) || undefined;
	    if (typeof children === "undefined") {
	        children = getItemLabel(item, labelKey);
	    }
	    return (React__default['default'].createElement(TreeItem, __assign$fg({ key: key }, props, { as: as, to: to, href: href, isLink: isLink, contentComponent: contentComponent, style: (_b = overrides === null || overrides === void 0 ? void 0 : overrides.style) !== null && _b !== void 0 ? _b : style, className: cn("rmd-layout-nav__mini-item", (_c = overrides === null || overrides === void 0 ? void 0 : overrides.className) !== null && _c !== void 0 ? _c : className), liStyle: (_d = overrides === null || overrides === void 0 ? void 0 : overrides.liStyle) !== null && _d !== void 0 ? _d : liStyle, liClassName: (_e = overrides === null || overrides === void 0 ? void 0 : overrides.liClassName) !== null && _e !== void 0 ? _e : liClassName, textChildren: false }),
	        leftAddon,
	        React__default['default'].createElement(SrOnly, null, children)));
	};

	/**
	 * This is the default navigation item renderer provided by the layout package
	 * that has some reasonable defaults for creating a navigation tree. This is
	 * just an extension of the base `defaultTreeItemRenderer` from the
	 * `@react-md/tree` package that adds in some support for also rendering
	 * dividers and subheader elements.
	 */
	var defaultNavigationItemRenderer = function (itemProps, item, treeProps) {
	    var key = itemProps.key;
	    var divider = item.divider, subheader = item.subheader;
	    if (divider) {
	        return React__default['default'].createElement(Divider, { key: key });
	    }
	    if (subheader) {
	        return (React__default['default'].createElement(ListSubheader, { key: key, role: "none" }, item.children));
	    }
	    return defaultTreeItemRenderer(itemProps, item, treeProps);
	};

	var __assign$ff = (undefined && undefined.__assign) || function () {
	    __assign$ff = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ff.apply(this, arguments);
	};
	var __rest$B = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$g = bem("rmd-link");
	/**
	 * The `Link` component is used to render links within your app with a basic
	 * styles applied and some additional "security" built-in if using the
	 * `rel="_blank"`. This can be used with a browser routing library like
	 * `react-router` or `reach-router` by providing the `Link` as the
	 * `linkComponent` prop.
	 */
	var Link = React.forwardRef(function Link(_a, ref) {
	    var propClassName = _a.className, _b = _a.component, Component = _b === void 0 ? "a" : _b, propHref = _a.href, children = _a.children, propRel = _a.rel, _c = _a.flexCentered, flexCentered = _c === void 0 ? false : _c, _d = _a.preventMaliciousTarget, preventMaliciousTarget = _d === void 0 ? true : _d, props = __rest$B(_a, ["className", "component", "href", "children", "rel", "flexCentered", "preventMaliciousTarget"]);
	    var target = props.target;
	    var href = propHref === "" ? undefined : propHref;
	    var className = cn(block$g({ "flex-centered": flexCentered }), propClassName);
	    var rel = propRel;
	    if (preventMaliciousTarget &&
	        typeof rel !== "string" &&
	        target === "_blank") {
	        rel = "noopener noreferrer";
	    }
	    return (React__default['default'].createElement(Component, __assign$ff({}, props, { className: className, ref: ref, rel: rel, href: href }), children));
	});

	var __assign$fe = (undefined && undefined.__assign) || function () {
	    __assign$fe = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fe.apply(this, arguments);
	};
	var __rest$A = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$f = bem("rmd-link-skip");
	/**
	 * This component allows you to create a screen-reader only/keyboard focusable
	 * only link that allows a user to skip to the main content of the page. This is
	 * extremely useful when you have a lot of navigation items that must be tabbed
	 * through before the main content can be focused and this component should
	 * normally be the first focusable element on your page.
	 */
	var SkipToMainContent = React.forwardRef(function SkipToMainContent(_a, ref) {
	    var _b = _a.id, id = _b === void 0 ? "skip-to-main-content" : _b, _c = _a.children, children = _c === void 0 ? "Skip to main content" : _c, _d = _a.unstyled, unstyled = _d === void 0 ? false : _d, mainId = _a.mainId, className = _a.className, onClick = _a.onClick, props = __rest$A(_a, ["id", "children", "unstyled", "mainId", "className", "onClick"]);
	    var handleClick = React.useCallback(function (event) {
	        if (onClick) {
	            onClick(event);
	        }
	        event.preventDefault();
	        var main = document.getElementById(mainId);
	        if (!main) {
	            return;
	        }
	        main.focus();
	    }, [mainId, onClick]);
	    return (React__default['default'].createElement(Link, __assign$fe({}, props, { id: id, ref: ref, href: "#" + mainId, onClick: handleClick, className: cn(block$f({ styled: !unstyled }), className) }), children));
	});

	/**
	 * Gets the current layout based on the app size and layout configuration.
	 *
	 * @returns The current layout type
	 */
	function getLayoutType(_a) {
	    var appSize = _a.appSize, _b = _a.phoneLayout, phoneLayout = _b === void 0 ? DEFAULT_PHONE_LAYOUT : _b, _c = _a.tabletLayout, tabletLayout = _c === void 0 ? DEFAULT_TABLET_LAYOUT : _c, _d = _a.landscapeTabletLayout, landscapeTabletLayout = _d === void 0 ? DEFAULT_LANDSCAPE_TABLET_LAYOUT : _d, _e = _a.desktopLayout, desktopLayout = _e === void 0 ? DEFAULT_DESKTOP_LAYOUT : _e, _f = _a.largeDesktopLayout, largeDesktopLayout = _f === void 0 ? desktopLayout : _f;
	    var isPhone = appSize.isPhone, isTablet = appSize.isTablet, isLargeDesktop = appSize.isLargeDesktop, isLandscape = appSize.isLandscape;
	    if (isPhone) {
	        return phoneLayout;
	    }
	    if (isTablet) {
	        return isLandscape ? landscapeTabletLayout : tabletLayout;
	    }
	    if (isLargeDesktop) {
	        return largeDesktopLayout;
	    }
	    return desktopLayout;
	}
	/**
	 * Checks if the current `layout` is one of the temporary types
	 *
	 * @param layout - The layout to check against
	 * @returns true if the current layout has a temporary navigation.
	 */
	function isTemporaryLayout(layout) {
	    return layout === "temporary" || layout === "temporary-mini";
	}
	/**
	 * Checks if the current `layout` is one of the toggleable types
	 *
	 * @param layout - The layout to check against
	 * @returns true if the current layout is toggleable.
	 */
	function isToggleableLayout(layout) {
	    return layout === "toggleable" || layout === "toggleable-mini";
	}
	/**
	 * Checks if the current `layout` is `"clipped"`, `"floating"`, or
	 * `"full-height"`.
	 *
	 * @param layout - The layout to check against
	 * @returns true if the current layout is persistent.
	 */
	function isPersistentLayout(layout) {
	    return (layout === "clipped" || layout === "floating" || layout === "full-height");
	}
	/**
	 * Checks if the current `layout` is the `"full-height"` variant.
	 *
	 * @param layout - The layout to check against
	 * @returns true if the current layout is the full height variant.
	 */
	function isFullHeightLayout(layout) {
	    return layout === "full-height";
	}
	/**
	 * Checks if the current `layout` is either `"temporary-mini"` or
	 * `"toggleable-mini"`.
	 *
	 * @param layout - The layout to check against
	 * @returns true if the current layout is the mini variant.
	 * @remarks \@since 2.7.0
	 */
	function isMiniLayout(layout) {
	    return layout === "temporary-mini" || layout === "toggleable-mini";
	}

	(undefined && undefined.__spreadArray) || function (to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	};
	/**
	 * @internal
	 */
	var notInitialized = function (name) { return function () {
	}; };
	var context$5 = React.createContext({
	    baseId: "layout",
	    layout: "temporary",
	    visible: false,
	    showNav: notInitialized(),
	    hideNav: notInitialized(),
	    fixedAppBar: true,
	});
	/**
	 * Gets the current layout state and configuration.
	 */
	function useLayoutConfig() {
	    return React.useContext(context$5);
	}
	var Provider$1 = context$5.Provider;
	/**
	 * @remarks \@since 2.6.0
	 * @internal
	 */
	function isToggleableVisible(behavior, layout) {
	    return typeof behavior === "string"
	        ? behavior === layout
	        : behavior && isToggleableLayout(layout);
	}
	/**
	 * Determines the current layout based on the `LayoutConfiguration` and hooks
	 * into the `AppSizeListener` to update on resize. This also initializes the
	 * `LayLayoutContext` so that a custom layout implementation can be used along
	 * with the `useLayoutConfig()` hook and the multiple `Layout` components.
	 */
	function LayoutProvider(_a) {
	    var baseId = _a.baseId, _b = _a.phoneLayout, phoneLayout = _b === void 0 ? DEFAULT_PHONE_LAYOUT : _b, _c = _a.tabletLayout, tabletLayout = _c === void 0 ? DEFAULT_TABLET_LAYOUT : _c, _d = _a.landscapeTabletLayout, landscapeTabletLayout = _d === void 0 ? DEFAULT_LANDSCAPE_TABLET_LAYOUT : _d, _e = _a.desktopLayout, desktopLayout = _e === void 0 ? DEFAULT_DESKTOP_LAYOUT : _e, largeDesktopLayout = _a.largeDesktopLayout, _f = _a.defaultToggleableVisible, defaultToggleableVisible = _f === void 0 ? false : _f, _g = _a.fixedAppBar, fixedAppBar = _g === void 0 ? true : _g, children = _a.children;
	    var appSize = useAppSize();
	    var layout = getLayoutType({
	        appSize: appSize,
	        phoneLayout: phoneLayout,
	        tabletLayout: tabletLayout,
	        landscapeTabletLayout: landscapeTabletLayout,
	        desktopLayout: desktopLayout,
	        largeDesktopLayout: largeDesktopLayout,
	    });
	    var isPersistent = isPersistentLayout(layout);
	    var isDesktop = appSize.isDesktop;
	    var _h = React.useState((isPersistent && isDesktop) ||
	        isToggleableVisible(defaultToggleableVisible, layout)), visible = _h[0], setVisible = _h[1];
	    var prevLayout = React.useRef(layout);
	    if (prevLayout.current !== layout) {
	        prevLayout.current = layout;
	        var nextVisible = isPersistent || isToggleableVisible(defaultToggleableVisible, layout);
	        if (visible !== nextVisible) {
	            setVisible(nextVisible);
	        }
	    }
	    var showNav = React.useCallback(function () {
	        setVisible(true);
	    }, []);
	    var hideNav = React.useCallback(function () {
	        if (!isPersistentLayout(layout)) {
	            setVisible(false);
	        }
	    }, [layout]);
	    var value = React.useMemo(function () { return ({
	        baseId: baseId,
	        layout: layout,
	        visible: visible,
	        showNav: showNav,
	        hideNav: hideNav,
	        fixedAppBar: fixedAppBar,
	    }); }, [baseId, layout, visible, showNav, hideNav, fixedAppBar]);
	    return React__default['default'].createElement(Provider$1, { value: value }, children);
	}

	var __assign$fd = (undefined && undefined.__assign) || function () {
	    __assign$fd = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fd.apply(this, arguments);
	};
	var __rest$z = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var styles$5 = bem("rmd-layout-title");
	/**
	 * An extremely simple wrapper for the `AppBarTitle` that will automatically
	 * apply an `id` and apply the correct margin for full-height layouts.
	 */
	var LayoutAppBarTitle = React.forwardRef(function LayoutAppBarTitle(_a, ref) {
	    var propId = _a.id, className = _a.className, children = _a.children, props = __rest$z(_a, ["id", "className", "children"]);
	    var _b = useLayoutConfig(), baseId = _b.baseId, layout = _b.layout;
	    var id = propId !== null && propId !== void 0 ? propId : baseId + "-title";
	    return (React__default['default'].createElement(AppBarTitle, __assign$fd({}, props, { id: id, ref: ref, className: cn(styles$5({ offset: isFullHeightLayout(layout) }), className) }), children));
	});

	var DEFAULT_SHEET_TIMEOUT = {
	    enter: 200,
	    exit: 150,
	};
	var DEFAULT_SHEET_CLASSNAMES = {
	    appear: "rmd-sheet--offscreen",
	    appearActive: "rmd-sheet--enter rmd-sheet--visible",
	    enter: "rmd-sheet--offscreen",
	    enterActive: "rmd-sheet--enter rmd-sheet--visible",
	    exit: "rmd-sheet--exit",
	    exitActive: "rmd-sheet--offscreen",
	    exitDone: "rmd-sheet--offscreen rmd-sheet--hidden",
	};

	var __assign$fc = (undefined && undefined.__assign) || function () {
	    __assign$fc = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fc.apply(this, arguments);
	};
	var __rest$y = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$e = bem("rmd-sheet");
	/**
	 * The Sheet component is an extension of the `Dialog` except that it is fixed
	 * to the edges of the viewport instead of centered or full page. This component
	 * is great for rendering a navigation tree or menus on mobile devices.
	 */
	var Sheet = React.forwardRef(function Sheet(_a, ref) {
	    var _b;
	    var className = _a.className, children = _a.children, visible = _a.visible, _c = _a.position, position = _c === void 0 ? "left" : _c, _d = _a.horizontalSize, horizontalSize = _d === void 0 ? "media" : _d, _e = _a.verticalSize, verticalSize = _e === void 0 ? "recommended" : _e, _f = _a.overlay, propOverlay = _f === void 0 ? true : _f, overlayClassName = _a.overlayClassName, _g = _a.role, role = _g === void 0 ? "dialog" : _g, _h = _a.component, component = _h === void 0 ? "div" : _h, _j = _a.tabIndex, tabIndex = _j === void 0 ? -1 : _j, _k = _a.appear, appear = _k === void 0 ? false : _k, _l = _a.enter, enter = _l === void 0 ? true : _l, _m = _a.exit, exit = _m === void 0 ? true : _m, onExited = _a.onExited, propHidden = _a.hidden, _o = _a.timeout, timeout = _o === void 0 ? DEFAULT_SHEET_TIMEOUT : _o, _p = _a.classNames, classNames = _p === void 0 ? DEFAULT_SHEET_CLASSNAMES : _p, _q = _a.disableTransition, disableTransition = _q === void 0 ? false : _q, _r = _a.mountOnEnter, mountOnEnter = _r === void 0 ? true : _r, _s = _a.unmountOnExit, unmountOnExit = _s === void 0 ? true : _s, _t = _a.portal, portal = _t === void 0 ? true : _t, _u = _a.overlayHidden, overlayHidden = _u === void 0 ? false : _u, _v = _a.defaultFocus, defaultFocus = _v === void 0 ? "first" : _v, _w = _a.disableScrollLock, disableScrollLock = _w === void 0 ? false : _w, _x = _a.disableEscapeClose, disableEscapeClose = _x === void 0 ? false : _x, _y = _a.disableFocusContainer, disableFocusContainer = _y === void 0 ? false : _y, _z = _a.disableNestedDialogFixes, disableNestedDialogFixes = _z === void 0 ? false : _z, props = __rest$y(_a, ["className", "children", "visible", "position", "horizontalSize", "verticalSize", "overlay", "overlayClassName", "role", "component", "tabIndex", "appear", "enter", "exit", "onExited", "hidden", "timeout", "classNames", "disableTransition", "mountOnEnter", "unmountOnExit", "portal", "overlayHidden", "defaultFocus", "disableScrollLock", "disableEscapeClose", "disableFocusContainer", "disableNestedDialogFixes"]);
	    var horizontal = position === "left" || position === "right";
	    var overlay = role !== "none" && propOverlay;
	    // if the sheet mounts while not visible and the conditional mounting isn't
	    // enabled, need to default to the offscreen state which is normally handled
	    // by the CSSTransition's exit state.
	    var offscreen = React.useRef(!visible && !unmountOnExit && !mountOnEnter);
	    if (offscreen.current && visible) {
	        offscreen.current = false;
	    }
	    // when sheets are not unmounted on exit, need to set it to hidden so that
	    // tabbing no longer focuses any of the elements inside
	    var _0 = React.useState(!visible && !mountOnEnter), hidden = _0[0], setHidden = _0[1];
	    if (hidden && visible) {
	        setHidden(false);
	    }
	    var handleExited = React.useCallback(function (node) {
	        if (onExited) {
	            onExited(node);
	        }
	        setHidden(true);
	    }, [onExited]);
	    return (React__default['default'].createElement(Dialog, __assign$fc({}, props, { ref: ref, type: "custom", role: role, visible: visible, className: cn(block$e((_b = {
	                horizontal: horizontal,
	                vertical: !horizontal,
	                raised: overlay,
	                offscreen: offscreen.current
	            },
	            _b[position] = true,
	            _b[horizontalSize + "-width"] = horizontal,
	            _b["viewport-height"] = !horizontal && verticalSize === "none",
	            _b["touchable-height"] = !horizontal && verticalSize === "touch",
	            _b["recommended-height"] = !horizontal && verticalSize === "recommended",
	            _b)), className), hidden: propHidden !== null && propHidden !== void 0 ? propHidden : hidden, overlay: overlay, overlayClassName: cn("rmd-sheet-overlay", overlayClassName), component: component, tabIndex: tabIndex, appear: appear, enter: enter, exit: exit, timeout: timeout, classNames: classNames, disableTransition: disableTransition, mountOnEnter: mountOnEnter, unmountOnExit: unmountOnExit, onExited: handleExited, portal: portal, overlayHidden: overlayHidden, defaultFocus: defaultFocus, disableScrollLock: disableScrollLock, disableEscapeClose: disableEscapeClose, disableFocusContainer: disableFocusContainer, disableNestedDialogFixes: disableNestedDialogFixes }), children));
	});

	var __assign$fb = (undefined && undefined.__assign) || function () {
	    __assign$fb = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fb.apply(this, arguments);
	};
	var __rest$x = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This is the default implementation for the navigation toggle button within
	 * the `Layout` component and should normally be the first child for the
	 * `LayoutAppBar`. In addition, this component will automatically update itself
	 * to provide an accessible `aria-label` for screen readers and change to a
	 * toggle button for toggleable layouts.
	 */
	var LayoutNavToggle = React.forwardRef(function LayoutNavToggle(_a, forwardedRef) {
	    var propAriaLabel = _a["aria-label"], propAriaPressed = _a["aria-pressed"], propChildren = _a.children, propClassName = _a.className, _b = _a.buttonType, buttonType = _b === void 0 ? "icon" : _b, onClick = _a.onClick, propOffset = _a.offset, rendered = _a.rendered, propTabIndex = _a.tabIndex, _c = _a.timeout, timeout = _c === void 0 ? DEFAULT_SHEET_TIMEOUT : _c, _d = _a.classNames, classNames = _d === void 0 ? DEFFAULT_LAYOUT_NAV_TOGGLE_CLASSNAMES : _d, props = __rest$x(_a, ["aria-label", "aria-pressed", "children", "className", "buttonType", "onClick", "offset", "rendered", "tabIndex", "timeout", "classNames"]);
	    var icon = useIcon("menu");
	    var _e = useLayoutConfig(), baseId = _e.baseId, layout = _e.layout, showNav = _e.showNav, hideNav = _e.hideNav, visible = _e.visible;
	    var isToggleable = isToggleableLayout(layout);
	    var isTemporary = isTemporaryLayout(layout);
	    var isRendered = rendered;
	    if (typeof isRendered === "undefined") {
	        isRendered = isTemporary || isToggleable;
	    }
	    var offset = propOffset;
	    if (typeof offset === "undefined") {
	        offset = isToggleable && visible;
	    }
	    var _f = useCSSTransition({
	        ref: forwardedRef,
	        transitionIn: offset,
	        temporary: false,
	        className: propClassName,
	        timeout: timeout,
	        classNames: classNames,
	    }), _g = _f[1], ref = _g.ref, className = _g.className;
	    if (!isRendered) {
	        return null;
	    }
	    var children = propChildren;
	    if (buttonType === "icon" && typeof children === "undefined") {
	        children = icon;
	    }
	    var tabIndex = propTabIndex;
	    if (typeof tabIndex === "undefined" && visible && isToggleable) {
	        // set to -1 so it isn't tab focusable but is still programmatically
	        // focusable for temporary navigation drawers to re-focus once closed
	        tabIndex = -1;
	    }
	    var ariaPressed = propAriaPressed;
	    if (typeof ariaPressed === "undefined" && isToggleable) {
	        ariaPressed = visible;
	    }
	    var ariaLabel = propAriaLabel;
	    if (typeof ariaLabel === "undefined" &&
	        typeof props["aria-labelledby"] === "undefined") {
	        ariaLabel = isToggleable ? "Navigation" : "Show Navigation";
	    }
	    return (React__default['default'].createElement(AppBarNav, __assign$fb({ id: baseId + "-nav-toggle" }, props, { "aria-label": ariaLabel, "aria-pressed": ariaPressed, ref: ref, onClick: function (event) {
	            if (onClick) {
	                onClick(event);
	            }
	            if (!visible) {
	                showNav();
	            }
	            else {
	                hideNav();
	            }
	        }, buttonType: buttonType, tabIndex: tabIndex, className: cn("rmd-layout-nav-toggle", className) }), children));
	});

	var __assign$fa = (undefined && undefined.__assign) || function () {
	    __assign$fa = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$fa.apply(this, arguments);
	};
	var __rest$w = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This is the default implementation for an `AppBar` within the `Layout` that
	 * will conditionally render the default `LayoutNavToggle` button and
	 * `AppBarTitle` depending on specific props that were provided.
	 */
	var LayoutAppBar = React.forwardRef(function LayoutAppBar(_a, ref) {
	    var children = _a.children, _b = _a.fixed, fixed = _b === void 0 ? true : _b, propNavToggle = _a.navToggle, navToggleProps = _a.navToggleProps, customTitle = _a.customTitle, titleChildren = _a.title, titleProps = _a.titleProps, props = __rest$w(_a, ["children", "fixed", "navToggle", "navToggleProps", "customTitle", "title", "titleProps"]);
	    var _c = useLayoutConfig(), baseId = _c.baseId, layout = _c.layout;
	    var nav = propNavToggle;
	    if (typeof nav === "undefined") {
	        // set the key to the current layout since we want the button to re-mount
	        // on layout changes so the transition does not occur
	        nav = React__default['default'].createElement(LayoutNavToggle, __assign$fa({ key: layout }, navToggleProps));
	    }
	    var title = customTitle;
	    if (typeof title === "undefined") {
	        title = (React__default['default'].createElement(LayoutAppBarTitle, __assign$fa({}, titleProps), titleChildren));
	    }
	    return (React__default['default'].createElement(AppBar, __assign$fa({ id: baseId + "-header" }, props, { ref: ref, fixed: fixed }),
	        nav,
	        title,
	        children));
	});

	var __assign$f9 = (undefined && undefined.__assign) || function () {
	    __assign$f9 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$f9.apply(this, arguments);
	};
	var __rest$v = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var styles$4 = bem("rmd-layout-main");
	/**
	 * This is the `<main>` element for your app that has some built in styles to be
	 * able to update based on the current layout types.
	 */
	var LayoutMain = React.forwardRef(function LayoutMain(_a, forwardedRef) {
	    var propClassName = _a.className, propTabIndex = _a.tabIndex, _b = _a.component, Component = _b === void 0 ? "main" : _b, propNavOffset = _a.navOffset, _c = _a.headerOffset, headerOffset = _c === void 0 ? false : _c, _d = _a.timeout, propTimeout = _d === void 0 ? DEFAULT_SHEET_TIMEOUT : _d, _e = _a.classNames, classNames = _e === void 0 ? DEFAULT_LAYOUT_MAIN_CLASSNAMES : _e, _f = _a.mini, mini = _f === void 0 ? false : _f, _g = _a.miniHidden, miniHidden = _g === void 0 ? false : _g, props = __rest$v(_a, ["className", "tabIndex", "component", "navOffset", "headerOffset", "timeout", "classNames", "mini", "miniHidden"]);
	    // this makes it so that the SkipToMainContent button can still
	    // focus the `<main>` element, but the `<main>` will no longer be
	    // focused if the user clicks inside. This is super nice since one
	    // of my bigger patterns is to click somewhere then press tab to
	    // focus a specific element. Without this fix, the first element in
	    // the `<main>` tag would be focused instead of the closest focusable
	    // element to the click area.
	    var tabIndex = propTabIndex;
	    if (useIsUserInteractionMode("keyboard") &&
	        typeof propTabIndex === "undefined") {
	        tabIndex = -1;
	    }
	    var _h = useLayoutConfig(), layout = _h.layout, visible = _h.visible, fixedAppBar = _h.fixedAppBar;
	    var navOffset = propNavOffset;
	    if (typeof navOffset === "undefined") {
	        navOffset = visible && !isTemporaryLayout(layout);
	    }
	    var timeout = propTimeout;
	    var prevLayout = React.useRef(layout);
	    if (prevLayout.current !== layout) {
	        // this is kind of weird and hacky, but this will allow for the required
	        // classnames to be applied to the main element based on the current
	        // layout type without needing a unique `key` for the main content. this
	        // is super nice since we really don't want to remount the full app each
	        // time the layout changes.
	        timeout = 0;
	    }
	    var _j = useCSSTransition({
	        ref: forwardedRef,
	        transitionIn: !!navOffset,
	        temporary: false,
	        className: propClassName,
	        timeout: timeout,
	        classNames: classNames,
	        onEntered: function () {
	            prevLayout.current = layout;
	        },
	        onExited: function () {
	            prevLayout.current = layout;
	        },
	    }), _k = _j[1], ref = _k.ref, className = _k.className;
	    var isMini = mini && (fixedAppBar || miniHidden);
	    var isMiniOffset = mini &&
	        navOffset &&
	        !fixedAppBar &&
	        visible &&
	        isToggleableLayout(layout);
	    return (React__default['default'].createElement(Component, __assign$f9({}, props, { ref: ref, tabIndex: tabIndex, className: cn(styles$4({
	            mini: isMini && (isTemporaryLayout(layout) || !visible),
	            "nav-offset": isMini,
	            "mini-offset": isMiniOffset,
	            "header-offset": headerOffset,
	        }), className) })));
	});

	var __assign$f8 = (undefined && undefined.__assign) || function () {
	    __assign$f8 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$f8.apply(this, arguments);
	};
	var __rest$u = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * The `LayoutCloseNavigationButton` is used to close the navigation panel for
	 * toggleable layouts.
	 */
	var LayoutCloseNavigationButton = React.forwardRef(function LayoutCloseNavigationButton(_a, ref) {
	    var propId = _a.id, ariaLabelledBy = _a["aria-labelledby"], _b = _a["aria-label"], ariaLabel = _b === void 0 ? ariaLabelledBy ? undefined : "Hide Navigation" : _b, onClick = _a.onClick, _c = _a.first, first = _c === void 0 ? true : _c, _d = _a.last, last = _d === void 0 ? true : _d, _e = _a.buttonType, buttonType = _e === void 0 ? "icon" : _e, propChildren = _a.children, rendered = _a.rendered, props = __rest$u(_a, ["id", "aria-labelledby", "aria-label", "onClick", "first", "last", "buttonType", "children", "rendered"]);
	    var children = useIcon("back", propChildren);
	    var _f = useLayoutConfig(), baseId = _f.baseId, layout = _f.layout, hideNav = _f.hideNav;
	    var handleClick = React.useCallback(function (event) {
	        if (onClick) {
	            onClick(event);
	        }
	        hideNav();
	    }, [onClick, hideNav]);
	    var id = propId !== null && propId !== void 0 ? propId : baseId + "-nav-x";
	    var isRendered = rendered !== null && rendered !== void 0 ? rendered : isToggleableLayout(layout);
	    if (!isRendered) {
	        return null;
	    }
	    return (React__default['default'].createElement(AppBarAction, __assign$f8({}, props, { id: id, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, ref: ref, first: first, last: last, buttonType: buttonType, onClick: handleClick }), children));
	});

	var __assign$f7 = (undefined && undefined.__assign) || function () {
	    __assign$f7 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$f7.apply(this, arguments);
	};
	var __rest$t = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var styles$3 = bem("rmd-layout-nav-header");
	/**
	 * The default implementation for the `AppBar` within the `LayoutNavigation`
	 * that allows for rendering a title along with the `LayoutCloseNavigationButton`.
	 */
	var LayoutNavigationHeader = React.forwardRef(function LayoutNavigationHeader(_a, ref) {
	    var _b = _a.theme, theme = _b === void 0 ? "clear" : _b, children = _a.children, className = _a.className, closeNav = _a.closeNav, closeNavProps = _a.closeNavProps, propTitle = _a.title, titleProps = _a.titleProps, _c = _a.disableBorderBottom, disableBorderBottom = _c === void 0 ? false : _c, props = __rest$t(_a, ["theme", "children", "className", "closeNav", "closeNavProps", "title", "titleProps", "disableBorderBottom"]);
	    var layout = useLayoutConfig().layout;
	    if (layout === "clipped" || layout === "floating") {
	        return null;
	    }
	    var title = null;
	    if (propTitle) {
	        title = React__default['default'].createElement(AppBarTitle, __assign$f7({}, titleProps), propTitle);
	    }
	    var action = closeNav;
	    if (typeof action === "undefined") {
	        action = React__default['default'].createElement(LayoutCloseNavigationButton, __assign$f7({}, closeNavProps));
	    }
	    return (React__default['default'].createElement(AppBar, __assign$f7({}, props, { ref: ref, theme: theme, className: cn(styles$3({ bordered: !disableBorderBottom }), className) }),
	        title,
	        children,
	        action));
	});

	var __assign$f6 = (undefined && undefined.__assign) || function () {
	    __assign$f6 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$f6.apply(this, arguments);
	};
	var __rest$s = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var styles$2 = bem("rmd-layout-nav");
	/**
	 * Renders the navigation tree for the Layout component that adds some
	 * reasonable defaults to work with navigation items.
	 */
	var LayoutTree = React.forwardRef(function LayoutTree(_a, ref) {
	    var propId = _a.id, ariaLabelledBy = _a["aria-labelledby"], _b = _a["aria-label"], ariaLabel = _b === void 0 ? ariaLabelledBy ? undefined : "Navigation" : _b, className = _a.className, _c = _a.mini, mini = _c === void 0 ? false : _c, _d = _a.sticky, sticky = _d === void 0 ? false : _d, navStyle = _a.navStyle, navClassName = _a.navClassName, navItems = _a.navItems, _e = _a.labelKey, labelKey = _e === void 0 ? "children" : _e, _f = _a.valueKey, valueKey = _f === void 0 ? "children" : _f, _g = _a.itemRenderer, itemRenderer = _g === void 0 ? defaultNavigationItemRenderer : _g, _h = _a.miniItemRenderer, miniItemRenderer = _h === void 0 ? defaultMiniNavigationItemRenderer : _h, selectedIds = _a.selectedIds, _j = _a.disableTemporaryAutoclose, disableTemporaryAutoclose = _j === void 0 ? false : _j, props = __rest$s(_a, ["id", "aria-labelledby", "aria-label", "className", "mini", "sticky", "navStyle", "navClassName", "navItems", "labelKey", "valueKey", "itemRenderer", "miniItemRenderer", "selectedIds", "disableTemporaryAutoclose"]);
	    var _k = useLayoutConfig(), baseId = _k.baseId, layout = _k.layout, hideNav = _k.hideNav, visible = _k.visible;
	    var selectedId = selectedIds[0];
	    var lastSelectedId = React.useRef(selectedId);
	    var isTemporary = isTemporaryLayout(layout);
	    var id = propId !== null && propId !== void 0 ? propId : baseId + "-navigation-tree";
	    React.useEffect(function () {
	        if (disableTemporaryAutoclose ||
	            !isTemporary ||
	            !visible ||
	            lastSelectedId.current === selectedId) {
	            // need to update the lastSelectedId since the selectedId might've changed
	            // by a route change OUTSIDE of the navigation drawer. if it isn't
	            // updated, it'll automatically close the next time it is opened.
	            lastSelectedId.current = selectedId;
	            return;
	        }
	        lastSelectedId.current = selectedId;
	        hideNav();
	    }, [disableTemporaryAutoclose, isTemporary, visible, hideNav, selectedId]);
	    return (React__default['default'].createElement("nav", { id: id + "-nav", style: navStyle, className: cn(styles$2({ sticky: sticky, grow: !sticky }), navClassName) },
	        React__default['default'].createElement(Tree, __assign$f6({}, props, { id: id, ref: ref, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledBy, data: navItems, labelKey: labelKey, valueKey: valueKey, selectedIds: selectedIds, itemRenderer: mini ? miniItemRenderer : itemRenderer, className: cn("rmd-layout-tree", className) }))));
	});

	var __assign$f5 = (undefined && undefined.__assign) || function () {
	    __assign$f5 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$f5.apply(this, arguments);
	};
	var __rest$r = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var styles$1 = bem("rmd-layout-navigation");
	/**
	 * The container for the main navigation within the `Layout` that renders
	 * differently depending on the current layout type.
	 */
	var LayoutNavigation = React.forwardRef(function LayoutNavigation(_a, ref) {
	    var propId = _a.id, _b = _a["aria-label"], ariaLabel = _b === void 0 ? "Navigation" : _b, ariaLabelledby = _a["aria-labelledby"], className = _a.className, children = _a.children, _c = _a.mini, mini = _c === void 0 ? false : _c, propHeader = _a.header, headerProps = _a.headerProps, headerTitle = _a.headerTitle, headerTitleProps = _a.headerTitleProps, closeNav = _a.closeNav, closeNavProps = _a.closeNavProps, treeProps = _a.treeProps, _d = _a.sticky, sticky = _d === void 0 ? false : _d, _e = _a.miniNavItemRenderer, miniNavItemRenderer = _e === void 0 ? defaultMiniNavigationItemRenderer : _e, props = __rest$r(_a, ["id", "aria-label", "aria-labelledby", "className", "children", "mini", "header", "headerProps", "headerTitle", "headerTitleProps", "closeNav", "closeNavProps", "treeProps", "sticky", "miniNavItemRenderer"]);
	    var _f = useLayoutConfig(), baseId = _f.baseId, layout = _f.layout, isNonMiniVisible = _f.visible, hideNav = _f.hideNav;
	    var visible = mini || isNonMiniVisible;
	    var id = propId || baseId + "-" + (mini ? "mini-" : "") + "nav-container";
	    var isTemporary = !mini && isTemporaryLayout(layout);
	    var isPersistent = mini || isPersistentLayout(layout);
	    var isToggleable = !mini && isToggleableLayout(layout);
	    var floating = layout === "floating";
	    var header = propHeader;
	    if (!mini && typeof header === "undefined") {
	        header = (React__default['default'].createElement(LayoutNavigationHeader, __assign$f5({ closeNav: closeNav, closeNavProps: closeNavProps, title: headerTitle, titleProps: headerTitleProps }, headerProps)));
	    }
	    return (React__default['default'].createElement(Sheet, __assign$f5({}, props, { key: layout, id: id, ref: ref, "aria-label": ariaLabel, "aria-labelledby": ariaLabelledby, role: !isPersistent ? "dialog" : "none", visible: visible, onRequestClose: hideNav, 
	        // do not want to portal for the other types so that logical tab order
	        // is preserved
	        portal: isTemporary, overlay: isTemporary, disableScrollLock: !isTemporary, disableTabFocusWrap: isToggleable, disableNestedDialogFixes: mini, className: cn(styles$1({
	            mini: mini,
	            sticky: sticky,
	            floating: floating,
	            "header-offset": layout === "clipped" || floating,
	        }), className) }),
	        header,
	        treeProps && (React__default['default'].createElement(LayoutTree, __assign$f5({ miniItemRenderer: miniNavItemRenderer, sticky: mini && sticky }, treeProps, { mini: mini }))),
	        children));
	});

	var __assign$f4 = (undefined && undefined.__assign) || function () {
	    __assign$f4 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$f4.apply(this, arguments);
	};
	var __rest$q = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var styles = bem("rmd-layout-mini-wrapper");
	/**
	 * This is probably an internal only component.
	 *
	 * @remarks \@since 2.8.3
	 */
	function MiniLayoutWrapper(_a) {
	    var mini = _a.mini, miniHidden = _a.miniHidden, miniNav = _a.miniNav, miniNavItems = _a.miniNavItems, treeProps = _a.treeProps, header = _a.header, headerProps = _a.headerProps, headerTitle = _a.headerTitle, headerTitleProps = _a.headerTitleProps, closeNav = _a.closeNav, closeNavProps = _a.closeNavProps, children = _a.children, containerProps = _a.containerProps, props = __rest$q(_a, ["mini", "miniHidden", "miniNav", "miniNavItems", "treeProps", "header", "headerProps", "headerTitle", "headerTitleProps", "closeNav", "closeNavProps", "children", "containerProps"]);
	    var fixedAppBar = useLayoutConfig().fixedAppBar;
	    if (!mini || !treeProps || typeof miniNav !== "undefined") {
	        return (React__default['default'].createElement(React__default['default'].Fragment, null,
	            miniNav,
	            children));
	    }
	    var miniTreeProps = treeProps;
	    if (miniNavItems) {
	        miniTreeProps = __assign$f4(__assign$f4({}, miniTreeProps), { navItems: miniNavItems });
	    }
	    var miniNavigation = (React__default['default'].createElement(LayoutNavigation, __assign$f4({ header: header, headerProps: headerProps, headerTitle: headerTitle, headerTitleProps: headerTitleProps, closeNav: closeNav, closeNavProps: closeNavProps, treeProps: miniTreeProps }, props, { mini: true, sticky: !fixedAppBar, hidden: miniHidden })));
	    if (fixedAppBar) {
	        return (React__default['default'].createElement(React__default['default'].Fragment, null,
	            miniNavigation,
	            children));
	    }
	    return (React__default['default'].createElement("div", __assign$f4({}, containerProps, { className: cn(!miniHidden && styles(), containerProps === null || containerProps === void 0 ? void 0 : containerProps.className) }),
	        miniNavigation,
	        children));
	}

	var __assign$f3 = (undefined && undefined.__assign) || function () {
	    __assign$f3 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$f3.apply(this, arguments);
	};
	/**
	 * The only purpose of this component is to render the children and different
	 * parts of the `Layout` depending on the current layout that is active. Since
	 * the `Layout` component defines the provider itself, this has to be a child
	 * component to get the resolved `layout` type.
	 *
	 * @remarks \@since 2.7.0
	 * @internal
	 */
	function LayoutChildren(_a) {
	    var _b = _a.id, id = _b === void 0 ? "layout" : _b, propAppBar = _a.appBar, appBarProps = _a.appBarProps, customTitle = _a.customTitle, title = _a.title, titleProps = _a.titleProps, navToggle = _a.navToggle, navToggleProps = _a.navToggleProps, _c = _a.navAfterAppBar, navAfterAppBar = _c === void 0 ? false : _c, propNav = _a.nav, miniNav = _a.miniNav, miniNavItems = _a.miniNavItems, miniWrapperProps = _a.miniWrapperProps, navHeader = _a.navHeader, navHeaderProps = _a.navHeaderProps, navHeaderTitle = _a.navHeaderTitle, navHeaderTitleProps = _a.navHeaderTitleProps, closeNav = _a.closeNav, closeNavProps = _a.closeNavProps, treeProps = _a.treeProps, navProps = _a.navProps, skipProps = _a.skipProps, mainProps = _a.mainProps, children = _a.children;
	    var mainId = (mainProps === null || mainProps === void 0 ? void 0 : mainProps.id) || id + "-main";
	    var _d = useLayoutConfig(), layout = _d.layout, visible = _d.visible, fixedAppBar = _d.fixedAppBar;
	    var mini = isMiniLayout(layout);
	    var _e = React.useState(visible), miniHidden = _e[0], setMiniHidden = _e[1];
	    // when the layout changes, the hidden state for the mini drawer must also be
	    // updated
	    React.useEffect(function () {
	        setMiniHidden(visible);
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, [layout]);
	    var appBar = propAppBar;
	    if (typeof appBar === "undefined") {
	        appBar = (React__default['default'].createElement(LayoutAppBar, __assign$f3({}, appBarProps, { customTitle: customTitle, title: title, titleProps: titleProps, navToggle: navToggle, navToggleProps: navToggleProps })));
	    }
	    var nav = propNav;
	    if (typeof nav === "undefined") {
	        nav = (React__default['default'].createElement(LayoutNavigation, __assign$f3({ header: navHeader, headerProps: navHeaderProps, headerTitle: navHeaderTitle, headerTitleProps: navHeaderTitleProps, closeNav: closeNav, closeNavProps: closeNavProps, treeProps: treeProps }, navProps, { onEntered: function (node, isAppearing) {
	                var _a;
	                (_a = navProps === null || navProps === void 0 ? void 0 : navProps.onEntered) === null || _a === void 0 ? void 0 : _a.call(navProps, node, isAppearing);
	                setMiniHidden(true);
	            }, onExit: function (node) {
	                var _a;
	                (_a = navProps === null || navProps === void 0 ? void 0 : navProps.onExit) === null || _a === void 0 ? void 0 : _a.call(navProps, node);
	                setMiniHidden(false);
	            } })));
	    }
	    return (React__default['default'].createElement(React__default['default'].Fragment, null,
	        React__default['default'].createElement(SkipToMainContent, __assign$f3({}, skipProps, { mainId: mainId })),
	        navAfterAppBar && appBar,
	        nav,
	        !navAfterAppBar && appBar,
	        React__default['default'].createElement(MiniLayoutWrapper, { mini: mini, miniNav: miniNav, miniHidden: miniHidden, containerProps: miniWrapperProps, miniNavItems: miniNavItems, treeProps: treeProps, header: navHeader, headerProps: navHeaderProps, headerTitle: navHeaderTitle, headerTitleProps: navHeaderTitleProps, closeNav: closeNav, closeNavProps: closeNavProps },
	            React__default['default'].createElement(LayoutMain, __assign$f3({ headerOffset: fixedAppBar, mini: mini, miniHidden: miniHidden }, mainProps, { id: mainId }), children))));
	}

	var __assign$f2 = (undefined && undefined.__assign) || function () {
	    __assign$f2 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$f2.apply(this, arguments);
	};
	var __rest$p = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	(undefined && undefined.__spreadArray) || function (to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	};
	/**
	 * The layout to use for your app. There are 9 different types of layouts
	 * supported out of the box that work for a decent amount of apps out of the
	 * box.
	 *
	 * Note: You will need to ensure that the base `Configuration` component is a
	 * parent of this `Layout` component to work since it relies on the
	 * `AppSizeContext` for automatically updating the layout based on media
	 * queries.
	 */
	function Layout(_a) {
	    var _b, _c;
	    var _d = _a.id, id = _d === void 0 ? "layout" : _d, _e = _a.phoneLayout, phoneLayout = _e === void 0 ? DEFAULT_PHONE_LAYOUT : _e, _f = _a.tabletLayout, tabletLayout = _f === void 0 ? DEFAULT_TABLET_LAYOUT : _f, _g = _a.landscapeTabletLayout, landscapeTabletLayout = _g === void 0 ? DEFAULT_LANDSCAPE_TABLET_LAYOUT : _g, _h = _a.desktopLayout, desktopLayout = _h === void 0 ? DEFAULT_DESKTOP_LAYOUT : _h, largeDesktopLayout = _a.largeDesktopLayout, _j = _a.defaultToggleableVisible, defaultToggleableVisible = _j === void 0 ? false : _j, props = __rest$p(_a, ["id", "phoneLayout", "tabletLayout", "landscapeTabletLayout", "desktopLayout", "largeDesktopLayout", "defaultToggleableVisible"]);
	    return (React__default['default'].createElement(LayoutProvider, { baseId: id, fixedAppBar: (_c = (_b = props.appBarProps) === null || _b === void 0 ? void 0 : _b.fixed) !== null && _c !== void 0 ? _c : typeof props.appBar === "undefined", phoneLayout: phoneLayout, tabletLayout: tabletLayout, landscapeTabletLayout: landscapeTabletLayout, desktopLayout: desktopLayout, largeDesktopLayout: largeDesktopLayout, defaultToggleableVisible: defaultToggleableVisible },
	        React__default['default'].createElement(LayoutChildren, __assign$f2({ id: id }, props))));
	}

	var __spreadArray = (undefined && undefined.__spreadArray) || function (to, from) {
	    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
	        to[j] = from[i];
	    return to;
	};
	/**
	 * @internal
	 */
	var getParentIds = function (itemId, navItems) { return getItemsFrom(navItems, itemId).map(function (_a) {
	    var itemId = _a.itemId;
	    return itemId;
	}); };
	/**
	 * This is used to disable the item select and multi item select functionality
	 * since only one id can be selected at a time, and it'll always be the current
	 * pathname's itemId
	 *
	 * @internal
	 */
	var noop = function () {
	    // do nothing
	};
	/**
	 * This is a pretty reasonable default implementation for having a navigation
	 * tree within the Layout component. The way it'll work is that the current
	 * route will be the only selected item within the tree. When the pathname
	 * changes, the selectedIds will be updated to only be the current pathname once
	 * again.
	 *
	 * This means that you can use whatever routing library or history provider that
	 * ensures that your layout re-renders on a path change.
	 *
	 * @see LayoutNavigationTree for description of the navItems
	 * @param navItems - All the navigation items within your layout. This is used
	 * for determining which parent tree items should be expanded when the route
	 * changes so the current route won't be hidden from view. This sort of flow
	 * happens if you have a link outside of the navigation tree.
	 * @param pathname - The current pathname
	 * @param linkComponent - The link component to use within the navigation tree
	 * for any item that has a `to` or `href` attribute. This defaults to the `Link`
	 * from `@react-md/link` but should be changed to whatever link component you
	 * need if using a routing library like `react-router`.
	 * @returns the required `Tree` selection and expansion state and handlers that
	 * should be passed to the `Layout` component.
	 */
	function useLayoutNavigation(navItems, pathname, linkComponent) {
	    if (linkComponent === void 0) { linkComponent = Link; }
	    var itemId = pathname.replace(/\?.*$/, "");
	    var _a = useTreeItemExpansion(function () { return getParentIds(itemId, navItems); }), expandedIds = _a.expandedIds, onItemExpansion = _a.onItemExpansion, onMultiItemExpansion = _a.onMultiItemExpansion;
	    var prevItemId = React.useRef(itemId);
	    var prevNavItems = React.useRef(navItems);
	    if (prevItemId.current !== itemId || prevNavItems.current !== navItems) {
	        prevItemId.current = itemId;
	        prevNavItems.current = navItems;
	        onMultiItemExpansion(Array.from(new Set(__spreadArray(__spreadArray([], expandedIds), getParentIds(itemId, navItems)))));
	    }
	    return {
	        navItems: navItems,
	        multiSelect: false,
	        selectedIds: [itemId],
	        onItemSelect: noop,
	        onMultiItemSelect: noop,
	        expandedIds: expandedIds,
	        onItemExpansion: onItemExpansion,
	        onMultiItemExpansion: onMultiItemExpansion,
	        linkComponent: linkComponent,
	    };
	}

	var __assign$f1 = (undefined && undefined.__assign) || function () {
	    __assign$f1 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$f1.apply(this, arguments);
	};
	var Rotation3DFontIcon = React.forwardRef(function Rotation3DFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$f1({}, props, { ref: ref }), "3d_rotation"));
	});

	var __assign$f0 = (undefined && undefined.__assign) || function () {
	    __assign$f0 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$f0.apply(this, arguments);
	};
	var AcUnitFontIcon = React.forwardRef(function AcUnitFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$f0({}, props, { ref: ref }), "ac_unit"));
	});

	var __assign$e$ = (undefined && undefined.__assign) || function () {
	    __assign$e$ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$e$.apply(this, arguments);
	};
	var AccessAlarmFontIcon = React.forwardRef(function AccessAlarmFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$e$({}, props, { ref: ref }), "access_alarm"));
	});

	var __assign$e_ = (undefined && undefined.__assign) || function () {
	    __assign$e_ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$e_.apply(this, arguments);
	};
	var AccessAlarmsFontIcon = React.forwardRef(function AccessAlarmsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$e_({}, props, { ref: ref }), "access_alarms"));
	});

	var __assign$eZ = (undefined && undefined.__assign) || function () {
	    __assign$eZ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eZ.apply(this, arguments);
	};
	var AccessTimeFontIcon = React.forwardRef(function AccessTimeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eZ({}, props, { ref: ref }), "access_time"));
	});

	var __assign$eY = (undefined && undefined.__assign) || function () {
	    __assign$eY = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eY.apply(this, arguments);
	};
	var AccessibilityFontIcon = React.forwardRef(function AccessibilityFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eY({}, props, { ref: ref }), "accessibility"));
	});

	var __assign$eX = (undefined && undefined.__assign) || function () {
	    __assign$eX = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eX.apply(this, arguments);
	};
	var AccessibleFontIcon = React.forwardRef(function AccessibleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eX({}, props, { ref: ref }), "accessible"));
	});

	var __assign$eW = (undefined && undefined.__assign) || function () {
	    __assign$eW = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eW.apply(this, arguments);
	};
	var AccountBalanceWalletFontIcon = React.forwardRef(function AccountBalanceWalletFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eW({}, props, { ref: ref }), "account_balance_wallet"));
	});

	var __assign$eV = (undefined && undefined.__assign) || function () {
	    __assign$eV = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eV.apply(this, arguments);
	};
	var AccountBalanceFontIcon = React.forwardRef(function AccountBalanceFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eV({}, props, { ref: ref }), "account_balance"));
	});

	var __assign$eU = (undefined && undefined.__assign) || function () {
	    __assign$eU = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eU.apply(this, arguments);
	};
	var AccountBoxFontIcon = React.forwardRef(function AccountBoxFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eU({}, props, { ref: ref }), "account_box"));
	});

	var __assign$eT = (undefined && undefined.__assign) || function () {
	    __assign$eT = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eT.apply(this, arguments);
	};
	var AccountCircleFontIcon = React.forwardRef(function AccountCircleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eT({}, props, { ref: ref }), "account_circle"));
	});

	var __assign$eS = (undefined && undefined.__assign) || function () {
	    __assign$eS = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eS.apply(this, arguments);
	};
	var AdbFontIcon = React.forwardRef(function AdbFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eS({}, props, { ref: ref }), "adb"));
	});

	var __assign$eR = (undefined && undefined.__assign) || function () {
	    __assign$eR = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eR.apply(this, arguments);
	};
	var AddAPhotoFontIcon = React.forwardRef(function AddAPhotoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eR({}, props, { ref: ref }), "add_a_photo"));
	});

	var __assign$eQ = (undefined && undefined.__assign) || function () {
	    __assign$eQ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eQ.apply(this, arguments);
	};
	var AddAlarmFontIcon = React.forwardRef(function AddAlarmFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eQ({}, props, { ref: ref }), "add_alarm"));
	});

	var __assign$eP = (undefined && undefined.__assign) || function () {
	    __assign$eP = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eP.apply(this, arguments);
	};
	var AddAlertFontIcon = React.forwardRef(function AddAlertFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eP({}, props, { ref: ref }), "add_alert"));
	});

	var __assign$eO = (undefined && undefined.__assign) || function () {
	    __assign$eO = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eO.apply(this, arguments);
	};
	var AddBoxFontIcon = React.forwardRef(function AddBoxFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eO({}, props, { ref: ref }), "add_box"));
	});

	var __assign$eN = (undefined && undefined.__assign) || function () {
	    __assign$eN = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eN.apply(this, arguments);
	};
	var AddCircleOutlineFontIcon = React.forwardRef(function AddCircleOutlineFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eN({}, props, { ref: ref }), "add_circle_outline"));
	});

	var __assign$eM = (undefined && undefined.__assign) || function () {
	    __assign$eM = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eM.apply(this, arguments);
	};
	var AddCircleFontIcon = React.forwardRef(function AddCircleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eM({}, props, { ref: ref }), "add_circle"));
	});

	var __assign$eL = (undefined && undefined.__assign) || function () {
	    __assign$eL = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eL.apply(this, arguments);
	};
	var AddLocationFontIcon = React.forwardRef(function AddLocationFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eL({}, props, { ref: ref }), "add_location"));
	});

	var __assign$eK = (undefined && undefined.__assign) || function () {
	    __assign$eK = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eK.apply(this, arguments);
	};
	var AddShoppingCartFontIcon = React.forwardRef(function AddShoppingCartFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eK({}, props, { ref: ref }), "add_shopping_cart"));
	});

	var __assign$eJ = (undefined && undefined.__assign) || function () {
	    __assign$eJ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eJ.apply(this, arguments);
	};
	var AddToPhotosFontIcon = React.forwardRef(function AddToPhotosFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eJ({}, props, { ref: ref }), "add_to_photos"));
	});

	var __assign$eI = (undefined && undefined.__assign) || function () {
	    __assign$eI = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eI.apply(this, arguments);
	};
	var AddToQueueFontIcon = React.forwardRef(function AddToQueueFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eI({}, props, { ref: ref }), "add_to_queue"));
	});

	var __assign$eH = (undefined && undefined.__assign) || function () {
	    __assign$eH = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eH.apply(this, arguments);
	};
	var AddFontIcon = React.forwardRef(function AddFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eH({}, props, { ref: ref }), "add"));
	});

	var __assign$eG = (undefined && undefined.__assign) || function () {
	    __assign$eG = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eG.apply(this, arguments);
	};
	var AdjustFontIcon = React.forwardRef(function AdjustFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eG({}, props, { ref: ref }), "adjust"));
	});

	var __assign$eF = (undefined && undefined.__assign) || function () {
	    __assign$eF = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eF.apply(this, arguments);
	};
	var AirlineSeatFlatAngledFontIcon = React.forwardRef(function AirlineSeatFlatAngledFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eF({}, props, { ref: ref }), "airline_seat_flat_angled"));
	});

	var __assign$eE = (undefined && undefined.__assign) || function () {
	    __assign$eE = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eE.apply(this, arguments);
	};
	var AirlineSeatFlatFontIcon = React.forwardRef(function AirlineSeatFlatFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eE({}, props, { ref: ref }), "airline_seat_flat"));
	});

	var __assign$eD = (undefined && undefined.__assign) || function () {
	    __assign$eD = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eD.apply(this, arguments);
	};
	var AirlineSeatIndividualSuiteFontIcon = React.forwardRef(function AirlineSeatIndividualSuiteFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eD({}, props, { ref: ref }), "airline_seat_individual_suite"));
	});

	var __assign$eC = (undefined && undefined.__assign) || function () {
	    __assign$eC = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eC.apply(this, arguments);
	};
	var AirlineSeatLegroomExtraFontIcon = React.forwardRef(function AirlineSeatLegroomExtraFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eC({}, props, { ref: ref }), "airline_seat_legroom_extra"));
	});

	var __assign$eB = (undefined && undefined.__assign) || function () {
	    __assign$eB = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eB.apply(this, arguments);
	};
	var AirlineSeatLegroomNormalFontIcon = React.forwardRef(function AirlineSeatLegroomNormalFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eB({}, props, { ref: ref }), "airline_seat_legroom_normal"));
	});

	var __assign$eA = (undefined && undefined.__assign) || function () {
	    __assign$eA = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eA.apply(this, arguments);
	};
	var AirlineSeatLegroomReducedFontIcon = React.forwardRef(function AirlineSeatLegroomReducedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eA({}, props, { ref: ref }), "airline_seat_legroom_reduced"));
	});

	var __assign$ez = (undefined && undefined.__assign) || function () {
	    __assign$ez = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ez.apply(this, arguments);
	};
	var AirlineSeatReclineExtraFontIcon = React.forwardRef(function AirlineSeatReclineExtraFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ez({}, props, { ref: ref }), "airline_seat_recline_extra"));
	});

	var __assign$ey = (undefined && undefined.__assign) || function () {
	    __assign$ey = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ey.apply(this, arguments);
	};
	var AirlineSeatReclineNormalFontIcon = React.forwardRef(function AirlineSeatReclineNormalFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ey({}, props, { ref: ref }), "airline_seat_recline_normal"));
	});

	var __assign$ex = (undefined && undefined.__assign) || function () {
	    __assign$ex = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ex.apply(this, arguments);
	};
	var AirplanemodeActiveFontIcon = React.forwardRef(function AirplanemodeActiveFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ex({}, props, { ref: ref }), "airplanemode_active"));
	});

	var __assign$ew = (undefined && undefined.__assign) || function () {
	    __assign$ew = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ew.apply(this, arguments);
	};
	var AirplanemodeInactiveFontIcon = React.forwardRef(function AirplanemodeInactiveFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ew({}, props, { ref: ref }), "airplanemode_inactive"));
	});

	var __assign$ev = (undefined && undefined.__assign) || function () {
	    __assign$ev = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ev.apply(this, arguments);
	};
	var AirplayFontIcon = React.forwardRef(function AirplayFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ev({}, props, { ref: ref }), "airplay"));
	});

	var __assign$eu = (undefined && undefined.__assign) || function () {
	    __assign$eu = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eu.apply(this, arguments);
	};
	var AirportShuttleFontIcon = React.forwardRef(function AirportShuttleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eu({}, props, { ref: ref }), "airport_shuttle"));
	});

	var __assign$et = (undefined && undefined.__assign) || function () {
	    __assign$et = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$et.apply(this, arguments);
	};
	var AlarmAddFontIcon = React.forwardRef(function AlarmAddFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$et({}, props, { ref: ref }), "alarm_add"));
	});

	var __assign$es = (undefined && undefined.__assign) || function () {
	    __assign$es = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$es.apply(this, arguments);
	};
	var AlarmOffFontIcon = React.forwardRef(function AlarmOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$es({}, props, { ref: ref }), "alarm_off"));
	});

	var __assign$er = (undefined && undefined.__assign) || function () {
	    __assign$er = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$er.apply(this, arguments);
	};
	var AlarmOnFontIcon = React.forwardRef(function AlarmOnFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$er({}, props, { ref: ref }), "alarm_on"));
	});

	var __assign$eq = (undefined && undefined.__assign) || function () {
	    __assign$eq = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eq.apply(this, arguments);
	};
	var AlarmFontIcon = React.forwardRef(function AlarmFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eq({}, props, { ref: ref }), "alarm"));
	});

	var __assign$ep = (undefined && undefined.__assign) || function () {
	    __assign$ep = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ep.apply(this, arguments);
	};
	var AlbumFontIcon = React.forwardRef(function AlbumFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ep({}, props, { ref: ref }), "album"));
	});

	var __assign$eo = (undefined && undefined.__assign) || function () {
	    __assign$eo = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eo.apply(this, arguments);
	};
	var AllInclusiveFontIcon = React.forwardRef(function AllInclusiveFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eo({}, props, { ref: ref }), "all_inclusive"));
	});

	var __assign$en = (undefined && undefined.__assign) || function () {
	    __assign$en = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$en.apply(this, arguments);
	};
	var AllOutFontIcon = React.forwardRef(function AllOutFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$en({}, props, { ref: ref }), "all_out"));
	});

	var __assign$em = (undefined && undefined.__assign) || function () {
	    __assign$em = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$em.apply(this, arguments);
	};
	var AndroidFontIcon = React.forwardRef(function AndroidFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$em({}, props, { ref: ref }), "android"));
	});

	var __assign$el = (undefined && undefined.__assign) || function () {
	    __assign$el = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$el.apply(this, arguments);
	};
	var AnnouncementFontIcon = React.forwardRef(function AnnouncementFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$el({}, props, { ref: ref }), "announcement"));
	});

	var __assign$ek = (undefined && undefined.__assign) || function () {
	    __assign$ek = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ek.apply(this, arguments);
	};
	var AppsFontIcon = React.forwardRef(function AppsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ek({}, props, { ref: ref }), "apps"));
	});

	var __assign$ej = (undefined && undefined.__assign) || function () {
	    __assign$ej = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ej.apply(this, arguments);
	};
	var ArchiveFontIcon = React.forwardRef(function ArchiveFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ej({}, props, { ref: ref }), "archive"));
	});

	var __assign$ei = (undefined && undefined.__assign) || function () {
	    __assign$ei = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ei.apply(this, arguments);
	};
	var ArrowBackFontIcon = React.forwardRef(function ArrowBackFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ei({}, props, { ref: ref }), "arrow_back"));
	});

	var __assign$eh = (undefined && undefined.__assign) || function () {
	    __assign$eh = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eh.apply(this, arguments);
	};
	var ArrowDownwardFontIcon = React.forwardRef(function ArrowDownwardFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eh({}, props, { ref: ref }), "arrow_downward"));
	});

	var __assign$eg = (undefined && undefined.__assign) || function () {
	    __assign$eg = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eg.apply(this, arguments);
	};
	var ArrowDropDownCircleFontIcon = React.forwardRef(function ArrowDropDownCircleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eg({}, props, { ref: ref }), "arrow_drop_down_circle"));
	});

	var __assign$ef = (undefined && undefined.__assign) || function () {
	    __assign$ef = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ef.apply(this, arguments);
	};
	var ArrowDropDownFontIcon = React.forwardRef(function ArrowDropDownFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ef({}, props, { ref: ref }), "arrow_drop_down"));
	});

	var __assign$ee = (undefined && undefined.__assign) || function () {
	    __assign$ee = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ee.apply(this, arguments);
	};
	var ArrowDropUpFontIcon = React.forwardRef(function ArrowDropUpFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ee({}, props, { ref: ref }), "arrow_drop_up"));
	});

	var __assign$ed = (undefined && undefined.__assign) || function () {
	    __assign$ed = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ed.apply(this, arguments);
	};
	var ArrowForwardFontIcon = React.forwardRef(function ArrowForwardFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ed({}, props, { ref: ref }), "arrow_forward"));
	});

	var __assign$ec = (undefined && undefined.__assign) || function () {
	    __assign$ec = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ec.apply(this, arguments);
	};
	var ArrowUpwardFontIcon = React.forwardRef(function ArrowUpwardFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ec({}, props, { ref: ref }), "arrow_upward"));
	});

	var __assign$eb = (undefined && undefined.__assign) || function () {
	    __assign$eb = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$eb.apply(this, arguments);
	};
	var ArtTrackFontIcon = React.forwardRef(function ArtTrackFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$eb({}, props, { ref: ref }), "art_track"));
	});

	var __assign$ea = (undefined && undefined.__assign) || function () {
	    __assign$ea = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ea.apply(this, arguments);
	};
	var AspectRatioFontIcon = React.forwardRef(function AspectRatioFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ea({}, props, { ref: ref }), "aspect_ratio"));
	});

	var __assign$e9 = (undefined && undefined.__assign) || function () {
	    __assign$e9 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$e9.apply(this, arguments);
	};
	var AssessmentFontIcon = React.forwardRef(function AssessmentFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$e9({}, props, { ref: ref }), "assessment"));
	});

	var __assign$e8 = (undefined && undefined.__assign) || function () {
	    __assign$e8 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$e8.apply(this, arguments);
	};
	var AssignmentIndFontIcon = React.forwardRef(function AssignmentIndFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$e8({}, props, { ref: ref }), "assignment_ind"));
	});

	var __assign$e7 = (undefined && undefined.__assign) || function () {
	    __assign$e7 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$e7.apply(this, arguments);
	};
	var AssignmentLateFontIcon = React.forwardRef(function AssignmentLateFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$e7({}, props, { ref: ref }), "assignment_late"));
	});

	var __assign$e6 = (undefined && undefined.__assign) || function () {
	    __assign$e6 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$e6.apply(this, arguments);
	};
	var AssignmentReturnFontIcon = React.forwardRef(function AssignmentReturnFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$e6({}, props, { ref: ref }), "assignment_return"));
	});

	var __assign$e5 = (undefined && undefined.__assign) || function () {
	    __assign$e5 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$e5.apply(this, arguments);
	};
	var AssignmentReturnedFontIcon = React.forwardRef(function AssignmentReturnedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$e5({}, props, { ref: ref }), "assignment_returned"));
	});

	var __assign$e4 = (undefined && undefined.__assign) || function () {
	    __assign$e4 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$e4.apply(this, arguments);
	};
	var AssignmentTurnedInFontIcon = React.forwardRef(function AssignmentTurnedInFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$e4({}, props, { ref: ref }), "assignment_turned_in"));
	});

	var __assign$e3 = (undefined && undefined.__assign) || function () {
	    __assign$e3 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$e3.apply(this, arguments);
	};
	var AssignmentFontIcon = React.forwardRef(function AssignmentFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$e3({}, props, { ref: ref }), "assignment"));
	});

	var __assign$e2 = (undefined && undefined.__assign) || function () {
	    __assign$e2 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$e2.apply(this, arguments);
	};
	var AssistantPhotoFontIcon = React.forwardRef(function AssistantPhotoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$e2({}, props, { ref: ref }), "assistant_photo"));
	});

	var __assign$e1 = (undefined && undefined.__assign) || function () {
	    __assign$e1 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$e1.apply(this, arguments);
	};
	var AssistantFontIcon = React.forwardRef(function AssistantFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$e1({}, props, { ref: ref }), "assistant"));
	});

	var __assign$e0 = (undefined && undefined.__assign) || function () {
	    __assign$e0 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$e0.apply(this, arguments);
	};
	var AttachFileFontIcon = React.forwardRef(function AttachFileFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$e0({}, props, { ref: ref }), "attach_file"));
	});

	var __assign$d$ = (undefined && undefined.__assign) || function () {
	    __assign$d$ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$d$.apply(this, arguments);
	};
	var AttachMoneyFontIcon = React.forwardRef(function AttachMoneyFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$d$({}, props, { ref: ref }), "attach_money"));
	});

	var __assign$d_ = (undefined && undefined.__assign) || function () {
	    __assign$d_ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$d_.apply(this, arguments);
	};
	var AttachmentFontIcon = React.forwardRef(function AttachmentFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$d_({}, props, { ref: ref }), "attachment"));
	});

	var __assign$dZ = (undefined && undefined.__assign) || function () {
	    __assign$dZ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dZ.apply(this, arguments);
	};
	var AudiotrackFontIcon = React.forwardRef(function AudiotrackFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dZ({}, props, { ref: ref }), "audiotrack"));
	});

	var __assign$dY = (undefined && undefined.__assign) || function () {
	    __assign$dY = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dY.apply(this, arguments);
	};
	var AutorenewFontIcon = React.forwardRef(function AutorenewFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dY({}, props, { ref: ref }), "autorenew"));
	});

	var __assign$dX = (undefined && undefined.__assign) || function () {
	    __assign$dX = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dX.apply(this, arguments);
	};
	var AvTimerFontIcon = React.forwardRef(function AvTimerFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dX({}, props, { ref: ref }), "av_timer"));
	});

	var __assign$dW = (undefined && undefined.__assign) || function () {
	    __assign$dW = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dW.apply(this, arguments);
	};
	var BackspaceFontIcon = React.forwardRef(function BackspaceFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dW({}, props, { ref: ref }), "backspace"));
	});

	var __assign$dV = (undefined && undefined.__assign) || function () {
	    __assign$dV = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dV.apply(this, arguments);
	};
	var BackupFontIcon = React.forwardRef(function BackupFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dV({}, props, { ref: ref }), "backup"));
	});

	var __assign$dU = (undefined && undefined.__assign) || function () {
	    __assign$dU = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dU.apply(this, arguments);
	};
	var BatteryAlertFontIcon = React.forwardRef(function BatteryAlertFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dU({}, props, { ref: ref }), "battery_alert"));
	});

	var __assign$dT = (undefined && undefined.__assign) || function () {
	    __assign$dT = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dT.apply(this, arguments);
	};
	var BatteryChargingFullFontIcon = React.forwardRef(function BatteryChargingFullFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dT({}, props, { ref: ref }), "battery_charging_full"));
	});

	var __assign$dS = (undefined && undefined.__assign) || function () {
	    __assign$dS = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dS.apply(this, arguments);
	};
	var BatteryFullFontIcon = React.forwardRef(function BatteryFullFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dS({}, props, { ref: ref }), "battery_full"));
	});

	var __assign$dR = (undefined && undefined.__assign) || function () {
	    __assign$dR = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dR.apply(this, arguments);
	};
	var BatteryStdFontIcon = React.forwardRef(function BatteryStdFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dR({}, props, { ref: ref }), "battery_std"));
	});

	var __assign$dQ = (undefined && undefined.__assign) || function () {
	    __assign$dQ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dQ.apply(this, arguments);
	};
	var BatteryUnknownFontIcon = React.forwardRef(function BatteryUnknownFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dQ({}, props, { ref: ref }), "battery_unknown"));
	});

	var __assign$dP = (undefined && undefined.__assign) || function () {
	    __assign$dP = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dP.apply(this, arguments);
	};
	var BeachAccessFontIcon = React.forwardRef(function BeachAccessFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dP({}, props, { ref: ref }), "beach_access"));
	});

	var __assign$dO = (undefined && undefined.__assign) || function () {
	    __assign$dO = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dO.apply(this, arguments);
	};
	var BeenhereFontIcon = React.forwardRef(function BeenhereFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dO({}, props, { ref: ref }), "beenhere"));
	});

	var __assign$dN = (undefined && undefined.__assign) || function () {
	    __assign$dN = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dN.apply(this, arguments);
	};
	var BlockFontIcon = React.forwardRef(function BlockFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dN({}, props, { ref: ref }), "block"));
	});

	var __assign$dM = (undefined && undefined.__assign) || function () {
	    __assign$dM = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dM.apply(this, arguments);
	};
	var BluetoothAudioFontIcon = React.forwardRef(function BluetoothAudioFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dM({}, props, { ref: ref }), "bluetooth_audio"));
	});

	var __assign$dL = (undefined && undefined.__assign) || function () {
	    __assign$dL = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dL.apply(this, arguments);
	};
	var BluetoothConnectedFontIcon = React.forwardRef(function BluetoothConnectedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dL({}, props, { ref: ref }), "bluetooth_connected"));
	});

	var __assign$dK = (undefined && undefined.__assign) || function () {
	    __assign$dK = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dK.apply(this, arguments);
	};
	var BluetoothDisabledFontIcon = React.forwardRef(function BluetoothDisabledFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dK({}, props, { ref: ref }), "bluetooth_disabled"));
	});

	var __assign$dJ = (undefined && undefined.__assign) || function () {
	    __assign$dJ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dJ.apply(this, arguments);
	};
	var BluetoothSearchingFontIcon = React.forwardRef(function BluetoothSearchingFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dJ({}, props, { ref: ref }), "bluetooth_searching"));
	});

	var __assign$dI = (undefined && undefined.__assign) || function () {
	    __assign$dI = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dI.apply(this, arguments);
	};
	var BluetoothFontIcon = React.forwardRef(function BluetoothFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dI({}, props, { ref: ref }), "bluetooth"));
	});

	var __assign$dH = (undefined && undefined.__assign) || function () {
	    __assign$dH = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dH.apply(this, arguments);
	};
	var BlurCircularFontIcon = React.forwardRef(function BlurCircularFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dH({}, props, { ref: ref }), "blur_circular"));
	});

	var __assign$dG = (undefined && undefined.__assign) || function () {
	    __assign$dG = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dG.apply(this, arguments);
	};
	var BlurLinearFontIcon = React.forwardRef(function BlurLinearFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dG({}, props, { ref: ref }), "blur_linear"));
	});

	var __assign$dF = (undefined && undefined.__assign) || function () {
	    __assign$dF = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dF.apply(this, arguments);
	};
	var BlurOffFontIcon = React.forwardRef(function BlurOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dF({}, props, { ref: ref }), "blur_off"));
	});

	var __assign$dE = (undefined && undefined.__assign) || function () {
	    __assign$dE = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dE.apply(this, arguments);
	};
	var BlurOnFontIcon = React.forwardRef(function BlurOnFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dE({}, props, { ref: ref }), "blur_on"));
	});

	var __assign$dD = (undefined && undefined.__assign) || function () {
	    __assign$dD = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dD.apply(this, arguments);
	};
	var BookFontIcon = React.forwardRef(function BookFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dD({}, props, { ref: ref }), "book"));
	});

	var __assign$dC = (undefined && undefined.__assign) || function () {
	    __assign$dC = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dC.apply(this, arguments);
	};
	var BookmarkBorderFontIcon = React.forwardRef(function BookmarkBorderFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dC({}, props, { ref: ref }), "bookmark_border"));
	});

	var __assign$dB = (undefined && undefined.__assign) || function () {
	    __assign$dB = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dB.apply(this, arguments);
	};
	var BookmarkFontIcon = React.forwardRef(function BookmarkFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dB({}, props, { ref: ref }), "bookmark"));
	});

	var __assign$dA = (undefined && undefined.__assign) || function () {
	    __assign$dA = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dA.apply(this, arguments);
	};
	var BorderAllFontIcon = React.forwardRef(function BorderAllFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dA({}, props, { ref: ref }), "border_all"));
	});

	var __assign$dz = (undefined && undefined.__assign) || function () {
	    __assign$dz = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dz.apply(this, arguments);
	};
	var BorderBottomFontIcon = React.forwardRef(function BorderBottomFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dz({}, props, { ref: ref }), "border_bottom"));
	});

	var __assign$dy = (undefined && undefined.__assign) || function () {
	    __assign$dy = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dy.apply(this, arguments);
	};
	var BorderClearFontIcon = React.forwardRef(function BorderClearFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dy({}, props, { ref: ref }), "border_clear"));
	});

	var __assign$dx = (undefined && undefined.__assign) || function () {
	    __assign$dx = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dx.apply(this, arguments);
	};
	var BorderColorFontIcon = React.forwardRef(function BorderColorFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dx({}, props, { ref: ref }), "border_color"));
	});

	var __assign$dw = (undefined && undefined.__assign) || function () {
	    __assign$dw = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dw.apply(this, arguments);
	};
	var BorderHorizontalFontIcon = React.forwardRef(function BorderHorizontalFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dw({}, props, { ref: ref }), "border_horizontal"));
	});

	var __assign$dv = (undefined && undefined.__assign) || function () {
	    __assign$dv = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dv.apply(this, arguments);
	};
	var BorderInnerFontIcon = React.forwardRef(function BorderInnerFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dv({}, props, { ref: ref }), "border_inner"));
	});

	var __assign$du = (undefined && undefined.__assign) || function () {
	    __assign$du = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$du.apply(this, arguments);
	};
	var BorderLeftFontIcon = React.forwardRef(function BorderLeftFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$du({}, props, { ref: ref }), "border_left"));
	});

	var __assign$dt = (undefined && undefined.__assign) || function () {
	    __assign$dt = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dt.apply(this, arguments);
	};
	var BorderOuterFontIcon = React.forwardRef(function BorderOuterFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dt({}, props, { ref: ref }), "border_outer"));
	});

	var __assign$ds = (undefined && undefined.__assign) || function () {
	    __assign$ds = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ds.apply(this, arguments);
	};
	var BorderRightFontIcon = React.forwardRef(function BorderRightFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ds({}, props, { ref: ref }), "border_right"));
	});

	var __assign$dr = (undefined && undefined.__assign) || function () {
	    __assign$dr = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dr.apply(this, arguments);
	};
	var BorderStyleFontIcon = React.forwardRef(function BorderStyleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dr({}, props, { ref: ref }), "border_style"));
	});

	var __assign$dq = (undefined && undefined.__assign) || function () {
	    __assign$dq = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dq.apply(this, arguments);
	};
	var BorderTopFontIcon = React.forwardRef(function BorderTopFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dq({}, props, { ref: ref }), "border_top"));
	});

	var __assign$dp = (undefined && undefined.__assign) || function () {
	    __assign$dp = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dp.apply(this, arguments);
	};
	var BorderVerticalFontIcon = React.forwardRef(function BorderVerticalFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dp({}, props, { ref: ref }), "border_vertical"));
	});

	var __assign$do = (undefined && undefined.__assign) || function () {
	    __assign$do = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$do.apply(this, arguments);
	};
	var BrandingWatermarkFontIcon = React.forwardRef(function BrandingWatermarkFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$do({}, props, { ref: ref }), "branding_watermark"));
	});

	var __assign$dn = (undefined && undefined.__assign) || function () {
	    __assign$dn = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dn.apply(this, arguments);
	};
	var Brightness1FontIcon = React.forwardRef(function Brightness1FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dn({}, props, { ref: ref }), "brightness_1"));
	});

	var __assign$dm = (undefined && undefined.__assign) || function () {
	    __assign$dm = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dm.apply(this, arguments);
	};
	var Brightness2FontIcon = React.forwardRef(function Brightness2FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dm({}, props, { ref: ref }), "brightness_2"));
	});

	var __assign$dl = (undefined && undefined.__assign) || function () {
	    __assign$dl = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dl.apply(this, arguments);
	};
	var Brightness3FontIcon = React.forwardRef(function Brightness3FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dl({}, props, { ref: ref }), "brightness_3"));
	});

	var __assign$dk = (undefined && undefined.__assign) || function () {
	    __assign$dk = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dk.apply(this, arguments);
	};
	var Brightness4FontIcon = React.forwardRef(function Brightness4FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dk({}, props, { ref: ref }), "brightness_4"));
	});

	var __assign$dj = (undefined && undefined.__assign) || function () {
	    __assign$dj = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dj.apply(this, arguments);
	};
	var Brightness5FontIcon = React.forwardRef(function Brightness5FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dj({}, props, { ref: ref }), "brightness_5"));
	});

	var __assign$di = (undefined && undefined.__assign) || function () {
	    __assign$di = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$di.apply(this, arguments);
	};
	var Brightness6FontIcon = React.forwardRef(function Brightness6FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$di({}, props, { ref: ref }), "brightness_6"));
	});

	var __assign$dh = (undefined && undefined.__assign) || function () {
	    __assign$dh = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dh.apply(this, arguments);
	};
	var Brightness7FontIcon = React.forwardRef(function Brightness7FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dh({}, props, { ref: ref }), "brightness_7"));
	});

	var __assign$dg = (undefined && undefined.__assign) || function () {
	    __assign$dg = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dg.apply(this, arguments);
	};
	var BrightnessAutoFontIcon = React.forwardRef(function BrightnessAutoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dg({}, props, { ref: ref }), "brightness_auto"));
	});

	var __assign$df = (undefined && undefined.__assign) || function () {
	    __assign$df = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$df.apply(this, arguments);
	};
	var BrightnessHighFontIcon = React.forwardRef(function BrightnessHighFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$df({}, props, { ref: ref }), "brightness_high"));
	});

	var __assign$de = (undefined && undefined.__assign) || function () {
	    __assign$de = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$de.apply(this, arguments);
	};
	var BrightnessLowFontIcon = React.forwardRef(function BrightnessLowFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$de({}, props, { ref: ref }), "brightness_low"));
	});

	var __assign$dd = (undefined && undefined.__assign) || function () {
	    __assign$dd = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dd.apply(this, arguments);
	};
	var BrightnessMediumFontIcon = React.forwardRef(function BrightnessMediumFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dd({}, props, { ref: ref }), "brightness_medium"));
	});

	var __assign$dc = (undefined && undefined.__assign) || function () {
	    __assign$dc = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$dc.apply(this, arguments);
	};
	var BrokenImageFontIcon = React.forwardRef(function BrokenImageFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$dc({}, props, { ref: ref }), "broken_image"));
	});

	var __assign$db = (undefined && undefined.__assign) || function () {
	    __assign$db = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$db.apply(this, arguments);
	};
	var BrushFontIcon = React.forwardRef(function BrushFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$db({}, props, { ref: ref }), "brush"));
	});

	var __assign$da = (undefined && undefined.__assign) || function () {
	    __assign$da = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$da.apply(this, arguments);
	};
	var BubbleChartFontIcon = React.forwardRef(function BubbleChartFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$da({}, props, { ref: ref }), "bubble_chart"));
	});

	var __assign$d9 = (undefined && undefined.__assign) || function () {
	    __assign$d9 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$d9.apply(this, arguments);
	};
	var BugReportFontIcon = React.forwardRef(function BugReportFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$d9({}, props, { ref: ref }), "bug_report"));
	});

	var __assign$d8 = (undefined && undefined.__assign) || function () {
	    __assign$d8 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$d8.apply(this, arguments);
	};
	var BuildFontIcon = React.forwardRef(function BuildFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$d8({}, props, { ref: ref }), "build"));
	});

	var __assign$d7 = (undefined && undefined.__assign) || function () {
	    __assign$d7 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$d7.apply(this, arguments);
	};
	var BurstModeFontIcon = React.forwardRef(function BurstModeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$d7({}, props, { ref: ref }), "burst_mode"));
	});

	var __assign$d6 = (undefined && undefined.__assign) || function () {
	    __assign$d6 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$d6.apply(this, arguments);
	};
	var BusinessCenterFontIcon = React.forwardRef(function BusinessCenterFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$d6({}, props, { ref: ref }), "business_center"));
	});

	var __assign$d5 = (undefined && undefined.__assign) || function () {
	    __assign$d5 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$d5.apply(this, arguments);
	};
	var BusinessFontIcon = React.forwardRef(function BusinessFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$d5({}, props, { ref: ref }), "business"));
	});

	var __assign$d4 = (undefined && undefined.__assign) || function () {
	    __assign$d4 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$d4.apply(this, arguments);
	};
	var CachedFontIcon = React.forwardRef(function CachedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$d4({}, props, { ref: ref }), "cached"));
	});

	var __assign$d3 = (undefined && undefined.__assign) || function () {
	    __assign$d3 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$d3.apply(this, arguments);
	};
	var CakeFontIcon = React.forwardRef(function CakeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$d3({}, props, { ref: ref }), "cake"));
	});

	var __assign$d2 = (undefined && undefined.__assign) || function () {
	    __assign$d2 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$d2.apply(this, arguments);
	};
	var CallEndFontIcon = React.forwardRef(function CallEndFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$d2({}, props, { ref: ref }), "call_end"));
	});

	var __assign$d1 = (undefined && undefined.__assign) || function () {
	    __assign$d1 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$d1.apply(this, arguments);
	};
	var CallMadeFontIcon = React.forwardRef(function CallMadeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$d1({}, props, { ref: ref }), "call_made"));
	});

	var __assign$d0 = (undefined && undefined.__assign) || function () {
	    __assign$d0 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$d0.apply(this, arguments);
	};
	var CallMergeFontIcon = React.forwardRef(function CallMergeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$d0({}, props, { ref: ref }), "call_merge"));
	});

	var __assign$c$ = (undefined && undefined.__assign) || function () {
	    __assign$c$ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$c$.apply(this, arguments);
	};
	var CallMissedOutgoingFontIcon = React.forwardRef(function CallMissedOutgoingFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$c$({}, props, { ref: ref }), "call_missed_outgoing"));
	});

	var __assign$c_ = (undefined && undefined.__assign) || function () {
	    __assign$c_ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$c_.apply(this, arguments);
	};
	var CallMissedFontIcon = React.forwardRef(function CallMissedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$c_({}, props, { ref: ref }), "call_missed"));
	});

	var __assign$cZ = (undefined && undefined.__assign) || function () {
	    __assign$cZ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cZ.apply(this, arguments);
	};
	var CallReceivedFontIcon = React.forwardRef(function CallReceivedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cZ({}, props, { ref: ref }), "call_received"));
	});

	var __assign$cY = (undefined && undefined.__assign) || function () {
	    __assign$cY = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cY.apply(this, arguments);
	};
	var CallSplitFontIcon = React.forwardRef(function CallSplitFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cY({}, props, { ref: ref }), "call_split"));
	});

	var __assign$cX = (undefined && undefined.__assign) || function () {
	    __assign$cX = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cX.apply(this, arguments);
	};
	var CallToActionFontIcon = React.forwardRef(function CallToActionFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cX({}, props, { ref: ref }), "call_to_action"));
	});

	var __assign$cW = (undefined && undefined.__assign) || function () {
	    __assign$cW = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cW.apply(this, arguments);
	};
	var CallFontIcon = React.forwardRef(function CallFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cW({}, props, { ref: ref }), "call"));
	});

	var __assign$cV = (undefined && undefined.__assign) || function () {
	    __assign$cV = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cV.apply(this, arguments);
	};
	var CameraAltFontIcon = React.forwardRef(function CameraAltFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cV({}, props, { ref: ref }), "camera_alt"));
	});

	var __assign$cU = (undefined && undefined.__assign) || function () {
	    __assign$cU = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cU.apply(this, arguments);
	};
	var CameraEnhanceFontIcon = React.forwardRef(function CameraEnhanceFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cU({}, props, { ref: ref }), "camera_enhance"));
	});

	var __assign$cT = (undefined && undefined.__assign) || function () {
	    __assign$cT = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cT.apply(this, arguments);
	};
	var CameraFrontFontIcon = React.forwardRef(function CameraFrontFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cT({}, props, { ref: ref }), "camera_front"));
	});

	var __assign$cS = (undefined && undefined.__assign) || function () {
	    __assign$cS = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cS.apply(this, arguments);
	};
	var CameraRearFontIcon = React.forwardRef(function CameraRearFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cS({}, props, { ref: ref }), "camera_rear"));
	});

	var __assign$cR = (undefined && undefined.__assign) || function () {
	    __assign$cR = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cR.apply(this, arguments);
	};
	var CameraRollFontIcon = React.forwardRef(function CameraRollFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cR({}, props, { ref: ref }), "camera_roll"));
	});

	var __assign$cQ = (undefined && undefined.__assign) || function () {
	    __assign$cQ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cQ.apply(this, arguments);
	};
	var CameraFontIcon = React.forwardRef(function CameraFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cQ({}, props, { ref: ref }), "camera"));
	});

	var __assign$cP = (undefined && undefined.__assign) || function () {
	    __assign$cP = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cP.apply(this, arguments);
	};
	var CancelFontIcon = React.forwardRef(function CancelFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cP({}, props, { ref: ref }), "cancel"));
	});

	var __assign$cO = (undefined && undefined.__assign) || function () {
	    __assign$cO = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cO.apply(this, arguments);
	};
	var CardGiftcardFontIcon = React.forwardRef(function CardGiftcardFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cO({}, props, { ref: ref }), "card_giftcard"));
	});

	var __assign$cN = (undefined && undefined.__assign) || function () {
	    __assign$cN = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cN.apply(this, arguments);
	};
	var CardMembershipFontIcon = React.forwardRef(function CardMembershipFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cN({}, props, { ref: ref }), "card_membership"));
	});

	var __assign$cM = (undefined && undefined.__assign) || function () {
	    __assign$cM = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cM.apply(this, arguments);
	};
	var CardTravelFontIcon = React.forwardRef(function CardTravelFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cM({}, props, { ref: ref }), "card_travel"));
	});

	var __assign$cL = (undefined && undefined.__assign) || function () {
	    __assign$cL = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cL.apply(this, arguments);
	};
	var CasinoFontIcon = React.forwardRef(function CasinoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cL({}, props, { ref: ref }), "casino"));
	});

	var __assign$cK = (undefined && undefined.__assign) || function () {
	    __assign$cK = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cK.apply(this, arguments);
	};
	var CastConnectedFontIcon = React.forwardRef(function CastConnectedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cK({}, props, { ref: ref }), "cast_connected"));
	});

	var __assign$cJ = (undefined && undefined.__assign) || function () {
	    __assign$cJ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cJ.apply(this, arguments);
	};
	var CastFontIcon = React.forwardRef(function CastFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cJ({}, props, { ref: ref }), "cast"));
	});

	var __assign$cI = (undefined && undefined.__assign) || function () {
	    __assign$cI = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cI.apply(this, arguments);
	};
	var CenterFocusStrongFontIcon = React.forwardRef(function CenterFocusStrongFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cI({}, props, { ref: ref }), "center_focus_strong"));
	});

	var __assign$cH = (undefined && undefined.__assign) || function () {
	    __assign$cH = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cH.apply(this, arguments);
	};
	var CenterFocusWeakFontIcon = React.forwardRef(function CenterFocusWeakFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cH({}, props, { ref: ref }), "center_focus_weak"));
	});

	var __assign$cG = (undefined && undefined.__assign) || function () {
	    __assign$cG = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cG.apply(this, arguments);
	};
	var ChangeHistoryFontIcon = React.forwardRef(function ChangeHistoryFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cG({}, props, { ref: ref }), "change_history"));
	});

	var __assign$cF = (undefined && undefined.__assign) || function () {
	    __assign$cF = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cF.apply(this, arguments);
	};
	var ChatBubbleOutlineFontIcon = React.forwardRef(function ChatBubbleOutlineFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cF({}, props, { ref: ref }), "chat_bubble_outline"));
	});

	var __assign$cE = (undefined && undefined.__assign) || function () {
	    __assign$cE = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cE.apply(this, arguments);
	};
	var ChatBubbleFontIcon = React.forwardRef(function ChatBubbleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cE({}, props, { ref: ref }), "chat_bubble"));
	});

	var __assign$cD = (undefined && undefined.__assign) || function () {
	    __assign$cD = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cD.apply(this, arguments);
	};
	var ChatFontIcon = React.forwardRef(function ChatFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cD({}, props, { ref: ref }), "chat"));
	});

	var __assign$cC = (undefined && undefined.__assign) || function () {
	    __assign$cC = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cC.apply(this, arguments);
	};
	var CheckBoxOutlineBlankFontIcon = React.forwardRef(function CheckBoxOutlineBlankFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cC({}, props, { ref: ref }), "check_box_outline_blank"));
	});

	var __assign$cB = (undefined && undefined.__assign) || function () {
	    __assign$cB = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cB.apply(this, arguments);
	};
	var CheckBoxFontIcon = React.forwardRef(function CheckBoxFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cB({}, props, { ref: ref }), "check_box"));
	});

	var __assign$cA = (undefined && undefined.__assign) || function () {
	    __assign$cA = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cA.apply(this, arguments);
	};
	var CheckCircleFontIcon = React.forwardRef(function CheckCircleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cA({}, props, { ref: ref }), "check_circle"));
	});

	var __assign$cz = (undefined && undefined.__assign) || function () {
	    __assign$cz = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cz.apply(this, arguments);
	};
	var CheckFontIcon = React.forwardRef(function CheckFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cz({}, props, { ref: ref }), "check"));
	});

	var __assign$cy = (undefined && undefined.__assign) || function () {
	    __assign$cy = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cy.apply(this, arguments);
	};
	var ChevronLeftFontIcon = React.forwardRef(function ChevronLeftFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cy({}, props, { ref: ref }), "chevron_left"));
	});

	var __assign$cx = (undefined && undefined.__assign) || function () {
	    __assign$cx = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cx.apply(this, arguments);
	};
	var ChevronRightFontIcon = React.forwardRef(function ChevronRightFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cx({}, props, { ref: ref }), "chevron_right"));
	});

	var __assign$cw = (undefined && undefined.__assign) || function () {
	    __assign$cw = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cw.apply(this, arguments);
	};
	var ChildCareFontIcon = React.forwardRef(function ChildCareFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cw({}, props, { ref: ref }), "child_care"));
	});

	var __assign$cv = (undefined && undefined.__assign) || function () {
	    __assign$cv = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cv.apply(this, arguments);
	};
	var ChildFriendlyFontIcon = React.forwardRef(function ChildFriendlyFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cv({}, props, { ref: ref }), "child_friendly"));
	});

	var __assign$cu = (undefined && undefined.__assign) || function () {
	    __assign$cu = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cu.apply(this, arguments);
	};
	var ChromeReaderModeFontIcon = React.forwardRef(function ChromeReaderModeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cu({}, props, { ref: ref }), "chrome_reader_mode"));
	});

	var __assign$ct = (undefined && undefined.__assign) || function () {
	    __assign$ct = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ct.apply(this, arguments);
	};
	var ClassFontIcon = React.forwardRef(function ClassFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ct({}, props, { ref: ref }), "class"));
	});

	var __assign$cs = (undefined && undefined.__assign) || function () {
	    __assign$cs = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cs.apply(this, arguments);
	};
	var ClearAllFontIcon = React.forwardRef(function ClearAllFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cs({}, props, { ref: ref }), "clear_all"));
	});

	var __assign$cr = (undefined && undefined.__assign) || function () {
	    __assign$cr = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cr.apply(this, arguments);
	};
	var ClearFontIcon = React.forwardRef(function ClearFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cr({}, props, { ref: ref }), "clear"));
	});

	var __assign$cq = (undefined && undefined.__assign) || function () {
	    __assign$cq = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cq.apply(this, arguments);
	};
	var CloseFontIcon = React.forwardRef(function CloseFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cq({}, props, { ref: ref }), "close"));
	});

	var __assign$cp = (undefined && undefined.__assign) || function () {
	    __assign$cp = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cp.apply(this, arguments);
	};
	var ClosedCaptionFontIcon = React.forwardRef(function ClosedCaptionFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cp({}, props, { ref: ref }), "closed_caption"));
	});

	var __assign$co = (undefined && undefined.__assign) || function () {
	    __assign$co = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$co.apply(this, arguments);
	};
	var CloudCircleFontIcon = React.forwardRef(function CloudCircleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$co({}, props, { ref: ref }), "cloud_circle"));
	});

	var __assign$cn = (undefined && undefined.__assign) || function () {
	    __assign$cn = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cn.apply(this, arguments);
	};
	var CloudDoneFontIcon = React.forwardRef(function CloudDoneFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cn({}, props, { ref: ref }), "cloud_done"));
	});

	var __assign$cm = (undefined && undefined.__assign) || function () {
	    __assign$cm = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cm.apply(this, arguments);
	};
	var CloudDownloadFontIcon = React.forwardRef(function CloudDownloadFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cm({}, props, { ref: ref }), "cloud_download"));
	});

	var __assign$cl = (undefined && undefined.__assign) || function () {
	    __assign$cl = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cl.apply(this, arguments);
	};
	var CloudOffFontIcon = React.forwardRef(function CloudOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cl({}, props, { ref: ref }), "cloud_off"));
	});

	var __assign$ck = (undefined && undefined.__assign) || function () {
	    __assign$ck = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ck.apply(this, arguments);
	};
	var CloudQueueFontIcon = React.forwardRef(function CloudQueueFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ck({}, props, { ref: ref }), "cloud_queue"));
	});

	var __assign$cj = (undefined && undefined.__assign) || function () {
	    __assign$cj = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cj.apply(this, arguments);
	};
	var CloudUploadFontIcon = React.forwardRef(function CloudUploadFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cj({}, props, { ref: ref }), "cloud_upload"));
	});

	var __assign$ci = (undefined && undefined.__assign) || function () {
	    __assign$ci = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ci.apply(this, arguments);
	};
	var CloudFontIcon = React.forwardRef(function CloudFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ci({}, props, { ref: ref }), "cloud"));
	});

	var __assign$ch = (undefined && undefined.__assign) || function () {
	    __assign$ch = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ch.apply(this, arguments);
	};
	var CodeFontIcon = React.forwardRef(function CodeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ch({}, props, { ref: ref }), "code"));
	});

	var __assign$cg = (undefined && undefined.__assign) || function () {
	    __assign$cg = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cg.apply(this, arguments);
	};
	var CollectionsBookmarkFontIcon = React.forwardRef(function CollectionsBookmarkFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cg({}, props, { ref: ref }), "collections_bookmark"));
	});

	var __assign$cf = (undefined && undefined.__assign) || function () {
	    __assign$cf = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cf.apply(this, arguments);
	};
	var CollectionsFontIcon = React.forwardRef(function CollectionsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cf({}, props, { ref: ref }), "collections"));
	});

	var __assign$ce = (undefined && undefined.__assign) || function () {
	    __assign$ce = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ce.apply(this, arguments);
	};
	var ColorLensFontIcon = React.forwardRef(function ColorLensFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ce({}, props, { ref: ref }), "color_lens"));
	});

	var __assign$cd = (undefined && undefined.__assign) || function () {
	    __assign$cd = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cd.apply(this, arguments);
	};
	var ColorizeFontIcon = React.forwardRef(function ColorizeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cd({}, props, { ref: ref }), "colorize"));
	});

	var __assign$cc = (undefined && undefined.__assign) || function () {
	    __assign$cc = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cc.apply(this, arguments);
	};
	var CommentFontIcon = React.forwardRef(function CommentFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cc({}, props, { ref: ref }), "comment"));
	});

	var __assign$cb = (undefined && undefined.__assign) || function () {
	    __assign$cb = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$cb.apply(this, arguments);
	};
	var CompareArrowsFontIcon = React.forwardRef(function CompareArrowsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$cb({}, props, { ref: ref }), "compare_arrows"));
	});

	var __assign$ca = (undefined && undefined.__assign) || function () {
	    __assign$ca = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ca.apply(this, arguments);
	};
	var CompareFontIcon = React.forwardRef(function CompareFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ca({}, props, { ref: ref }), "compare"));
	});

	var __assign$c9 = (undefined && undefined.__assign) || function () {
	    __assign$c9 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$c9.apply(this, arguments);
	};
	var ComputerFontIcon = React.forwardRef(function ComputerFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$c9({}, props, { ref: ref }), "computer"));
	});

	var __assign$c8 = (undefined && undefined.__assign) || function () {
	    __assign$c8 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$c8.apply(this, arguments);
	};
	var ConfirmationNumberFontIcon = React.forwardRef(function ConfirmationNumberFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$c8({}, props, { ref: ref }), "confirmation_number"));
	});

	var __assign$c7 = (undefined && undefined.__assign) || function () {
	    __assign$c7 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$c7.apply(this, arguments);
	};
	var ContactMailFontIcon = React.forwardRef(function ContactMailFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$c7({}, props, { ref: ref }), "contact_mail"));
	});

	var __assign$c6 = (undefined && undefined.__assign) || function () {
	    __assign$c6 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$c6.apply(this, arguments);
	};
	var ContactPhoneFontIcon = React.forwardRef(function ContactPhoneFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$c6({}, props, { ref: ref }), "contact_phone"));
	});

	var __assign$c5 = (undefined && undefined.__assign) || function () {
	    __assign$c5 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$c5.apply(this, arguments);
	};
	var ContactsFontIcon = React.forwardRef(function ContactsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$c5({}, props, { ref: ref }), "contacts"));
	});

	var __assign$c4 = (undefined && undefined.__assign) || function () {
	    __assign$c4 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$c4.apply(this, arguments);
	};
	var ContentCopyFontIcon = React.forwardRef(function ContentCopyFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$c4({}, props, { ref: ref }), "content_copy"));
	});

	var __assign$c3 = (undefined && undefined.__assign) || function () {
	    __assign$c3 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$c3.apply(this, arguments);
	};
	var ContentCutFontIcon = React.forwardRef(function ContentCutFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$c3({}, props, { ref: ref }), "content_cut"));
	});

	var __assign$c2 = (undefined && undefined.__assign) || function () {
	    __assign$c2 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$c2.apply(this, arguments);
	};
	var ContentPasteFontIcon = React.forwardRef(function ContentPasteFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$c2({}, props, { ref: ref }), "content_paste"));
	});

	var __assign$c1 = (undefined && undefined.__assign) || function () {
	    __assign$c1 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$c1.apply(this, arguments);
	};
	var ControlPointDuplicateFontIcon = React.forwardRef(function ControlPointDuplicateFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$c1({}, props, { ref: ref }), "control_point_duplicate"));
	});

	var __assign$c0 = (undefined && undefined.__assign) || function () {
	    __assign$c0 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$c0.apply(this, arguments);
	};
	var ControlPointFontIcon = React.forwardRef(function ControlPointFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$c0({}, props, { ref: ref }), "control_point"));
	});

	var __assign$b$ = (undefined && undefined.__assign) || function () {
	    __assign$b$ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$b$.apply(this, arguments);
	};
	var CopyrightFontIcon = React.forwardRef(function CopyrightFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$b$({}, props, { ref: ref }), "copyright"));
	});

	var __assign$b_ = (undefined && undefined.__assign) || function () {
	    __assign$b_ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$b_.apply(this, arguments);
	};
	var CreateNewFolderFontIcon = React.forwardRef(function CreateNewFolderFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$b_({}, props, { ref: ref }), "create_new_folder"));
	});

	var __assign$bZ = (undefined && undefined.__assign) || function () {
	    __assign$bZ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bZ.apply(this, arguments);
	};
	var CreateFontIcon = React.forwardRef(function CreateFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bZ({}, props, { ref: ref }), "create"));
	});

	var __assign$bY = (undefined && undefined.__assign) || function () {
	    __assign$bY = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bY.apply(this, arguments);
	};
	var CreditCardFontIcon = React.forwardRef(function CreditCardFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bY({}, props, { ref: ref }), "credit_card"));
	});

	var __assign$bX = (undefined && undefined.__assign) || function () {
	    __assign$bX = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bX.apply(this, arguments);
	};
	var Crop169FontIcon = React.forwardRef(function Crop169FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bX({}, props, { ref: ref }), "crop_16_9"));
	});

	var __assign$bW = (undefined && undefined.__assign) || function () {
	    __assign$bW = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bW.apply(this, arguments);
	};
	var Crop32FontIcon = React.forwardRef(function Crop32FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bW({}, props, { ref: ref }), "crop_3_2"));
	});

	var __assign$bV = (undefined && undefined.__assign) || function () {
	    __assign$bV = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bV.apply(this, arguments);
	};
	var Crop54FontIcon = React.forwardRef(function Crop54FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bV({}, props, { ref: ref }), "crop_5_4"));
	});

	var __assign$bU = (undefined && undefined.__assign) || function () {
	    __assign$bU = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bU.apply(this, arguments);
	};
	var Crop75FontIcon = React.forwardRef(function Crop75FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bU({}, props, { ref: ref }), "crop_7_5"));
	});

	var __assign$bT = (undefined && undefined.__assign) || function () {
	    __assign$bT = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bT.apply(this, arguments);
	};
	var CropDinFontIcon = React.forwardRef(function CropDinFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bT({}, props, { ref: ref }), "crop_din"));
	});

	var __assign$bS = (undefined && undefined.__assign) || function () {
	    __assign$bS = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bS.apply(this, arguments);
	};
	var CropFreeFontIcon = React.forwardRef(function CropFreeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bS({}, props, { ref: ref }), "crop_free"));
	});

	var __assign$bR = (undefined && undefined.__assign) || function () {
	    __assign$bR = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bR.apply(this, arguments);
	};
	var CropLandscapeFontIcon = React.forwardRef(function CropLandscapeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bR({}, props, { ref: ref }), "crop_landscape"));
	});

	var __assign$bQ = (undefined && undefined.__assign) || function () {
	    __assign$bQ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bQ.apply(this, arguments);
	};
	var CropOriginalFontIcon = React.forwardRef(function CropOriginalFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bQ({}, props, { ref: ref }), "crop_original"));
	});

	var __assign$bP = (undefined && undefined.__assign) || function () {
	    __assign$bP = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bP.apply(this, arguments);
	};
	var CropPortraitFontIcon = React.forwardRef(function CropPortraitFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bP({}, props, { ref: ref }), "crop_portrait"));
	});

	var __assign$bO = (undefined && undefined.__assign) || function () {
	    __assign$bO = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bO.apply(this, arguments);
	};
	var CropRotateFontIcon = React.forwardRef(function CropRotateFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bO({}, props, { ref: ref }), "crop_rotate"));
	});

	var __assign$bN = (undefined && undefined.__assign) || function () {
	    __assign$bN = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bN.apply(this, arguments);
	};
	var CropSquareFontIcon = React.forwardRef(function CropSquareFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bN({}, props, { ref: ref }), "crop_square"));
	});

	var __assign$bM = (undefined && undefined.__assign) || function () {
	    __assign$bM = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bM.apply(this, arguments);
	};
	var CropFontIcon = React.forwardRef(function CropFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bM({}, props, { ref: ref }), "crop"));
	});

	var __assign$bL = (undefined && undefined.__assign) || function () {
	    __assign$bL = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bL.apply(this, arguments);
	};
	var DashboardFontIcon = React.forwardRef(function DashboardFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bL({}, props, { ref: ref }), "dashboard"));
	});

	var __assign$bK = (undefined && undefined.__assign) || function () {
	    __assign$bK = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bK.apply(this, arguments);
	};
	var DataUsageFontIcon = React.forwardRef(function DataUsageFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bK({}, props, { ref: ref }), "data_usage"));
	});

	var __assign$bJ = (undefined && undefined.__assign) || function () {
	    __assign$bJ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bJ.apply(this, arguments);
	};
	var DateRangeFontIcon = React.forwardRef(function DateRangeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bJ({}, props, { ref: ref }), "date_range"));
	});

	var __assign$bI = (undefined && undefined.__assign) || function () {
	    __assign$bI = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bI.apply(this, arguments);
	};
	var DehazeFontIcon = React.forwardRef(function DehazeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bI({}, props, { ref: ref }), "dehaze"));
	});

	var __assign$bH = (undefined && undefined.__assign) || function () {
	    __assign$bH = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bH.apply(this, arguments);
	};
	var DeleteForeverFontIcon = React.forwardRef(function DeleteForeverFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bH({}, props, { ref: ref }), "delete_forever"));
	});

	var __assign$bG = (undefined && undefined.__assign) || function () {
	    __assign$bG = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bG.apply(this, arguments);
	};
	var DeleteSweepFontIcon = React.forwardRef(function DeleteSweepFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bG({}, props, { ref: ref }), "delete_sweep"));
	});

	var __assign$bF = (undefined && undefined.__assign) || function () {
	    __assign$bF = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bF.apply(this, arguments);
	};
	var DeleteFontIcon = React.forwardRef(function DeleteFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bF({}, props, { ref: ref }), "delete"));
	});

	var __assign$bE = (undefined && undefined.__assign) || function () {
	    __assign$bE = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bE.apply(this, arguments);
	};
	var DescriptionFontIcon = React.forwardRef(function DescriptionFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bE({}, props, { ref: ref }), "description"));
	});

	var __assign$bD = (undefined && undefined.__assign) || function () {
	    __assign$bD = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bD.apply(this, arguments);
	};
	var DesktopMacFontIcon = React.forwardRef(function DesktopMacFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bD({}, props, { ref: ref }), "desktop_mac"));
	});

	var __assign$bC = (undefined && undefined.__assign) || function () {
	    __assign$bC = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bC.apply(this, arguments);
	};
	var DesktopWindowsFontIcon = React.forwardRef(function DesktopWindowsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bC({}, props, { ref: ref }), "desktop_windows"));
	});

	var __assign$bB = (undefined && undefined.__assign) || function () {
	    __assign$bB = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bB.apply(this, arguments);
	};
	var DetailsFontIcon = React.forwardRef(function DetailsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bB({}, props, { ref: ref }), "details"));
	});

	var __assign$bA = (undefined && undefined.__assign) || function () {
	    __assign$bA = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bA.apply(this, arguments);
	};
	var DeveloperBoardFontIcon = React.forwardRef(function DeveloperBoardFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bA({}, props, { ref: ref }), "developer_board"));
	});

	var __assign$bz = (undefined && undefined.__assign) || function () {
	    __assign$bz = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bz.apply(this, arguments);
	};
	var DeveloperModeFontIcon = React.forwardRef(function DeveloperModeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bz({}, props, { ref: ref }), "developer_mode"));
	});

	var __assign$by = (undefined && undefined.__assign) || function () {
	    __assign$by = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$by.apply(this, arguments);
	};
	var DeviceHubFontIcon = React.forwardRef(function DeviceHubFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$by({}, props, { ref: ref }), "device_hub"));
	});

	var __assign$bx = (undefined && undefined.__assign) || function () {
	    __assign$bx = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bx.apply(this, arguments);
	};
	var DevicesOtherFontIcon = React.forwardRef(function DevicesOtherFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bx({}, props, { ref: ref }), "devices_other"));
	});

	var __assign$bw = (undefined && undefined.__assign) || function () {
	    __assign$bw = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bw.apply(this, arguments);
	};
	var DevicesFontIcon = React.forwardRef(function DevicesFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bw({}, props, { ref: ref }), "devices"));
	});

	var __assign$bv = (undefined && undefined.__assign) || function () {
	    __assign$bv = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bv.apply(this, arguments);
	};
	var DialerSipFontIcon = React.forwardRef(function DialerSipFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bv({}, props, { ref: ref }), "dialer_sip"));
	});

	var __assign$bu = (undefined && undefined.__assign) || function () {
	    __assign$bu = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bu.apply(this, arguments);
	};
	var DialpadFontIcon = React.forwardRef(function DialpadFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bu({}, props, { ref: ref }), "dialpad"));
	});

	var __assign$bt = (undefined && undefined.__assign) || function () {
	    __assign$bt = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bt.apply(this, arguments);
	};
	var DirectionsBikeFontIcon = React.forwardRef(function DirectionsBikeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bt({}, props, { ref: ref }), "directions_bike"));
	});

	var __assign$bs = (undefined && undefined.__assign) || function () {
	    __assign$bs = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bs.apply(this, arguments);
	};
	var DirectionsBoatFontIcon = React.forwardRef(function DirectionsBoatFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bs({}, props, { ref: ref }), "directions_boat"));
	});

	var __assign$br = (undefined && undefined.__assign) || function () {
	    __assign$br = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$br.apply(this, arguments);
	};
	var DirectionsBusFontIcon = React.forwardRef(function DirectionsBusFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$br({}, props, { ref: ref }), "directions_bus"));
	});

	var __assign$bq = (undefined && undefined.__assign) || function () {
	    __assign$bq = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bq.apply(this, arguments);
	};
	var DirectionsCarFontIcon = React.forwardRef(function DirectionsCarFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bq({}, props, { ref: ref }), "directions_car"));
	});

	var __assign$bp = (undefined && undefined.__assign) || function () {
	    __assign$bp = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bp.apply(this, arguments);
	};
	var DirectionsRailwayFontIcon = React.forwardRef(function DirectionsRailwayFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bp({}, props, { ref: ref }), "directions_railway"));
	});

	var __assign$bo = (undefined && undefined.__assign) || function () {
	    __assign$bo = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bo.apply(this, arguments);
	};
	var DirectionsRunFontIcon = React.forwardRef(function DirectionsRunFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bo({}, props, { ref: ref }), "directions_run"));
	});

	var __assign$bn = (undefined && undefined.__assign) || function () {
	    __assign$bn = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bn.apply(this, arguments);
	};
	var DirectionsSubwayFontIcon = React.forwardRef(function DirectionsSubwayFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bn({}, props, { ref: ref }), "directions_subway"));
	});

	var __assign$bm = (undefined && undefined.__assign) || function () {
	    __assign$bm = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bm.apply(this, arguments);
	};
	var DirectionsTransitFontIcon = React.forwardRef(function DirectionsTransitFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bm({}, props, { ref: ref }), "directions_transit"));
	});

	var __assign$bl = (undefined && undefined.__assign) || function () {
	    __assign$bl = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bl.apply(this, arguments);
	};
	var DirectionsWalkFontIcon = React.forwardRef(function DirectionsWalkFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bl({}, props, { ref: ref }), "directions_walk"));
	});

	var __assign$bk = (undefined && undefined.__assign) || function () {
	    __assign$bk = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bk.apply(this, arguments);
	};
	var DirectionsFontIcon = React.forwardRef(function DirectionsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bk({}, props, { ref: ref }), "directions"));
	});

	var __assign$bj = (undefined && undefined.__assign) || function () {
	    __assign$bj = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bj.apply(this, arguments);
	};
	var DiscFullFontIcon = React.forwardRef(function DiscFullFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bj({}, props, { ref: ref }), "disc_full"));
	});

	var __assign$bi = (undefined && undefined.__assign) || function () {
	    __assign$bi = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bi.apply(this, arguments);
	};
	var DnsFontIcon = React.forwardRef(function DnsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bi({}, props, { ref: ref }), "dns"));
	});

	var __assign$bh = (undefined && undefined.__assign) || function () {
	    __assign$bh = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bh.apply(this, arguments);
	};
	var DoNotDisturbAltFontIcon = React.forwardRef(function DoNotDisturbAltFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bh({}, props, { ref: ref }), "do_not_disturb_alt"));
	});

	var __assign$bg = (undefined && undefined.__assign) || function () {
	    __assign$bg = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bg.apply(this, arguments);
	};
	var DoNotDisturbOffFontIcon = React.forwardRef(function DoNotDisturbOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bg({}, props, { ref: ref }), "do_not_disturb_off"));
	});

	var __assign$bf = (undefined && undefined.__assign) || function () {
	    __assign$bf = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bf.apply(this, arguments);
	};
	var DoNotDisturbOnFontIcon = React.forwardRef(function DoNotDisturbOnFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bf({}, props, { ref: ref }), "do_not_disturb_on"));
	});

	var __assign$be = (undefined && undefined.__assign) || function () {
	    __assign$be = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$be.apply(this, arguments);
	};
	var DoNotDisturbFontIcon = React.forwardRef(function DoNotDisturbFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$be({}, props, { ref: ref }), "do_not_disturb"));
	});

	var __assign$bd = (undefined && undefined.__assign) || function () {
	    __assign$bd = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bd.apply(this, arguments);
	};
	var DockFontIcon = React.forwardRef(function DockFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bd({}, props, { ref: ref }), "dock"));
	});

	var __assign$bc = (undefined && undefined.__assign) || function () {
	    __assign$bc = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bc.apply(this, arguments);
	};
	var DomainFontIcon = React.forwardRef(function DomainFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bc({}, props, { ref: ref }), "domain"));
	});

	var __assign$bb = (undefined && undefined.__assign) || function () {
	    __assign$bb = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$bb.apply(this, arguments);
	};
	var DoneAllFontIcon = React.forwardRef(function DoneAllFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$bb({}, props, { ref: ref }), "done_all"));
	});

	var __assign$ba = (undefined && undefined.__assign) || function () {
	    __assign$ba = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ba.apply(this, arguments);
	};
	var DoneFontIcon = React.forwardRef(function DoneFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ba({}, props, { ref: ref }), "done"));
	});

	var __assign$b9 = (undefined && undefined.__assign) || function () {
	    __assign$b9 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$b9.apply(this, arguments);
	};
	var DonutLargeFontIcon = React.forwardRef(function DonutLargeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$b9({}, props, { ref: ref }), "donut_large"));
	});

	var __assign$b8 = (undefined && undefined.__assign) || function () {
	    __assign$b8 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$b8.apply(this, arguments);
	};
	var DonutSmallFontIcon = React.forwardRef(function DonutSmallFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$b8({}, props, { ref: ref }), "donut_small"));
	});

	var __assign$b7 = (undefined && undefined.__assign) || function () {
	    __assign$b7 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$b7.apply(this, arguments);
	};
	var DraftsFontIcon = React.forwardRef(function DraftsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$b7({}, props, { ref: ref }), "drafts"));
	});

	var __assign$b6 = (undefined && undefined.__assign) || function () {
	    __assign$b6 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$b6.apply(this, arguments);
	};
	var DragHandleFontIcon = React.forwardRef(function DragHandleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$b6({}, props, { ref: ref }), "drag_handle"));
	});

	var __assign$b5 = (undefined && undefined.__assign) || function () {
	    __assign$b5 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$b5.apply(this, arguments);
	};
	var DriveEtaFontIcon = React.forwardRef(function DriveEtaFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$b5({}, props, { ref: ref }), "drive_eta"));
	});

	var __assign$b4 = (undefined && undefined.__assign) || function () {
	    __assign$b4 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$b4.apply(this, arguments);
	};
	var DvrFontIcon = React.forwardRef(function DvrFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$b4({}, props, { ref: ref }), "dvr"));
	});

	var __assign$b3 = (undefined && undefined.__assign) || function () {
	    __assign$b3 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$b3.apply(this, arguments);
	};
	var EditLocationFontIcon = React.forwardRef(function EditLocationFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$b3({}, props, { ref: ref }), "edit_location"));
	});

	var __assign$b2 = (undefined && undefined.__assign) || function () {
	    __assign$b2 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$b2.apply(this, arguments);
	};
	var EditFontIcon = React.forwardRef(function EditFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$b2({}, props, { ref: ref }), "edit"));
	});

	var __assign$b1 = (undefined && undefined.__assign) || function () {
	    __assign$b1 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$b1.apply(this, arguments);
	};
	var EjectFontIcon = React.forwardRef(function EjectFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$b1({}, props, { ref: ref }), "eject"));
	});

	var __assign$b0 = (undefined && undefined.__assign) || function () {
	    __assign$b0 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$b0.apply(this, arguments);
	};
	var EmailFontIcon = React.forwardRef(function EmailFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$b0({}, props, { ref: ref }), "email"));
	});

	var __assign$a$ = (undefined && undefined.__assign) || function () {
	    __assign$a$ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$a$.apply(this, arguments);
	};
	var EnhancedEncryptionFontIcon = React.forwardRef(function EnhancedEncryptionFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$a$({}, props, { ref: ref }), "enhanced_encryption"));
	});

	var __assign$a_ = (undefined && undefined.__assign) || function () {
	    __assign$a_ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$a_.apply(this, arguments);
	};
	var EqualizerFontIcon = React.forwardRef(function EqualizerFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$a_({}, props, { ref: ref }), "equalizer"));
	});

	var __assign$aZ = (undefined && undefined.__assign) || function () {
	    __assign$aZ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aZ.apply(this, arguments);
	};
	var ErrorOutlineFontIcon = React.forwardRef(function ErrorOutlineFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aZ({}, props, { ref: ref }), "error_outline"));
	});

	var __assign$aY = (undefined && undefined.__assign) || function () {
	    __assign$aY = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aY.apply(this, arguments);
	};
	var ErrorFontIcon = React.forwardRef(function ErrorFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aY({}, props, { ref: ref }), "error"));
	});

	var __assign$aX = (undefined && undefined.__assign) || function () {
	    __assign$aX = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aX.apply(this, arguments);
	};
	var EuroSymbolFontIcon = React.forwardRef(function EuroSymbolFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aX({}, props, { ref: ref }), "euro_symbol"));
	});

	var __assign$aW = (undefined && undefined.__assign) || function () {
	    __assign$aW = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aW.apply(this, arguments);
	};
	var EvStationFontIcon = React.forwardRef(function EvStationFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aW({}, props, { ref: ref }), "ev_station"));
	});

	var __assign$aV = (undefined && undefined.__assign) || function () {
	    __assign$aV = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aV.apply(this, arguments);
	};
	var EventAvailableFontIcon = React.forwardRef(function EventAvailableFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aV({}, props, { ref: ref }), "event_available"));
	});

	var __assign$aU = (undefined && undefined.__assign) || function () {
	    __assign$aU = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aU.apply(this, arguments);
	};
	var EventBusyFontIcon = React.forwardRef(function EventBusyFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aU({}, props, { ref: ref }), "event_busy"));
	});

	var __assign$aT = (undefined && undefined.__assign) || function () {
	    __assign$aT = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aT.apply(this, arguments);
	};
	var EventNoteFontIcon = React.forwardRef(function EventNoteFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aT({}, props, { ref: ref }), "event_note"));
	});

	var __assign$aS = (undefined && undefined.__assign) || function () {
	    __assign$aS = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aS.apply(this, arguments);
	};
	var EventSeatFontIcon = React.forwardRef(function EventSeatFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aS({}, props, { ref: ref }), "event_seat"));
	});

	var __assign$aR = (undefined && undefined.__assign) || function () {
	    __assign$aR = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aR.apply(this, arguments);
	};
	var EventFontIcon = React.forwardRef(function EventFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aR({}, props, { ref: ref }), "event"));
	});

	var __assign$aQ = (undefined && undefined.__assign) || function () {
	    __assign$aQ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aQ.apply(this, arguments);
	};
	var ExitToAppFontIcon = React.forwardRef(function ExitToAppFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aQ({}, props, { ref: ref }), "exit_to_app"));
	});

	var __assign$aP = (undefined && undefined.__assign) || function () {
	    __assign$aP = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aP.apply(this, arguments);
	};
	var ExpandLessFontIcon = React.forwardRef(function ExpandLessFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aP({}, props, { ref: ref }), "expand_less"));
	});

	var __assign$aO = (undefined && undefined.__assign) || function () {
	    __assign$aO = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aO.apply(this, arguments);
	};
	var ExpandMoreFontIcon = React.forwardRef(function ExpandMoreFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aO({}, props, { ref: ref }), "expand_more"));
	});

	var __assign$aN = (undefined && undefined.__assign) || function () {
	    __assign$aN = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aN.apply(this, arguments);
	};
	var ExplicitFontIcon = React.forwardRef(function ExplicitFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aN({}, props, { ref: ref }), "explicit"));
	});

	var __assign$aM = (undefined && undefined.__assign) || function () {
	    __assign$aM = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aM.apply(this, arguments);
	};
	var ExploreFontIcon = React.forwardRef(function ExploreFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aM({}, props, { ref: ref }), "explore"));
	});

	var __assign$aL = (undefined && undefined.__assign) || function () {
	    __assign$aL = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aL.apply(this, arguments);
	};
	var ExposureNeg1FontIcon = React.forwardRef(function ExposureNeg1FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aL({}, props, { ref: ref }), "exposure_neg_1"));
	});

	var __assign$aK = (undefined && undefined.__assign) || function () {
	    __assign$aK = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aK.apply(this, arguments);
	};
	var ExposureNeg2FontIcon = React.forwardRef(function ExposureNeg2FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aK({}, props, { ref: ref }), "exposure_neg_2"));
	});

	var __assign$aJ = (undefined && undefined.__assign) || function () {
	    __assign$aJ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aJ.apply(this, arguments);
	};
	var ExposurePlus1FontIcon = React.forwardRef(function ExposurePlus1FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aJ({}, props, { ref: ref }), "exposure_plus_1"));
	});

	var __assign$aI = (undefined && undefined.__assign) || function () {
	    __assign$aI = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aI.apply(this, arguments);
	};
	var ExposurePlus2FontIcon = React.forwardRef(function ExposurePlus2FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aI({}, props, { ref: ref }), "exposure_plus_2"));
	});

	var __assign$aH = (undefined && undefined.__assign) || function () {
	    __assign$aH = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aH.apply(this, arguments);
	};
	var ExposureZeroFontIcon = React.forwardRef(function ExposureZeroFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aH({}, props, { ref: ref }), "exposure_zero"));
	});

	var __assign$aG = (undefined && undefined.__assign) || function () {
	    __assign$aG = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aG.apply(this, arguments);
	};
	var ExposureFontIcon = React.forwardRef(function ExposureFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aG({}, props, { ref: ref }), "exposure"));
	});

	var __assign$aF = (undefined && undefined.__assign) || function () {
	    __assign$aF = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aF.apply(this, arguments);
	};
	var ExtensionFontIcon = React.forwardRef(function ExtensionFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aF({}, props, { ref: ref }), "extension"));
	});

	var __assign$aE = (undefined && undefined.__assign) || function () {
	    __assign$aE = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aE.apply(this, arguments);
	};
	var FaceFontIcon = React.forwardRef(function FaceFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aE({}, props, { ref: ref }), "face"));
	});

	var __assign$aD = (undefined && undefined.__assign) || function () {
	    __assign$aD = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aD.apply(this, arguments);
	};
	var FastForwardFontIcon = React.forwardRef(function FastForwardFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aD({}, props, { ref: ref }), "fast_forward"));
	});

	var __assign$aC = (undefined && undefined.__assign) || function () {
	    __assign$aC = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aC.apply(this, arguments);
	};
	var FastRewindFontIcon = React.forwardRef(function FastRewindFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aC({}, props, { ref: ref }), "fast_rewind"));
	});

	var __assign$aB = (undefined && undefined.__assign) || function () {
	    __assign$aB = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aB.apply(this, arguments);
	};
	var FavoriteBorderFontIcon = React.forwardRef(function FavoriteBorderFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aB({}, props, { ref: ref }), "favorite_border"));
	});

	var __assign$aA = (undefined && undefined.__assign) || function () {
	    __assign$aA = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aA.apply(this, arguments);
	};
	var FavoriteFontIcon = React.forwardRef(function FavoriteFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aA({}, props, { ref: ref }), "favorite"));
	});

	var __assign$az = (undefined && undefined.__assign) || function () {
	    __assign$az = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$az.apply(this, arguments);
	};
	var FeaturedPlayListFontIcon = React.forwardRef(function FeaturedPlayListFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$az({}, props, { ref: ref }), "featured_play_list"));
	});

	var __assign$ay = (undefined && undefined.__assign) || function () {
	    __assign$ay = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ay.apply(this, arguments);
	};
	var FeaturedVideoFontIcon = React.forwardRef(function FeaturedVideoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ay({}, props, { ref: ref }), "featured_video"));
	});

	var __assign$ax = (undefined && undefined.__assign) || function () {
	    __assign$ax = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ax.apply(this, arguments);
	};
	var FeedbackFontIcon = React.forwardRef(function FeedbackFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ax({}, props, { ref: ref }), "feedback"));
	});

	var __assign$aw = (undefined && undefined.__assign) || function () {
	    __assign$aw = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aw.apply(this, arguments);
	};
	var FiberDvrFontIcon = React.forwardRef(function FiberDvrFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aw({}, props, { ref: ref }), "fiber_dvr"));
	});

	var __assign$av = (undefined && undefined.__assign) || function () {
	    __assign$av = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$av.apply(this, arguments);
	};
	var FiberManualRecordFontIcon = React.forwardRef(function FiberManualRecordFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$av({}, props, { ref: ref }), "fiber_manual_record"));
	});

	var __assign$au = (undefined && undefined.__assign) || function () {
	    __assign$au = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$au.apply(this, arguments);
	};
	var FiberNewFontIcon = React.forwardRef(function FiberNewFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$au({}, props, { ref: ref }), "fiber_new"));
	});

	var __assign$at = (undefined && undefined.__assign) || function () {
	    __assign$at = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$at.apply(this, arguments);
	};
	var FiberPinFontIcon = React.forwardRef(function FiberPinFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$at({}, props, { ref: ref }), "fiber_pin"));
	});

	var __assign$as = (undefined && undefined.__assign) || function () {
	    __assign$as = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$as.apply(this, arguments);
	};
	var FiberSmartRecordFontIcon = React.forwardRef(function FiberSmartRecordFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$as({}, props, { ref: ref }), "fiber_smart_record"));
	});

	var __assign$ar = (undefined && undefined.__assign) || function () {
	    __assign$ar = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ar.apply(this, arguments);
	};
	var FileDownloadFontIcon = React.forwardRef(function FileDownloadFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ar({}, props, { ref: ref }), "file_download"));
	});

	var __assign$aq = (undefined && undefined.__assign) || function () {
	    __assign$aq = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aq.apply(this, arguments);
	};
	var FileUploadFontIcon = React.forwardRef(function FileUploadFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aq({}, props, { ref: ref }), "file_upload"));
	});

	var __assign$ap = (undefined && undefined.__assign) || function () {
	    __assign$ap = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ap.apply(this, arguments);
	};
	var Filter1FontIcon = React.forwardRef(function Filter1FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ap({}, props, { ref: ref }), "filter_1"));
	});

	var __assign$ao = (undefined && undefined.__assign) || function () {
	    __assign$ao = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ao.apply(this, arguments);
	};
	var Filter2FontIcon = React.forwardRef(function Filter2FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ao({}, props, { ref: ref }), "filter_2"));
	});

	var __assign$an = (undefined && undefined.__assign) || function () {
	    __assign$an = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$an.apply(this, arguments);
	};
	var Filter3FontIcon = React.forwardRef(function Filter3FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$an({}, props, { ref: ref }), "filter_3"));
	});

	var __assign$am = (undefined && undefined.__assign) || function () {
	    __assign$am = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$am.apply(this, arguments);
	};
	var Filter4FontIcon = React.forwardRef(function Filter4FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$am({}, props, { ref: ref }), "filter_4"));
	});

	var __assign$al = (undefined && undefined.__assign) || function () {
	    __assign$al = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$al.apply(this, arguments);
	};
	var Filter5FontIcon = React.forwardRef(function Filter5FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$al({}, props, { ref: ref }), "filter_5"));
	});

	var __assign$ak = (undefined && undefined.__assign) || function () {
	    __assign$ak = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ak.apply(this, arguments);
	};
	var Filter6FontIcon = React.forwardRef(function Filter6FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ak({}, props, { ref: ref }), "filter_6"));
	});

	var __assign$aj = (undefined && undefined.__assign) || function () {
	    __assign$aj = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aj.apply(this, arguments);
	};
	var Filter7FontIcon = React.forwardRef(function Filter7FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aj({}, props, { ref: ref }), "filter_7"));
	});

	var __assign$ai = (undefined && undefined.__assign) || function () {
	    __assign$ai = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ai.apply(this, arguments);
	};
	var Filter8FontIcon = React.forwardRef(function Filter8FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ai({}, props, { ref: ref }), "filter_8"));
	});

	var __assign$ah = (undefined && undefined.__assign) || function () {
	    __assign$ah = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ah.apply(this, arguments);
	};
	var Filter9PlusFontIcon = React.forwardRef(function Filter9PlusFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ah({}, props, { ref: ref }), "filter_9_plus"));
	});

	var __assign$ag = (undefined && undefined.__assign) || function () {
	    __assign$ag = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ag.apply(this, arguments);
	};
	var Filter9FontIcon = React.forwardRef(function Filter9FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ag({}, props, { ref: ref }), "filter_9"));
	});

	var __assign$af = (undefined && undefined.__assign) || function () {
	    __assign$af = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$af.apply(this, arguments);
	};
	var FilterBAndWFontIcon = React.forwardRef(function FilterBAndWFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$af({}, props, { ref: ref }), "filter_b_and_w"));
	});

	var __assign$ae = (undefined && undefined.__assign) || function () {
	    __assign$ae = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ae.apply(this, arguments);
	};
	var FilterCenterFocusFontIcon = React.forwardRef(function FilterCenterFocusFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ae({}, props, { ref: ref }), "filter_center_focus"));
	});

	var __assign$ad = (undefined && undefined.__assign) || function () {
	    __assign$ad = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ad.apply(this, arguments);
	};
	var FilterDramaFontIcon = React.forwardRef(function FilterDramaFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ad({}, props, { ref: ref }), "filter_drama"));
	});

	var __assign$ac = (undefined && undefined.__assign) || function () {
	    __assign$ac = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ac.apply(this, arguments);
	};
	var FilterFramesFontIcon = React.forwardRef(function FilterFramesFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ac({}, props, { ref: ref }), "filter_frames"));
	});

	var __assign$ab = (undefined && undefined.__assign) || function () {
	    __assign$ab = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$ab.apply(this, arguments);
	};
	var FilterHdrFontIcon = React.forwardRef(function FilterHdrFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$ab({}, props, { ref: ref }), "filter_hdr"));
	});

	var __assign$aa = (undefined && undefined.__assign) || function () {
	    __assign$aa = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$aa.apply(this, arguments);
	};
	var FilterListFontIcon = React.forwardRef(function FilterListFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$aa({}, props, { ref: ref }), "filter_list"));
	});

	var __assign$a9 = (undefined && undefined.__assign) || function () {
	    __assign$a9 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$a9.apply(this, arguments);
	};
	var FilterNoneFontIcon = React.forwardRef(function FilterNoneFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$a9({}, props, { ref: ref }), "filter_none"));
	});

	var __assign$a8 = (undefined && undefined.__assign) || function () {
	    __assign$a8 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$a8.apply(this, arguments);
	};
	var FilterTiltShiftFontIcon = React.forwardRef(function FilterTiltShiftFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$a8({}, props, { ref: ref }), "filter_tilt_shift"));
	});

	var __assign$a7 = (undefined && undefined.__assign) || function () {
	    __assign$a7 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$a7.apply(this, arguments);
	};
	var FilterVintageFontIcon = React.forwardRef(function FilterVintageFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$a7({}, props, { ref: ref }), "filter_vintage"));
	});

	var __assign$a6 = (undefined && undefined.__assign) || function () {
	    __assign$a6 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$a6.apply(this, arguments);
	};
	var FilterFontIcon = React.forwardRef(function FilterFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$a6({}, props, { ref: ref }), "filter"));
	});

	var __assign$a5 = (undefined && undefined.__assign) || function () {
	    __assign$a5 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$a5.apply(this, arguments);
	};
	var FindInPageFontIcon = React.forwardRef(function FindInPageFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$a5({}, props, { ref: ref }), "find_in_page"));
	});

	var __assign$a4 = (undefined && undefined.__assign) || function () {
	    __assign$a4 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$a4.apply(this, arguments);
	};
	var FindReplaceFontIcon = React.forwardRef(function FindReplaceFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$a4({}, props, { ref: ref }), "find_replace"));
	});

	var __assign$a3 = (undefined && undefined.__assign) || function () {
	    __assign$a3 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$a3.apply(this, arguments);
	};
	var FingerprintFontIcon = React.forwardRef(function FingerprintFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$a3({}, props, { ref: ref }), "fingerprint"));
	});

	var __assign$a2 = (undefined && undefined.__assign) || function () {
	    __assign$a2 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$a2.apply(this, arguments);
	};
	var FirstPageFontIcon = React.forwardRef(function FirstPageFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$a2({}, props, { ref: ref }), "first_page"));
	});

	var __assign$a1 = (undefined && undefined.__assign) || function () {
	    __assign$a1 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$a1.apply(this, arguments);
	};
	var FitnessCenterFontIcon = React.forwardRef(function FitnessCenterFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$a1({}, props, { ref: ref }), "fitness_center"));
	});

	var __assign$a0 = (undefined && undefined.__assign) || function () {
	    __assign$a0 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$a0.apply(this, arguments);
	};
	var FlagFontIcon = React.forwardRef(function FlagFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$a0({}, props, { ref: ref }), "flag"));
	});

	var __assign$9$ = (undefined && undefined.__assign) || function () {
	    __assign$9$ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9$.apply(this, arguments);
	};
	var FlareFontIcon = React.forwardRef(function FlareFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9$({}, props, { ref: ref }), "flare"));
	});

	var __assign$9_ = (undefined && undefined.__assign) || function () {
	    __assign$9_ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9_.apply(this, arguments);
	};
	var FlashAutoFontIcon = React.forwardRef(function FlashAutoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9_({}, props, { ref: ref }), "flash_auto"));
	});

	var __assign$9Z = (undefined && undefined.__assign) || function () {
	    __assign$9Z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9Z.apply(this, arguments);
	};
	var FlashOffFontIcon = React.forwardRef(function FlashOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9Z({}, props, { ref: ref }), "flash_off"));
	});

	var __assign$9Y = (undefined && undefined.__assign) || function () {
	    __assign$9Y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9Y.apply(this, arguments);
	};
	var FlashOnFontIcon = React.forwardRef(function FlashOnFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9Y({}, props, { ref: ref }), "flash_on"));
	});

	var __assign$9X = (undefined && undefined.__assign) || function () {
	    __assign$9X = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9X.apply(this, arguments);
	};
	var FlightLandFontIcon = React.forwardRef(function FlightLandFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9X({}, props, { ref: ref }), "flight_land"));
	});

	var __assign$9W = (undefined && undefined.__assign) || function () {
	    __assign$9W = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9W.apply(this, arguments);
	};
	var FlightTakeoffFontIcon = React.forwardRef(function FlightTakeoffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9W({}, props, { ref: ref }), "flight_takeoff"));
	});

	var __assign$9V = (undefined && undefined.__assign) || function () {
	    __assign$9V = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9V.apply(this, arguments);
	};
	var FlightFontIcon = React.forwardRef(function FlightFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9V({}, props, { ref: ref }), "flight"));
	});

	var __assign$9U = (undefined && undefined.__assign) || function () {
	    __assign$9U = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9U.apply(this, arguments);
	};
	var FlipToBackFontIcon = React.forwardRef(function FlipToBackFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9U({}, props, { ref: ref }), "flip_to_back"));
	});

	var __assign$9T = (undefined && undefined.__assign) || function () {
	    __assign$9T = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9T.apply(this, arguments);
	};
	var FlipToFrontFontIcon = React.forwardRef(function FlipToFrontFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9T({}, props, { ref: ref }), "flip_to_front"));
	});

	var __assign$9S = (undefined && undefined.__assign) || function () {
	    __assign$9S = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9S.apply(this, arguments);
	};
	var FlipFontIcon = React.forwardRef(function FlipFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9S({}, props, { ref: ref }), "flip"));
	});

	var __assign$9R = (undefined && undefined.__assign) || function () {
	    __assign$9R = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9R.apply(this, arguments);
	};
	var FolderOpenFontIcon = React.forwardRef(function FolderOpenFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9R({}, props, { ref: ref }), "folder_open"));
	});

	var __assign$9Q = (undefined && undefined.__assign) || function () {
	    __assign$9Q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9Q.apply(this, arguments);
	};
	var FolderSharedFontIcon = React.forwardRef(function FolderSharedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9Q({}, props, { ref: ref }), "folder_shared"));
	});

	var __assign$9P = (undefined && undefined.__assign) || function () {
	    __assign$9P = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9P.apply(this, arguments);
	};
	var FolderSpecialFontIcon = React.forwardRef(function FolderSpecialFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9P({}, props, { ref: ref }), "folder_special"));
	});

	var __assign$9O = (undefined && undefined.__assign) || function () {
	    __assign$9O = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9O.apply(this, arguments);
	};
	var FolderFontIcon = React.forwardRef(function FolderFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9O({}, props, { ref: ref }), "folder"));
	});

	var __assign$9N = (undefined && undefined.__assign) || function () {
	    __assign$9N = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9N.apply(this, arguments);
	};
	var FontDownloadFontIcon = React.forwardRef(function FontDownloadFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9N({}, props, { ref: ref }), "font_download"));
	});

	var __assign$9M = (undefined && undefined.__assign) || function () {
	    __assign$9M = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9M.apply(this, arguments);
	};
	var FormatAlignCenterFontIcon = React.forwardRef(function FormatAlignCenterFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9M({}, props, { ref: ref }), "format_align_center"));
	});

	var __assign$9L = (undefined && undefined.__assign) || function () {
	    __assign$9L = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9L.apply(this, arguments);
	};
	var FormatAlignJustifyFontIcon = React.forwardRef(function FormatAlignJustifyFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9L({}, props, { ref: ref }), "format_align_justify"));
	});

	var __assign$9K = (undefined && undefined.__assign) || function () {
	    __assign$9K = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9K.apply(this, arguments);
	};
	var FormatAlignLeftFontIcon = React.forwardRef(function FormatAlignLeftFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9K({}, props, { ref: ref }), "format_align_left"));
	});

	var __assign$9J = (undefined && undefined.__assign) || function () {
	    __assign$9J = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9J.apply(this, arguments);
	};
	var FormatAlignRightFontIcon = React.forwardRef(function FormatAlignRightFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9J({}, props, { ref: ref }), "format_align_right"));
	});

	var __assign$9I = (undefined && undefined.__assign) || function () {
	    __assign$9I = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9I.apply(this, arguments);
	};
	var FormatBoldFontIcon = React.forwardRef(function FormatBoldFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9I({}, props, { ref: ref }), "format_bold"));
	});

	var __assign$9H = (undefined && undefined.__assign) || function () {
	    __assign$9H = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9H.apply(this, arguments);
	};
	var FormatClearFontIcon = React.forwardRef(function FormatClearFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9H({}, props, { ref: ref }), "format_clear"));
	});

	var __assign$9G = (undefined && undefined.__assign) || function () {
	    __assign$9G = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9G.apply(this, arguments);
	};
	var FormatColorFillFontIcon = React.forwardRef(function FormatColorFillFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9G({}, props, { ref: ref }), "format_color_fill"));
	});

	var __assign$9F = (undefined && undefined.__assign) || function () {
	    __assign$9F = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9F.apply(this, arguments);
	};
	var FormatColorResetFontIcon = React.forwardRef(function FormatColorResetFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9F({}, props, { ref: ref }), "format_color_reset"));
	});

	var __assign$9E = (undefined && undefined.__assign) || function () {
	    __assign$9E = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9E.apply(this, arguments);
	};
	var FormatColorTextFontIcon = React.forwardRef(function FormatColorTextFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9E({}, props, { ref: ref }), "format_color_text"));
	});

	var __assign$9D = (undefined && undefined.__assign) || function () {
	    __assign$9D = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9D.apply(this, arguments);
	};
	var FormatIndentDecreaseFontIcon = React.forwardRef(function FormatIndentDecreaseFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9D({}, props, { ref: ref }), "format_indent_decrease"));
	});

	var __assign$9C = (undefined && undefined.__assign) || function () {
	    __assign$9C = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9C.apply(this, arguments);
	};
	var FormatIndentIncreaseFontIcon = React.forwardRef(function FormatIndentIncreaseFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9C({}, props, { ref: ref }), "format_indent_increase"));
	});

	var __assign$9B = (undefined && undefined.__assign) || function () {
	    __assign$9B = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9B.apply(this, arguments);
	};
	var FormatItalicFontIcon = React.forwardRef(function FormatItalicFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9B({}, props, { ref: ref }), "format_italic"));
	});

	var __assign$9A = (undefined && undefined.__assign) || function () {
	    __assign$9A = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9A.apply(this, arguments);
	};
	var FormatLineSpacingFontIcon = React.forwardRef(function FormatLineSpacingFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9A({}, props, { ref: ref }), "format_line_spacing"));
	});

	var __assign$9z = (undefined && undefined.__assign) || function () {
	    __assign$9z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9z.apply(this, arguments);
	};
	var FormatListBulletedFontIcon = React.forwardRef(function FormatListBulletedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9z({}, props, { ref: ref }), "format_list_bulleted"));
	});

	var __assign$9y = (undefined && undefined.__assign) || function () {
	    __assign$9y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9y.apply(this, arguments);
	};
	var FormatListNumberedFontIcon = React.forwardRef(function FormatListNumberedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9y({}, props, { ref: ref }), "format_list_numbered"));
	});

	var __assign$9x = (undefined && undefined.__assign) || function () {
	    __assign$9x = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9x.apply(this, arguments);
	};
	var FormatPaintFontIcon = React.forwardRef(function FormatPaintFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9x({}, props, { ref: ref }), "format_paint"));
	});

	var __assign$9w = (undefined && undefined.__assign) || function () {
	    __assign$9w = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9w.apply(this, arguments);
	};
	var FormatQuoteFontIcon = React.forwardRef(function FormatQuoteFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9w({}, props, { ref: ref }), "format_quote"));
	});

	var __assign$9v = (undefined && undefined.__assign) || function () {
	    __assign$9v = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9v.apply(this, arguments);
	};
	var FormatShapesFontIcon = React.forwardRef(function FormatShapesFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9v({}, props, { ref: ref }), "format_shapes"));
	});

	var __assign$9u = (undefined && undefined.__assign) || function () {
	    __assign$9u = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9u.apply(this, arguments);
	};
	var FormatSizeFontIcon = React.forwardRef(function FormatSizeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9u({}, props, { ref: ref }), "format_size"));
	});

	var __assign$9t = (undefined && undefined.__assign) || function () {
	    __assign$9t = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9t.apply(this, arguments);
	};
	var FormatStrikethroughFontIcon = React.forwardRef(function FormatStrikethroughFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9t({}, props, { ref: ref }), "format_strikethrough"));
	});

	var __assign$9s = (undefined && undefined.__assign) || function () {
	    __assign$9s = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9s.apply(this, arguments);
	};
	var FormatTextdirectionLToRFontIcon = React.forwardRef(function FormatTextdirectionLToRFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9s({}, props, { ref: ref }), "format_textdirection_l_to_r"));
	});

	var __assign$9r = (undefined && undefined.__assign) || function () {
	    __assign$9r = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9r.apply(this, arguments);
	};
	var FormatTextdirectionRToLFontIcon = React.forwardRef(function FormatTextdirectionRToLFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9r({}, props, { ref: ref }), "format_textdirection_r_to_l"));
	});

	var __assign$9q = (undefined && undefined.__assign) || function () {
	    __assign$9q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9q.apply(this, arguments);
	};
	var FormatUnderlinedFontIcon = React.forwardRef(function FormatUnderlinedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9q({}, props, { ref: ref }), "format_underlined"));
	});

	var __assign$9p = (undefined && undefined.__assign) || function () {
	    __assign$9p = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9p.apply(this, arguments);
	};
	var ForumFontIcon = React.forwardRef(function ForumFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9p({}, props, { ref: ref }), "forum"));
	});

	var __assign$9o = (undefined && undefined.__assign) || function () {
	    __assign$9o = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9o.apply(this, arguments);
	};
	var Forward10FontIcon = React.forwardRef(function Forward10FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9o({}, props, { ref: ref }), "forward_10"));
	});

	var __assign$9n = (undefined && undefined.__assign) || function () {
	    __assign$9n = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9n.apply(this, arguments);
	};
	var Forward30FontIcon = React.forwardRef(function Forward30FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9n({}, props, { ref: ref }), "forward_30"));
	});

	var __assign$9m = (undefined && undefined.__assign) || function () {
	    __assign$9m = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9m.apply(this, arguments);
	};
	var Forward5FontIcon = React.forwardRef(function Forward5FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9m({}, props, { ref: ref }), "forward_5"));
	});

	var __assign$9l = (undefined && undefined.__assign) || function () {
	    __assign$9l = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9l.apply(this, arguments);
	};
	var ForwardFontIcon = React.forwardRef(function ForwardFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9l({}, props, { ref: ref }), "forward"));
	});

	var __assign$9k = (undefined && undefined.__assign) || function () {
	    __assign$9k = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9k.apply(this, arguments);
	};
	var FreeBreakfastFontIcon = React.forwardRef(function FreeBreakfastFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9k({}, props, { ref: ref }), "free_breakfast"));
	});

	var __assign$9j = (undefined && undefined.__assign) || function () {
	    __assign$9j = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9j.apply(this, arguments);
	};
	var FullscreenExitFontIcon = React.forwardRef(function FullscreenExitFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9j({}, props, { ref: ref }), "fullscreen_exit"));
	});

	var __assign$9i = (undefined && undefined.__assign) || function () {
	    __assign$9i = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9i.apply(this, arguments);
	};
	var FullscreenFontIcon = React.forwardRef(function FullscreenFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9i({}, props, { ref: ref }), "fullscreen"));
	});

	var __assign$9h = (undefined && undefined.__assign) || function () {
	    __assign$9h = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9h.apply(this, arguments);
	};
	var FunctionsFontIcon = React.forwardRef(function FunctionsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9h({}, props, { ref: ref }), "functions"));
	});

	var __assign$9g = (undefined && undefined.__assign) || function () {
	    __assign$9g = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9g.apply(this, arguments);
	};
	var GTranslateFontIcon = React.forwardRef(function GTranslateFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9g({}, props, { ref: ref }), "g_translate"));
	});

	var __assign$9f = (undefined && undefined.__assign) || function () {
	    __assign$9f = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9f.apply(this, arguments);
	};
	var GamepadFontIcon = React.forwardRef(function GamepadFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9f({}, props, { ref: ref }), "gamepad"));
	});

	var __assign$9e = (undefined && undefined.__assign) || function () {
	    __assign$9e = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9e.apply(this, arguments);
	};
	var GamesFontIcon = React.forwardRef(function GamesFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9e({}, props, { ref: ref }), "games"));
	});

	var __assign$9d = (undefined && undefined.__assign) || function () {
	    __assign$9d = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9d.apply(this, arguments);
	};
	var GavelFontIcon = React.forwardRef(function GavelFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9d({}, props, { ref: ref }), "gavel"));
	});

	var __assign$9c = (undefined && undefined.__assign) || function () {
	    __assign$9c = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9c.apply(this, arguments);
	};
	var GestureFontIcon = React.forwardRef(function GestureFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9c({}, props, { ref: ref }), "gesture"));
	});

	var __assign$9b = (undefined && undefined.__assign) || function () {
	    __assign$9b = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9b.apply(this, arguments);
	};
	var GetAppFontIcon = React.forwardRef(function GetAppFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9b({}, props, { ref: ref }), "get_app"));
	});

	var __assign$9a = (undefined && undefined.__assign) || function () {
	    __assign$9a = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9a.apply(this, arguments);
	};
	var GifFontIcon = React.forwardRef(function GifFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$9a({}, props, { ref: ref }), "gif"));
	});

	var __assign$99 = (undefined && undefined.__assign) || function () {
	    __assign$99 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$99.apply(this, arguments);
	};
	var GolfCourseFontIcon = React.forwardRef(function GolfCourseFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$99({}, props, { ref: ref }), "golf_course"));
	});

	var __assign$98 = (undefined && undefined.__assign) || function () {
	    __assign$98 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$98.apply(this, arguments);
	};
	var GpsFixedFontIcon = React.forwardRef(function GpsFixedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$98({}, props, { ref: ref }), "gps_fixed"));
	});

	var __assign$97 = (undefined && undefined.__assign) || function () {
	    __assign$97 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$97.apply(this, arguments);
	};
	var GpsNotFixedFontIcon = React.forwardRef(function GpsNotFixedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$97({}, props, { ref: ref }), "gps_not_fixed"));
	});

	var __assign$96 = (undefined && undefined.__assign) || function () {
	    __assign$96 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$96.apply(this, arguments);
	};
	var GpsOffFontIcon = React.forwardRef(function GpsOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$96({}, props, { ref: ref }), "gps_off"));
	});

	var __assign$95 = (undefined && undefined.__assign) || function () {
	    __assign$95 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$95.apply(this, arguments);
	};
	var GradeFontIcon = React.forwardRef(function GradeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$95({}, props, { ref: ref }), "grade"));
	});

	var __assign$94 = (undefined && undefined.__assign) || function () {
	    __assign$94 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$94.apply(this, arguments);
	};
	var GradientFontIcon = React.forwardRef(function GradientFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$94({}, props, { ref: ref }), "gradient"));
	});

	var __assign$93 = (undefined && undefined.__assign) || function () {
	    __assign$93 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$93.apply(this, arguments);
	};
	var GrainFontIcon = React.forwardRef(function GrainFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$93({}, props, { ref: ref }), "grain"));
	});

	var __assign$92 = (undefined && undefined.__assign) || function () {
	    __assign$92 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$92.apply(this, arguments);
	};
	var GraphicEqFontIcon = React.forwardRef(function GraphicEqFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$92({}, props, { ref: ref }), "graphic_eq"));
	});

	var __assign$91 = (undefined && undefined.__assign) || function () {
	    __assign$91 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$91.apply(this, arguments);
	};
	var GridOffFontIcon = React.forwardRef(function GridOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$91({}, props, { ref: ref }), "grid_off"));
	});

	var __assign$90 = (undefined && undefined.__assign) || function () {
	    __assign$90 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$90.apply(this, arguments);
	};
	var GridOnFontIcon = React.forwardRef(function GridOnFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$90({}, props, { ref: ref }), "grid_on"));
	});

	var __assign$8$ = (undefined && undefined.__assign) || function () {
	    __assign$8$ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8$.apply(this, arguments);
	};
	var GroupAddFontIcon = React.forwardRef(function GroupAddFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8$({}, props, { ref: ref }), "group_add"));
	});

	var __assign$8_ = (undefined && undefined.__assign) || function () {
	    __assign$8_ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8_.apply(this, arguments);
	};
	var GroupWorkFontIcon = React.forwardRef(function GroupWorkFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8_({}, props, { ref: ref }), "group_work"));
	});

	var __assign$8Z = (undefined && undefined.__assign) || function () {
	    __assign$8Z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8Z.apply(this, arguments);
	};
	var GroupFontIcon = React.forwardRef(function GroupFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8Z({}, props, { ref: ref }), "group"));
	});

	var __assign$8Y = (undefined && undefined.__assign) || function () {
	    __assign$8Y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8Y.apply(this, arguments);
	};
	var HdFontIcon = React.forwardRef(function HdFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8Y({}, props, { ref: ref }), "hd"));
	});

	var __assign$8X = (undefined && undefined.__assign) || function () {
	    __assign$8X = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8X.apply(this, arguments);
	};
	var HdrOffFontIcon = React.forwardRef(function HdrOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8X({}, props, { ref: ref }), "hdr_off"));
	});

	var __assign$8W = (undefined && undefined.__assign) || function () {
	    __assign$8W = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8W.apply(this, arguments);
	};
	var HdrOnFontIcon = React.forwardRef(function HdrOnFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8W({}, props, { ref: ref }), "hdr_on"));
	});

	var __assign$8V = (undefined && undefined.__assign) || function () {
	    __assign$8V = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8V.apply(this, arguments);
	};
	var HdrStrongFontIcon = React.forwardRef(function HdrStrongFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8V({}, props, { ref: ref }), "hdr_strong"));
	});

	var __assign$8U = (undefined && undefined.__assign) || function () {
	    __assign$8U = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8U.apply(this, arguments);
	};
	var HdrWeakFontIcon = React.forwardRef(function HdrWeakFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8U({}, props, { ref: ref }), "hdr_weak"));
	});

	var __assign$8T = (undefined && undefined.__assign) || function () {
	    __assign$8T = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8T.apply(this, arguments);
	};
	var HeadsetMicFontIcon = React.forwardRef(function HeadsetMicFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8T({}, props, { ref: ref }), "headset_mic"));
	});

	var __assign$8S = (undefined && undefined.__assign) || function () {
	    __assign$8S = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8S.apply(this, arguments);
	};
	var HeadsetFontIcon = React.forwardRef(function HeadsetFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8S({}, props, { ref: ref }), "headset"));
	});

	var __assign$8R = (undefined && undefined.__assign) || function () {
	    __assign$8R = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8R.apply(this, arguments);
	};
	var HealingFontIcon = React.forwardRef(function HealingFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8R({}, props, { ref: ref }), "healing"));
	});

	var __assign$8Q = (undefined && undefined.__assign) || function () {
	    __assign$8Q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8Q.apply(this, arguments);
	};
	var HearingFontIcon = React.forwardRef(function HearingFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8Q({}, props, { ref: ref }), "hearing"));
	});

	var __assign$8P = (undefined && undefined.__assign) || function () {
	    __assign$8P = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8P.apply(this, arguments);
	};
	var HelpOutlineFontIcon = React.forwardRef(function HelpOutlineFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8P({}, props, { ref: ref }), "help_outline"));
	});

	var __assign$8O = (undefined && undefined.__assign) || function () {
	    __assign$8O = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8O.apply(this, arguments);
	};
	var HelpFontIcon = React.forwardRef(function HelpFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8O({}, props, { ref: ref }), "help"));
	});

	var __assign$8N = (undefined && undefined.__assign) || function () {
	    __assign$8N = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8N.apply(this, arguments);
	};
	var HighQualityFontIcon = React.forwardRef(function HighQualityFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8N({}, props, { ref: ref }), "high_quality"));
	});

	var __assign$8M = (undefined && undefined.__assign) || function () {
	    __assign$8M = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8M.apply(this, arguments);
	};
	var HighlightOffFontIcon = React.forwardRef(function HighlightOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8M({}, props, { ref: ref }), "highlight_off"));
	});

	var __assign$8L = (undefined && undefined.__assign) || function () {
	    __assign$8L = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8L.apply(this, arguments);
	};
	var HighlightFontIcon = React.forwardRef(function HighlightFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8L({}, props, { ref: ref }), "highlight"));
	});

	var __assign$8K = (undefined && undefined.__assign) || function () {
	    __assign$8K = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8K.apply(this, arguments);
	};
	var HistoryFontIcon = React.forwardRef(function HistoryFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8K({}, props, { ref: ref }), "history"));
	});

	var __assign$8J = (undefined && undefined.__assign) || function () {
	    __assign$8J = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8J.apply(this, arguments);
	};
	var HomeFontIcon = React.forwardRef(function HomeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8J({}, props, { ref: ref }), "home"));
	});

	var __assign$8I = (undefined && undefined.__assign) || function () {
	    __assign$8I = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8I.apply(this, arguments);
	};
	var HotTubFontIcon = React.forwardRef(function HotTubFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8I({}, props, { ref: ref }), "hot_tub"));
	});

	var __assign$8H = (undefined && undefined.__assign) || function () {
	    __assign$8H = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8H.apply(this, arguments);
	};
	var HotelFontIcon = React.forwardRef(function HotelFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8H({}, props, { ref: ref }), "hotel"));
	});

	var __assign$8G = (undefined && undefined.__assign) || function () {
	    __assign$8G = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8G.apply(this, arguments);
	};
	var HourglassEmptyFontIcon = React.forwardRef(function HourglassEmptyFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8G({}, props, { ref: ref }), "hourglass_empty"));
	});

	var __assign$8F = (undefined && undefined.__assign) || function () {
	    __assign$8F = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8F.apply(this, arguments);
	};
	var HourglassFullFontIcon = React.forwardRef(function HourglassFullFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8F({}, props, { ref: ref }), "hourglass_full"));
	});

	var __assign$8E = (undefined && undefined.__assign) || function () {
	    __assign$8E = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8E.apply(this, arguments);
	};
	var HttpFontIcon = React.forwardRef(function HttpFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8E({}, props, { ref: ref }), "http"));
	});

	var __assign$8D = (undefined && undefined.__assign) || function () {
	    __assign$8D = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8D.apply(this, arguments);
	};
	var HttpsFontIcon = React.forwardRef(function HttpsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8D({}, props, { ref: ref }), "https"));
	});

	var __assign$8C = (undefined && undefined.__assign) || function () {
	    __assign$8C = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8C.apply(this, arguments);
	};
	var ImageAspectRatioFontIcon = React.forwardRef(function ImageAspectRatioFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8C({}, props, { ref: ref }), "image_aspect_ratio"));
	});

	var __assign$8B = (undefined && undefined.__assign) || function () {
	    __assign$8B = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8B.apply(this, arguments);
	};
	var ImageFontIcon = React.forwardRef(function ImageFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8B({}, props, { ref: ref }), "image"));
	});

	var __assign$8A = (undefined && undefined.__assign) || function () {
	    __assign$8A = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8A.apply(this, arguments);
	};
	var ImportContactsFontIcon = React.forwardRef(function ImportContactsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8A({}, props, { ref: ref }), "import_contacts"));
	});

	var __assign$8z = (undefined && undefined.__assign) || function () {
	    __assign$8z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8z.apply(this, arguments);
	};
	var ImportExportFontIcon = React.forwardRef(function ImportExportFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8z({}, props, { ref: ref }), "import_export"));
	});

	var __assign$8y = (undefined && undefined.__assign) || function () {
	    __assign$8y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8y.apply(this, arguments);
	};
	var ImportantDevicesFontIcon = React.forwardRef(function ImportantDevicesFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8y({}, props, { ref: ref }), "important_devices"));
	});

	var __assign$8x = (undefined && undefined.__assign) || function () {
	    __assign$8x = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8x.apply(this, arguments);
	};
	var InboxFontIcon = React.forwardRef(function InboxFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8x({}, props, { ref: ref }), "inbox"));
	});

	var __assign$8w = (undefined && undefined.__assign) || function () {
	    __assign$8w = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8w.apply(this, arguments);
	};
	var IndeterminateCheckBoxFontIcon = React.forwardRef(function IndeterminateCheckBoxFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8w({}, props, { ref: ref }), "indeterminate_check_box"));
	});

	var __assign$8v = (undefined && undefined.__assign) || function () {
	    __assign$8v = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8v.apply(this, arguments);
	};
	var InfoOutlineFontIcon = React.forwardRef(function InfoOutlineFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8v({}, props, { ref: ref }), "info_outline"));
	});

	var __assign$8u = (undefined && undefined.__assign) || function () {
	    __assign$8u = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8u.apply(this, arguments);
	};
	var InfoFontIcon = React.forwardRef(function InfoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8u({}, props, { ref: ref }), "info"));
	});

	var __assign$8t = (undefined && undefined.__assign) || function () {
	    __assign$8t = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8t.apply(this, arguments);
	};
	var InputFontIcon = React.forwardRef(function InputFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8t({}, props, { ref: ref }), "input"));
	});

	var __assign$8s = (undefined && undefined.__assign) || function () {
	    __assign$8s = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8s.apply(this, arguments);
	};
	var InsertChartFontIcon = React.forwardRef(function InsertChartFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8s({}, props, { ref: ref }), "insert_chart"));
	});

	var __assign$8r = (undefined && undefined.__assign) || function () {
	    __assign$8r = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8r.apply(this, arguments);
	};
	var InsertCommentFontIcon = React.forwardRef(function InsertCommentFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8r({}, props, { ref: ref }), "insert_comment"));
	});

	var __assign$8q = (undefined && undefined.__assign) || function () {
	    __assign$8q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8q.apply(this, arguments);
	};
	var InsertDriveFileFontIcon = React.forwardRef(function InsertDriveFileFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8q({}, props, { ref: ref }), "insert_drive_file"));
	});

	var __assign$8p = (undefined && undefined.__assign) || function () {
	    __assign$8p = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8p.apply(this, arguments);
	};
	var InsertEmoticonFontIcon = React.forwardRef(function InsertEmoticonFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8p({}, props, { ref: ref }), "insert_emoticon"));
	});

	var __assign$8o = (undefined && undefined.__assign) || function () {
	    __assign$8o = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8o.apply(this, arguments);
	};
	var InsertInvitationFontIcon = React.forwardRef(function InsertInvitationFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8o({}, props, { ref: ref }), "insert_invitation"));
	});

	var __assign$8n = (undefined && undefined.__assign) || function () {
	    __assign$8n = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8n.apply(this, arguments);
	};
	var InsertLinkFontIcon = React.forwardRef(function InsertLinkFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8n({}, props, { ref: ref }), "insert_link"));
	});

	var __assign$8m = (undefined && undefined.__assign) || function () {
	    __assign$8m = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8m.apply(this, arguments);
	};
	var InsertPhotoFontIcon = React.forwardRef(function InsertPhotoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8m({}, props, { ref: ref }), "insert_photo"));
	});

	var __assign$8l = (undefined && undefined.__assign) || function () {
	    __assign$8l = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8l.apply(this, arguments);
	};
	var InvertColorsOffFontIcon = React.forwardRef(function InvertColorsOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8l({}, props, { ref: ref }), "invert_colors_off"));
	});

	var __assign$8k = (undefined && undefined.__assign) || function () {
	    __assign$8k = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8k.apply(this, arguments);
	};
	var InvertColorsFontIcon = React.forwardRef(function InvertColorsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8k({}, props, { ref: ref }), "invert_colors"));
	});

	var __assign$8j = (undefined && undefined.__assign) || function () {
	    __assign$8j = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8j.apply(this, arguments);
	};
	var IsoFontIcon = React.forwardRef(function IsoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8j({}, props, { ref: ref }), "iso"));
	});

	var __assign$8i = (undefined && undefined.__assign) || function () {
	    __assign$8i = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8i.apply(this, arguments);
	};
	var KeyboardArrowDownFontIcon = React.forwardRef(function KeyboardArrowDownFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8i({}, props, { ref: ref }), "keyboard_arrow_down"));
	});

	var __assign$8h = (undefined && undefined.__assign) || function () {
	    __assign$8h = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8h.apply(this, arguments);
	};
	var KeyboardArrowLeftFontIcon = React.forwardRef(function KeyboardArrowLeftFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8h({}, props, { ref: ref }), "keyboard_arrow_left"));
	});

	var __assign$8g = (undefined && undefined.__assign) || function () {
	    __assign$8g = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8g.apply(this, arguments);
	};
	var KeyboardArrowRightFontIcon = React.forwardRef(function KeyboardArrowRightFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8g({}, props, { ref: ref }), "keyboard_arrow_right"));
	});

	var __assign$8f = (undefined && undefined.__assign) || function () {
	    __assign$8f = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8f.apply(this, arguments);
	};
	var KeyboardArrowUpFontIcon = React.forwardRef(function KeyboardArrowUpFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8f({}, props, { ref: ref }), "keyboard_arrow_up"));
	});

	var __assign$8e = (undefined && undefined.__assign) || function () {
	    __assign$8e = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8e.apply(this, arguments);
	};
	var KeyboardBackspaceFontIcon = React.forwardRef(function KeyboardBackspaceFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8e({}, props, { ref: ref }), "keyboard_backspace"));
	});

	var __assign$8d = (undefined && undefined.__assign) || function () {
	    __assign$8d = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8d.apply(this, arguments);
	};
	var KeyboardCapslockFontIcon = React.forwardRef(function KeyboardCapslockFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8d({}, props, { ref: ref }), "keyboard_capslock"));
	});

	var __assign$8c = (undefined && undefined.__assign) || function () {
	    __assign$8c = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8c.apply(this, arguments);
	};
	var KeyboardHideFontIcon = React.forwardRef(function KeyboardHideFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8c({}, props, { ref: ref }), "keyboard_hide"));
	});

	var __assign$8b = (undefined && undefined.__assign) || function () {
	    __assign$8b = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8b.apply(this, arguments);
	};
	var KeyboardReturnFontIcon = React.forwardRef(function KeyboardReturnFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8b({}, props, { ref: ref }), "keyboard_return"));
	});

	var __assign$8a = (undefined && undefined.__assign) || function () {
	    __assign$8a = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8a.apply(this, arguments);
	};
	var KeyboardTabFontIcon = React.forwardRef(function KeyboardTabFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$8a({}, props, { ref: ref }), "keyboard_tab"));
	});

	var __assign$89 = (undefined && undefined.__assign) || function () {
	    __assign$89 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$89.apply(this, arguments);
	};
	var KeyboardVoiceFontIcon = React.forwardRef(function KeyboardVoiceFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$89({}, props, { ref: ref }), "keyboard_voice"));
	});

	var __assign$88 = (undefined && undefined.__assign) || function () {
	    __assign$88 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$88.apply(this, arguments);
	};
	var KeyboardFontIcon = React.forwardRef(function KeyboardFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$88({}, props, { ref: ref }), "keyboard"));
	});

	var __assign$87 = (undefined && undefined.__assign) || function () {
	    __assign$87 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$87.apply(this, arguments);
	};
	var KitchenFontIcon = React.forwardRef(function KitchenFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$87({}, props, { ref: ref }), "kitchen"));
	});

	var __assign$86 = (undefined && undefined.__assign) || function () {
	    __assign$86 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$86.apply(this, arguments);
	};
	var LabelOutlineFontIcon = React.forwardRef(function LabelOutlineFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$86({}, props, { ref: ref }), "label_outline"));
	});

	var __assign$85 = (undefined && undefined.__assign) || function () {
	    __assign$85 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$85.apply(this, arguments);
	};
	var LabelFontIcon = React.forwardRef(function LabelFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$85({}, props, { ref: ref }), "label"));
	});

	var __assign$84 = (undefined && undefined.__assign) || function () {
	    __assign$84 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$84.apply(this, arguments);
	};
	var LandscapeFontIcon = React.forwardRef(function LandscapeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$84({}, props, { ref: ref }), "landscape"));
	});

	var __assign$83 = (undefined && undefined.__assign) || function () {
	    __assign$83 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$83.apply(this, arguments);
	};
	var LanguageFontIcon = React.forwardRef(function LanguageFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$83({}, props, { ref: ref }), "language"));
	});

	var __assign$82 = (undefined && undefined.__assign) || function () {
	    __assign$82 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$82.apply(this, arguments);
	};
	var LaptopChromebookFontIcon = React.forwardRef(function LaptopChromebookFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$82({}, props, { ref: ref }), "laptop_chromebook"));
	});

	var __assign$81 = (undefined && undefined.__assign) || function () {
	    __assign$81 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$81.apply(this, arguments);
	};
	var LaptopMacFontIcon = React.forwardRef(function LaptopMacFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$81({}, props, { ref: ref }), "laptop_mac"));
	});

	var __assign$80 = (undefined && undefined.__assign) || function () {
	    __assign$80 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$80.apply(this, arguments);
	};
	var LaptopWindowsFontIcon = React.forwardRef(function LaptopWindowsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$80({}, props, { ref: ref }), "laptop_windows"));
	});

	var __assign$7$ = (undefined && undefined.__assign) || function () {
	    __assign$7$ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7$.apply(this, arguments);
	};
	var LaptopFontIcon = React.forwardRef(function LaptopFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7$({}, props, { ref: ref }), "laptop"));
	});

	var __assign$7_ = (undefined && undefined.__assign) || function () {
	    __assign$7_ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7_.apply(this, arguments);
	};
	var LastPageFontIcon = React.forwardRef(function LastPageFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7_({}, props, { ref: ref }), "last_page"));
	});

	var __assign$7Z = (undefined && undefined.__assign) || function () {
	    __assign$7Z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7Z.apply(this, arguments);
	};
	var LaunchFontIcon = React.forwardRef(function LaunchFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7Z({}, props, { ref: ref }), "launch"));
	});

	var __assign$7Y = (undefined && undefined.__assign) || function () {
	    __assign$7Y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7Y.apply(this, arguments);
	};
	var LayersClearFontIcon = React.forwardRef(function LayersClearFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7Y({}, props, { ref: ref }), "layers_clear"));
	});

	var __assign$7X = (undefined && undefined.__assign) || function () {
	    __assign$7X = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7X.apply(this, arguments);
	};
	var LayersFontIcon = React.forwardRef(function LayersFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7X({}, props, { ref: ref }), "layers"));
	});

	var __assign$7W = (undefined && undefined.__assign) || function () {
	    __assign$7W = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7W.apply(this, arguments);
	};
	var LeakAddFontIcon = React.forwardRef(function LeakAddFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7W({}, props, { ref: ref }), "leak_add"));
	});

	var __assign$7V = (undefined && undefined.__assign) || function () {
	    __assign$7V = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7V.apply(this, arguments);
	};
	var LeakRemoveFontIcon = React.forwardRef(function LeakRemoveFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7V({}, props, { ref: ref }), "leak_remove"));
	});

	var __assign$7U = (undefined && undefined.__assign) || function () {
	    __assign$7U = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7U.apply(this, arguments);
	};
	var LensFontIcon = React.forwardRef(function LensFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7U({}, props, { ref: ref }), "lens"));
	});

	var __assign$7T = (undefined && undefined.__assign) || function () {
	    __assign$7T = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7T.apply(this, arguments);
	};
	var LibraryAddFontIcon = React.forwardRef(function LibraryAddFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7T({}, props, { ref: ref }), "library_add"));
	});

	var __assign$7S = (undefined && undefined.__assign) || function () {
	    __assign$7S = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7S.apply(this, arguments);
	};
	var LibraryBooksFontIcon = React.forwardRef(function LibraryBooksFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7S({}, props, { ref: ref }), "library_books"));
	});

	var __assign$7R = (undefined && undefined.__assign) || function () {
	    __assign$7R = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7R.apply(this, arguments);
	};
	var LibraryMusicFontIcon = React.forwardRef(function LibraryMusicFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7R({}, props, { ref: ref }), "library_music"));
	});

	var __assign$7Q = (undefined && undefined.__assign) || function () {
	    __assign$7Q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7Q.apply(this, arguments);
	};
	var LightbulbOutlineFontIcon = React.forwardRef(function LightbulbOutlineFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7Q({}, props, { ref: ref }), "lightbulb_outline"));
	});

	var __assign$7P = (undefined && undefined.__assign) || function () {
	    __assign$7P = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7P.apply(this, arguments);
	};
	var LineStyleFontIcon = React.forwardRef(function LineStyleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7P({}, props, { ref: ref }), "line_style"));
	});

	var __assign$7O = (undefined && undefined.__assign) || function () {
	    __assign$7O = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7O.apply(this, arguments);
	};
	var LineWeightFontIcon = React.forwardRef(function LineWeightFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7O({}, props, { ref: ref }), "line_weight"));
	});

	var __assign$7N = (undefined && undefined.__assign) || function () {
	    __assign$7N = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7N.apply(this, arguments);
	};
	var LinearScaleFontIcon = React.forwardRef(function LinearScaleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7N({}, props, { ref: ref }), "linear_scale"));
	});

	var __assign$7M = (undefined && undefined.__assign) || function () {
	    __assign$7M = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7M.apply(this, arguments);
	};
	var LinkFontIcon = React.forwardRef(function LinkFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7M({}, props, { ref: ref }), "link"));
	});

	var __assign$7L = (undefined && undefined.__assign) || function () {
	    __assign$7L = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7L.apply(this, arguments);
	};
	var LinkedCameraFontIcon = React.forwardRef(function LinkedCameraFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7L({}, props, { ref: ref }), "linked_camera"));
	});

	var __assign$7K = (undefined && undefined.__assign) || function () {
	    __assign$7K = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7K.apply(this, arguments);
	};
	var ListFontIcon = React.forwardRef(function ListFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7K({}, props, { ref: ref }), "list"));
	});

	var __assign$7J = (undefined && undefined.__assign) || function () {
	    __assign$7J = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7J.apply(this, arguments);
	};
	var LiveHelpFontIcon = React.forwardRef(function LiveHelpFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7J({}, props, { ref: ref }), "live_help"));
	});

	var __assign$7I = (undefined && undefined.__assign) || function () {
	    __assign$7I = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7I.apply(this, arguments);
	};
	var LiveTvFontIcon = React.forwardRef(function LiveTvFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7I({}, props, { ref: ref }), "live_tv"));
	});

	var __assign$7H = (undefined && undefined.__assign) || function () {
	    __assign$7H = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7H.apply(this, arguments);
	};
	var LocalActivityFontIcon = React.forwardRef(function LocalActivityFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7H({}, props, { ref: ref }), "local_activity"));
	});

	var __assign$7G = (undefined && undefined.__assign) || function () {
	    __assign$7G = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7G.apply(this, arguments);
	};
	var LocalAirportFontIcon = React.forwardRef(function LocalAirportFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7G({}, props, { ref: ref }), "local_airport"));
	});

	var __assign$7F = (undefined && undefined.__assign) || function () {
	    __assign$7F = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7F.apply(this, arguments);
	};
	var LocalAtmFontIcon = React.forwardRef(function LocalAtmFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7F({}, props, { ref: ref }), "local_atm"));
	});

	var __assign$7E = (undefined && undefined.__assign) || function () {
	    __assign$7E = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7E.apply(this, arguments);
	};
	var LocalBarFontIcon = React.forwardRef(function LocalBarFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7E({}, props, { ref: ref }), "local_bar"));
	});

	var __assign$7D = (undefined && undefined.__assign) || function () {
	    __assign$7D = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7D.apply(this, arguments);
	};
	var LocalCafeFontIcon = React.forwardRef(function LocalCafeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7D({}, props, { ref: ref }), "local_cafe"));
	});

	var __assign$7C = (undefined && undefined.__assign) || function () {
	    __assign$7C = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7C.apply(this, arguments);
	};
	var LocalCarWashFontIcon = React.forwardRef(function LocalCarWashFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7C({}, props, { ref: ref }), "local_car_wash"));
	});

	var __assign$7B = (undefined && undefined.__assign) || function () {
	    __assign$7B = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7B.apply(this, arguments);
	};
	var LocalConvenienceStoreFontIcon = React.forwardRef(function LocalConvenienceStoreFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7B({}, props, { ref: ref }), "local_convenience_store"));
	});

	var __assign$7A = (undefined && undefined.__assign) || function () {
	    __assign$7A = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7A.apply(this, arguments);
	};
	var LocalDiningFontIcon = React.forwardRef(function LocalDiningFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7A({}, props, { ref: ref }), "local_dining"));
	});

	var __assign$7z = (undefined && undefined.__assign) || function () {
	    __assign$7z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7z.apply(this, arguments);
	};
	var LocalDrinkFontIcon = React.forwardRef(function LocalDrinkFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7z({}, props, { ref: ref }), "local_drink"));
	});

	var __assign$7y = (undefined && undefined.__assign) || function () {
	    __assign$7y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7y.apply(this, arguments);
	};
	var LocalFloristFontIcon = React.forwardRef(function LocalFloristFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7y({}, props, { ref: ref }), "local_florist"));
	});

	var __assign$7x = (undefined && undefined.__assign) || function () {
	    __assign$7x = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7x.apply(this, arguments);
	};
	var LocalGasStationFontIcon = React.forwardRef(function LocalGasStationFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7x({}, props, { ref: ref }), "local_gas_station"));
	});

	var __assign$7w = (undefined && undefined.__assign) || function () {
	    __assign$7w = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7w.apply(this, arguments);
	};
	var LocalGroceryStoreFontIcon = React.forwardRef(function LocalGroceryStoreFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7w({}, props, { ref: ref }), "local_grocery_store"));
	});

	var __assign$7v = (undefined && undefined.__assign) || function () {
	    __assign$7v = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7v.apply(this, arguments);
	};
	var LocalHospitalFontIcon = React.forwardRef(function LocalHospitalFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7v({}, props, { ref: ref }), "local_hospital"));
	});

	var __assign$7u = (undefined && undefined.__assign) || function () {
	    __assign$7u = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7u.apply(this, arguments);
	};
	var LocalHotelFontIcon = React.forwardRef(function LocalHotelFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7u({}, props, { ref: ref }), "local_hotel"));
	});

	var __assign$7t = (undefined && undefined.__assign) || function () {
	    __assign$7t = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7t.apply(this, arguments);
	};
	var LocalLaundryServiceFontIcon = React.forwardRef(function LocalLaundryServiceFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7t({}, props, { ref: ref }), "local_laundry_service"));
	});

	var __assign$7s = (undefined && undefined.__assign) || function () {
	    __assign$7s = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7s.apply(this, arguments);
	};
	var LocalLibraryFontIcon = React.forwardRef(function LocalLibraryFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7s({}, props, { ref: ref }), "local_library"));
	});

	var __assign$7r = (undefined && undefined.__assign) || function () {
	    __assign$7r = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7r.apply(this, arguments);
	};
	var LocalMallFontIcon = React.forwardRef(function LocalMallFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7r({}, props, { ref: ref }), "local_mall"));
	});

	var __assign$7q = (undefined && undefined.__assign) || function () {
	    __assign$7q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7q.apply(this, arguments);
	};
	var LocalMoviesFontIcon = React.forwardRef(function LocalMoviesFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7q({}, props, { ref: ref }), "local_movies"));
	});

	var __assign$7p = (undefined && undefined.__assign) || function () {
	    __assign$7p = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7p.apply(this, arguments);
	};
	var LocalOfferFontIcon = React.forwardRef(function LocalOfferFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7p({}, props, { ref: ref }), "local_offer"));
	});

	var __assign$7o = (undefined && undefined.__assign) || function () {
	    __assign$7o = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7o.apply(this, arguments);
	};
	var LocalParkingFontIcon = React.forwardRef(function LocalParkingFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7o({}, props, { ref: ref }), "local_parking"));
	});

	var __assign$7n = (undefined && undefined.__assign) || function () {
	    __assign$7n = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7n.apply(this, arguments);
	};
	var LocalPharmacyFontIcon = React.forwardRef(function LocalPharmacyFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7n({}, props, { ref: ref }), "local_pharmacy"));
	});

	var __assign$7m = (undefined && undefined.__assign) || function () {
	    __assign$7m = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7m.apply(this, arguments);
	};
	var LocalPhoneFontIcon = React.forwardRef(function LocalPhoneFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7m({}, props, { ref: ref }), "local_phone"));
	});

	var __assign$7l = (undefined && undefined.__assign) || function () {
	    __assign$7l = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7l.apply(this, arguments);
	};
	var LocalPizzaFontIcon = React.forwardRef(function LocalPizzaFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7l({}, props, { ref: ref }), "local_pizza"));
	});

	var __assign$7k = (undefined && undefined.__assign) || function () {
	    __assign$7k = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7k.apply(this, arguments);
	};
	var LocalPlayFontIcon = React.forwardRef(function LocalPlayFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7k({}, props, { ref: ref }), "local_play"));
	});

	var __assign$7j = (undefined && undefined.__assign) || function () {
	    __assign$7j = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7j.apply(this, arguments);
	};
	var LocalPostOfficeFontIcon = React.forwardRef(function LocalPostOfficeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7j({}, props, { ref: ref }), "local_post_office"));
	});

	var __assign$7i = (undefined && undefined.__assign) || function () {
	    __assign$7i = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7i.apply(this, arguments);
	};
	var LocalPrintshopFontIcon = React.forwardRef(function LocalPrintshopFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7i({}, props, { ref: ref }), "local_printshop"));
	});

	var __assign$7h = (undefined && undefined.__assign) || function () {
	    __assign$7h = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7h.apply(this, arguments);
	};
	var LocalSeeFontIcon = React.forwardRef(function LocalSeeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7h({}, props, { ref: ref }), "local_see"));
	});

	var __assign$7g = (undefined && undefined.__assign) || function () {
	    __assign$7g = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7g.apply(this, arguments);
	};
	var LocalShippingFontIcon = React.forwardRef(function LocalShippingFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7g({}, props, { ref: ref }), "local_shipping"));
	});

	var __assign$7f = (undefined && undefined.__assign) || function () {
	    __assign$7f = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7f.apply(this, arguments);
	};
	var LocalTaxiFontIcon = React.forwardRef(function LocalTaxiFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7f({}, props, { ref: ref }), "local_taxi"));
	});

	var __assign$7e = (undefined && undefined.__assign) || function () {
	    __assign$7e = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7e.apply(this, arguments);
	};
	var LocationCityFontIcon = React.forwardRef(function LocationCityFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7e({}, props, { ref: ref }), "location_city"));
	});

	var __assign$7d = (undefined && undefined.__assign) || function () {
	    __assign$7d = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7d.apply(this, arguments);
	};
	var LocationDisabledFontIcon = React.forwardRef(function LocationDisabledFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7d({}, props, { ref: ref }), "location_disabled"));
	});

	var __assign$7c = (undefined && undefined.__assign) || function () {
	    __assign$7c = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7c.apply(this, arguments);
	};
	var LocationOffFontIcon = React.forwardRef(function LocationOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7c({}, props, { ref: ref }), "location_off"));
	});

	var __assign$7b = (undefined && undefined.__assign) || function () {
	    __assign$7b = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7b.apply(this, arguments);
	};
	var LocationOnFontIcon = React.forwardRef(function LocationOnFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7b({}, props, { ref: ref }), "location_on"));
	});

	var __assign$7a = (undefined && undefined.__assign) || function () {
	    __assign$7a = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7a.apply(this, arguments);
	};
	var LocationSearchingFontIcon = React.forwardRef(function LocationSearchingFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$7a({}, props, { ref: ref }), "location_searching"));
	});

	var __assign$79 = (undefined && undefined.__assign) || function () {
	    __assign$79 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$79.apply(this, arguments);
	};
	var LockOpenFontIcon = React.forwardRef(function LockOpenFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$79({}, props, { ref: ref }), "lock_open"));
	});

	var __assign$78 = (undefined && undefined.__assign) || function () {
	    __assign$78 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$78.apply(this, arguments);
	};
	var LockOutlineFontIcon = React.forwardRef(function LockOutlineFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$78({}, props, { ref: ref }), "lock_outline"));
	});

	var __assign$77 = (undefined && undefined.__assign) || function () {
	    __assign$77 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$77.apply(this, arguments);
	};
	var LockFontIcon = React.forwardRef(function LockFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$77({}, props, { ref: ref }), "lock"));
	});

	var __assign$76 = (undefined && undefined.__assign) || function () {
	    __assign$76 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$76.apply(this, arguments);
	};
	var Looks3FontIcon = React.forwardRef(function Looks3FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$76({}, props, { ref: ref }), "looks_3"));
	});

	var __assign$75 = (undefined && undefined.__assign) || function () {
	    __assign$75 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$75.apply(this, arguments);
	};
	var Looks4FontIcon = React.forwardRef(function Looks4FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$75({}, props, { ref: ref }), "looks_4"));
	});

	var __assign$74 = (undefined && undefined.__assign) || function () {
	    __assign$74 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$74.apply(this, arguments);
	};
	var Looks5FontIcon = React.forwardRef(function Looks5FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$74({}, props, { ref: ref }), "looks_5"));
	});

	var __assign$73 = (undefined && undefined.__assign) || function () {
	    __assign$73 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$73.apply(this, arguments);
	};
	var Looks6FontIcon = React.forwardRef(function Looks6FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$73({}, props, { ref: ref }), "looks_6"));
	});

	var __assign$72 = (undefined && undefined.__assign) || function () {
	    __assign$72 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$72.apply(this, arguments);
	};
	var LooksOneFontIcon = React.forwardRef(function LooksOneFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$72({}, props, { ref: ref }), "looks_one"));
	});

	var __assign$71 = (undefined && undefined.__assign) || function () {
	    __assign$71 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$71.apply(this, arguments);
	};
	var LooksTwoFontIcon = React.forwardRef(function LooksTwoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$71({}, props, { ref: ref }), "looks_two"));
	});

	var __assign$70 = (undefined && undefined.__assign) || function () {
	    __assign$70 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$70.apply(this, arguments);
	};
	var LooksFontIcon = React.forwardRef(function LooksFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$70({}, props, { ref: ref }), "looks"));
	});

	var __assign$6$ = (undefined && undefined.__assign) || function () {
	    __assign$6$ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6$.apply(this, arguments);
	};
	var LoopFontIcon = React.forwardRef(function LoopFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6$({}, props, { ref: ref }), "loop"));
	});

	var __assign$6_ = (undefined && undefined.__assign) || function () {
	    __assign$6_ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6_.apply(this, arguments);
	};
	var LoupeFontIcon = React.forwardRef(function LoupeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6_({}, props, { ref: ref }), "loupe"));
	});

	var __assign$6Z = (undefined && undefined.__assign) || function () {
	    __assign$6Z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6Z.apply(this, arguments);
	};
	var LowPriorityFontIcon = React.forwardRef(function LowPriorityFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6Z({}, props, { ref: ref }), "low_priority"));
	});

	var __assign$6Y = (undefined && undefined.__assign) || function () {
	    __assign$6Y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6Y.apply(this, arguments);
	};
	var LoyaltyFontIcon = React.forwardRef(function LoyaltyFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6Y({}, props, { ref: ref }), "loyalty"));
	});

	var __assign$6X = (undefined && undefined.__assign) || function () {
	    __assign$6X = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6X.apply(this, arguments);
	};
	var MailOutlineFontIcon = React.forwardRef(function MailOutlineFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6X({}, props, { ref: ref }), "mail_outline"));
	});

	var __assign$6W = (undefined && undefined.__assign) || function () {
	    __assign$6W = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6W.apply(this, arguments);
	};
	var MailFontIcon = React.forwardRef(function MailFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6W({}, props, { ref: ref }), "mail"));
	});

	var __assign$6V = (undefined && undefined.__assign) || function () {
	    __assign$6V = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6V.apply(this, arguments);
	};
	var MapFontIcon = React.forwardRef(function MapFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6V({}, props, { ref: ref }), "map"));
	});

	var __assign$6U = (undefined && undefined.__assign) || function () {
	    __assign$6U = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6U.apply(this, arguments);
	};
	var MarkunreadMailboxFontIcon = React.forwardRef(function MarkunreadMailboxFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6U({}, props, { ref: ref }), "markunread_mailbox"));
	});

	var __assign$6T = (undefined && undefined.__assign) || function () {
	    __assign$6T = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6T.apply(this, arguments);
	};
	var MarkunreadFontIcon = React.forwardRef(function MarkunreadFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6T({}, props, { ref: ref }), "markunread"));
	});

	var __assign$6S = (undefined && undefined.__assign) || function () {
	    __assign$6S = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6S.apply(this, arguments);
	};
	var MemoryFontIcon = React.forwardRef(function MemoryFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6S({}, props, { ref: ref }), "memory"));
	});

	var __assign$6R = (undefined && undefined.__assign) || function () {
	    __assign$6R = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6R.apply(this, arguments);
	};
	var MenuFontIcon = React.forwardRef(function MenuFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6R({}, props, { ref: ref }), "menu"));
	});

	var __assign$6Q = (undefined && undefined.__assign) || function () {
	    __assign$6Q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6Q.apply(this, arguments);
	};
	var MergeTypeFontIcon = React.forwardRef(function MergeTypeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6Q({}, props, { ref: ref }), "merge_type"));
	});

	var __assign$6P = (undefined && undefined.__assign) || function () {
	    __assign$6P = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6P.apply(this, arguments);
	};
	var MessageFontIcon = React.forwardRef(function MessageFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6P({}, props, { ref: ref }), "message"));
	});

	var __assign$6O = (undefined && undefined.__assign) || function () {
	    __assign$6O = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6O.apply(this, arguments);
	};
	var MicNoneFontIcon = React.forwardRef(function MicNoneFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6O({}, props, { ref: ref }), "mic_none"));
	});

	var __assign$6N = (undefined && undefined.__assign) || function () {
	    __assign$6N = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6N.apply(this, arguments);
	};
	var MicOffFontIcon = React.forwardRef(function MicOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6N({}, props, { ref: ref }), "mic_off"));
	});

	var __assign$6M = (undefined && undefined.__assign) || function () {
	    __assign$6M = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6M.apply(this, arguments);
	};
	var MicFontIcon = React.forwardRef(function MicFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6M({}, props, { ref: ref }), "mic"));
	});

	var __assign$6L = (undefined && undefined.__assign) || function () {
	    __assign$6L = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6L.apply(this, arguments);
	};
	var MmsFontIcon = React.forwardRef(function MmsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6L({}, props, { ref: ref }), "mms"));
	});

	var __assign$6K = (undefined && undefined.__assign) || function () {
	    __assign$6K = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6K.apply(this, arguments);
	};
	var ModeCommentFontIcon = React.forwardRef(function ModeCommentFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6K({}, props, { ref: ref }), "mode_comment"));
	});

	var __assign$6J = (undefined && undefined.__assign) || function () {
	    __assign$6J = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6J.apply(this, arguments);
	};
	var ModeEditFontIcon = React.forwardRef(function ModeEditFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6J({}, props, { ref: ref }), "mode_edit"));
	});

	var __assign$6I = (undefined && undefined.__assign) || function () {
	    __assign$6I = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6I.apply(this, arguments);
	};
	var MonetizationOnFontIcon = React.forwardRef(function MonetizationOnFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6I({}, props, { ref: ref }), "monetization_on"));
	});

	var __assign$6H = (undefined && undefined.__assign) || function () {
	    __assign$6H = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6H.apply(this, arguments);
	};
	var MoneyOffFontIcon = React.forwardRef(function MoneyOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6H({}, props, { ref: ref }), "money_off"));
	});

	var __assign$6G = (undefined && undefined.__assign) || function () {
	    __assign$6G = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6G.apply(this, arguments);
	};
	var MonochromePhotosFontIcon = React.forwardRef(function MonochromePhotosFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6G({}, props, { ref: ref }), "monochrome_photos"));
	});

	var __assign$6F = (undefined && undefined.__assign) || function () {
	    __assign$6F = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6F.apply(this, arguments);
	};
	var MoodBadFontIcon = React.forwardRef(function MoodBadFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6F({}, props, { ref: ref }), "mood_bad"));
	});

	var __assign$6E = (undefined && undefined.__assign) || function () {
	    __assign$6E = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6E.apply(this, arguments);
	};
	var MoodFontIcon = React.forwardRef(function MoodFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6E({}, props, { ref: ref }), "mood"));
	});

	var __assign$6D = (undefined && undefined.__assign) || function () {
	    __assign$6D = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6D.apply(this, arguments);
	};
	var MoreHorizFontIcon = React.forwardRef(function MoreHorizFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6D({}, props, { ref: ref }), "more_horiz"));
	});

	var __assign$6C = (undefined && undefined.__assign) || function () {
	    __assign$6C = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6C.apply(this, arguments);
	};
	var MoreVertFontIcon = React.forwardRef(function MoreVertFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6C({}, props, { ref: ref }), "more_vert"));
	});

	var __assign$6B = (undefined && undefined.__assign) || function () {
	    __assign$6B = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6B.apply(this, arguments);
	};
	var MoreFontIcon = React.forwardRef(function MoreFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6B({}, props, { ref: ref }), "more"));
	});

	var __assign$6A = (undefined && undefined.__assign) || function () {
	    __assign$6A = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6A.apply(this, arguments);
	};
	var MotorcycleFontIcon = React.forwardRef(function MotorcycleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6A({}, props, { ref: ref }), "motorcycle"));
	});

	var __assign$6z = (undefined && undefined.__assign) || function () {
	    __assign$6z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6z.apply(this, arguments);
	};
	var MouseFontIcon = React.forwardRef(function MouseFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6z({}, props, { ref: ref }), "mouse"));
	});

	var __assign$6y = (undefined && undefined.__assign) || function () {
	    __assign$6y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6y.apply(this, arguments);
	};
	var MoveToInboxFontIcon = React.forwardRef(function MoveToInboxFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6y({}, props, { ref: ref }), "move_to_inbox"));
	});

	var __assign$6x = (undefined && undefined.__assign) || function () {
	    __assign$6x = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6x.apply(this, arguments);
	};
	var MovieCreationFontIcon = React.forwardRef(function MovieCreationFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6x({}, props, { ref: ref }), "movie_creation"));
	});

	var __assign$6w = (undefined && undefined.__assign) || function () {
	    __assign$6w = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6w.apply(this, arguments);
	};
	var MovieFilterFontIcon = React.forwardRef(function MovieFilterFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6w({}, props, { ref: ref }), "movie_filter"));
	});

	var __assign$6v = (undefined && undefined.__assign) || function () {
	    __assign$6v = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6v.apply(this, arguments);
	};
	var MovieFontIcon = React.forwardRef(function MovieFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6v({}, props, { ref: ref }), "movie"));
	});

	var __assign$6u = (undefined && undefined.__assign) || function () {
	    __assign$6u = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6u.apply(this, arguments);
	};
	var MultilineChartFontIcon = React.forwardRef(function MultilineChartFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6u({}, props, { ref: ref }), "multiline_chart"));
	});

	var __assign$6t = (undefined && undefined.__assign) || function () {
	    __assign$6t = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6t.apply(this, arguments);
	};
	var MusicNoteFontIcon = React.forwardRef(function MusicNoteFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6t({}, props, { ref: ref }), "music_note"));
	});

	var __assign$6s = (undefined && undefined.__assign) || function () {
	    __assign$6s = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6s.apply(this, arguments);
	};
	var MusicVideoFontIcon = React.forwardRef(function MusicVideoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6s({}, props, { ref: ref }), "music_video"));
	});

	var __assign$6r = (undefined && undefined.__assign) || function () {
	    __assign$6r = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6r.apply(this, arguments);
	};
	var MyLocationFontIcon = React.forwardRef(function MyLocationFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6r({}, props, { ref: ref }), "my_location"));
	});

	var __assign$6q = (undefined && undefined.__assign) || function () {
	    __assign$6q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6q.apply(this, arguments);
	};
	var NaturePeopleFontIcon = React.forwardRef(function NaturePeopleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6q({}, props, { ref: ref }), "nature_people"));
	});

	var __assign$6p = (undefined && undefined.__assign) || function () {
	    __assign$6p = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6p.apply(this, arguments);
	};
	var NatureFontIcon = React.forwardRef(function NatureFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6p({}, props, { ref: ref }), "nature"));
	});

	var __assign$6o = (undefined && undefined.__assign) || function () {
	    __assign$6o = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6o.apply(this, arguments);
	};
	var NavigateBeforeFontIcon = React.forwardRef(function NavigateBeforeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6o({}, props, { ref: ref }), "navigate_before"));
	});

	var __assign$6n = (undefined && undefined.__assign) || function () {
	    __assign$6n = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6n.apply(this, arguments);
	};
	var NavigateNextFontIcon = React.forwardRef(function NavigateNextFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6n({}, props, { ref: ref }), "navigate_next"));
	});

	var __assign$6m = (undefined && undefined.__assign) || function () {
	    __assign$6m = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6m.apply(this, arguments);
	};
	var NavigationFontIcon = React.forwardRef(function NavigationFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6m({}, props, { ref: ref }), "navigation"));
	});

	var __assign$6l = (undefined && undefined.__assign) || function () {
	    __assign$6l = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6l.apply(this, arguments);
	};
	var NearMeFontIcon = React.forwardRef(function NearMeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6l({}, props, { ref: ref }), "near_me"));
	});

	var __assign$6k = (undefined && undefined.__assign) || function () {
	    __assign$6k = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6k.apply(this, arguments);
	};
	var NetworkCellFontIcon = React.forwardRef(function NetworkCellFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6k({}, props, { ref: ref }), "network_cell"));
	});

	var __assign$6j = (undefined && undefined.__assign) || function () {
	    __assign$6j = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6j.apply(this, arguments);
	};
	var NetworkCheckFontIcon = React.forwardRef(function NetworkCheckFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6j({}, props, { ref: ref }), "network_check"));
	});

	var __assign$6i = (undefined && undefined.__assign) || function () {
	    __assign$6i = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6i.apply(this, arguments);
	};
	var NetworkLockedFontIcon = React.forwardRef(function NetworkLockedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6i({}, props, { ref: ref }), "network_locked"));
	});

	var __assign$6h = (undefined && undefined.__assign) || function () {
	    __assign$6h = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6h.apply(this, arguments);
	};
	var NetworkWifiFontIcon = React.forwardRef(function NetworkWifiFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6h({}, props, { ref: ref }), "network_wifi"));
	});

	var __assign$6g = (undefined && undefined.__assign) || function () {
	    __assign$6g = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6g.apply(this, arguments);
	};
	var NewReleasesFontIcon = React.forwardRef(function NewReleasesFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6g({}, props, { ref: ref }), "new_releases"));
	});

	var __assign$6f = (undefined && undefined.__assign) || function () {
	    __assign$6f = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6f.apply(this, arguments);
	};
	var NextWeekFontIcon = React.forwardRef(function NextWeekFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6f({}, props, { ref: ref }), "next_week"));
	});

	var __assign$6e = (undefined && undefined.__assign) || function () {
	    __assign$6e = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6e.apply(this, arguments);
	};
	var NfcFontIcon = React.forwardRef(function NfcFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6e({}, props, { ref: ref }), "nfc"));
	});

	var __assign$6d = (undefined && undefined.__assign) || function () {
	    __assign$6d = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6d.apply(this, arguments);
	};
	var NoEncryptionFontIcon = React.forwardRef(function NoEncryptionFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6d({}, props, { ref: ref }), "no_encryption"));
	});

	var __assign$6c = (undefined && undefined.__assign) || function () {
	    __assign$6c = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6c.apply(this, arguments);
	};
	var NoSimFontIcon = React.forwardRef(function NoSimFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6c({}, props, { ref: ref }), "no_sim"));
	});

	var __assign$6b = (undefined && undefined.__assign) || function () {
	    __assign$6b = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6b.apply(this, arguments);
	};
	var NotInterestedFontIcon = React.forwardRef(function NotInterestedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6b({}, props, { ref: ref }), "not_interested"));
	});

	var __assign$6a = (undefined && undefined.__assign) || function () {
	    __assign$6a = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6a.apply(this, arguments);
	};
	var NoteAddFontIcon = React.forwardRef(function NoteAddFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$6a({}, props, { ref: ref }), "note_add"));
	});

	var __assign$69 = (undefined && undefined.__assign) || function () {
	    __assign$69 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$69.apply(this, arguments);
	};
	var NoteFontIcon = React.forwardRef(function NoteFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$69({}, props, { ref: ref }), "note"));
	});

	var __assign$68 = (undefined && undefined.__assign) || function () {
	    __assign$68 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$68.apply(this, arguments);
	};
	var NotificationsActiveFontIcon = React.forwardRef(function NotificationsActiveFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$68({}, props, { ref: ref }), "notifications_active"));
	});

	var __assign$67 = (undefined && undefined.__assign) || function () {
	    __assign$67 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$67.apply(this, arguments);
	};
	var NotificationsNoneFontIcon = React.forwardRef(function NotificationsNoneFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$67({}, props, { ref: ref }), "notifications_none"));
	});

	var __assign$66 = (undefined && undefined.__assign) || function () {
	    __assign$66 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$66.apply(this, arguments);
	};
	var NotificationsOffFontIcon = React.forwardRef(function NotificationsOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$66({}, props, { ref: ref }), "notifications_off"));
	});

	var __assign$65 = (undefined && undefined.__assign) || function () {
	    __assign$65 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$65.apply(this, arguments);
	};
	var NotificationsPausedFontIcon = React.forwardRef(function NotificationsPausedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$65({}, props, { ref: ref }), "notifications_paused"));
	});

	var __assign$64 = (undefined && undefined.__assign) || function () {
	    __assign$64 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$64.apply(this, arguments);
	};
	var NotificationsFontIcon = React.forwardRef(function NotificationsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$64({}, props, { ref: ref }), "notifications"));
	});

	var __assign$63 = (undefined && undefined.__assign) || function () {
	    __assign$63 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$63.apply(this, arguments);
	};
	var OfflinePinFontIcon = React.forwardRef(function OfflinePinFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$63({}, props, { ref: ref }), "offline_pin"));
	});

	var __assign$62 = (undefined && undefined.__assign) || function () {
	    __assign$62 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$62.apply(this, arguments);
	};
	var OndemandVideoFontIcon = React.forwardRef(function OndemandVideoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$62({}, props, { ref: ref }), "ondemand_video"));
	});

	var __assign$61 = (undefined && undefined.__assign) || function () {
	    __assign$61 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$61.apply(this, arguments);
	};
	var OpacityFontIcon = React.forwardRef(function OpacityFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$61({}, props, { ref: ref }), "opacity"));
	});

	var __assign$60 = (undefined && undefined.__assign) || function () {
	    __assign$60 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$60.apply(this, arguments);
	};
	var OpenInBrowserFontIcon = React.forwardRef(function OpenInBrowserFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$60({}, props, { ref: ref }), "open_in_browser"));
	});

	var __assign$5$ = (undefined && undefined.__assign) || function () {
	    __assign$5$ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5$.apply(this, arguments);
	};
	var OpenInNewFontIcon = React.forwardRef(function OpenInNewFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5$({}, props, { ref: ref }), "open_in_new"));
	});

	var __assign$5_ = (undefined && undefined.__assign) || function () {
	    __assign$5_ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5_.apply(this, arguments);
	};
	var OpenWithFontIcon = React.forwardRef(function OpenWithFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5_({}, props, { ref: ref }), "open_with"));
	});

	var __assign$5Z = (undefined && undefined.__assign) || function () {
	    __assign$5Z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5Z.apply(this, arguments);
	};
	var PagesFontIcon = React.forwardRef(function PagesFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5Z({}, props, { ref: ref }), "pages"));
	});

	var __assign$5Y = (undefined && undefined.__assign) || function () {
	    __assign$5Y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5Y.apply(this, arguments);
	};
	var PageviewFontIcon = React.forwardRef(function PageviewFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5Y({}, props, { ref: ref }), "pageview"));
	});

	var __assign$5X = (undefined && undefined.__assign) || function () {
	    __assign$5X = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5X.apply(this, arguments);
	};
	var PaletteFontIcon = React.forwardRef(function PaletteFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5X({}, props, { ref: ref }), "palette"));
	});

	var __assign$5W = (undefined && undefined.__assign) || function () {
	    __assign$5W = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5W.apply(this, arguments);
	};
	var PanToolFontIcon = React.forwardRef(function PanToolFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5W({}, props, { ref: ref }), "pan_tool"));
	});

	var __assign$5V = (undefined && undefined.__assign) || function () {
	    __assign$5V = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5V.apply(this, arguments);
	};
	var PanoramaFishEyeFontIcon = React.forwardRef(function PanoramaFishEyeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5V({}, props, { ref: ref }), "panorama_fish_eye"));
	});

	var __assign$5U = (undefined && undefined.__assign) || function () {
	    __assign$5U = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5U.apply(this, arguments);
	};
	var PanoramaHorizontalFontIcon = React.forwardRef(function PanoramaHorizontalFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5U({}, props, { ref: ref }), "panorama_horizontal"));
	});

	var __assign$5T = (undefined && undefined.__assign) || function () {
	    __assign$5T = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5T.apply(this, arguments);
	};
	var PanoramaVerticalFontIcon = React.forwardRef(function PanoramaVerticalFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5T({}, props, { ref: ref }), "panorama_vertical"));
	});

	var __assign$5S = (undefined && undefined.__assign) || function () {
	    __assign$5S = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5S.apply(this, arguments);
	};
	var PanoramaWideAngleFontIcon = React.forwardRef(function PanoramaWideAngleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5S({}, props, { ref: ref }), "panorama_wide_angle"));
	});

	var __assign$5R = (undefined && undefined.__assign) || function () {
	    __assign$5R = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5R.apply(this, arguments);
	};
	var PanoramaFontIcon = React.forwardRef(function PanoramaFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5R({}, props, { ref: ref }), "panorama"));
	});

	var __assign$5Q = (undefined && undefined.__assign) || function () {
	    __assign$5Q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5Q.apply(this, arguments);
	};
	var PartyModeFontIcon = React.forwardRef(function PartyModeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5Q({}, props, { ref: ref }), "party_mode"));
	});

	var __assign$5P = (undefined && undefined.__assign) || function () {
	    __assign$5P = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5P.apply(this, arguments);
	};
	var PauseCircleFilledFontIcon = React.forwardRef(function PauseCircleFilledFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5P({}, props, { ref: ref }), "pause_circle_filled"));
	});

	var __assign$5O = (undefined && undefined.__assign) || function () {
	    __assign$5O = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5O.apply(this, arguments);
	};
	var PauseCircleOutlineFontIcon = React.forwardRef(function PauseCircleOutlineFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5O({}, props, { ref: ref }), "pause_circle_outline"));
	});

	var __assign$5N = (undefined && undefined.__assign) || function () {
	    __assign$5N = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5N.apply(this, arguments);
	};
	var PauseFontIcon = React.forwardRef(function PauseFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5N({}, props, { ref: ref }), "pause"));
	});

	var __assign$5M = (undefined && undefined.__assign) || function () {
	    __assign$5M = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5M.apply(this, arguments);
	};
	var PaymentFontIcon = React.forwardRef(function PaymentFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5M({}, props, { ref: ref }), "payment"));
	});

	var __assign$5L = (undefined && undefined.__assign) || function () {
	    __assign$5L = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5L.apply(this, arguments);
	};
	var PeopleOutlineFontIcon = React.forwardRef(function PeopleOutlineFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5L({}, props, { ref: ref }), "people_outline"));
	});

	var __assign$5K = (undefined && undefined.__assign) || function () {
	    __assign$5K = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5K.apply(this, arguments);
	};
	var PeopleFontIcon = React.forwardRef(function PeopleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5K({}, props, { ref: ref }), "people"));
	});

	var __assign$5J = (undefined && undefined.__assign) || function () {
	    __assign$5J = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5J.apply(this, arguments);
	};
	var PermCameraMicFontIcon = React.forwardRef(function PermCameraMicFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5J({}, props, { ref: ref }), "perm_camera_mic"));
	});

	var __assign$5I = (undefined && undefined.__assign) || function () {
	    __assign$5I = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5I.apply(this, arguments);
	};
	var PermContactCalendarFontIcon = React.forwardRef(function PermContactCalendarFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5I({}, props, { ref: ref }), "perm_contact_calendar"));
	});

	var __assign$5H = (undefined && undefined.__assign) || function () {
	    __assign$5H = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5H.apply(this, arguments);
	};
	var PermDataSettingFontIcon = React.forwardRef(function PermDataSettingFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5H({}, props, { ref: ref }), "perm_data_setting"));
	});

	var __assign$5G = (undefined && undefined.__assign) || function () {
	    __assign$5G = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5G.apply(this, arguments);
	};
	var PermDeviceInformationFontIcon = React.forwardRef(function PermDeviceInformationFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5G({}, props, { ref: ref }), "perm_device_information"));
	});

	var __assign$5F = (undefined && undefined.__assign) || function () {
	    __assign$5F = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5F.apply(this, arguments);
	};
	var PermIdentityFontIcon = React.forwardRef(function PermIdentityFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5F({}, props, { ref: ref }), "perm_identity"));
	});

	var __assign$5E = (undefined && undefined.__assign) || function () {
	    __assign$5E = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5E.apply(this, arguments);
	};
	var PermMediaFontIcon = React.forwardRef(function PermMediaFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5E({}, props, { ref: ref }), "perm_media"));
	});

	var __assign$5D = (undefined && undefined.__assign) || function () {
	    __assign$5D = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5D.apply(this, arguments);
	};
	var PermPhoneMsgFontIcon = React.forwardRef(function PermPhoneMsgFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5D({}, props, { ref: ref }), "perm_phone_msg"));
	});

	var __assign$5C = (undefined && undefined.__assign) || function () {
	    __assign$5C = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5C.apply(this, arguments);
	};
	var PermScanWifiFontIcon = React.forwardRef(function PermScanWifiFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5C({}, props, { ref: ref }), "perm_scan_wifi"));
	});

	var __assign$5B = (undefined && undefined.__assign) || function () {
	    __assign$5B = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5B.apply(this, arguments);
	};
	var PersonAddFontIcon = React.forwardRef(function PersonAddFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5B({}, props, { ref: ref }), "person_add"));
	});

	var __assign$5A = (undefined && undefined.__assign) || function () {
	    __assign$5A = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5A.apply(this, arguments);
	};
	var PersonOutlineFontIcon = React.forwardRef(function PersonOutlineFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5A({}, props, { ref: ref }), "person_outline"));
	});

	var __assign$5z = (undefined && undefined.__assign) || function () {
	    __assign$5z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5z.apply(this, arguments);
	};
	var PersonPinCircleFontIcon = React.forwardRef(function PersonPinCircleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5z({}, props, { ref: ref }), "person_pin_circle"));
	});

	var __assign$5y = (undefined && undefined.__assign) || function () {
	    __assign$5y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5y.apply(this, arguments);
	};
	var PersonPinFontIcon = React.forwardRef(function PersonPinFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5y({}, props, { ref: ref }), "person_pin"));
	});

	var __assign$5x = (undefined && undefined.__assign) || function () {
	    __assign$5x = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5x.apply(this, arguments);
	};
	var PersonFontIcon = React.forwardRef(function PersonFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5x({}, props, { ref: ref }), "person"));
	});

	var __assign$5w = (undefined && undefined.__assign) || function () {
	    __assign$5w = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5w.apply(this, arguments);
	};
	var PersonalVideoFontIcon = React.forwardRef(function PersonalVideoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5w({}, props, { ref: ref }), "personal_video"));
	});

	var __assign$5v = (undefined && undefined.__assign) || function () {
	    __assign$5v = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5v.apply(this, arguments);
	};
	var PetsFontIcon = React.forwardRef(function PetsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5v({}, props, { ref: ref }), "pets"));
	});

	var __assign$5u = (undefined && undefined.__assign) || function () {
	    __assign$5u = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5u.apply(this, arguments);
	};
	var PhoneAndroidFontIcon = React.forwardRef(function PhoneAndroidFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5u({}, props, { ref: ref }), "phone_android"));
	});

	var __assign$5t = (undefined && undefined.__assign) || function () {
	    __assign$5t = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5t.apply(this, arguments);
	};
	var PhoneBluetoothSpeakerFontIcon = React.forwardRef(function PhoneBluetoothSpeakerFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5t({}, props, { ref: ref }), "phone_bluetooth_speaker"));
	});

	var __assign$5s = (undefined && undefined.__assign) || function () {
	    __assign$5s = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5s.apply(this, arguments);
	};
	var PhoneForwardedFontIcon = React.forwardRef(function PhoneForwardedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5s({}, props, { ref: ref }), "phone_forwarded"));
	});

	var __assign$5r = (undefined && undefined.__assign) || function () {
	    __assign$5r = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5r.apply(this, arguments);
	};
	var PhoneInTalkFontIcon = React.forwardRef(function PhoneInTalkFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5r({}, props, { ref: ref }), "phone_in_talk"));
	});

	var __assign$5q = (undefined && undefined.__assign) || function () {
	    __assign$5q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5q.apply(this, arguments);
	};
	var PhoneIphoneFontIcon = React.forwardRef(function PhoneIphoneFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5q({}, props, { ref: ref }), "phone_iphone"));
	});

	var __assign$5p = (undefined && undefined.__assign) || function () {
	    __assign$5p = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5p.apply(this, arguments);
	};
	var PhoneLockedFontIcon = React.forwardRef(function PhoneLockedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5p({}, props, { ref: ref }), "phone_locked"));
	});

	var __assign$5o = (undefined && undefined.__assign) || function () {
	    __assign$5o = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5o.apply(this, arguments);
	};
	var PhoneMissedFontIcon = React.forwardRef(function PhoneMissedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5o({}, props, { ref: ref }), "phone_missed"));
	});

	var __assign$5n = (undefined && undefined.__assign) || function () {
	    __assign$5n = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5n.apply(this, arguments);
	};
	var PhonePausedFontIcon = React.forwardRef(function PhonePausedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5n({}, props, { ref: ref }), "phone_paused"));
	});

	var __assign$5m = (undefined && undefined.__assign) || function () {
	    __assign$5m = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5m.apply(this, arguments);
	};
	var PhoneFontIcon = React.forwardRef(function PhoneFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5m({}, props, { ref: ref }), "phone"));
	});

	var __assign$5l = (undefined && undefined.__assign) || function () {
	    __assign$5l = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5l.apply(this, arguments);
	};
	var PhonelinkEraseFontIcon = React.forwardRef(function PhonelinkEraseFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5l({}, props, { ref: ref }), "phonelink_erase"));
	});

	var __assign$5k = (undefined && undefined.__assign) || function () {
	    __assign$5k = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5k.apply(this, arguments);
	};
	var PhonelinkLockFontIcon = React.forwardRef(function PhonelinkLockFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5k({}, props, { ref: ref }), "phonelink_lock"));
	});

	var __assign$5j = (undefined && undefined.__assign) || function () {
	    __assign$5j = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5j.apply(this, arguments);
	};
	var PhonelinkOffFontIcon = React.forwardRef(function PhonelinkOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5j({}, props, { ref: ref }), "phonelink_off"));
	});

	var __assign$5i = (undefined && undefined.__assign) || function () {
	    __assign$5i = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5i.apply(this, arguments);
	};
	var PhonelinkRingFontIcon = React.forwardRef(function PhonelinkRingFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5i({}, props, { ref: ref }), "phonelink_ring"));
	});

	var __assign$5h = (undefined && undefined.__assign) || function () {
	    __assign$5h = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5h.apply(this, arguments);
	};
	var PhonelinkSetupFontIcon = React.forwardRef(function PhonelinkSetupFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5h({}, props, { ref: ref }), "phonelink_setup"));
	});

	var __assign$5g = (undefined && undefined.__assign) || function () {
	    __assign$5g = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5g.apply(this, arguments);
	};
	var PhonelinkFontIcon = React.forwardRef(function PhonelinkFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5g({}, props, { ref: ref }), "phonelink"));
	});

	var __assign$5f = (undefined && undefined.__assign) || function () {
	    __assign$5f = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5f.apply(this, arguments);
	};
	var PhotoAlbumFontIcon = React.forwardRef(function PhotoAlbumFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5f({}, props, { ref: ref }), "photo_album"));
	});

	var __assign$5e = (undefined && undefined.__assign) || function () {
	    __assign$5e = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5e.apply(this, arguments);
	};
	var PhotoCameraFontIcon = React.forwardRef(function PhotoCameraFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5e({}, props, { ref: ref }), "photo_camera"));
	});

	var __assign$5d = (undefined && undefined.__assign) || function () {
	    __assign$5d = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5d.apply(this, arguments);
	};
	var PhotoFilterFontIcon = React.forwardRef(function PhotoFilterFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5d({}, props, { ref: ref }), "photo_filter"));
	});

	var __assign$5c = (undefined && undefined.__assign) || function () {
	    __assign$5c = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5c.apply(this, arguments);
	};
	var PhotoLibraryFontIcon = React.forwardRef(function PhotoLibraryFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5c({}, props, { ref: ref }), "photo_library"));
	});

	var __assign$5b = (undefined && undefined.__assign) || function () {
	    __assign$5b = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5b.apply(this, arguments);
	};
	var PhotoSizeSelectActualFontIcon = React.forwardRef(function PhotoSizeSelectActualFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5b({}, props, { ref: ref }), "photo_size_select_actual"));
	});

	var __assign$5a = (undefined && undefined.__assign) || function () {
	    __assign$5a = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5a.apply(this, arguments);
	};
	var PhotoSizeSelectLargeFontIcon = React.forwardRef(function PhotoSizeSelectLargeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$5a({}, props, { ref: ref }), "photo_size_select_large"));
	});

	var __assign$59 = (undefined && undefined.__assign) || function () {
	    __assign$59 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$59.apply(this, arguments);
	};
	var PhotoSizeSelectSmallFontIcon = React.forwardRef(function PhotoSizeSelectSmallFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$59({}, props, { ref: ref }), "photo_size_select_small"));
	});

	var __assign$58 = (undefined && undefined.__assign) || function () {
	    __assign$58 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$58.apply(this, arguments);
	};
	var PhotoFontIcon = React.forwardRef(function PhotoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$58({}, props, { ref: ref }), "photo"));
	});

	var __assign$57 = (undefined && undefined.__assign) || function () {
	    __assign$57 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$57.apply(this, arguments);
	};
	var PictureAsPdfFontIcon = React.forwardRef(function PictureAsPdfFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$57({}, props, { ref: ref }), "picture_as_pdf"));
	});

	var __assign$56 = (undefined && undefined.__assign) || function () {
	    __assign$56 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$56.apply(this, arguments);
	};
	var PictureInPictureAltFontIcon = React.forwardRef(function PictureInPictureAltFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$56({}, props, { ref: ref }), "picture_in_picture_alt"));
	});

	var __assign$55 = (undefined && undefined.__assign) || function () {
	    __assign$55 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$55.apply(this, arguments);
	};
	var PictureInPictureFontIcon = React.forwardRef(function PictureInPictureFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$55({}, props, { ref: ref }), "picture_in_picture"));
	});

	var __assign$54 = (undefined && undefined.__assign) || function () {
	    __assign$54 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$54.apply(this, arguments);
	};
	var PieChartOutlinedFontIcon = React.forwardRef(function PieChartOutlinedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$54({}, props, { ref: ref }), "pie_chart_outlined"));
	});

	var __assign$53 = (undefined && undefined.__assign) || function () {
	    __assign$53 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$53.apply(this, arguments);
	};
	var PieChartFontIcon = React.forwardRef(function PieChartFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$53({}, props, { ref: ref }), "pie_chart"));
	});

	var __assign$52 = (undefined && undefined.__assign) || function () {
	    __assign$52 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$52.apply(this, arguments);
	};
	var PinDropFontIcon = React.forwardRef(function PinDropFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$52({}, props, { ref: ref }), "pin_drop"));
	});

	var __assign$51 = (undefined && undefined.__assign) || function () {
	    __assign$51 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$51.apply(this, arguments);
	};
	var PlaceFontIcon = React.forwardRef(function PlaceFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$51({}, props, { ref: ref }), "place"));
	});

	var __assign$50 = (undefined && undefined.__assign) || function () {
	    __assign$50 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$50.apply(this, arguments);
	};
	var PlayArrowFontIcon = React.forwardRef(function PlayArrowFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$50({}, props, { ref: ref }), "play_arrow"));
	});

	var __assign$4$ = (undefined && undefined.__assign) || function () {
	    __assign$4$ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4$.apply(this, arguments);
	};
	var PlayCircleFilledFontIcon = React.forwardRef(function PlayCircleFilledFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4$({}, props, { ref: ref }), "play_circle_filled"));
	});

	var __assign$4_ = (undefined && undefined.__assign) || function () {
	    __assign$4_ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4_.apply(this, arguments);
	};
	var PlayCircleOutlineFontIcon = React.forwardRef(function PlayCircleOutlineFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4_({}, props, { ref: ref }), "play_circle_outline"));
	});

	var __assign$4Z = (undefined && undefined.__assign) || function () {
	    __assign$4Z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4Z.apply(this, arguments);
	};
	var PlayForWorkFontIcon = React.forwardRef(function PlayForWorkFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4Z({}, props, { ref: ref }), "play_for_work"));
	});

	var __assign$4Y = (undefined && undefined.__assign) || function () {
	    __assign$4Y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4Y.apply(this, arguments);
	};
	var PlaylistAddCheckFontIcon = React.forwardRef(function PlaylistAddCheckFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4Y({}, props, { ref: ref }), "playlist_add_check"));
	});

	var __assign$4X = (undefined && undefined.__assign) || function () {
	    __assign$4X = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4X.apply(this, arguments);
	};
	var PlaylistAddFontIcon = React.forwardRef(function PlaylistAddFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4X({}, props, { ref: ref }), "playlist_add"));
	});

	var __assign$4W = (undefined && undefined.__assign) || function () {
	    __assign$4W = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4W.apply(this, arguments);
	};
	var PlaylistPlayFontIcon = React.forwardRef(function PlaylistPlayFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4W({}, props, { ref: ref }), "playlist_play"));
	});

	var __assign$4V = (undefined && undefined.__assign) || function () {
	    __assign$4V = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4V.apply(this, arguments);
	};
	var PlusOneFontIcon = React.forwardRef(function PlusOneFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4V({}, props, { ref: ref }), "plus_one"));
	});

	var __assign$4U = (undefined && undefined.__assign) || function () {
	    __assign$4U = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4U.apply(this, arguments);
	};
	var PollFontIcon = React.forwardRef(function PollFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4U({}, props, { ref: ref }), "poll"));
	});

	var __assign$4T = (undefined && undefined.__assign) || function () {
	    __assign$4T = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4T.apply(this, arguments);
	};
	var PolymerFontIcon = React.forwardRef(function PolymerFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4T({}, props, { ref: ref }), "polymer"));
	});

	var __assign$4S = (undefined && undefined.__assign) || function () {
	    __assign$4S = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4S.apply(this, arguments);
	};
	var PoolFontIcon = React.forwardRef(function PoolFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4S({}, props, { ref: ref }), "pool"));
	});

	var __assign$4R = (undefined && undefined.__assign) || function () {
	    __assign$4R = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4R.apply(this, arguments);
	};
	var PortableWifiOffFontIcon = React.forwardRef(function PortableWifiOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4R({}, props, { ref: ref }), "portable_wifi_off"));
	});

	var __assign$4Q = (undefined && undefined.__assign) || function () {
	    __assign$4Q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4Q.apply(this, arguments);
	};
	var PortraitFontIcon = React.forwardRef(function PortraitFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4Q({}, props, { ref: ref }), "portrait"));
	});

	var __assign$4P = (undefined && undefined.__assign) || function () {
	    __assign$4P = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4P.apply(this, arguments);
	};
	var PowerInputFontIcon = React.forwardRef(function PowerInputFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4P({}, props, { ref: ref }), "power_input"));
	});

	var __assign$4O = (undefined && undefined.__assign) || function () {
	    __assign$4O = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4O.apply(this, arguments);
	};
	var PowerSettingsNewFontIcon = React.forwardRef(function PowerSettingsNewFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4O({}, props, { ref: ref }), "power_settings_new"));
	});

	var __assign$4N = (undefined && undefined.__assign) || function () {
	    __assign$4N = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4N.apply(this, arguments);
	};
	var PowerFontIcon = React.forwardRef(function PowerFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4N({}, props, { ref: ref }), "power"));
	});

	var __assign$4M = (undefined && undefined.__assign) || function () {
	    __assign$4M = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4M.apply(this, arguments);
	};
	var PregnantWomanFontIcon = React.forwardRef(function PregnantWomanFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4M({}, props, { ref: ref }), "pregnant_woman"));
	});

	var __assign$4L = (undefined && undefined.__assign) || function () {
	    __assign$4L = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4L.apply(this, arguments);
	};
	var PresentToAllFontIcon = React.forwardRef(function PresentToAllFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4L({}, props, { ref: ref }), "present_to_all"));
	});

	var __assign$4K = (undefined && undefined.__assign) || function () {
	    __assign$4K = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4K.apply(this, arguments);
	};
	var PrintFontIcon = React.forwardRef(function PrintFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4K({}, props, { ref: ref }), "print"));
	});

	var __assign$4J = (undefined && undefined.__assign) || function () {
	    __assign$4J = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4J.apply(this, arguments);
	};
	var PriorityHighFontIcon = React.forwardRef(function PriorityHighFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4J({}, props, { ref: ref }), "priority_high"));
	});

	var __assign$4I = (undefined && undefined.__assign) || function () {
	    __assign$4I = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4I.apply(this, arguments);
	};
	var PublicFontIcon = React.forwardRef(function PublicFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4I({}, props, { ref: ref }), "public"));
	});

	var __assign$4H = (undefined && undefined.__assign) || function () {
	    __assign$4H = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4H.apply(this, arguments);
	};
	var PublishFontIcon = React.forwardRef(function PublishFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4H({}, props, { ref: ref }), "publish"));
	});

	var __assign$4G = (undefined && undefined.__assign) || function () {
	    __assign$4G = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4G.apply(this, arguments);
	};
	var QueryBuilderFontIcon = React.forwardRef(function QueryBuilderFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4G({}, props, { ref: ref }), "query_builder"));
	});

	var __assign$4F = (undefined && undefined.__assign) || function () {
	    __assign$4F = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4F.apply(this, arguments);
	};
	var QuestionAnswerFontIcon = React.forwardRef(function QuestionAnswerFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4F({}, props, { ref: ref }), "question_answer"));
	});

	var __assign$4E = (undefined && undefined.__assign) || function () {
	    __assign$4E = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4E.apply(this, arguments);
	};
	var QueueMusicFontIcon = React.forwardRef(function QueueMusicFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4E({}, props, { ref: ref }), "queue_music"));
	});

	var __assign$4D = (undefined && undefined.__assign) || function () {
	    __assign$4D = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4D.apply(this, arguments);
	};
	var QueuePlayNextFontIcon = React.forwardRef(function QueuePlayNextFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4D({}, props, { ref: ref }), "queue_play_next"));
	});

	var __assign$4C = (undefined && undefined.__assign) || function () {
	    __assign$4C = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4C.apply(this, arguments);
	};
	var QueueFontIcon = React.forwardRef(function QueueFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4C({}, props, { ref: ref }), "queue"));
	});

	var __assign$4B = (undefined && undefined.__assign) || function () {
	    __assign$4B = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4B.apply(this, arguments);
	};
	var RadioButtonCheckedFontIcon = React.forwardRef(function RadioButtonCheckedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4B({}, props, { ref: ref }), "radio_button_checked"));
	});

	var __assign$4A = (undefined && undefined.__assign) || function () {
	    __assign$4A = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4A.apply(this, arguments);
	};
	var RadioButtonUncheckedFontIcon = React.forwardRef(function RadioButtonUncheckedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4A({}, props, { ref: ref }), "radio_button_unchecked"));
	});

	var __assign$4z = (undefined && undefined.__assign) || function () {
	    __assign$4z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4z.apply(this, arguments);
	};
	var RadioFontIcon = React.forwardRef(function RadioFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4z({}, props, { ref: ref }), "radio"));
	});

	var __assign$4y = (undefined && undefined.__assign) || function () {
	    __assign$4y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4y.apply(this, arguments);
	};
	var RateReviewFontIcon = React.forwardRef(function RateReviewFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4y({}, props, { ref: ref }), "rate_review"));
	});

	var __assign$4x = (undefined && undefined.__assign) || function () {
	    __assign$4x = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4x.apply(this, arguments);
	};
	var ReceiptFontIcon = React.forwardRef(function ReceiptFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4x({}, props, { ref: ref }), "receipt"));
	});

	var __assign$4w = (undefined && undefined.__assign) || function () {
	    __assign$4w = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4w.apply(this, arguments);
	};
	var RecentActorsFontIcon = React.forwardRef(function RecentActorsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4w({}, props, { ref: ref }), "recent_actors"));
	});

	var __assign$4v = (undefined && undefined.__assign) || function () {
	    __assign$4v = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4v.apply(this, arguments);
	};
	var RecordVoiceOverFontIcon = React.forwardRef(function RecordVoiceOverFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4v({}, props, { ref: ref }), "record_voice_over"));
	});

	var __assign$4u = (undefined && undefined.__assign) || function () {
	    __assign$4u = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4u.apply(this, arguments);
	};
	var RedeemFontIcon = React.forwardRef(function RedeemFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4u({}, props, { ref: ref }), "redeem"));
	});

	var __assign$4t = (undefined && undefined.__assign) || function () {
	    __assign$4t = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4t.apply(this, arguments);
	};
	var RedoFontIcon = React.forwardRef(function RedoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4t({}, props, { ref: ref }), "redo"));
	});

	var __assign$4s = (undefined && undefined.__assign) || function () {
	    __assign$4s = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4s.apply(this, arguments);
	};
	var RefreshFontIcon = React.forwardRef(function RefreshFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4s({}, props, { ref: ref }), "refresh"));
	});

	var __assign$4r = (undefined && undefined.__assign) || function () {
	    __assign$4r = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4r.apply(this, arguments);
	};
	var RemoveCircleOutlineFontIcon = React.forwardRef(function RemoveCircleOutlineFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4r({}, props, { ref: ref }), "remove_circle_outline"));
	});

	var __assign$4q = (undefined && undefined.__assign) || function () {
	    __assign$4q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4q.apply(this, arguments);
	};
	var RemoveCircleFontIcon = React.forwardRef(function RemoveCircleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4q({}, props, { ref: ref }), "remove_circle"));
	});

	var __assign$4p = (undefined && undefined.__assign) || function () {
	    __assign$4p = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4p.apply(this, arguments);
	};
	var RemoveFromQueueFontIcon = React.forwardRef(function RemoveFromQueueFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4p({}, props, { ref: ref }), "remove_from_queue"));
	});

	var __assign$4o = (undefined && undefined.__assign) || function () {
	    __assign$4o = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4o.apply(this, arguments);
	};
	var RemoveRedEyeFontIcon = React.forwardRef(function RemoveRedEyeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4o({}, props, { ref: ref }), "remove_red_eye"));
	});

	var __assign$4n = (undefined && undefined.__assign) || function () {
	    __assign$4n = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4n.apply(this, arguments);
	};
	var RemoveShoppingCartFontIcon = React.forwardRef(function RemoveShoppingCartFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4n({}, props, { ref: ref }), "remove_shopping_cart"));
	});

	var __assign$4m = (undefined && undefined.__assign) || function () {
	    __assign$4m = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4m.apply(this, arguments);
	};
	var RemoveFontIcon = React.forwardRef(function RemoveFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4m({}, props, { ref: ref }), "remove"));
	});

	var __assign$4l = (undefined && undefined.__assign) || function () {
	    __assign$4l = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4l.apply(this, arguments);
	};
	var ReorderFontIcon = React.forwardRef(function ReorderFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4l({}, props, { ref: ref }), "reorder"));
	});

	var __assign$4k = (undefined && undefined.__assign) || function () {
	    __assign$4k = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4k.apply(this, arguments);
	};
	var RepeatOneFontIcon = React.forwardRef(function RepeatOneFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4k({}, props, { ref: ref }), "repeat_one"));
	});

	var __assign$4j = (undefined && undefined.__assign) || function () {
	    __assign$4j = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4j.apply(this, arguments);
	};
	var RepeatFontIcon = React.forwardRef(function RepeatFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4j({}, props, { ref: ref }), "repeat"));
	});

	var __assign$4i = (undefined && undefined.__assign) || function () {
	    __assign$4i = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4i.apply(this, arguments);
	};
	var Replay10FontIcon = React.forwardRef(function Replay10FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4i({}, props, { ref: ref }), "replay_10"));
	});

	var __assign$4h = (undefined && undefined.__assign) || function () {
	    __assign$4h = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4h.apply(this, arguments);
	};
	var Replay30FontIcon = React.forwardRef(function Replay30FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4h({}, props, { ref: ref }), "replay_30"));
	});

	var __assign$4g = (undefined && undefined.__assign) || function () {
	    __assign$4g = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4g.apply(this, arguments);
	};
	var Replay5FontIcon = React.forwardRef(function Replay5FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4g({}, props, { ref: ref }), "replay_5"));
	});

	var __assign$4f = (undefined && undefined.__assign) || function () {
	    __assign$4f = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4f.apply(this, arguments);
	};
	var ReplayFontIcon = React.forwardRef(function ReplayFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4f({}, props, { ref: ref }), "replay"));
	});

	var __assign$4e = (undefined && undefined.__assign) || function () {
	    __assign$4e = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4e.apply(this, arguments);
	};
	var ReplyAllFontIcon = React.forwardRef(function ReplyAllFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4e({}, props, { ref: ref }), "reply_all"));
	});

	var __assign$4d = (undefined && undefined.__assign) || function () {
	    __assign$4d = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4d.apply(this, arguments);
	};
	var ReplyFontIcon = React.forwardRef(function ReplyFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4d({}, props, { ref: ref }), "reply"));
	});

	var __assign$4c = (undefined && undefined.__assign) || function () {
	    __assign$4c = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4c.apply(this, arguments);
	};
	var ReportProblemFontIcon = React.forwardRef(function ReportProblemFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4c({}, props, { ref: ref }), "report_problem"));
	});

	var __assign$4b = (undefined && undefined.__assign) || function () {
	    __assign$4b = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4b.apply(this, arguments);
	};
	var ReportFontIcon = React.forwardRef(function ReportFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4b({}, props, { ref: ref }), "report"));
	});

	var __assign$4a = (undefined && undefined.__assign) || function () {
	    __assign$4a = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4a.apply(this, arguments);
	};
	var RestaurantMenuFontIcon = React.forwardRef(function RestaurantMenuFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$4a({}, props, { ref: ref }), "restaurant_menu"));
	});

	var __assign$49 = (undefined && undefined.__assign) || function () {
	    __assign$49 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$49.apply(this, arguments);
	};
	var RestaurantFontIcon = React.forwardRef(function RestaurantFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$49({}, props, { ref: ref }), "restaurant"));
	});

	var __assign$48 = (undefined && undefined.__assign) || function () {
	    __assign$48 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$48.apply(this, arguments);
	};
	var RestorePageFontIcon = React.forwardRef(function RestorePageFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$48({}, props, { ref: ref }), "restore_page"));
	});

	var __assign$47 = (undefined && undefined.__assign) || function () {
	    __assign$47 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$47.apply(this, arguments);
	};
	var RestoreFontIcon = React.forwardRef(function RestoreFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$47({}, props, { ref: ref }), "restore"));
	});

	var __assign$46 = (undefined && undefined.__assign) || function () {
	    __assign$46 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$46.apply(this, arguments);
	};
	var RingVolumeFontIcon = React.forwardRef(function RingVolumeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$46({}, props, { ref: ref }), "ring_volume"));
	});

	var __assign$45 = (undefined && undefined.__assign) || function () {
	    __assign$45 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$45.apply(this, arguments);
	};
	var RoomServiceFontIcon = React.forwardRef(function RoomServiceFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$45({}, props, { ref: ref }), "room_service"));
	});

	var __assign$44 = (undefined && undefined.__assign) || function () {
	    __assign$44 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$44.apply(this, arguments);
	};
	var RoomFontIcon = React.forwardRef(function RoomFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$44({}, props, { ref: ref }), "room"));
	});

	var __assign$43 = (undefined && undefined.__assign) || function () {
	    __assign$43 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$43.apply(this, arguments);
	};
	var Rotate90DegreesCcwFontIcon = React.forwardRef(function Rotate90DegreesCcwFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$43({}, props, { ref: ref }), "rotate_90_degrees_ccw"));
	});

	var __assign$42 = (undefined && undefined.__assign) || function () {
	    __assign$42 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$42.apply(this, arguments);
	};
	var RotateLeftFontIcon = React.forwardRef(function RotateLeftFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$42({}, props, { ref: ref }), "rotate_left"));
	});

	var __assign$41 = (undefined && undefined.__assign) || function () {
	    __assign$41 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$41.apply(this, arguments);
	};
	var RotateRightFontIcon = React.forwardRef(function RotateRightFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$41({}, props, { ref: ref }), "rotate_right"));
	});

	var __assign$40 = (undefined && undefined.__assign) || function () {
	    __assign$40 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$40.apply(this, arguments);
	};
	var RoundedCornerFontIcon = React.forwardRef(function RoundedCornerFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$40({}, props, { ref: ref }), "rounded_corner"));
	});

	var __assign$3$ = (undefined && undefined.__assign) || function () {
	    __assign$3$ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3$.apply(this, arguments);
	};
	var RouterFontIcon = React.forwardRef(function RouterFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3$({}, props, { ref: ref }), "router"));
	});

	var __assign$3_ = (undefined && undefined.__assign) || function () {
	    __assign$3_ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3_.apply(this, arguments);
	};
	var RowingFontIcon = React.forwardRef(function RowingFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3_({}, props, { ref: ref }), "rowing"));
	});

	var __assign$3Z = (undefined && undefined.__assign) || function () {
	    __assign$3Z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3Z.apply(this, arguments);
	};
	var RssFeedFontIcon = React.forwardRef(function RssFeedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3Z({}, props, { ref: ref }), "rss_feed"));
	});

	var __assign$3Y = (undefined && undefined.__assign) || function () {
	    __assign$3Y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3Y.apply(this, arguments);
	};
	var RvHookupFontIcon = React.forwardRef(function RvHookupFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3Y({}, props, { ref: ref }), "rv_hookup"));
	});

	var __assign$3X = (undefined && undefined.__assign) || function () {
	    __assign$3X = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3X.apply(this, arguments);
	};
	var SatelliteFontIcon = React.forwardRef(function SatelliteFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3X({}, props, { ref: ref }), "satellite"));
	});

	var __assign$3W = (undefined && undefined.__assign) || function () {
	    __assign$3W = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3W.apply(this, arguments);
	};
	var SaveFontIcon = React.forwardRef(function SaveFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3W({}, props, { ref: ref }), "save"));
	});

	var __assign$3V = (undefined && undefined.__assign) || function () {
	    __assign$3V = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3V.apply(this, arguments);
	};
	var ScannerFontIcon = React.forwardRef(function ScannerFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3V({}, props, { ref: ref }), "scanner"));
	});

	var __assign$3U = (undefined && undefined.__assign) || function () {
	    __assign$3U = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3U.apply(this, arguments);
	};
	var ScheduleFontIcon = React.forwardRef(function ScheduleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3U({}, props, { ref: ref }), "schedule"));
	});

	var __assign$3T = (undefined && undefined.__assign) || function () {
	    __assign$3T = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3T.apply(this, arguments);
	};
	var SchoolFontIcon = React.forwardRef(function SchoolFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3T({}, props, { ref: ref }), "school"));
	});

	var __assign$3S = (undefined && undefined.__assign) || function () {
	    __assign$3S = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3S.apply(this, arguments);
	};
	var ScreenLockLandscapeFontIcon = React.forwardRef(function ScreenLockLandscapeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3S({}, props, { ref: ref }), "screen_lock_landscape"));
	});

	var __assign$3R = (undefined && undefined.__assign) || function () {
	    __assign$3R = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3R.apply(this, arguments);
	};
	var ScreenLockPortraitFontIcon = React.forwardRef(function ScreenLockPortraitFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3R({}, props, { ref: ref }), "screen_lock_portrait"));
	});

	var __assign$3Q = (undefined && undefined.__assign) || function () {
	    __assign$3Q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3Q.apply(this, arguments);
	};
	var ScreenLockRotationFontIcon = React.forwardRef(function ScreenLockRotationFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3Q({}, props, { ref: ref }), "screen_lock_rotation"));
	});

	var __assign$3P = (undefined && undefined.__assign) || function () {
	    __assign$3P = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3P.apply(this, arguments);
	};
	var ScreenRotationFontIcon = React.forwardRef(function ScreenRotationFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3P({}, props, { ref: ref }), "screen_rotation"));
	});

	var __assign$3O = (undefined && undefined.__assign) || function () {
	    __assign$3O = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3O.apply(this, arguments);
	};
	var ScreenShareFontIcon = React.forwardRef(function ScreenShareFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3O({}, props, { ref: ref }), "screen_share"));
	});

	var __assign$3N = (undefined && undefined.__assign) || function () {
	    __assign$3N = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3N.apply(this, arguments);
	};
	var SdCardFontIcon = React.forwardRef(function SdCardFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3N({}, props, { ref: ref }), "sd_card"));
	});

	var __assign$3M = (undefined && undefined.__assign) || function () {
	    __assign$3M = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3M.apply(this, arguments);
	};
	var SdStorageFontIcon = React.forwardRef(function SdStorageFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3M({}, props, { ref: ref }), "sd_storage"));
	});

	var __assign$3L = (undefined && undefined.__assign) || function () {
	    __assign$3L = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3L.apply(this, arguments);
	};
	var SearchFontIcon = React.forwardRef(function SearchFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3L({}, props, { ref: ref }), "search"));
	});

	var __assign$3K = (undefined && undefined.__assign) || function () {
	    __assign$3K = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3K.apply(this, arguments);
	};
	var SecurityFontIcon = React.forwardRef(function SecurityFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3K({}, props, { ref: ref }), "security"));
	});

	var __assign$3J = (undefined && undefined.__assign) || function () {
	    __assign$3J = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3J.apply(this, arguments);
	};
	var SelectAllFontIcon = React.forwardRef(function SelectAllFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3J({}, props, { ref: ref }), "select_all"));
	});

	var __assign$3I = (undefined && undefined.__assign) || function () {
	    __assign$3I = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3I.apply(this, arguments);
	};
	var SendFontIcon = React.forwardRef(function SendFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3I({}, props, { ref: ref }), "send"));
	});

	var __assign$3H = (undefined && undefined.__assign) || function () {
	    __assign$3H = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3H.apply(this, arguments);
	};
	var SentimentDissatisfiedFontIcon = React.forwardRef(function SentimentDissatisfiedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3H({}, props, { ref: ref }), "sentiment_dissatisfied"));
	});

	var __assign$3G = (undefined && undefined.__assign) || function () {
	    __assign$3G = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3G.apply(this, arguments);
	};
	var SentimentNeutralFontIcon = React.forwardRef(function SentimentNeutralFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3G({}, props, { ref: ref }), "sentiment_neutral"));
	});

	var __assign$3F = (undefined && undefined.__assign) || function () {
	    __assign$3F = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3F.apply(this, arguments);
	};
	var SentimentSatisfiedFontIcon = React.forwardRef(function SentimentSatisfiedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3F({}, props, { ref: ref }), "sentiment_satisfied"));
	});

	var __assign$3E = (undefined && undefined.__assign) || function () {
	    __assign$3E = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3E.apply(this, arguments);
	};
	var SentimentVeryDissatisfiedFontIcon = React.forwardRef(function SentimentVeryDissatisfiedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3E({}, props, { ref: ref }), "sentiment_very_dissatisfied"));
	});

	var __assign$3D = (undefined && undefined.__assign) || function () {
	    __assign$3D = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3D.apply(this, arguments);
	};
	var SentimentVerySatisfiedFontIcon = React.forwardRef(function SentimentVerySatisfiedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3D({}, props, { ref: ref }), "sentiment_very_satisfied"));
	});

	var __assign$3C = (undefined && undefined.__assign) || function () {
	    __assign$3C = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3C.apply(this, arguments);
	};
	var SettingsApplicationsFontIcon = React.forwardRef(function SettingsApplicationsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3C({}, props, { ref: ref }), "settings_applications"));
	});

	var __assign$3B = (undefined && undefined.__assign) || function () {
	    __assign$3B = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3B.apply(this, arguments);
	};
	var SettingsBackupRestoreFontIcon = React.forwardRef(function SettingsBackupRestoreFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3B({}, props, { ref: ref }), "settings_backup_restore"));
	});

	var __assign$3A = (undefined && undefined.__assign) || function () {
	    __assign$3A = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3A.apply(this, arguments);
	};
	var SettingsBluetoothFontIcon = React.forwardRef(function SettingsBluetoothFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3A({}, props, { ref: ref }), "settings_bluetooth"));
	});

	var __assign$3z = (undefined && undefined.__assign) || function () {
	    __assign$3z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3z.apply(this, arguments);
	};
	var SettingsBrightnessFontIcon = React.forwardRef(function SettingsBrightnessFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3z({}, props, { ref: ref }), "settings_brightness"));
	});

	var __assign$3y = (undefined && undefined.__assign) || function () {
	    __assign$3y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3y.apply(this, arguments);
	};
	var SettingsCellFontIcon = React.forwardRef(function SettingsCellFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3y({}, props, { ref: ref }), "settings_cell"));
	});

	var __assign$3x = (undefined && undefined.__assign) || function () {
	    __assign$3x = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3x.apply(this, arguments);
	};
	var SettingsEthernetFontIcon = React.forwardRef(function SettingsEthernetFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3x({}, props, { ref: ref }), "settings_ethernet"));
	});

	var __assign$3w = (undefined && undefined.__assign) || function () {
	    __assign$3w = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3w.apply(this, arguments);
	};
	var SettingsInputAntennaFontIcon = React.forwardRef(function SettingsInputAntennaFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3w({}, props, { ref: ref }), "settings_input_antenna"));
	});

	var __assign$3v = (undefined && undefined.__assign) || function () {
	    __assign$3v = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3v.apply(this, arguments);
	};
	var SettingsInputComponentFontIcon = React.forwardRef(function SettingsInputComponentFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3v({}, props, { ref: ref }), "settings_input_component"));
	});

	var __assign$3u = (undefined && undefined.__assign) || function () {
	    __assign$3u = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3u.apply(this, arguments);
	};
	var SettingsInputCompositeFontIcon = React.forwardRef(function SettingsInputCompositeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3u({}, props, { ref: ref }), "settings_input_composite"));
	});

	var __assign$3t = (undefined && undefined.__assign) || function () {
	    __assign$3t = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3t.apply(this, arguments);
	};
	var SettingsInputHdmiFontIcon = React.forwardRef(function SettingsInputHdmiFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3t({}, props, { ref: ref }), "settings_input_hdmi"));
	});

	var __assign$3s = (undefined && undefined.__assign) || function () {
	    __assign$3s = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3s.apply(this, arguments);
	};
	var SettingsInputSvideoFontIcon = React.forwardRef(function SettingsInputSvideoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3s({}, props, { ref: ref }), "settings_input_svideo"));
	});

	var __assign$3r = (undefined && undefined.__assign) || function () {
	    __assign$3r = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3r.apply(this, arguments);
	};
	var SettingsOverscanFontIcon = React.forwardRef(function SettingsOverscanFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3r({}, props, { ref: ref }), "settings_overscan"));
	});

	var __assign$3q = (undefined && undefined.__assign) || function () {
	    __assign$3q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3q.apply(this, arguments);
	};
	var SettingsPhoneFontIcon = React.forwardRef(function SettingsPhoneFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3q({}, props, { ref: ref }), "settings_phone"));
	});

	var __assign$3p = (undefined && undefined.__assign) || function () {
	    __assign$3p = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3p.apply(this, arguments);
	};
	var SettingsPowerFontIcon = React.forwardRef(function SettingsPowerFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3p({}, props, { ref: ref }), "settings_power"));
	});

	var __assign$3o = (undefined && undefined.__assign) || function () {
	    __assign$3o = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3o.apply(this, arguments);
	};
	var SettingsRemoteFontIcon = React.forwardRef(function SettingsRemoteFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3o({}, props, { ref: ref }), "settings_remote"));
	});

	var __assign$3n = (undefined && undefined.__assign) || function () {
	    __assign$3n = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3n.apply(this, arguments);
	};
	var SettingsSystemDaydreamFontIcon = React.forwardRef(function SettingsSystemDaydreamFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3n({}, props, { ref: ref }), "settings_system_daydream"));
	});

	var __assign$3m = (undefined && undefined.__assign) || function () {
	    __assign$3m = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3m.apply(this, arguments);
	};
	var SettingsVoiceFontIcon = React.forwardRef(function SettingsVoiceFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3m({}, props, { ref: ref }), "settings_voice"));
	});

	var __assign$3l = (undefined && undefined.__assign) || function () {
	    __assign$3l = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3l.apply(this, arguments);
	};
	var SettingsFontIcon = React.forwardRef(function SettingsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3l({}, props, { ref: ref }), "settings"));
	});

	var __assign$3k = (undefined && undefined.__assign) || function () {
	    __assign$3k = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3k.apply(this, arguments);
	};
	var ShareFontIcon = React.forwardRef(function ShareFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3k({}, props, { ref: ref }), "share"));
	});

	var __assign$3j = (undefined && undefined.__assign) || function () {
	    __assign$3j = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3j.apply(this, arguments);
	};
	var ShopTwoFontIcon = React.forwardRef(function ShopTwoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3j({}, props, { ref: ref }), "shop_two"));
	});

	var __assign$3i = (undefined && undefined.__assign) || function () {
	    __assign$3i = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3i.apply(this, arguments);
	};
	var ShopFontIcon = React.forwardRef(function ShopFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3i({}, props, { ref: ref }), "shop"));
	});

	var __assign$3h = (undefined && undefined.__assign) || function () {
	    __assign$3h = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3h.apply(this, arguments);
	};
	var ShoppingBasketFontIcon = React.forwardRef(function ShoppingBasketFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3h({}, props, { ref: ref }), "shopping_basket"));
	});

	var __assign$3g = (undefined && undefined.__assign) || function () {
	    __assign$3g = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3g.apply(this, arguments);
	};
	var ShoppingCartFontIcon = React.forwardRef(function ShoppingCartFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3g({}, props, { ref: ref }), "shopping_cart"));
	});

	var __assign$3f = (undefined && undefined.__assign) || function () {
	    __assign$3f = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3f.apply(this, arguments);
	};
	var ShortTextFontIcon = React.forwardRef(function ShortTextFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3f({}, props, { ref: ref }), "short_text"));
	});

	var __assign$3e = (undefined && undefined.__assign) || function () {
	    __assign$3e = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3e.apply(this, arguments);
	};
	var ShowChartFontIcon = React.forwardRef(function ShowChartFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3e({}, props, { ref: ref }), "show_chart"));
	});

	var __assign$3d = (undefined && undefined.__assign) || function () {
	    __assign$3d = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3d.apply(this, arguments);
	};
	var ShuffleFontIcon = React.forwardRef(function ShuffleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3d({}, props, { ref: ref }), "shuffle"));
	});

	var __assign$3c = (undefined && undefined.__assign) || function () {
	    __assign$3c = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3c.apply(this, arguments);
	};
	var SignalCellular4BarFontIcon = React.forwardRef(function SignalCellular4BarFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3c({}, props, { ref: ref }), "signal_cellular_4_bar"));
	});

	var __assign$3b = (undefined && undefined.__assign) || function () {
	    __assign$3b = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3b.apply(this, arguments);
	};
	var SignalCellularConnectedNoInternet4BarFontIcon = React.forwardRef(function SignalCellularConnectedNoInternet4BarFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3b({}, props, { ref: ref }), "signal_cellular_connected_no_internet_4_bar"));
	});

	var __assign$3a = (undefined && undefined.__assign) || function () {
	    __assign$3a = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3a.apply(this, arguments);
	};
	var SignalCellularNoSimFontIcon = React.forwardRef(function SignalCellularNoSimFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$3a({}, props, { ref: ref }), "signal_cellular_no_sim"));
	});

	var __assign$39 = (undefined && undefined.__assign) || function () {
	    __assign$39 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$39.apply(this, arguments);
	};
	var SignalCellularNullFontIcon = React.forwardRef(function SignalCellularNullFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$39({}, props, { ref: ref }), "signal_cellular_null"));
	});

	var __assign$38 = (undefined && undefined.__assign) || function () {
	    __assign$38 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$38.apply(this, arguments);
	};
	var SignalCellularOffFontIcon = React.forwardRef(function SignalCellularOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$38({}, props, { ref: ref }), "signal_cellular_off"));
	});

	var __assign$37 = (undefined && undefined.__assign) || function () {
	    __assign$37 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$37.apply(this, arguments);
	};
	var SignalWifi4BarLockFontIcon = React.forwardRef(function SignalWifi4BarLockFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$37({}, props, { ref: ref }), "signal_wifi_4_bar_lock"));
	});

	var __assign$36 = (undefined && undefined.__assign) || function () {
	    __assign$36 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$36.apply(this, arguments);
	};
	var SignalWifi4BarFontIcon = React.forwardRef(function SignalWifi4BarFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$36({}, props, { ref: ref }), "signal_wifi_4_bar"));
	});

	var __assign$35 = (undefined && undefined.__assign) || function () {
	    __assign$35 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$35.apply(this, arguments);
	};
	var SignalWifiOffFontIcon = React.forwardRef(function SignalWifiOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$35({}, props, { ref: ref }), "signal_wifi_off"));
	});

	var __assign$34 = (undefined && undefined.__assign) || function () {
	    __assign$34 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$34.apply(this, arguments);
	};
	var SimCardAlertFontIcon = React.forwardRef(function SimCardAlertFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$34({}, props, { ref: ref }), "sim_card_alert"));
	});

	var __assign$33 = (undefined && undefined.__assign) || function () {
	    __assign$33 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$33.apply(this, arguments);
	};
	var SimCardFontIcon = React.forwardRef(function SimCardFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$33({}, props, { ref: ref }), "sim_card"));
	});

	var __assign$32 = (undefined && undefined.__assign) || function () {
	    __assign$32 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$32.apply(this, arguments);
	};
	var SkipNextFontIcon = React.forwardRef(function SkipNextFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$32({}, props, { ref: ref }), "skip_next"));
	});

	var __assign$31 = (undefined && undefined.__assign) || function () {
	    __assign$31 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$31.apply(this, arguments);
	};
	var SkipPreviousFontIcon = React.forwardRef(function SkipPreviousFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$31({}, props, { ref: ref }), "skip_previous"));
	});

	var __assign$30 = (undefined && undefined.__assign) || function () {
	    __assign$30 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$30.apply(this, arguments);
	};
	var SlideshowFontIcon = React.forwardRef(function SlideshowFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$30({}, props, { ref: ref }), "slideshow"));
	});

	var __assign$2$ = (undefined && undefined.__assign) || function () {
	    __assign$2$ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2$.apply(this, arguments);
	};
	var SlowMotionVideoFontIcon = React.forwardRef(function SlowMotionVideoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2$({}, props, { ref: ref }), "slow_motion_video"));
	});

	var __assign$2_ = (undefined && undefined.__assign) || function () {
	    __assign$2_ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2_.apply(this, arguments);
	};
	var SmartphoneFontIcon = React.forwardRef(function SmartphoneFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2_({}, props, { ref: ref }), "smartphone"));
	});

	var __assign$2Z = (undefined && undefined.__assign) || function () {
	    __assign$2Z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2Z.apply(this, arguments);
	};
	var SmokeFreeFontIcon = React.forwardRef(function SmokeFreeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2Z({}, props, { ref: ref }), "smoke_free"));
	});

	var __assign$2Y = (undefined && undefined.__assign) || function () {
	    __assign$2Y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2Y.apply(this, arguments);
	};
	var SmokingRoomsFontIcon = React.forwardRef(function SmokingRoomsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2Y({}, props, { ref: ref }), "smoking_rooms"));
	});

	var __assign$2X = (undefined && undefined.__assign) || function () {
	    __assign$2X = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2X.apply(this, arguments);
	};
	var SmsFailedFontIcon = React.forwardRef(function SmsFailedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2X({}, props, { ref: ref }), "sms_failed"));
	});

	var __assign$2W = (undefined && undefined.__assign) || function () {
	    __assign$2W = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2W.apply(this, arguments);
	};
	var SmsFontIcon = React.forwardRef(function SmsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2W({}, props, { ref: ref }), "sms"));
	});

	var __assign$2V = (undefined && undefined.__assign) || function () {
	    __assign$2V = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2V.apply(this, arguments);
	};
	var SnoozeFontIcon = React.forwardRef(function SnoozeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2V({}, props, { ref: ref }), "snooze"));
	});

	var __assign$2U = (undefined && undefined.__assign) || function () {
	    __assign$2U = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2U.apply(this, arguments);
	};
	var SortByAlphaFontIcon = React.forwardRef(function SortByAlphaFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2U({}, props, { ref: ref }), "sort_by_alpha"));
	});

	var __assign$2T = (undefined && undefined.__assign) || function () {
	    __assign$2T = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2T.apply(this, arguments);
	};
	var SortFontIcon = React.forwardRef(function SortFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2T({}, props, { ref: ref }), "sort"));
	});

	var __assign$2S = (undefined && undefined.__assign) || function () {
	    __assign$2S = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2S.apply(this, arguments);
	};
	var SpaFontIcon = React.forwardRef(function SpaFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2S({}, props, { ref: ref }), "spa"));
	});

	var __assign$2R = (undefined && undefined.__assign) || function () {
	    __assign$2R = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2R.apply(this, arguments);
	};
	var SpaceBarFontIcon = React.forwardRef(function SpaceBarFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2R({}, props, { ref: ref }), "space_bar"));
	});

	var __assign$2Q = (undefined && undefined.__assign) || function () {
	    __assign$2Q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2Q.apply(this, arguments);
	};
	var SpeakerGroupFontIcon = React.forwardRef(function SpeakerGroupFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2Q({}, props, { ref: ref }), "speaker_group"));
	});

	var __assign$2P = (undefined && undefined.__assign) || function () {
	    __assign$2P = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2P.apply(this, arguments);
	};
	var SpeakerNotesOffFontIcon = React.forwardRef(function SpeakerNotesOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2P({}, props, { ref: ref }), "speaker_notes_off"));
	});

	var __assign$2O = (undefined && undefined.__assign) || function () {
	    __assign$2O = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2O.apply(this, arguments);
	};
	var SpeakerNotesFontIcon = React.forwardRef(function SpeakerNotesFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2O({}, props, { ref: ref }), "speaker_notes"));
	});

	var __assign$2N = (undefined && undefined.__assign) || function () {
	    __assign$2N = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2N.apply(this, arguments);
	};
	var SpeakerPhoneFontIcon = React.forwardRef(function SpeakerPhoneFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2N({}, props, { ref: ref }), "speaker_phone"));
	});

	var __assign$2M = (undefined && undefined.__assign) || function () {
	    __assign$2M = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2M.apply(this, arguments);
	};
	var SpeakerFontIcon = React.forwardRef(function SpeakerFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2M({}, props, { ref: ref }), "speaker"));
	});

	var __assign$2L = (undefined && undefined.__assign) || function () {
	    __assign$2L = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2L.apply(this, arguments);
	};
	var SpellcheckFontIcon = React.forwardRef(function SpellcheckFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2L({}, props, { ref: ref }), "spellcheck"));
	});

	var __assign$2K = (undefined && undefined.__assign) || function () {
	    __assign$2K = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2K.apply(this, arguments);
	};
	var StarBorderFontIcon = React.forwardRef(function StarBorderFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2K({}, props, { ref: ref }), "star_border"));
	});

	var __assign$2J = (undefined && undefined.__assign) || function () {
	    __assign$2J = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2J.apply(this, arguments);
	};
	var StarHalfFontIcon = React.forwardRef(function StarHalfFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2J({}, props, { ref: ref }), "star_half"));
	});

	var __assign$2I = (undefined && undefined.__assign) || function () {
	    __assign$2I = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2I.apply(this, arguments);
	};
	var StarFontIcon = React.forwardRef(function StarFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2I({}, props, { ref: ref }), "star"));
	});

	var __assign$2H = (undefined && undefined.__assign) || function () {
	    __assign$2H = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2H.apply(this, arguments);
	};
	var StarsFontIcon = React.forwardRef(function StarsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2H({}, props, { ref: ref }), "stars"));
	});

	var __assign$2G = (undefined && undefined.__assign) || function () {
	    __assign$2G = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2G.apply(this, arguments);
	};
	var StayCurrentLandscapeFontIcon = React.forwardRef(function StayCurrentLandscapeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2G({}, props, { ref: ref }), "stay_current_landscape"));
	});

	var __assign$2F = (undefined && undefined.__assign) || function () {
	    __assign$2F = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2F.apply(this, arguments);
	};
	var StayCurrentPortraitFontIcon = React.forwardRef(function StayCurrentPortraitFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2F({}, props, { ref: ref }), "stay_current_portrait"));
	});

	var __assign$2E = (undefined && undefined.__assign) || function () {
	    __assign$2E = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2E.apply(this, arguments);
	};
	var StayPrimaryLandscapeFontIcon = React.forwardRef(function StayPrimaryLandscapeFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2E({}, props, { ref: ref }), "stay_primary_landscape"));
	});

	var __assign$2D = (undefined && undefined.__assign) || function () {
	    __assign$2D = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2D.apply(this, arguments);
	};
	var StayPrimaryPortraitFontIcon = React.forwardRef(function StayPrimaryPortraitFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2D({}, props, { ref: ref }), "stay_primary_portrait"));
	});

	var __assign$2C = (undefined && undefined.__assign) || function () {
	    __assign$2C = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2C.apply(this, arguments);
	};
	var StopScreenShareFontIcon = React.forwardRef(function StopScreenShareFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2C({}, props, { ref: ref }), "stop_screen_share"));
	});

	var __assign$2B = (undefined && undefined.__assign) || function () {
	    __assign$2B = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2B.apply(this, arguments);
	};
	var StopFontIcon = React.forwardRef(function StopFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2B({}, props, { ref: ref }), "stop"));
	});

	var __assign$2A = (undefined && undefined.__assign) || function () {
	    __assign$2A = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2A.apply(this, arguments);
	};
	var StorageFontIcon = React.forwardRef(function StorageFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2A({}, props, { ref: ref }), "storage"));
	});

	var __assign$2z = (undefined && undefined.__assign) || function () {
	    __assign$2z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2z.apply(this, arguments);
	};
	var StoreMallDirectoryFontIcon = React.forwardRef(function StoreMallDirectoryFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2z({}, props, { ref: ref }), "store_mall_directory"));
	});

	var __assign$2y = (undefined && undefined.__assign) || function () {
	    __assign$2y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2y.apply(this, arguments);
	};
	var StoreFontIcon = React.forwardRef(function StoreFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2y({}, props, { ref: ref }), "store"));
	});

	var __assign$2x = (undefined && undefined.__assign) || function () {
	    __assign$2x = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2x.apply(this, arguments);
	};
	var StraightenFontIcon = React.forwardRef(function StraightenFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2x({}, props, { ref: ref }), "straighten"));
	});

	var __assign$2w = (undefined && undefined.__assign) || function () {
	    __assign$2w = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2w.apply(this, arguments);
	};
	var StreetviewFontIcon = React.forwardRef(function StreetviewFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2w({}, props, { ref: ref }), "streetview"));
	});

	var __assign$2v = (undefined && undefined.__assign) || function () {
	    __assign$2v = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2v.apply(this, arguments);
	};
	var StrikethroughSFontIcon = React.forwardRef(function StrikethroughSFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2v({}, props, { ref: ref }), "strikethrough_s"));
	});

	var __assign$2u = (undefined && undefined.__assign) || function () {
	    __assign$2u = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2u.apply(this, arguments);
	};
	var StyleFontIcon = React.forwardRef(function StyleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2u({}, props, { ref: ref }), "style"));
	});

	var __assign$2t = (undefined && undefined.__assign) || function () {
	    __assign$2t = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2t.apply(this, arguments);
	};
	var SubdirectoryArrowLeftFontIcon = React.forwardRef(function SubdirectoryArrowLeftFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2t({}, props, { ref: ref }), "subdirectory_arrow_left"));
	});

	var __assign$2s = (undefined && undefined.__assign) || function () {
	    __assign$2s = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2s.apply(this, arguments);
	};
	var SubdirectoryArrowRightFontIcon = React.forwardRef(function SubdirectoryArrowRightFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2s({}, props, { ref: ref }), "subdirectory_arrow_right"));
	});

	var __assign$2r = (undefined && undefined.__assign) || function () {
	    __assign$2r = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2r.apply(this, arguments);
	};
	var SubjectFontIcon = React.forwardRef(function SubjectFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2r({}, props, { ref: ref }), "subject"));
	});

	var __assign$2q = (undefined && undefined.__assign) || function () {
	    __assign$2q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2q.apply(this, arguments);
	};
	var SubscriptionsFontIcon = React.forwardRef(function SubscriptionsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2q({}, props, { ref: ref }), "subscriptions"));
	});

	var __assign$2p = (undefined && undefined.__assign) || function () {
	    __assign$2p = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2p.apply(this, arguments);
	};
	var SubtitlesFontIcon = React.forwardRef(function SubtitlesFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2p({}, props, { ref: ref }), "subtitles"));
	});

	var __assign$2o = (undefined && undefined.__assign) || function () {
	    __assign$2o = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2o.apply(this, arguments);
	};
	var SubwayFontIcon = React.forwardRef(function SubwayFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2o({}, props, { ref: ref }), "subway"));
	});

	var __assign$2n = (undefined && undefined.__assign) || function () {
	    __assign$2n = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2n.apply(this, arguments);
	};
	var SupervisorAccountFontIcon = React.forwardRef(function SupervisorAccountFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2n({}, props, { ref: ref }), "supervisor_account"));
	});

	var __assign$2m = (undefined && undefined.__assign) || function () {
	    __assign$2m = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2m.apply(this, arguments);
	};
	var SurroundSoundFontIcon = React.forwardRef(function SurroundSoundFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2m({}, props, { ref: ref }), "surround_sound"));
	});

	var __assign$2l = (undefined && undefined.__assign) || function () {
	    __assign$2l = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2l.apply(this, arguments);
	};
	var SwapCallsFontIcon = React.forwardRef(function SwapCallsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2l({}, props, { ref: ref }), "swap_calls"));
	});

	var __assign$2k = (undefined && undefined.__assign) || function () {
	    __assign$2k = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2k.apply(this, arguments);
	};
	var SwapHorizFontIcon = React.forwardRef(function SwapHorizFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2k({}, props, { ref: ref }), "swap_horiz"));
	});

	var __assign$2j = (undefined && undefined.__assign) || function () {
	    __assign$2j = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2j.apply(this, arguments);
	};
	var SwapVertFontIcon = React.forwardRef(function SwapVertFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2j({}, props, { ref: ref }), "swap_vert"));
	});

	var __assign$2i = (undefined && undefined.__assign) || function () {
	    __assign$2i = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2i.apply(this, arguments);
	};
	var SwapVerticalCircleFontIcon = React.forwardRef(function SwapVerticalCircleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2i({}, props, { ref: ref }), "swap_vertical_circle"));
	});

	var __assign$2h = (undefined && undefined.__assign) || function () {
	    __assign$2h = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2h.apply(this, arguments);
	};
	var SwitchCameraFontIcon = React.forwardRef(function SwitchCameraFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2h({}, props, { ref: ref }), "switch_camera"));
	});

	var __assign$2g = (undefined && undefined.__assign) || function () {
	    __assign$2g = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2g.apply(this, arguments);
	};
	var SwitchVideoFontIcon = React.forwardRef(function SwitchVideoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2g({}, props, { ref: ref }), "switch_video"));
	});

	var __assign$2f = (undefined && undefined.__assign) || function () {
	    __assign$2f = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2f.apply(this, arguments);
	};
	var SyncDisabledFontIcon = React.forwardRef(function SyncDisabledFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2f({}, props, { ref: ref }), "sync_disabled"));
	});

	var __assign$2e = (undefined && undefined.__assign) || function () {
	    __assign$2e = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2e.apply(this, arguments);
	};
	var SyncProblemFontIcon = React.forwardRef(function SyncProblemFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2e({}, props, { ref: ref }), "sync_problem"));
	});

	var __assign$2d = (undefined && undefined.__assign) || function () {
	    __assign$2d = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2d.apply(this, arguments);
	};
	var SyncFontIcon = React.forwardRef(function SyncFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2d({}, props, { ref: ref }), "sync"));
	});

	var __assign$2c = (undefined && undefined.__assign) || function () {
	    __assign$2c = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2c.apply(this, arguments);
	};
	var SystemUpdateAltFontIcon = React.forwardRef(function SystemUpdateAltFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2c({}, props, { ref: ref }), "system_update_alt"));
	});

	var __assign$2b = (undefined && undefined.__assign) || function () {
	    __assign$2b = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2b.apply(this, arguments);
	};
	var SystemUpdateFontIcon = React.forwardRef(function SystemUpdateFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2b({}, props, { ref: ref }), "system_update"));
	});

	var __assign$2a = (undefined && undefined.__assign) || function () {
	    __assign$2a = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2a.apply(this, arguments);
	};
	var TabUnselectedFontIcon = React.forwardRef(function TabUnselectedFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$2a({}, props, { ref: ref }), "tab_unselected"));
	});

	var __assign$29 = (undefined && undefined.__assign) || function () {
	    __assign$29 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$29.apply(this, arguments);
	};
	var TabFontIcon = React.forwardRef(function TabFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$29({}, props, { ref: ref }), "tab"));
	});

	var __assign$28 = (undefined && undefined.__assign) || function () {
	    __assign$28 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$28.apply(this, arguments);
	};
	var TabletAndroidFontIcon = React.forwardRef(function TabletAndroidFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$28({}, props, { ref: ref }), "tablet_android"));
	});

	var __assign$27 = (undefined && undefined.__assign) || function () {
	    __assign$27 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$27.apply(this, arguments);
	};
	var TabletMacFontIcon = React.forwardRef(function TabletMacFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$27({}, props, { ref: ref }), "tablet_mac"));
	});

	var __assign$26 = (undefined && undefined.__assign) || function () {
	    __assign$26 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$26.apply(this, arguments);
	};
	var TabletFontIcon = React.forwardRef(function TabletFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$26({}, props, { ref: ref }), "tablet"));
	});

	var __assign$25 = (undefined && undefined.__assign) || function () {
	    __assign$25 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$25.apply(this, arguments);
	};
	var TagFacesFontIcon = React.forwardRef(function TagFacesFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$25({}, props, { ref: ref }), "tag_faces"));
	});

	var __assign$24 = (undefined && undefined.__assign) || function () {
	    __assign$24 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$24.apply(this, arguments);
	};
	var TapAndPlayFontIcon = React.forwardRef(function TapAndPlayFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$24({}, props, { ref: ref }), "tap_and_play"));
	});

	var __assign$23 = (undefined && undefined.__assign) || function () {
	    __assign$23 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$23.apply(this, arguments);
	};
	var TerrainFontIcon = React.forwardRef(function TerrainFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$23({}, props, { ref: ref }), "terrain"));
	});

	var __assign$22 = (undefined && undefined.__assign) || function () {
	    __assign$22 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$22.apply(this, arguments);
	};
	var TextFieldsFontIcon = React.forwardRef(function TextFieldsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$22({}, props, { ref: ref }), "text_fields"));
	});

	var __assign$21 = (undefined && undefined.__assign) || function () {
	    __assign$21 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$21.apply(this, arguments);
	};
	var TextFormatFontIcon = React.forwardRef(function TextFormatFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$21({}, props, { ref: ref }), "text_format"));
	});

	var __assign$20 = (undefined && undefined.__assign) || function () {
	    __assign$20 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$20.apply(this, arguments);
	};
	var TextsmsFontIcon = React.forwardRef(function TextsmsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$20({}, props, { ref: ref }), "textsms"));
	});

	var __assign$1$ = (undefined && undefined.__assign) || function () {
	    __assign$1$ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1$.apply(this, arguments);
	};
	var TextureFontIcon = React.forwardRef(function TextureFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1$({}, props, { ref: ref }), "texture"));
	});

	var __assign$1_ = (undefined && undefined.__assign) || function () {
	    __assign$1_ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1_.apply(this, arguments);
	};
	var TheatersFontIcon = React.forwardRef(function TheatersFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1_({}, props, { ref: ref }), "theaters"));
	});

	var __assign$1Z = (undefined && undefined.__assign) || function () {
	    __assign$1Z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1Z.apply(this, arguments);
	};
	var ThumbDownFontIcon = React.forwardRef(function ThumbDownFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1Z({}, props, { ref: ref }), "thumb_down"));
	});

	var __assign$1Y = (undefined && undefined.__assign) || function () {
	    __assign$1Y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1Y.apply(this, arguments);
	};
	var ThumbUpFontIcon = React.forwardRef(function ThumbUpFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1Y({}, props, { ref: ref }), "thumb_up"));
	});

	var __assign$1X = (undefined && undefined.__assign) || function () {
	    __assign$1X = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1X.apply(this, arguments);
	};
	var ThumbsUpDownFontIcon = React.forwardRef(function ThumbsUpDownFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1X({}, props, { ref: ref }), "thumbs_up_down"));
	});

	var __assign$1W = (undefined && undefined.__assign) || function () {
	    __assign$1W = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1W.apply(this, arguments);
	};
	var TimeToLeaveFontIcon = React.forwardRef(function TimeToLeaveFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1W({}, props, { ref: ref }), "time_to_leave"));
	});

	var __assign$1V = (undefined && undefined.__assign) || function () {
	    __assign$1V = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1V.apply(this, arguments);
	};
	var TimelapseFontIcon = React.forwardRef(function TimelapseFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1V({}, props, { ref: ref }), "timelapse"));
	});

	var __assign$1U = (undefined && undefined.__assign) || function () {
	    __assign$1U = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1U.apply(this, arguments);
	};
	var TimelineFontIcon = React.forwardRef(function TimelineFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1U({}, props, { ref: ref }), "timeline"));
	});

	var __assign$1T = (undefined && undefined.__assign) || function () {
	    __assign$1T = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1T.apply(this, arguments);
	};
	var Timer10FontIcon = React.forwardRef(function Timer10FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1T({}, props, { ref: ref }), "timer_10"));
	});

	var __assign$1S = (undefined && undefined.__assign) || function () {
	    __assign$1S = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1S.apply(this, arguments);
	};
	var Timer3FontIcon = React.forwardRef(function Timer3FontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1S({}, props, { ref: ref }), "timer_3"));
	});

	var __assign$1R = (undefined && undefined.__assign) || function () {
	    __assign$1R = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1R.apply(this, arguments);
	};
	var TimerOffFontIcon = React.forwardRef(function TimerOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1R({}, props, { ref: ref }), "timer_off"));
	});

	var __assign$1Q = (undefined && undefined.__assign) || function () {
	    __assign$1Q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1Q.apply(this, arguments);
	};
	var TimerFontIcon = React.forwardRef(function TimerFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1Q({}, props, { ref: ref }), "timer"));
	});

	var __assign$1P = (undefined && undefined.__assign) || function () {
	    __assign$1P = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1P.apply(this, arguments);
	};
	var TitleFontIcon = React.forwardRef(function TitleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1P({}, props, { ref: ref }), "title"));
	});

	var __assign$1O = (undefined && undefined.__assign) || function () {
	    __assign$1O = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1O.apply(this, arguments);
	};
	var TocFontIcon = React.forwardRef(function TocFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1O({}, props, { ref: ref }), "toc"));
	});

	var __assign$1N = (undefined && undefined.__assign) || function () {
	    __assign$1N = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1N.apply(this, arguments);
	};
	var TodayFontIcon = React.forwardRef(function TodayFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1N({}, props, { ref: ref }), "today"));
	});

	var __assign$1M = (undefined && undefined.__assign) || function () {
	    __assign$1M = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1M.apply(this, arguments);
	};
	var TollFontIcon = React.forwardRef(function TollFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1M({}, props, { ref: ref }), "toll"));
	});

	var __assign$1L = (undefined && undefined.__assign) || function () {
	    __assign$1L = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1L.apply(this, arguments);
	};
	var TonalityFontIcon = React.forwardRef(function TonalityFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1L({}, props, { ref: ref }), "tonality"));
	});

	var __assign$1K = (undefined && undefined.__assign) || function () {
	    __assign$1K = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1K.apply(this, arguments);
	};
	var TouchAppFontIcon = React.forwardRef(function TouchAppFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1K({}, props, { ref: ref }), "touch_app"));
	});

	var __assign$1J = (undefined && undefined.__assign) || function () {
	    __assign$1J = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1J.apply(this, arguments);
	};
	var ToysFontIcon = React.forwardRef(function ToysFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1J({}, props, { ref: ref }), "toys"));
	});

	var __assign$1I = (undefined && undefined.__assign) || function () {
	    __assign$1I = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1I.apply(this, arguments);
	};
	var TrackChangesFontIcon = React.forwardRef(function TrackChangesFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1I({}, props, { ref: ref }), "track_changes"));
	});

	var __assign$1H = (undefined && undefined.__assign) || function () {
	    __assign$1H = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1H.apply(this, arguments);
	};
	var TrafficFontIcon = React.forwardRef(function TrafficFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1H({}, props, { ref: ref }), "traffic"));
	});

	var __assign$1G = (undefined && undefined.__assign) || function () {
	    __assign$1G = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1G.apply(this, arguments);
	};
	var TrainFontIcon = React.forwardRef(function TrainFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1G({}, props, { ref: ref }), "train"));
	});

	var __assign$1F = (undefined && undefined.__assign) || function () {
	    __assign$1F = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1F.apply(this, arguments);
	};
	var TramFontIcon = React.forwardRef(function TramFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1F({}, props, { ref: ref }), "tram"));
	});

	var __assign$1E = (undefined && undefined.__assign) || function () {
	    __assign$1E = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1E.apply(this, arguments);
	};
	var TransferWithinAStationFontIcon = React.forwardRef(function TransferWithinAStationFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1E({}, props, { ref: ref }), "transfer_within_a_station"));
	});

	var __assign$1D = (undefined && undefined.__assign) || function () {
	    __assign$1D = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1D.apply(this, arguments);
	};
	var TransformFontIcon = React.forwardRef(function TransformFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1D({}, props, { ref: ref }), "transform"));
	});

	var __assign$1C = (undefined && undefined.__assign) || function () {
	    __assign$1C = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1C.apply(this, arguments);
	};
	var TranslateFontIcon = React.forwardRef(function TranslateFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1C({}, props, { ref: ref }), "translate"));
	});

	var __assign$1B = (undefined && undefined.__assign) || function () {
	    __assign$1B = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1B.apply(this, arguments);
	};
	var TrendingDownFontIcon = React.forwardRef(function TrendingDownFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1B({}, props, { ref: ref }), "trending_down"));
	});

	var __assign$1A = (undefined && undefined.__assign) || function () {
	    __assign$1A = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1A.apply(this, arguments);
	};
	var TrendingFlatFontIcon = React.forwardRef(function TrendingFlatFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1A({}, props, { ref: ref }), "trending_flat"));
	});

	var __assign$1z = (undefined && undefined.__assign) || function () {
	    __assign$1z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1z.apply(this, arguments);
	};
	var TrendingUpFontIcon = React.forwardRef(function TrendingUpFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1z({}, props, { ref: ref }), "trending_up"));
	});

	var __assign$1y = (undefined && undefined.__assign) || function () {
	    __assign$1y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1y.apply(this, arguments);
	};
	var TuneFontIcon = React.forwardRef(function TuneFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1y({}, props, { ref: ref }), "tune"));
	});

	var __assign$1x = (undefined && undefined.__assign) || function () {
	    __assign$1x = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1x.apply(this, arguments);
	};
	var TurnedInNotFontIcon = React.forwardRef(function TurnedInNotFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1x({}, props, { ref: ref }), "turned_in_not"));
	});

	var __assign$1w = (undefined && undefined.__assign) || function () {
	    __assign$1w = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1w.apply(this, arguments);
	};
	var TurnedInFontIcon = React.forwardRef(function TurnedInFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1w({}, props, { ref: ref }), "turned_in"));
	});

	var __assign$1v = (undefined && undefined.__assign) || function () {
	    __assign$1v = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1v.apply(this, arguments);
	};
	var TvFontIcon = React.forwardRef(function TvFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1v({}, props, { ref: ref }), "tv"));
	});

	var __assign$1u = (undefined && undefined.__assign) || function () {
	    __assign$1u = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1u.apply(this, arguments);
	};
	var UnarchiveFontIcon = React.forwardRef(function UnarchiveFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1u({}, props, { ref: ref }), "unarchive"));
	});

	var __assign$1t = (undefined && undefined.__assign) || function () {
	    __assign$1t = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1t.apply(this, arguments);
	};
	var UndoFontIcon = React.forwardRef(function UndoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1t({}, props, { ref: ref }), "undo"));
	});

	var __assign$1s = (undefined && undefined.__assign) || function () {
	    __assign$1s = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1s.apply(this, arguments);
	};
	var UnfoldLessFontIcon = React.forwardRef(function UnfoldLessFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1s({}, props, { ref: ref }), "unfold_less"));
	});

	var __assign$1r = (undefined && undefined.__assign) || function () {
	    __assign$1r = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1r.apply(this, arguments);
	};
	var UnfoldMoreFontIcon = React.forwardRef(function UnfoldMoreFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1r({}, props, { ref: ref }), "unfold_more"));
	});

	var __assign$1q = (undefined && undefined.__assign) || function () {
	    __assign$1q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1q.apply(this, arguments);
	};
	var UpdateFontIcon = React.forwardRef(function UpdateFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1q({}, props, { ref: ref }), "update"));
	});

	var __assign$1p = (undefined && undefined.__assign) || function () {
	    __assign$1p = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1p.apply(this, arguments);
	};
	var UsbFontIcon = React.forwardRef(function UsbFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1p({}, props, { ref: ref }), "usb"));
	});

	var __assign$1o = (undefined && undefined.__assign) || function () {
	    __assign$1o = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1o.apply(this, arguments);
	};
	var VerifiedUserFontIcon = React.forwardRef(function VerifiedUserFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1o({}, props, { ref: ref }), "verified_user"));
	});

	var __assign$1n = (undefined && undefined.__assign) || function () {
	    __assign$1n = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1n.apply(this, arguments);
	};
	var VerticalAlignBottomFontIcon = React.forwardRef(function VerticalAlignBottomFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1n({}, props, { ref: ref }), "vertical_align_bottom"));
	});

	var __assign$1m = (undefined && undefined.__assign) || function () {
	    __assign$1m = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1m.apply(this, arguments);
	};
	var VerticalAlignCenterFontIcon = React.forwardRef(function VerticalAlignCenterFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1m({}, props, { ref: ref }), "vertical_align_center"));
	});

	var __assign$1l = (undefined && undefined.__assign) || function () {
	    __assign$1l = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1l.apply(this, arguments);
	};
	var VerticalAlignTopFontIcon = React.forwardRef(function VerticalAlignTopFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1l({}, props, { ref: ref }), "vertical_align_top"));
	});

	var __assign$1k = (undefined && undefined.__assign) || function () {
	    __assign$1k = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1k.apply(this, arguments);
	};
	var VibrationFontIcon = React.forwardRef(function VibrationFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1k({}, props, { ref: ref }), "vibration"));
	});

	var __assign$1j = (undefined && undefined.__assign) || function () {
	    __assign$1j = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1j.apply(this, arguments);
	};
	var VideoCallFontIcon = React.forwardRef(function VideoCallFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1j({}, props, { ref: ref }), "video_call"));
	});

	var __assign$1i = (undefined && undefined.__assign) || function () {
	    __assign$1i = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1i.apply(this, arguments);
	};
	var VideoLabelFontIcon = React.forwardRef(function VideoLabelFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1i({}, props, { ref: ref }), "video_label"));
	});

	var __assign$1h = (undefined && undefined.__assign) || function () {
	    __assign$1h = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1h.apply(this, arguments);
	};
	var VideoLibraryFontIcon = React.forwardRef(function VideoLibraryFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1h({}, props, { ref: ref }), "video_library"));
	});

	var __assign$1g = (undefined && undefined.__assign) || function () {
	    __assign$1g = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1g.apply(this, arguments);
	};
	var VideocamOffFontIcon = React.forwardRef(function VideocamOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1g({}, props, { ref: ref }), "videocam_off"));
	});

	var __assign$1f = (undefined && undefined.__assign) || function () {
	    __assign$1f = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1f.apply(this, arguments);
	};
	var VideocamFontIcon = React.forwardRef(function VideocamFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1f({}, props, { ref: ref }), "videocam"));
	});

	var __assign$1e = (undefined && undefined.__assign) || function () {
	    __assign$1e = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1e.apply(this, arguments);
	};
	var VideogameAssetFontIcon = React.forwardRef(function VideogameAssetFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1e({}, props, { ref: ref }), "videogame_asset"));
	});

	var __assign$1d = (undefined && undefined.__assign) || function () {
	    __assign$1d = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1d.apply(this, arguments);
	};
	var ViewAgendaFontIcon = React.forwardRef(function ViewAgendaFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1d({}, props, { ref: ref }), "view_agenda"));
	});

	var __assign$1c = (undefined && undefined.__assign) || function () {
	    __assign$1c = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1c.apply(this, arguments);
	};
	var ViewArrayFontIcon = React.forwardRef(function ViewArrayFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1c({}, props, { ref: ref }), "view_array"));
	});

	var __assign$1b = (undefined && undefined.__assign) || function () {
	    __assign$1b = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1b.apply(this, arguments);
	};
	var ViewCarouselFontIcon = React.forwardRef(function ViewCarouselFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1b({}, props, { ref: ref }), "view_carousel"));
	});

	var __assign$1a = (undefined && undefined.__assign) || function () {
	    __assign$1a = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1a.apply(this, arguments);
	};
	var ViewColumnFontIcon = React.forwardRef(function ViewColumnFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$1a({}, props, { ref: ref }), "view_column"));
	});

	var __assign$19 = (undefined && undefined.__assign) || function () {
	    __assign$19 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$19.apply(this, arguments);
	};
	var ViewComfyFontIcon = React.forwardRef(function ViewComfyFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$19({}, props, { ref: ref }), "view_comfy"));
	});

	var __assign$18 = (undefined && undefined.__assign) || function () {
	    __assign$18 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$18.apply(this, arguments);
	};
	var ViewCompactFontIcon = React.forwardRef(function ViewCompactFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$18({}, props, { ref: ref }), "view_compact"));
	});

	var __assign$17 = (undefined && undefined.__assign) || function () {
	    __assign$17 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$17.apply(this, arguments);
	};
	var ViewDayFontIcon = React.forwardRef(function ViewDayFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$17({}, props, { ref: ref }), "view_day"));
	});

	var __assign$16 = (undefined && undefined.__assign) || function () {
	    __assign$16 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$16.apply(this, arguments);
	};
	var ViewHeadlineFontIcon = React.forwardRef(function ViewHeadlineFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$16({}, props, { ref: ref }), "view_headline"));
	});

	var __assign$15 = (undefined && undefined.__assign) || function () {
	    __assign$15 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$15.apply(this, arguments);
	};
	var ViewListFontIcon = React.forwardRef(function ViewListFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$15({}, props, { ref: ref }), "view_list"));
	});

	var __assign$14 = (undefined && undefined.__assign) || function () {
	    __assign$14 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$14.apply(this, arguments);
	};
	var ViewModuleFontIcon = React.forwardRef(function ViewModuleFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$14({}, props, { ref: ref }), "view_module"));
	});

	var __assign$13 = (undefined && undefined.__assign) || function () {
	    __assign$13 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$13.apply(this, arguments);
	};
	var ViewQuiltFontIcon = React.forwardRef(function ViewQuiltFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$13({}, props, { ref: ref }), "view_quilt"));
	});

	var __assign$12 = (undefined && undefined.__assign) || function () {
	    __assign$12 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$12.apply(this, arguments);
	};
	var ViewStreamFontIcon = React.forwardRef(function ViewStreamFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$12({}, props, { ref: ref }), "view_stream"));
	});

	var __assign$11 = (undefined && undefined.__assign) || function () {
	    __assign$11 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$11.apply(this, arguments);
	};
	var ViewWeekFontIcon = React.forwardRef(function ViewWeekFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$11({}, props, { ref: ref }), "view_week"));
	});

	var __assign$10 = (undefined && undefined.__assign) || function () {
	    __assign$10 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$10.apply(this, arguments);
	};
	var VignetteFontIcon = React.forwardRef(function VignetteFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$10({}, props, { ref: ref }), "vignette"));
	});

	var __assign$$ = (undefined && undefined.__assign) || function () {
	    __assign$$ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$$.apply(this, arguments);
	};
	var VisibilityOffFontIcon = React.forwardRef(function VisibilityOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$$({}, props, { ref: ref }), "visibility_off"));
	});

	var __assign$_ = (undefined && undefined.__assign) || function () {
	    __assign$_ = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$_.apply(this, arguments);
	};
	var VisibilityFontIcon = React.forwardRef(function VisibilityFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$_({}, props, { ref: ref }), "visibility"));
	});

	var __assign$Z = (undefined && undefined.__assign) || function () {
	    __assign$Z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$Z.apply(this, arguments);
	};
	var VoiceChatFontIcon = React.forwardRef(function VoiceChatFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$Z({}, props, { ref: ref }), "voice_chat"));
	});

	var __assign$Y = (undefined && undefined.__assign) || function () {
	    __assign$Y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$Y.apply(this, arguments);
	};
	var VoicemailFontIcon = React.forwardRef(function VoicemailFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$Y({}, props, { ref: ref }), "voicemail"));
	});

	var __assign$X = (undefined && undefined.__assign) || function () {
	    __assign$X = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$X.apply(this, arguments);
	};
	var VolumeDownFontIcon = React.forwardRef(function VolumeDownFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$X({}, props, { ref: ref }), "volume_down"));
	});

	var __assign$W = (undefined && undefined.__assign) || function () {
	    __assign$W = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$W.apply(this, arguments);
	};
	var VolumeMuteFontIcon = React.forwardRef(function VolumeMuteFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$W({}, props, { ref: ref }), "volume_mute"));
	});

	var __assign$V = (undefined && undefined.__assign) || function () {
	    __assign$V = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$V.apply(this, arguments);
	};
	var VolumeOffFontIcon = React.forwardRef(function VolumeOffFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$V({}, props, { ref: ref }), "volume_off"));
	});

	var __assign$U = (undefined && undefined.__assign) || function () {
	    __assign$U = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$U.apply(this, arguments);
	};
	var VolumeUpFontIcon = React.forwardRef(function VolumeUpFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$U({}, props, { ref: ref }), "volume_up"));
	});

	var __assign$T = (undefined && undefined.__assign) || function () {
	    __assign$T = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$T.apply(this, arguments);
	};
	var VpnKeyFontIcon = React.forwardRef(function VpnKeyFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$T({}, props, { ref: ref }), "vpn_key"));
	});

	var __assign$S = (undefined && undefined.__assign) || function () {
	    __assign$S = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$S.apply(this, arguments);
	};
	var VpnLockFontIcon = React.forwardRef(function VpnLockFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$S({}, props, { ref: ref }), "vpn_lock"));
	});

	var __assign$R = (undefined && undefined.__assign) || function () {
	    __assign$R = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$R.apply(this, arguments);
	};
	var WallpaperFontIcon = React.forwardRef(function WallpaperFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$R({}, props, { ref: ref }), "wallpaper"));
	});

	var __assign$Q = (undefined && undefined.__assign) || function () {
	    __assign$Q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$Q.apply(this, arguments);
	};
	var WarningFontIcon = React.forwardRef(function WarningFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$Q({}, props, { ref: ref }), "warning"));
	});

	var __assign$P = (undefined && undefined.__assign) || function () {
	    __assign$P = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$P.apply(this, arguments);
	};
	var WatchLaterFontIcon = React.forwardRef(function WatchLaterFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$P({}, props, { ref: ref }), "watch_later"));
	});

	var __assign$O = (undefined && undefined.__assign) || function () {
	    __assign$O = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$O.apply(this, arguments);
	};
	var WatchFontIcon = React.forwardRef(function WatchFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$O({}, props, { ref: ref }), "watch"));
	});

	var __assign$N = (undefined && undefined.__assign) || function () {
	    __assign$N = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$N.apply(this, arguments);
	};
	var WbAutoFontIcon = React.forwardRef(function WbAutoFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$N({}, props, { ref: ref }), "wb_auto"));
	});

	var __assign$M = (undefined && undefined.__assign) || function () {
	    __assign$M = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$M.apply(this, arguments);
	};
	var WbCloudyFontIcon = React.forwardRef(function WbCloudyFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$M({}, props, { ref: ref }), "wb_cloudy"));
	});

	var __assign$L = (undefined && undefined.__assign) || function () {
	    __assign$L = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$L.apply(this, arguments);
	};
	var WbIncandescentFontIcon = React.forwardRef(function WbIncandescentFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$L({}, props, { ref: ref }), "wb_incandescent"));
	});

	var __assign$K = (undefined && undefined.__assign) || function () {
	    __assign$K = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$K.apply(this, arguments);
	};
	var WbIridescentFontIcon = React.forwardRef(function WbIridescentFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$K({}, props, { ref: ref }), "wb_iridescent"));
	});

	var __assign$J = (undefined && undefined.__assign) || function () {
	    __assign$J = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$J.apply(this, arguments);
	};
	var WbSunnyFontIcon = React.forwardRef(function WbSunnyFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$J({}, props, { ref: ref }), "wb_sunny"));
	});

	var __assign$I = (undefined && undefined.__assign) || function () {
	    __assign$I = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$I.apply(this, arguments);
	};
	var WcFontIcon = React.forwardRef(function WcFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$I({}, props, { ref: ref }), "wc"));
	});

	var __assign$H = (undefined && undefined.__assign) || function () {
	    __assign$H = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$H.apply(this, arguments);
	};
	var WebAssetFontIcon = React.forwardRef(function WebAssetFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$H({}, props, { ref: ref }), "web_asset"));
	});

	var __assign$G = (undefined && undefined.__assign) || function () {
	    __assign$G = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$G.apply(this, arguments);
	};
	var WebFontIcon = React.forwardRef(function WebFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$G({}, props, { ref: ref }), "web"));
	});

	var __assign$F = (undefined && undefined.__assign) || function () {
	    __assign$F = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$F.apply(this, arguments);
	};
	var WeekendFontIcon = React.forwardRef(function WeekendFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$F({}, props, { ref: ref }), "weekend"));
	});

	var __assign$E = (undefined && undefined.__assign) || function () {
	    __assign$E = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$E.apply(this, arguments);
	};
	var WhatshotFontIcon = React.forwardRef(function WhatshotFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$E({}, props, { ref: ref }), "whatshot"));
	});

	var __assign$D = (undefined && undefined.__assign) || function () {
	    __assign$D = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$D.apply(this, arguments);
	};
	var WidgetsFontIcon = React.forwardRef(function WidgetsFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$D({}, props, { ref: ref }), "widgets"));
	});

	var __assign$C = (undefined && undefined.__assign) || function () {
	    __assign$C = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$C.apply(this, arguments);
	};
	var WifiLockFontIcon = React.forwardRef(function WifiLockFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$C({}, props, { ref: ref }), "wifi_lock"));
	});

	var __assign$B = (undefined && undefined.__assign) || function () {
	    __assign$B = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$B.apply(this, arguments);
	};
	var WifiTetheringFontIcon = React.forwardRef(function WifiTetheringFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$B({}, props, { ref: ref }), "wifi_tethering"));
	});

	var __assign$A = (undefined && undefined.__assign) || function () {
	    __assign$A = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$A.apply(this, arguments);
	};
	var WifiFontIcon = React.forwardRef(function WifiFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$A({}, props, { ref: ref }), "wifi"));
	});

	var __assign$z = (undefined && undefined.__assign) || function () {
	    __assign$z = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$z.apply(this, arguments);
	};
	var WorkFontIcon = React.forwardRef(function WorkFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$z({}, props, { ref: ref }), "work"));
	});

	var __assign$y = (undefined && undefined.__assign) || function () {
	    __assign$y = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$y.apply(this, arguments);
	};
	var WrapTextFontIcon = React.forwardRef(function WrapTextFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$y({}, props, { ref: ref }), "wrap_text"));
	});

	var __assign$x = (undefined && undefined.__assign) || function () {
	    __assign$x = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$x.apply(this, arguments);
	};
	var YoutubeSearchedForFontIcon = React.forwardRef(function YoutubeSearchedForFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$x({}, props, { ref: ref }), "youtube_searched_for"));
	});

	var __assign$w = (undefined && undefined.__assign) || function () {
	    __assign$w = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$w.apply(this, arguments);
	};
	var ZoomInFontIcon = React.forwardRef(function ZoomInFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$w({}, props, { ref: ref }), "zoom_in"));
	});

	var __assign$v = (undefined && undefined.__assign) || function () {
	    __assign$v = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$v.apply(this, arguments);
	};
	var ZoomOutMapFontIcon = React.forwardRef(function ZoomOutMapFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$v({}, props, { ref: ref }), "zoom_out_map"));
	});

	var __assign$u = (undefined && undefined.__assign) || function () {
	    __assign$u = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$u.apply(this, arguments);
	};
	var ZoomOutFontIcon = React.forwardRef(function ZoomOutFontIcon(props, ref) {
	    return (React__default['default'].createElement(FontIcon, __assign$u({}, props, { ref: ref }), "zoom_out"));
	});

	var __assign$t = (undefined && undefined.__assign) || function () {
	    __assign$t = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$t.apply(this, arguments);
	};
	var __rest$o = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$d = bem("rmd-media-container");
	/**
	 * The `MediaContainer` component is used to make responsive images and videos
	 * within your app. This component also allows for focing a specific aspect
	 * ratio for these elements with both the `height` and `width` props are
	 * provided.
	 */
	var MediaContainer = React.forwardRef(function MediaContainer(_a, ref) {
	    var className = _a.className, height = _a.height, width = _a.width, children = _a.children, _b = _a.auto, auto = _b === void 0 ? true : _b, _c = _a.fullWidth, fullWidth = _c === void 0 ? false : _c, props = __rest$o(_a, ["className", "height", "width", "children", "auto", "fullWidth"]);
	    var aspectRatio = height && width ? "rmd-media-container--" + width + "-" + height : "";
	    return (React__default['default'].createElement("div", __assign$t({}, props, { ref: ref, className: cn(block$d({
	            auto: auto,
	            "aspect-ratio": aspectRatio,
	            "full-width": fullWidth,
	        }), aspectRatio, className) }), children));
	});

	var __assign$s = (undefined && undefined.__assign) || function () {
	    __assign$s = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$s.apply(this, arguments);
	};
	var __rest$n = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * The `MediaOverlay` component is used to create an overlay over specific media
	 * items within the `MediaContainer` component. You will need to apply most of
	 * your own styles as this is really just used for positioning.
	 */
	var MediaOverlay = React.forwardRef(function MediaOverlay(_a, ref) {
	    var className = _a.className, children = _a.children, _b = _a.position, position = _b === void 0 ? "bottom" : _b, props = __rest$n(_a, ["className", "children", "position"]);
	    return (React__default['default'].createElement("div", __assign$s({}, props, { ref: ref, className: cn("rmd-media-overlay rmd-media-overlay--" + position, className) }), children));
	});

	/* eslint-disable react/prop-types */
	var block$c = bem("rmd-menu-icon");
	function ToggleChildren(_a) {
	    var dropdownIcon = _a.dropdownIcon, disableDropdownIcon = _a.disableDropdownIcon, children = _a.children, visible = _a.visible;
	    if (disableDropdownIcon || !dropdownIcon) {
	        return React__default['default'].createElement(React__default['default'].Fragment, null, children);
	    }
	    return (React__default['default'].createElement(TextIconSpacing, { icon: React__default['default'].createElement(IconRotator, { rotated: visible, className: block$c() }, dropdownIcon), iconAfter: true }, children));
	}

	var __assign$r = (undefined && undefined.__assign) || function () {
	    __assign$r = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$r.apply(this, arguments);
	};
	var __rest$m = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$b = bem("rmd-menu-button");
	/**
	 * This component is an extension of the `Button` component that will:
	 * - apply the required a11y prosp for a menu button
	 * - dynamically add a dropdown icon after the button contents
	 */
	var MenuButton = React.forwardRef(function MenuButton(_a, ref) {
	    var _b;
	    var _c = _a["aria-haspopup"], ariaHasPopup = _c === void 0 ? "menu" : _c, className = _a.className, visible = _a.visible, children = _a.children, propDropdownIcon = _a.dropdownIcon, _d = _a.disableDropdownIcon, disableDropdownIcon = _d === void 0 ? false : _d, _e = _a.first, first = _e === void 0 ? false : _e, _f = _a.last, last = _f === void 0 ? false : _f, inheritColor = _a.inheritColor, _g = _a.asAppBarAction, asAppBarAction = _g === void 0 ? false : _g, props = __rest$m(_a, ["aria-haspopup", "className", "visible", "children", "dropdownIcon", "disableDropdownIcon", "first", "last", "inheritColor", "asAppBarAction"]);
	    var buttonType = props.buttonType;
	    var dropdownIcon = useIcon("dropdown", propDropdownIcon);
	    var actionClassName = useActionClassName({ first: first, last: last, inheritColor: inheritColor });
	    return (React__default['default'].createElement(Button, __assign$r({}, props, { ref: ref, "aria-haspopup": ariaHasPopup, "aria-expanded": visible ? "true" : undefined, className: cn(block$b(), (_b = {},
	            _b[actionClassName] = first || last || inheritColor || asAppBarAction,
	            _b), className) }),
	        React__default['default'].createElement(ToggleChildren, { visible: visible, dropdownIcon: dropdownIcon, disableDropdownIcon: disableDropdownIcon || buttonType === "icon" }, children)));
	});

	/**
	 * This is just a simple component that is used with the `Menu` component to
	 * handle the initial focus on mount and re-focusing a previous element on
	 * unmount.
	 * @internal
	 */
	function MenuEvents(_a) {
	    var menuRef = _a.menuRef, cancelled = _a.cancelled, defaultFocus = _a.defaultFocus;
	    usePreviousFocus(cancelled);
	    useFocusOnMount(menuRef, defaultFocus, false, true);
	    return null;
	}

	/* eslint-disable react/prop-types */
	var Orientation = React.createContext("vertical");
	function useOrientation() {
	    return React.useContext(Orientation);
	}
	function OrientationProvider(_a) {
	    var orientation = _a.orientation, children = _a.children;
	    return (React__default['default'].createElement(Orientation.Provider, { value: orientation }, children));
	}

	/**
	 * This hook is used to create a click handler on the menu that will close the
	 * menu when any `MenuItem` is clicked.
	 */
	function useMenuClick(_a) {
	    var onClick = _a.onClick, onRequestClose = _a.onRequestClose;
	    var cache = useRefCache({ onClick: onClick, onRequestClose: onRequestClose });
	    return React.useCallback(function (event) {
	        var _a = cache.current, onClick = _a.onClick, onRequestClose = _a.onRequestClose;
	        if (onClick) {
	            onClick(event);
	        }
	        var target = event.target;
	        if (!target ||
	            (event.currentTarget !== target && !target.closest("[aria-haspopup]"))) {
	            onRequestClose();
	        }
	        // disabled since useRefCache
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, []);
	}

	var __assign$q = (undefined && undefined.__assign) || function () {
	    __assign$q = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$q.apply(this, arguments);
	};
	/**
	 * This hook allows for the keyboard movement within a menu. It'll make sure
	 * that the arrow keys and typing letters can correctly focus menu items. In
	 * addition, it'll automatically swap to the left and right arrow keys if the
	 * menu is displayed horizontally.
	 */
	function useMenuKeyDown(_a) {
	    var menu = _a.menu, onKeyDown = _a.onKeyDown, onRequestClose = _a.onRequestClose, portalled = _a.portalled, horizontal = _a.horizontal, defaultFocus = _a.defaultFocus;
	    var _b = React.useState(0), focusedIndex = _b[0], setFocusedIndex = _b[1];
	    var items = React.useMemo(function () {
	        if (!menu) {
	            return [];
	        }
	        return getFocusableElements(menu, true);
	    }, [menu]);
	    React.useEffect(function () {
	        if (!menu) {
	            return;
	        }
	        if (defaultFocus === "last") {
	            setFocusedIndex(items.length - 1);
	        }
	        else {
	            setFocusedIndex(0);
	        }
	        // only want to trigger this on initial menu mount
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, [menu]);
	    return useKeyboardMovement(__assign$q(__assign$q({}, (horizontal
	        ? HORIZONTAL_MENU
	        : VERTICAL_MENU)), { focusedIndex: focusedIndex,
	        onChange: function (_a) {
	            var index = _a.index;
	            setFocusedIndex(index);
	            if (items[index]) {
	                items[index].focus();
	            }
	        }, items: items.map(function (item) { return extractTextContent(item); }), onKeyDown: function (event) {
	            if (onKeyDown) {
	                onKeyDown(event);
	            }
	            if (event.key === "Escape") {
	                event.stopPropagation();
	                onRequestClose();
	            }
	            else if (event.key === "Tab") {
	                if (portalled) {
	                    // have to prevent default tab behavior since tab order is ruined when
	                    // something is portalled. this will make it interact the same as if
	                    // it was an escape keypress. it's too much work to try to emulate a
	                    // real tab here
	                    event.preventDefault();
	                }
	                onRequestClose();
	            }
	        } }))[1];
	}

	/**
	 * This hook is used to provide all the menu functionality within the `Menu`
	 * component.  It'll ensure that:
	 *
	 * - the menu will be closed if an element outside of the menu is clicked
	 * - the menu items within the menu are keyboard focusable after typing or using
	 *   the arrow keys
	 * - the menu will close if the Escape key or Tab key is pressed (tab since
	 *   it'll lose focus)
	 * - conditionally close the menu if the page is scrolled while visible.
	 */
	function useMenu(_a) {
	    var propRef = _a.ref, visible = _a.visible, controlId = _a.controlId, _b = _a.horizontal, horizontal = _b === void 0 ? false : _b, propOnClick = _a.onClick, propOnKeyDown = _a.onKeyDown, _c = _a.portalled, portalled = _c === void 0 ? false : _c, defaultFocus = _a.defaultFocus, onRequestClose = _a.onRequestClose, _d = _a.disableControlClickOkay, disableControlClickOkay = _d === void 0 ? false : _d;
	    var _e = useEnsuredRef(propRef), ref = _e[0], refHandler = _e[1];
	    useCloseOnOutsideClick({
	        element: ref,
	        enabled: visible,
	        onOutsideClick: function (element, target, contains) {
	            if (!element || !target) {
	                return;
	            }
	            var control = document.getElementById(controlId);
	            // Need to also check if we have an `aria-expanded` visible anywhere since
	            // the child menus need to be portalled out to fix the overflow issue in
	            // Safari. If we didn't need to portal, this line could be removed as the
	            // `menu.current` would contain the child menu and not close.
	            var expanded = ref.current &&
	                ref.current.querySelector('[aria-expanded="true"]') &&
	                target.closest('[role="menu"]');
	            if ((disableControlClickOkay || !contains(control, target)) &&
	                !expanded) {
	                onRequestClose();
	            }
	        },
	    });
	    var onClick = useMenuClick({ onClick: propOnClick, onRequestClose: onRequestClose });
	    var onKeyDown = useMenuKeyDown({
	        menu: ref.current,
	        onKeyDown: propOnKeyDown,
	        onRequestClose: onRequestClose,
	        portalled: portalled,
	        horizontal: horizontal,
	        defaultFocus: defaultFocus,
	    });
	    return {
	        ref: refHandler,
	        menuRef: ref,
	        onClick: onClick,
	        onKeyDown: onKeyDown,
	    };
	}

	var __assign$p = (undefined && undefined.__assign) || function () {
	    __assign$p = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$p.apply(this, arguments);
	};
	var __rest$l = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$a = bem("rmd-menu");
	/**
	 * The `Menu` component is a fully controlled component that will animate in and
	 * out based on the `visible` prop as well as handle keyboard focus, closing
	 * when needed, etc.
	 */
	var Menu = React.forwardRef(function Menu(_a, forwardedRef) {
	    var _b = _a.role, role = _b === void 0 ? "menu" : _b, _c = _a.tabIndex, tabIndex = _c === void 0 ? -1 : _c, controlId = _a.controlId, propStyle = _a.style, className = _a.className, visible = _a.visible, onRequestClose = _a.onRequestClose, children = _a.children, portal = _a.portal, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, _d = _a.mountOnEnter, mountOnEnter = _d === void 0 ? true : _d, _e = _a.unmountOnExit, unmountOnExit = _e === void 0 ? true : _e, propOnEnter = _a.onEnter, propOnEntering = _a.onEntering, propOnEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, propOnExited = _a.onExited, timeout = _a.timeout, classNames = _a.classNames, propAnchor = _a.anchor, propOnClick = _a.onClick, propOnKeyDown = _a.onKeyDown, _f = _a.defaultFocus, defaultFocus = _f === void 0 ? "first" : _f, _g = _a.horizontal, horizontal = _g === void 0 ? false : _g, positionOptions = _a.positionOptions, _h = _a.closeOnScroll, closeOnScroll = _h === void 0 ? false : _h, _j = _a.closeOnResize, closeOnResize = _j === void 0 ? false : _j, _k = _a.disableControlClickOkay, disableControlClickOkay = _k === void 0 ? false : _k, props = __rest$l(_a, ["role", "tabIndex", "controlId", "style", "className", "visible", "onRequestClose", "children", "portal", "portalInto", "portalIntoId", "mountOnEnter", "unmountOnExit", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "timeout", "classNames", "anchor", "onClick", "onKeyDown", "defaultFocus", "horizontal", "positionOptions", "closeOnScroll", "closeOnResize", "disableControlClickOkay"]);
	    var anchor = propAnchor;
	    if (!anchor) {
	        anchor = horizontal ? CENTER_CENTER_ANCHOR : TOP_INNER_RIGHT_ANCHOR;
	    }
	    // TODO: Refactor all the menu functionality since I made this when I had no
	    // idea what I was doing with hooks
	    var _l = useMenu({
	        ref: forwardedRef,
	        visible: visible,
	        controlId: controlId,
	        horizontal: horizontal,
	        onClick: propOnClick,
	        onKeyDown: propOnKeyDown,
	        portalled: portal || typeof portalInto !== "undefined" || !!portalIntoId,
	        defaultFocus: defaultFocus,
	        onRequestClose: onRequestClose,
	        disableControlClickOkay: disableControlClickOkay,
	    }), ref = _l.ref, menuRef = _l.menuRef, onClick = _l.onClick, onKeyDown = _l.onKeyDown;
	    var _m = React.useState(false), cancelled = _m[0], setCancelled = _m[1];
	    var prevVisible = React.useRef(visible);
	    if (prevVisible.current !== visible) {
	        prevVisible.current = visible;
	        if (cancelled) {
	            setCancelled(false);
	        }
	    }
	    var _o = useFixedPositioning(__assign$p(__assign$p({}, positionOptions), { fixedTo: function () { return document.getElementById(controlId); }, onScroll: function (_event, _a) {
	            var visible = _a.visible;
	            if (!closeOnScroll && visible) {
	                return;
	            }
	            if (!visible) {
	                setCancelled(true);
	            }
	            onRequestClose();
	        }, onResize: closeOnResize ? onRequestClose : undefined, anchor: anchor, onEnter: propOnEnter, onEntering: propOnEntering, onEntered: propOnEntered, onExited: propOnExited, transformOrigin: true })), style = _o.style, onEnter = _o.onEnter, onEntering = _o.onEntering, onEntered = _o.onEntered, onExited = _o.onExited;
	    var orientation = horizontal ? "horizontal" : "vertical";
	    return (React__default['default'].createElement(ScaleTransition, { portal: portal, portalInto: portalInto, portalIntoId: portalIntoId, appear: mountOnEnter, visible: visible, classNames: classNames, timeout: timeout, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited, mountOnEnter: mountOnEnter, unmountOnExit: unmountOnExit },
	        React__default['default'].createElement(OrientationProvider, { orientation: orientation },
	            React__default['default'].createElement("div", __assign$p({}, props, { "aria-orientation": orientation, ref: ref, role: role, tabIndex: tabIndex, style: __assign$p(__assign$p({}, propStyle), style), className: cn(block$a({ horizontal: horizontal }), className), onClick: onClick, onKeyDown: onKeyDown }),
	                children,
	                React__default['default'].createElement(MenuEvents, { menuRef: menuRef, cancelled: cancelled, defaultFocus: defaultFocus })))));
	});

	var __assign$o = (undefined && undefined.__assign) || function () {
	    __assign$o = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$o.apply(this, arguments);
	};
	var __rest$k = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var MenuItem = React.forwardRef(function MenuItem(_a, ref) {
	    var className = _a.className, children = _a.children, _b = _a.role, role = _b === void 0 ? "menuitem" : _b, _c = _a.tabIndex, tabIndex = _c === void 0 ? -1 : _c, props = __rest$k(_a, ["className", "children", "role", "tabIndex"]);
	    return (React__default['default'].createElement(ListItem, __assign$o({}, props, { ref: ref, role: role, tabIndex: tabIndex, className: cn("rmd-menu-item", className) }), children));
	});

	var __assign$n = (undefined && undefined.__assign) || function () {
	    __assign$n = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$n.apply(this, arguments);
	};
	var __rest$j = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var MenuItemLink = React.forwardRef(function MenuItemLink(_a, ref) {
	    var className = _a.className, children = _a.children, _b = _a.role, role = _b === void 0 ? "menuitem" : _b, _c = _a.tabIndex, tabIndex = _c === void 0 ? -1 : _c, props = __rest$j(_a, ["className", "children", "role", "tabIndex"]);
	    return (React__default['default'].createElement("li", { role: "none" },
	        React__default['default'].createElement(ListItemLink, __assign$n({}, props, { ref: ref, role: role, tabIndex: tabIndex, className: cn("rmd-menu-item", className) }), children)));
	});

	var __assign$m = (undefined && undefined.__assign) || function () {
	    __assign$m = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$m.apply(this, arguments);
	};
	var __rest$i = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var MenuItemSeparator = React.forwardRef(function MenuItemSeparator(_a, ref) {
	    var ariaOrientation = _a["aria-orientation"], maxHeight = _a.maxHeight, props = __rest$i(_a, ["aria-orientation", "maxHeight"]);
	    var menuOrientation = useOrientation();
	    if (ariaOrientation === "vertical" ||
	        (!ariaOrientation && menuOrientation === "horizontal")) {
	        return (React__default['default'].createElement(VerticalDivider, __assign$m({}, props, { ref: ref, "aria-orientation": "vertical", maxHeight: maxHeight, role: "separator" })));
	    }
	    return React__default['default'].createElement(Divider, __assign$m({}, props, { ref: ref, role: "separator" }));
	});

	var __assign$l = (undefined && undefined.__assign) || function () {
	    __assign$l = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$l.apply(this, arguments);
	};
	function defaultMenuItemRenderer(item, key) {
	    if (item !== 0 && !item) {
	        return null;
	    }
	    if (item === "separator") {
	        return React__default['default'].createElement(MenuItemSeparator, { key: key });
	    }
	    var type = typeof item;
	    if (type === "number" || type === "string" || type === "boolean") {
	        return React__default['default'].createElement(MenuItem, { key: key }, item);
	    }
	    if (React.isValidElement(item)) {
	        return React.cloneElement(item, { key: key });
	    }
	    var separatorProps = item;
	    if (separatorProps.role === "separator") {
	        return React__default['default'].createElement(MenuItemSeparator, __assign$l({}, separatorProps, { key: key }));
	    }
	    var linkProps = item;
	    if (linkProps.to || linkProps.href || linkProps.component) {
	        return React__default['default'].createElement(MenuItemLink, __assign$l({ key: key }, linkProps));
	    }
	    var itemProps = item;
	    return React__default['default'].createElement(MenuItem, __assign$l({ key: key }, itemProps));
	}

	var __assign$k = (undefined && undefined.__assign) || function () {
	    __assign$k = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$k.apply(this, arguments);
	};
	var __rest$h = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * The default menu renderer that will just render the `Menu` component along
	 * with a `List` by passing all props down to the main `Menu` component.
	 */
	function defaultMenuRenderer(_a) {
	    var horizontal = _a.horizontal, children = _a.children, props = __rest$h(_a, ["horizontal", "children"]);
	    return (React__default['default'].createElement(Menu, __assign$k({}, props, { horizontal: horizontal }),
	        React__default['default'].createElement(List, { horizontal: horizontal }, children)));
	}

	/**
	 * This is the main visibility hook to be used for the `DropdownMenu` and
	 * `DropdownMenuItem` components. It'll provide the current visibility as well
	 * as the default focus type once the menu becomes visible.
	 *
	 * @internal
	 */
	function useVisibility(_a) {
	    var _b = _a === void 0 ? {} : _a, _c = _b.defaultVisible, defaultVisible = _c === void 0 ? false : _c, _d = _b.defaultFocus, defaultFocusValue = _d === void 0 ? "first" : _d, onVisibilityChange = _b.onVisibilityChange;
	    var _e = React.useState({
	        visible: defaultVisible,
	        defaultFocus: defaultFocusValue,
	    }), _f = _e[0], visible = _f.visible, defaultFocus = _f.defaultFocus, setState = _e[1];
	    var prevVisible = React.useRef(visible);
	    if (prevVisible.current !== visible) {
	        prevVisible.current = visible;
	        if (onVisibilityChange) {
	            onVisibilityChange(visible);
	        }
	    }
	    /**
	     * A callback to use that allows you to provide a string for if the focus
	     * target should be the "first" or "last" focusable element in the menu.  This
	     * should be "first" for all cases except when the control opens the menu with
	     * an arrow up key event.
	     */
	    var showWithFocus = React.useCallback(function (defaultFocus) {
	        setState({ visible: true, defaultFocus: defaultFocus });
	    }, []);
	    /**
	     * The default implementation of showing the menu that will focus the first
	     * menu item once visible.
	     */
	    var show = React.useCallback(function () {
	        showWithFocus("first");
	    }, [showWithFocus]);
	    /**
	     * Hides the menu.
	     */
	    var hide = React.useCallback(function () {
	        setState({ visible: false, defaultFocus: "first" });
	    }, []);
	    /**
	     * Toggles the visibility of the menu.
	     */
	    var toggle = React.useCallback(function () {
	        setState(function (_a) {
	            var visible = _a.visible, defaultFocus = _a.defaultFocus;
	            return ({
	                visible: !visible,
	                defaultFocus: defaultFocus,
	            });
	        });
	    }, []);
	    return {
	        visible: visible,
	        defaultFocus: defaultFocus,
	        show: show,
	        showWithFocus: showWithFocus,
	        hide: hide,
	        toggle: toggle,
	    };
	}

	/**
	 * This hook is used to provide the menu visibility based on interacting with
	 * the `MenuButton` component. It'll merge and return the required `onClick` and
	 * `onKeyDown` event handlers that should be passed down to the `MenuButton` as
	 * well as the current visibility state and a `hide` function to pass to the
	 * `Menu`.
	 *
	 * @internal
	 */
	function useButtonVisibility(_a) {
	    var _b = _a === void 0 ? {} : _a, propOnClick = _b.onClick, propOnKeyDown = _b.onKeyDown, defaultVisible = _b.defaultVisible, propDefaultFocus = _b.defaultFocus, onVisibilityChange = _b.onVisibilityChange;
	    var handlers = useRefCache({
	        onClick: propOnClick,
	        onKeyDown: propOnKeyDown,
	    });
	    var _c = useVisibility({
	        defaultVisible: defaultVisible,
	        defaultFocus: propDefaultFocus,
	        onVisibilityChange: onVisibilityChange,
	    }), visible = _c.visible, defaultFocus = _c.defaultFocus, hide = _c.hide, showWithFocus = _c.showWithFocus, toggle = _c.toggle;
	    var onClick = React.useCallback(function (event) {
	        var onClick = handlers.current.onClick;
	        if (onClick) {
	            onClick(event);
	        }
	        toggle();
	    }, 
	    // disabled since useRefCache
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	    [toggle]);
	    var onKeyDown = React.useCallback(function (event) {
	        var onKeyDown = handlers.current.onKeyDown;
	        if (onKeyDown) {
	            onKeyDown(event);
	        }
	        switch (event.key) {
	            case "ArrowDown":
	                event.preventDefault();
	                showWithFocus("first");
	                break;
	            case "ArrowUp":
	                event.preventDefault();
	                showWithFocus("last");
	                break;
	            // no default
	        }
	    }, 
	    // disabled since useRefCache
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	    [showWithFocus]);
	    return {
	        visible: visible,
	        defaultFocus: defaultFocus,
	        hide: hide,
	        onClick: onClick,
	        onKeyDown: onKeyDown,
	    };
	}

	var __assign$j = (undefined && undefined.__assign) || function () {
	    __assign$j = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$j.apply(this, arguments);
	};
	var __rest$g = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var DropdownMenu = React.forwardRef(function DropdownMenu(_a, ref) {
	    var propOnClick = _a.onClick, propOnKeyDown = _a.onKeyDown, children = _a.children, anchor = _a.anchor, menuLabel = _a.menuLabel, menuLabelledBy = _a.menuLabelledBy, menuStyle = _a.menuStyle, menuClassName = _a.menuClassName, _b = _a.menuRenderer, menuRenderer = _b === void 0 ? defaultMenuRenderer : _b, items = _a.items, _c = _a.itemRenderer, itemRenderer = _c === void 0 ? defaultMenuItemRenderer : _c, horizontal = _a.horizontal, onVisibilityChange = _a.onVisibilityChange, portal = _a.portal, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, positionOptions = _a.positionOptions, _d = _a.defaultVisible, defaultVisible = _d === void 0 ? false : _d, closeOnScroll = _a.closeOnScroll, closeOnResize = _a.closeOnResize, propDropdownIcon = _a.dropdownIcon, _e = _a.disableDropdownIcon, disableDropdownIcon = _e === void 0 ? false : _e, props = __rest$g(_a, ["onClick", "onKeyDown", "children", "anchor", "menuLabel", "menuLabelledBy", "menuStyle", "menuClassName", "menuRenderer", "items", "itemRenderer", "horizontal", "onVisibilityChange", "portal", "portalInto", "portalIntoId", "positionOptions", "defaultVisible", "closeOnScroll", "closeOnResize", "dropdownIcon", "disableDropdownIcon"]);
	    var id = props.id;
	    var dropdownIcon = useIcon("dropdown", propDropdownIcon);
	    var _f = useButtonVisibility({
	        onClick: propOnClick,
	        onKeyDown: propOnKeyDown,
	        defaultVisible: defaultVisible,
	        onVisibilityChange: onVisibilityChange,
	    }), visible = _f.visible, defaultFocus = _f.defaultFocus, onClick = _f.onClick, onKeyDown = _f.onKeyDown, hide = _f.hide;
	    var labelledBy = menuLabelledBy;
	    if (!menuLabel && !menuLabelledBy) {
	        labelledBy = id;
	    }
	    return (React__default['default'].createElement(React__default['default'].Fragment, null,
	        React__default['default'].createElement(MenuButton, __assign$j({}, props, { ref: ref, "aria-haspopup": "menu", visible: visible, onClick: onClick, onKeyDown: onKeyDown, dropdownIcon: dropdownIcon, disableDropdownIcon: disableDropdownIcon }), children),
	        menuRenderer({
	            "aria-label": menuLabel,
	            // ok to typecast since one of these two should be a string by this
	            // line
	            "aria-labelledby": labelledBy,
	            id: id + "-menu",
	            controlId: id,
	            style: menuStyle,
	            className: menuClassName,
	            anchor: anchor,
	            positionOptions: positionOptions,
	            closeOnScroll: closeOnScroll,
	            closeOnResize: closeOnResize,
	            horizontal: horizontal,
	            visible: visible,
	            defaultFocus: defaultFocus,
	            onRequestClose: hide,
	            children: items.map(function (item, i) { return itemRenderer(item, "item-" + i); }),
	            portal: portal,
	            portalInto: portalInto,
	            portalIntoId: portalIntoId,
	        }, items)));
	});

	function useItemVisibility(_a) {
	    var _b = _a === void 0 ? {} : _a, _c = _b.horizontal, horizontal = _c === void 0 ? false : _c, propOnClick = _b.onClick, propOnKeyDown = _b.onKeyDown, defaultVisible = _b.defaultVisible, propDefaultFocus = _b.defaultFocus, onVisibilityChange = _b.onVisibilityChange;
	    var cache = useRefCache({
	        horizontal: horizontal,
	        onClick: propOnClick,
	        onKeyDown: propOnKeyDown,
	    });
	    var _d = useVisibility({
	        defaultVisible: defaultVisible,
	        defaultFocus: propDefaultFocus,
	        onVisibilityChange: onVisibilityChange,
	    }), visible = _d.visible, defaultFocus = _d.defaultFocus, hide = _d.hide, showWithFocus = _d.showWithFocus, toggle = _d.toggle;
	    var onClick = React.useCallback(function (event) {
	        var onClick = cache.current.onClick;
	        if (onClick) {
	            onClick(event);
	        }
	        toggle();
	    }, 
	    // disabled since useRefCache
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	    [toggle]);
	    var onKeyDown = React.useCallback(function (event) {
	        var _a = cache.current, onKeyDown = _a.onKeyDown, horizontal = _a.horizontal;
	        if (onKeyDown) {
	            onKeyDown(event);
	        }
	        var firstKey = horizontal ? "ArrowDown" : "ArrowRight";
	        var lastKey = horizontal ? "ArrowUp" : "ArrowLeft";
	        if (event.key !== firstKey && event.key !== lastKey) {
	            return;
	        }
	        // don't want to trigger default behavior of screen scrolling
	        event.preventDefault();
	        // don't want parent menus to be effected by this as well.
	        event.stopPropagation();
	        showWithFocus(event.key === firstKey ? "first" : "last");
	    }, 
	    // disabled since useRefCache
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	    [showWithFocus]);
	    return {
	        visible: visible,
	        defaultFocus: defaultFocus,
	        hide: hide,
	        onClick: onClick,
	        onKeyDown: onKeyDown,
	    };
	}

	var __assign$i = (undefined && undefined.__assign) || function () {
	    __assign$i = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$i.apply(this, arguments);
	};
	var __rest$f = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * The `DropdownMenuItem` component is used to be able to render nested dropdown menus.
	 */
	var DropdownMenuItem = React.forwardRef(function DropdownMenuItem(_a, ref) {
	    var propOnClick = _a.onClick, propOnKeyDown = _a.onKeyDown, children = _a.children, propAnchor = _a.anchor, menuLabel = _a.menuLabel, menuLabelledBy = _a.menuLabelledBy, _b = _a.menuRenderer, menuRenderer = _b === void 0 ? defaultMenuRenderer : _b, items = _a.items, _c = _a.itemRenderer, itemRenderer = _c === void 0 ? defaultMenuItemRenderer : _c, horizontal = _a.horizontal, onVisibilityChange = _a.onVisibilityChange, _d = _a.portal, portal = _d === void 0 ? true : _d, portalInto = _a.portalInto, portalIntoId = _a.portalIntoId, positionOptions = _a.positionOptions, propRightAddon = _a.rightAddon, propDropdownIcon = _a.dropdownIcon, _e = _a.closeOnScroll, closeOnScroll = _e === void 0 ? false : _e, _f = _a.closeOnResize, closeOnResize = _f === void 0 ? false : _f, _g = _a.disableEscapeCascade, disableEscapeCascade = _g === void 0 ? false : _g, _h = _a.disableDropdownIcon, disableDropdownIcon = _h === void 0 ? false : _h, props = __rest$f(_a, ["onClick", "onKeyDown", "children", "anchor", "menuLabel", "menuLabelledBy", "menuRenderer", "items", "itemRenderer", "horizontal", "onVisibilityChange", "portal", "portalInto", "portalIntoId", "positionOptions", "rightAddon", "dropdownIcon", "closeOnScroll", "closeOnResize", "disableEscapeCascade", "disableDropdownIcon"]);
	    var id = props.id;
	    var dropdownIcon = useIcon("forward", propDropdownIcon);
	    var _j = useItemVisibility({
	        onClick: propOnClick,
	        onKeyDown: propOnKeyDown,
	        onVisibilityChange: onVisibilityChange,
	    }), visible = _j.visible, hide = _j.hide, onClick = _j.onClick, onKeyDown = _j.onKeyDown, defaultFocus = _j.defaultFocus;
	    var labelledBy = menuLabelledBy;
	    if (!menuLabel && !menuLabelledBy) {
	        labelledBy = id;
	    }
	    var rightAddon = propRightAddon;
	    if (!disableDropdownIcon && dropdownIcon && !rightAddon) {
	        rightAddon = React__default['default'].createElement(IconRotator, { rotated: visible }, dropdownIcon);
	    }
	    var anchor = propAnchor;
	    if (!anchor) {
	        anchor = horizontal ? BELOW_INNER_RIGHT_ANCHOR : TOP_RIGHT_ANCHOR;
	    }
	    return (React__default['default'].createElement(React__default['default'].Fragment, null,
	        React__default['default'].createElement(MenuItem, __assign$i({}, props, { ref: ref, "aria-haspopup": "menu", "aria-expanded": visible ? "true" : undefined, role: "button", onClick: onClick, onKeyDown: onKeyDown, rightAddon: rightAddon }), children),
	        menuRenderer({
	            "aria-label": menuLabel,
	            // ok to typecast since one of these two should be a string by this
	            // line
	            "aria-labelledby": labelledBy,
	            id: id + "-menu",
	            controlId: id,
	            anchor: anchor,
	            positionOptions: positionOptions,
	            closeOnScroll: closeOnScroll,
	            closeOnResize: closeOnResize,
	            horizontal: horizontal,
	            visible: visible,
	            defaultFocus: defaultFocus,
	            onRequestClose: hide,
	            children: items.map(function (item, i) { return itemRenderer(item, "item-" + i); }),
	            portal: portal,
	            portalInto: portalInto,
	            portalIntoId: portalIntoId,
	            onKeyDown: function (event) {
	                if (event.key !== "Escape" || disableEscapeCascade) {
	                    // don't want parent keydown listeners to be triggered as well
	                    event.stopPropagation();
	                }
	                if (!horizontal && event.key === "ArrowLeft") {
	                    hide();
	                }
	            },
	        }, items)));
	});

	var DEFAULT_CONTEXT_MENU_ID = "context-menu";
	function useContextMenu(_a) {
	    var _b = _a === void 0 ? {} : _a, _c = _b.id, id = _c === void 0 ? DEFAULT_CONTEXT_MENU_ID : _c, propRef = _b.ref, _d = _b.anchor, anchor = _d === void 0 ? TOP_INNER_LEFT_ANCHOR : _d, _e = _b.classNames, classNames = _e === void 0 ? SCALE_Y_CLASSNAMES : _e, _f = _b.disableDeselect, disableDeselect = _f === void 0 ? false : _f;
	    var _g = React.useState(false), visible = _g[0], setVisible = _g[1];
	    var onRequestClose = React.useCallback(function () {
	        setVisible(false);
	    }, []);
	    var _h = React.useState({}), coords = _h[0], setCoords = _h[1];
	    var onContextMenu = React.useCallback(function (event) {
	        event.preventDefault();
	        event.stopPropagation();
	        var selection = window.getSelection();
	        if (selection && !disableDeselect) {
	            selection.empty();
	        }
	        setVisible(true);
	        if (event.button === 0 && event.buttons === 0) {
	            setCoords({});
	            return;
	        }
	        setCoords({ initialX: event.clientX, initialY: event.clientY });
	    }, [disableDeselect]);
	    var _j = useEnsuredRef(propRef), ref = _j[0], refHandler = _j[1];
	    React.useEffect(function () {
	        if (!visible) {
	            return;
	        }
	        var hide = function (event) {
	            var target = event.target;
	            if (!containsElement(ref, target)) {
	                onRequestClose();
	            }
	        };
	        window.addEventListener("contextmenu", hide, true);
	        return function () {
	            window.removeEventListener("contextmenu", hide, true);
	        };
	    }, [onRequestClose, visible, ref]);
	    var menuProps = {
	        id: id,
	        ref: refHandler,
	        anchor: anchor,
	        visible: visible,
	        classNames: classNames,
	        onRequestClose: onRequestClose,
	        positionOptions: coords,
	        disableControlClickOkay: true,
	    };
	    return [menuProps, onContextMenu, setVisible];
	}

	var __assign$h = (undefined && undefined.__assign) || function () {
	    __assign$h = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$h.apply(this, arguments);
	};
	var __rest$e = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * An extremely "useful" component that should be used with the `Table`
	 * component if you want to make a responsive table within the page. If you
	 * don't want to use this component, you can just apply `overflow: auto` to a
	 * parent element of the table.
	 */
	var TableContainer = React.forwardRef(function TableContainer(_a, ref) {
	    var className = _a.className, children = _a.children, props = __rest$e(_a, ["className", "children"]);
	    return (React__default['default'].createElement("div", __assign$h({}, props, { ref: ref, className: cn("rmd-table-container", className) }), children));
	});

	var context$4 = React.createContext({
	    header: false,
	    hAlign: "left",
	    vAlign: "middle",
	    lineWrap: false,
	    disableHover: false,
	    disableBorders: false,
	});
	/**
	 * An internal hook for getting the current table configuration in child
	 * components for the table. This will use the inherited table configuration
	 * context if the prop value is `undefined`.
	 *
	 * @internal
	 */
	function useTableConfig(options) {
	    var _a, _b, _c, _d, _e, _f;
	    var inherited = React.useContext(context$4);
	    var header = (_a = options.header) !== null && _a !== void 0 ? _a : inherited.header;
	    var hAlign = (_b = options.hAlign) !== null && _b !== void 0 ? _b : inherited.hAlign;
	    var vAlign = (_c = options.vAlign) !== null && _c !== void 0 ? _c : inherited.vAlign;
	    var lineWrap = (_d = options.lineWrap) !== null && _d !== void 0 ? _d : inherited.lineWrap;
	    var disableHover = (_e = options.disableHover) !== null && _e !== void 0 ? _e : inherited.disableHover;
	    var disableBorders = (_f = options.disableBorders) !== null && _f !== void 0 ? _f : inherited.disableBorders;
	    return {
	        header: header,
	        hAlign: hAlign,
	        vAlign: vAlign,
	        lineWrap: lineWrap,
	        disableHover: disableHover,
	        disableBorders: disableBorders,
	    };
	}
	/**
	 * @internal
	 */
	var TableConfigProvider = context$4.Provider;

	var __assign$g = (undefined && undefined.__assign) || function () {
	    __assign$g = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$g.apply(this, arguments);
	};
	var __rest$d = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$9 = bem("rmd-table");
	/**
	 * Creates a `<table>` element with some default styles and a quick way to
	 * configure the other styles within a table. That being said, styling tables is
	 * awful if you are used to flexbox and this component will not be helping with
	 * layout styles of tables.
	 *
	 * The table will not be responsive by default, but you can easily create a
	 * responsive table with overflow by wrapping with the `TableContainer`
	 * component or just adding `overflow: auto` to a parent element. Note that
	 * horizontal scrolling is still not one of the best user interactions and it
	 * might be better to render a table in a different manner for mobile devices to
	 * help display all the required data.
	 */
	var Table = React.forwardRef(function Table(_a, ref) {
	    var className = _a.className, children = _a.children, _b = _a.dense, dense = _b === void 0 ? false : _b, _c = _a.hAlign, hAlign = _c === void 0 ? "left" : _c, _d = _a.vAlign, vAlign = _d === void 0 ? "middle" : _d, _e = _a.lineWrap, lineWrap = _e === void 0 ? false : _e, _f = _a.fullWidth, fullWidth = _f === void 0 ? false : _f, _g = _a.disableHover, disableHover = _g === void 0 ? false : _g, _h = _a.disableBorders, disableBorders = _h === void 0 ? false : _h, props = __rest$d(_a, ["className", "children", "dense", "hAlign", "vAlign", "lineWrap", "fullWidth", "disableHover", "disableBorders"]);
	    var configuration = React.useMemo(function () { return ({
	        header: false,
	        hAlign: hAlign,
	        vAlign: vAlign,
	        lineWrap: lineWrap,
	        disableHover: disableHover,
	        disableBorders: disableBorders,
	    }); }, [hAlign, vAlign, lineWrap, disableHover, disableBorders]);
	    return (React__default['default'].createElement(TableConfigProvider, { value: configuration },
	        React__default['default'].createElement("table", __assign$g({}, props, { ref: ref, className: cn(block$9({
	                dense: dense,
	                "full-width": fullWidth,
	            }), className) }), children)));
	});

	var context$3 = React.createContext(false);
	/**
	 * A quick way to conditionally inherit the sticky context within a table.  If
	 * the sticky prop was defined and a boolean, it will be used. Otherwise the
	 * inherited context value will be used.
	 * @internal
	 */
	function useSticky(sticky) {
	    var isSticky = React.useContext(context$3);
	    return typeof sticky !== "undefined" ? !!sticky : isSticky;
	}
	/**
	 * @internal
	 */
	var StickyTableProvider = context$3.Provider;

	var __assign$f = (undefined && undefined.__assign) || function () {
	    __assign$f = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$f.apply(this, arguments);
	};
	var __rest$c = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$8 = bem("rmd-thead");
	/**
	 * Creates a `<thead>` element with some basic styles. This component will also
	 * update the table configuration so that all the `TableCell` children will
	 * automatically become `<th>` elements instead of the normal `<td>` as well as
	 * disabling the hover effect and line wrapping. The hover effect and
	 * line-wrapping can be re-enabled if desired through the `hoverable` and
	 * `disableNoWrap` props.
	 */
	var TableHeader = React.forwardRef(function TableHeader(_a, ref) {
	    var className = _a.className, _b = _a.hoverable, hoverable = _b === void 0 ? false : _b, propLineWrap = _a.lineWrap, children = _a.children, _c = _a.sticky, sticky = _c === void 0 ? false : _c, props = __rest$c(_a, ["className", "hoverable", "lineWrap", "children", "sticky"]);
	    // update the table configuration with the custom overrides for the `<thead>`
	    var _d = useTableConfig({
	        lineWrap: propLineWrap,
	        disableHover: !hoverable,
	    }), hAlign = _d.hAlign, vAlign = _d.vAlign, lineWrap = _d.lineWrap, disableHover = _d.disableHover, disableBorders = _d.disableBorders;
	    var configuration = React.useMemo(function () { return ({
	        header: true,
	        hAlign: hAlign,
	        vAlign: vAlign,
	        lineWrap: lineWrap,
	        disableBorders: disableBorders,
	        disableHover: disableHover,
	    }); }, [hAlign, vAlign, lineWrap, disableBorders, disableHover]);
	    return (React__default['default'].createElement(TableConfigProvider, { value: configuration },
	        React__default['default'].createElement("thead", __assign$f({}, props, { ref: ref, className: cn(block$8(), className) }),
	            React__default['default'].createElement(StickyTableProvider, { value: sticky }, children))));
	});

	var __assign$e = (undefined && undefined.__assign) || function () {
	    __assign$e = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$e.apply(this, arguments);
	};
	var __rest$b = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * Creates a `<tbody>` element that also allows for overriding all the child
	 * `TableCell` components with additional styling behavior.
	 */
	var TableBody = React.forwardRef(function TableBody(_a, ref) {
	    var className = _a.className, children = _a.children, propHAlign = _a.hAlign, propVAlign = _a.vAlign, propLineWrap = _a.lineWrap, propDisableHover = _a.disableHover, propDisableBorders = _a.disableBorders, props = __rest$b(_a, ["className", "children", "hAlign", "vAlign", "lineWrap", "disableHover", "disableBorders"]);
	    // update the table configuration with the custom overrides for the `<thead>`
	    var _b = useTableConfig({
	        hAlign: propHAlign,
	        vAlign: propVAlign,
	        lineWrap: propLineWrap,
	        disableHover: propDisableHover,
	        disableBorders: propDisableBorders,
	    }), hAlign = _b.hAlign, vAlign = _b.vAlign, lineWrap = _b.lineWrap, disableHover = _b.disableHover, disableBorders = _b.disableBorders;
	    var configuration = React.useMemo(function () { return ({
	        header: false,
	        hAlign: hAlign,
	        vAlign: vAlign,
	        lineWrap: lineWrap,
	        disableBorders: disableBorders,
	        disableHover: disableHover,
	    }); }, [hAlign, vAlign, lineWrap, disableBorders, disableHover]);
	    return (React__default['default'].createElement(TableConfigProvider, { value: configuration },
	        React__default['default'].createElement("tbody", __assign$e({}, props, { ref: ref, className: cn("rmd-tbody", className) }), children)));
	});

	var context$2 = React.createContext(false);
	/**
	 * @internal
	 */
	var TableFooterProvider = context$2.Provider;
	/**
	 * @internal
	 */
	function useTableFooter() {
	    return React.useContext(context$2);
	}

	var __assign$d = (undefined && undefined.__assign) || function () {
	    __assign$d = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$d.apply(this, arguments);
	};
	var __rest$a = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$7 = bem("rmd-foot");
	/**
	 * Creates a `<tfoot>` element with some basic styles. This component will
	 * disable the hover effect and line wrapping by default, but the hover effect
	 * and line-wrapping can be re-enabled if desired through the `hoverable` and
	 * `disableNoWrap` props.
	 */
	var TableFooter = React.forwardRef(function TableFooter(_a, ref) {
	    var className = _a.className, _b = _a.hoverable, hoverable = _b === void 0 ? false : _b, propLineWrap = _a.lineWrap, children = _a.children, _c = _a.sticky, sticky = _c === void 0 ? false : _c, props = __rest$a(_a, ["className", "hoverable", "lineWrap", "children", "sticky"]);
	    // update the table configuration with the custom overrides for the `<tfoot>`
	    var _d = useTableConfig({
	        lineWrap: propLineWrap,
	        disableHover: !hoverable,
	    }), hAlign = _d.hAlign, vAlign = _d.vAlign, lineWrap = _d.lineWrap, disableHover = _d.disableHover, disableBorders = _d.disableBorders;
	    var configuration = React.useMemo(function () { return ({
	        header: false,
	        hAlign: hAlign,
	        vAlign: vAlign,
	        lineWrap: lineWrap,
	        disableBorders: disableBorders,
	        disableHover: disableHover,
	    }); }, [hAlign, vAlign, lineWrap, disableBorders, disableHover]);
	    return (React__default['default'].createElement(TableConfigProvider, { value: configuration },
	        React__default['default'].createElement(TableFooterProvider, { value: true },
	            React__default['default'].createElement("tfoot", __assign$d({}, props, { ref: ref, className: cn(block$7(), className) }),
	                React__default['default'].createElement(StickyTableProvider, { value: sticky }, children)))));
	});

	var __assign$c = (undefined && undefined.__assign) || function () {
	    __assign$c = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$c.apply(this, arguments);
	};
	var __rest$9 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$6 = bem("rmd-tr");
	/**
	 * Creates a `<tr>` element with some general styles that are inherited from the
	 * base table configuration.
	 */
	var TableRow = React.forwardRef(function TableRow(_a, ref) {
	    var className = _a.className, propDisableHover = _a.disableHover, propDisableBorders = _a.disableBorders, children = _a.children, _b = _a.selected, selected = _b === void 0 ? false : _b, _c = _a.clickable, clickable = _c === void 0 ? false : _c, props = __rest$9(_a, ["className", "disableHover", "disableBorders", "children", "selected", "clickable"]);
	    var _d = useTableConfig({
	        disableHover: propDisableHover,
	        disableBorders: propDisableBorders,
	    }), disableHover = _d.disableHover, disableBorders = _d.disableBorders;
	    return (React__default['default'].createElement("tr", __assign$c({}, props, { ref: ref, className: cn(block$6({
	            bordered: !disableBorders,
	            hoverable: !disableHover,
	            clickable: clickable,
	            selected: selected,
	            "selected-hoverable": selected && !disableHover,
	        }), className) }), children));
	});

	var __assign$b = (undefined && undefined.__assign) || function () {
	    __assign$b = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$b.apply(this, arguments);
	};
	var __rest$8 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$5 = bem("rmd-table-cell");
	/**
	 * This is mostly an internal component since it is automatically used within
	 * the `TableCell` component but this will conditionally wrap the `children`
	 * within an `UnstyledButton` to make a clickable cell. This is really to help
	 * with sort behavior within headers.
	 */
	var TableCellContent = React.forwardRef(function TableCellContent(_a, ref) {
	    var id = _a.id, propIcon = _a.icon, style = _a.style, className = _a.className, sortOrder = _a.sortOrder, children = _a.children, propRotated = _a.rotated, props = __rest$8(_a, ["id", "icon", "style", "className", "sortOrder", "children", "rotated"]);
	    if (!sortOrder || propIcon === null) {
	        return React__default['default'].createElement(React__default['default'].Fragment, null, children);
	    }
	    var icon = null;
	    if (sortOrder !== "none") {
	        var rotated = propRotated !== null && propRotated !== void 0 ? propRotated : sortOrder === "descending";
	        icon = React__default['default'].createElement(IconRotator, { rotated: rotated }, propIcon);
	    }
	    return (React__default['default'].createElement(UnstyledButton, { id: id, ref: ref, style: style, className: cn(block$5("child"), className) },
	        React__default['default'].createElement(TextIconSpacing, __assign$b({}, props, { icon: icon }), children)));
	});

	var __assign$a = (undefined && undefined.__assign) || function () {
	    __assign$a = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$a.apply(this, arguments);
	};
	var __rest$7 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$4 = bem("rmd-table-cell");
	/**
	 * Creates a `<th>` or `<td>` cell with sensible styled defaults. You can create
	 * a `<th>` element by enabling the `header` prop OR having a `TableCell` as a
	 * child of the `TableHeader` component.
	 *
	 * Note: If you have a checkbox column in the `TableHeader` without any labels,
	 * you will need to manually set the `header={false}` prop for that cell since
	 * it is invalid to have a `<th>` without any readable content for screen
	 * readers.
	 */
	var TableCell = React.forwardRef(function TableCell(_a, ref) {
	    var _b;
	    var sortOrder = _a["aria-sort"], id = _a.id, className = _a.className, _c = _a.grow, grow = _c === void 0 ? false : _c, propScope = _a.scope, propHAlign = _a.hAlign, propVAlign = _a.vAlign, propHeader = _a.header, propDisableLineWrap = _a.lineWrap, children = _a.children, propSticky = _a.sticky, propSortIcon = _a.sortIcon, _d = _a.sortIconAfter, sortIconAfter = _d === void 0 ? false : _d, sortIconRotated = _a.sortIconRotated, disablePadding = _a.disablePadding, propColSpan = _a.colSpan, props = __rest$7(_a, ["aria-sort", "id", "className", "grow", "scope", "hAlign", "vAlign", "header", "lineWrap", "children", "sticky", "sortIcon", "sortIconAfter", "sortIconRotated", "disablePadding", "colSpan"]);
	    // have to double cast to get the `100%` value to work.
	    var colSpan = propColSpan;
	    var sortIcon = useIcon("sort", propSortIcon);
	    var isNoPadding = disablePadding !== null && disablePadding !== void 0 ? disablePadding : (sortIcon && sortOrder);
	    // Note: unlike the other usages of `useTableConfig`, the `propHeader`
	    // is not provided. This is so that `TableCheckbox` components can still
	    // be a sticky header without being rendered as a `<th>`. This also makes
	    // it so the scope can be defaulted to `col` or `row` automatically.
	    var _e = useTableConfig({
	        hAlign: propHAlign,
	        vAlign: propVAlign,
	        lineWrap: propDisableLineWrap,
	    }), inheritedHeader = _e.header, hAlign = _e.hAlign, vAlign = _e.vAlign, lineWrap = _e.lineWrap;
	    var header = propHeader !== null && propHeader !== void 0 ? propHeader : inheritedHeader;
	    var footer = useTableFooter();
	    var sticky = useSticky(propSticky);
	    var isStickyCell = propSticky === "cell" || (!header && sticky);
	    var isStickyHeader = propSticky === "header";
	    var isStickyFooter = sticky && footer;
	    var isStickyFooterCell = isStickyFooter && (propColSpan === "100%" || propColSpan === 0);
	    var isStickyAbove = propSticky === "header-cell" || isStickyFooterCell;
	    var scope = propScope;
	    if (!scope && header) {
	        scope = !inheritedHeader && propHeader ? "row" : "col";
	    }
	    var Component = header ? "th" : "td";
	    return (React__default['default'].createElement(Component, __assign$a({}, props, { ref: ref, id: id, "aria-sort": sortOrder === "none" ? undefined : sortOrder, colSpan: colSpan, className: cn(block$4((_b = {
	                grow: grow,
	                header: header,
	                sticky: sticky,
	                "sticky-header": (header && sticky && propSticky !== "cell") ||
	                    isStickyHeader ||
	                    isStickyAbove,
	                "sticky-cell": isStickyCell || isStickyAbove || isStickyFooterCell,
	                "sticky-footer": isStickyFooter,
	                "sticky-above": isStickyAbove
	            },
	            _b[hAlign] = hAlign !== "left",
	            _b[vAlign] = vAlign !== "middle",
	            _b.vertical = vAlign !== "middle",
	            _b["no-wrap"] = !lineWrap,
	            _b.padded = !isNoPadding && lineWrap === "padded",
	            _b["no-padding"] = isNoPadding,
	            _b)), className), scope: scope }),
	        React__default['default'].createElement(TableCellContent, { id: id ? id + "-sort" : undefined, icon: sortIcon, iconAfter: sortIconAfter, sortOrder: sortOrder, rotated: sortIconRotated }, children)));
	});

	var __assign$9 = (undefined && undefined.__assign) || function () {
	    __assign$9 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$9.apply(this, arguments);
	};
	var __rest$6 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * This component is really just a simple wrapper for applying the `<caption>`
	 * typography styles and probably doesn't have much real use if you don't use
	 * captions.
	 */
	var Caption = React.forwardRef(function Caption(_a, ref) {
	    var className = _a.className, children = _a.children, props = __rest$6(_a, ["className", "children"]);
	    return (React__default['default'].createElement("caption", __assign$9({}, props, { ref: ref, className: cn("rmd-caption", className) }), children));
	});

	var __assign$8 = (undefined && undefined.__assign) || function () {
	    __assign$8 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$8.apply(this, arguments);
	};
	var __rest$5 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var DEFAULT_ARIA_LABEL = "Toggle Row Selection";
	/**
	 * This is a simple wrapper for the `Checkbox` component that allows you to
	 * render a nicely styled `Checkbox` within a `TableCell` element. This will
	 * mostly just remove the additional padding applied and default an `aria-label`
	 * since you normally don't want a checkbox with a label within a table since
	 * it's more for selection.
	 */
	var TableCheckbox = React.forwardRef(function TableCheckbox(_a, ref) {
	    var cellId = _a.cellId, className = _a.className, id = _a.id, ariaLabel = _a["aria-label"], ariaLabelledBy = _a["aria-labelledby"], ariaChecked = _a["aria-checked"], ariaControls = _a["aria-controls"], checkboxRef = _a.checkboxRef, checkboxStyle = _a.checkboxStyle, checkboxClassName = _a.checkboxClassName, icon = _a.icon, iconStyle = _a.iconStyle, iconClassName = _a.iconClassName, toggleStyle = _a.toggleStyle, toggleClassName = _a.toggleClassName, disableIconOverlay = _a.disableIconOverlay, name = _a.name, value = _a.value, checked = _a.checked, onChange = _a.onChange, defaultChecked = _a.defaultChecked, indeterminate = _a.indeterminate, props = __rest$5(_a, ["cellId", "className", "id", "aria-label", "aria-labelledby", "aria-checked", "aria-controls", "checkboxRef", "checkboxStyle", "checkboxClassName", "icon", "iconStyle", "iconClassName", "toggleStyle", "toggleClassName", "disableIconOverlay", "name", "value", "checked", "onChange", "defaultChecked", "indeterminate"]);
	    return (React__default['default'].createElement(TableCell, __assign$8({}, props, { ref: ref, id: cellId, header: false, className: cn("rmd-table-cell--checkbox", className) }),
	        React__default['default'].createElement(Checkbox, { id: id, "aria-label": (ariaLabel !== null && ariaLabel !== void 0 ? ariaLabel : ariaLabelledBy) ? undefined : DEFAULT_ARIA_LABEL, "aria-labelledby": ariaLabelledBy, "aria-checked": ariaChecked, "aria-controls": ariaControls, ref: checkboxRef, style: checkboxStyle, indeterminate: indeterminate, className: checkboxClassName, icon: icon, iconStyle: iconStyle, iconClassName: iconClassName, toggleStyle: toggleStyle, toggleClassName: toggleClassName, disableIconOverlay: disableIconOverlay, name: name, value: value, checked: checked, onChange: onChange, defaultChecked: defaultChecked })));
	});

	var __assign$7 = (undefined && undefined.__assign) || function () {
	    __assign$7 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$7.apply(this, arguments);
	};
	var TAB_WIDTH_VAR = "--rmd-tab-width";
	var TAB_OFFSET_VAR = "--rmd-tab-offset";
	var getActiveTab = function (itemRefs, activeIndex) {
	    return (itemRefs[activeIndex] && itemRefs[activeIndex].current) || null;
	};
	/**
	 * @remarks \@since 2.3.0
	 * @internal
	 */
	var context$1 = React.createContext(function () {
	    // do nothing
	});
	/**
	 * @remarks \@since 2.3.0
	 * @internal
	 */
	var UpdateIndicatorStylesProvider = context$1.Provider;
	/**
	 * @remarks \@since 2.3.0
	 * @internal
	 */
	function useUpdateIndicatorStyles() {
	    return React.useContext(context$1);
	}
	/**
	 * This hook will merge the provided style object along with the required css
	 * variables for the active tab underline moving to the correct location. The
	 * indicator will be updated to be the same width as the tab along with offset
	 * by all the tabs' sizes.
	 *
	 * @internal
	 */
	function useTabIndicatorStyle(_a) {
	    var style = _a.style, propRef = _a.ref, align = _a.align, itemRefs = _a.itemRefs, totalTabs = _a.totalTabs, activeIndex = _a.activeIndex;
	    var _b = React.useState(function () {
	        var _a;
	        var tabWidth = 100 / totalTabs + "%";
	        return _a = {},
	            _a[TAB_WIDTH_VAR] = tabWidth,
	            _a[TAB_OFFSET_VAR] = "calc(" + activeIndex + " * " + tabWidth + ")",
	            _a;
	    }), cssVars = _b[0], setCSSVars = _b[1];
	    var prevCSSVars = React.useRef(cssVars);
	    var updateCSSVars = React.useCallback(function (itemRefs, activeIndex) {
	        var _a;
	        var activeTab = getActiveTab(itemRefs, activeIndex);
	        if (!activeTab) {
	            return;
	        }
	        var nextCSSVars = (_a = {},
	            _a[TAB_WIDTH_VAR] = activeTab.offsetWidth + "px",
	            _a[TAB_OFFSET_VAR] = activeTab.offsetLeft + "px",
	            _a);
	        var cssVars = prevCSSVars.current;
	        if (cssVars[TAB_WIDTH_VAR] !== nextCSSVars[TAB_WIDTH_VAR] ||
	            cssVars[TAB_OFFSET_VAR] !== nextCSSVars[TAB_OFFSET_VAR]) {
	            prevCSSVars.current = nextCSSVars;
	            setCSSVars(nextCSSVars);
	        }
	    }, []);
	    React.useEffect(function () {
	        updateCSSVars(itemRefs, activeIndex);
	        // has to also be triggered for align changes since the indicator offset
	        // will be incorrect for that.
	    }, [activeIndex, itemRefs, updateCSSVars, align]);
	    var updateStyles = React.useCallback(function () {
	        updateCSSVars(itemRefs, activeIndex);
	    }, [itemRefs, activeIndex, updateCSSVars]);
	    // whenever the tabs container element is resized, it _probably_ means
	    // that the tabs will be resized or moved. this means the indicator will
	    // be in the wrong place so we need to fix it here.
	    var _c = useResizeObserver(updateStyles, {
	        ref: propRef,
	    }), tabsRef = _c[0], tabsRefHandler = _c[1];
	    var mergedStyle = React.useMemo(function () { return (__assign$7(__assign$7({}, style), cssVars)); }, [
	        style,
	        cssVars,
	    ]);
	    return [mergedStyle, tabsRefHandler, tabsRef, updateStyles];
	}

	var __assign$6 = (undefined && undefined.__assign) || function () {
	    __assign$6 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$6.apply(this, arguments);
	};
	/**
	 * @internal
	 */
	function useTabsMovement(_a) {
	    var onClick = _a.onClick, onKeyDown = _a.onKeyDown, children = _a.children, automatic = _a.automatic, horizontal = _a.horizontal, activeIndex = _a.activeIndex, onActiveIndexChange = _a.onActiveIndexChange;
	    // first filter out all "nulled" or falsish elements since it's possible to do:
	    // {!thing && <Tab />}
	    var tabs = React.useMemo(function () { return React.Children.toArray(children).filter(Boolean); }, [
	        children,
	    ]);
	    // now filter out any other invalid elements (text nodes for some reason) and
	    // disabled tabs since they shouldn't be keyboard focusable
	    var visibleTabs = React.useMemo(function () {
	        return tabs.filter(function (child) { return React.isValidElement(child) && !child.props.disabled; });
	    }, [tabs]);
	    var _b = React.useState(activeIndex), focusedIndex = _b[0], setFocusedIndex = _b[1];
	    React.useEffect(function () {
	        setFocusedIndex(activeIndex);
	    }, [activeIndex]);
	    var _c = useKeyboardMovement(__assign$6(__assign$6({}, (horizontal
	        ? HORIZONTAL_TABS
	        : VERTICAL_TABS)), { onKeyDown: onKeyDown,
	        focusedIndex: focusedIndex, items: visibleTabs, onChange: function (_a) {
	            var index = _a.index;
	            if (index === -1) {
	                return;
	            }
	            if (automatic) {
	                onActiveIndexChange(index);
	            }
	            var item = itemRefs[index] && itemRefs[index].current;
	            if (item) {
	                item.focus();
	            }
	            setFocusedIndex(index);
	        } })), itemRefs = _c[0], handleKeyDown = _c[1];
	    var handleClick = React.useCallback(function (event) {
	        if (onClick) {
	            onClick(event);
	        }
	        var target = event.target && event.target.closest("button");
	        if (!target) {
	            return;
	        }
	        var index = itemRefs.findIndex(function (ref) { return ref.current === target; });
	        if (activeIndex !== index) {
	            onActiveIndexChange(index);
	        }
	    }, [activeIndex, itemRefs, onActiveIndexChange, onClick]);
	    return {
	        tabs: tabs,
	        itemRefs: itemRefs,
	        handleClick: handleClick,
	        handleKeyDown: handleKeyDown,
	    };
	}

	var __assign$5 = (undefined && undefined.__assign) || function () {
	    __assign$5 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$5.apply(this, arguments);
	};
	var __rest$4 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$3 = bem("rmd-tabs");
	/**
	 * The `TabsList` component is the container for all the individual `Tab`s that
	 * should be rendered. This handles adding an active indicator underneath the
	 * active tab and animating it to the new location when a new tab becomes
	 * active. It also handles the ability update which tab is selected when it has
	 * been clicked or updated with keyboard movement.
	 *
	 * This should probably not be used outside of this package unless a custom
	 * implementation is desired.
	 */
	var TabsList = React.forwardRef(function TabsList(_a, forwardedRef) {
	    var _b;
	    var style = _a.style, className = _a.className, onClick = _a.onClick, onKeyDown = _a.onKeyDown, children = _a.children, activeIndex = _a.activeIndex, _c = _a.align, align = _c === void 0 ? "left" : _c, _d = _a.automatic, automatic = _d === void 0 ? false : _d, _e = _a.padded, padded = _e === void 0 ? false : _e, _f = _a.orientation, orientation = _f === void 0 ? "horizontal" : _f, onActiveIndexChange = _a.onActiveIndexChange, _g = _a.disableTransition, disableTransition = _g === void 0 ? false : _g, props = __rest$4(_a, ["style", "className", "onClick", "onKeyDown", "children", "activeIndex", "align", "automatic", "padded", "orientation", "onActiveIndexChange", "disableTransition"]);
	    var horizontal = orientation === "horizontal";
	    var _h = useTabsMovement({
	        onClick: onClick,
	        onKeyDown: onKeyDown,
	        children: children,
	        horizontal: horizontal,
	        activeIndex: activeIndex,
	        onActiveIndexChange: onActiveIndexChange,
	        automatic: automatic,
	    }), tabs = _h.tabs, itemRefs = _h.itemRefs, handleClick = _h.handleClick, handleKeyDown = _h.handleKeyDown;
	    var _j = useTabIndicatorStyle({
	        style: style,
	        ref: forwardedRef,
	        align: align,
	        itemRefs: itemRefs,
	        totalTabs: tabs.length,
	        activeIndex: activeIndex,
	    }), mergedStyle = _j[0], tabsRefHandler = _j[1], tabsRef = _j[2], updateIndicatorStyles = _j[3];
	    var isKeyboard = useIsUserInteractionMode("keyboard");
	    var prevActiveIndex = React.useRef(activeIndex);
	    React.useEffect(function () {
	        var tabs = tabsRef.current;
	        var tabRef = itemRefs[activeIndex] && itemRefs[activeIndex].current;
	        var incrementing = prevActiveIndex.current < activeIndex;
	        prevActiveIndex.current = activeIndex;
	        if (!tabs || !tabRef) {
	            return;
	        }
	        var currentX = tabs.scrollLeft + tabs.offsetWidth;
	        var tabLeft = tabRef.offsetLeft;
	        var tabWidth = tabRef.offsetWidth;
	        if (incrementing && currentX < tabLeft + tabWidth) {
	            tabs.scrollLeft = tabLeft - tabWidth;
	        }
	        else if (!incrementing && tabs.scrollLeft > tabLeft) {
	            tabs.scrollLeft = tabLeft;
	        }
	        // don't want this to trigger on itemRefs or tabsRef changes since those
	        // have a chance of updating each render.
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, [activeIndex]);
	    return (React__default['default'].createElement(UpdateIndicatorStylesProvider, { value: updateIndicatorStyles },
	        React__default['default'].createElement("div", __assign$5({}, props, { "aria-orientation": orientation, style: mergedStyle, role: "tablist", className: cn(block$3((_b = {},
	                _b[align] = true,
	                _b.padded = padded,
	                _b.vertical = !horizontal,
	                _b.animate = !disableTransition && (!automatic || !isKeyboard),
	                _b)), className), ref: tabsRefHandler, onClick: handleClick, onKeyDown: handleKeyDown }), React.Children.map(tabs, function (child, i) {
	            if (!React.isValidElement(child)) {
	                return child;
	            }
	            var tab = React.Children.only(child);
	            var ref = itemRefs[i];
	            if (tab.props.ref) {
	                ref = function (instance) {
	                    itemRefs[i].current = instance;
	                    applyRef(instance, tab.props.ref);
	                };
	            }
	            return React.cloneElement(tab, { ref: ref });
	        }))));
	});

	var __assign$4 = (undefined && undefined.__assign) || function () {
	    __assign$4 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$4.apply(this, arguments);
	};
	var __rest$3 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$2 = bem("rmd-tab");
	/**
	 * The `Tab` is a low-level component that just renders an accessible tab widget
	 * along with some general styles and an optional icon.
	 */
	var Tab = React.forwardRef(function Tab(_a, propRef) {
	    var propClassName = _a.className, contentStyle = _a.contentStyle, contentClassName = _a.contentClassName, _b = _a.disabled, disabled = _b === void 0 ? false : _b, icon = _a.icon, _c = _a.stacked, stacked = _c === void 0 ? false : _c, _d = _a.iconAfter, iconAfter = _d === void 0 ? false : _d, children = _a.children, active = _a.active, panelId = _a.panelId, disableRipple = _a.disableRipple, disableProgrammaticRipple = _a.disableProgrammaticRipple, rippleTimeout = _a.rippleTimeout, rippleClassNames = _a.rippleClassNames, rippleClassName = _a.rippleClassName, rippleContainerClassName = _a.rippleContainerClassName, enablePressedAndRipple = _a.enablePressedAndRipple, props = __rest$3(_a, ["className", "contentStyle", "contentClassName", "disabled", "icon", "stacked", "iconAfter", "children", "active", "panelId", "disableRipple", "disableProgrammaticRipple", "rippleTimeout", "rippleClassNames", "rippleClassName", "rippleContainerClassName", "enablePressedAndRipple"]);
	    var _e = useInteractionStates({
	        handlers: props,
	        className: propClassName,
	        disabled: disabled,
	        disableRipple: disableRipple,
	        disableProgrammaticRipple: disableProgrammaticRipple,
	        rippleTimeout: rippleTimeout,
	        rippleClassNames: rippleClassNames,
	        rippleClassName: rippleClassName,
	        rippleContainerClassName: rippleContainerClassName,
	        enablePressedAndRipple: enablePressedAndRipple,
	    }), ripples = _e.ripples, className = _e.className, handlers = _e.handlers;
	    // TODO: Look into removing this resize observer. This is only required if
	    // someone manually updates the width of the tab (dev utils) or if the width
	    // was not changed due to the tabs container element resizing (iffy)
	    var updateIndicatorStyles = useUpdateIndicatorStyles();
	    var _f = useResizeObserver(updateIndicatorStyles, {
	        ref: propRef,
	    }), refHandler = _f[1];
	    return (React__default['default'].createElement("button", __assign$4({}, props, handlers, { ref: active ? refHandler : propRef, "aria-selected": active, "aria-controls": panelId, type: "button", role: "tab", disabled: disabled, className: cn(block$2({ active: active, stacked: icon && stacked }), className), tabIndex: active ? undefined : -1 }),
	        React__default['default'].createElement(TextIconSpacing, { icon: icon, stacked: stacked, iconAfter: iconAfter },
	            React__default['default'].createElement("span", { style: contentStyle, className: cn(block$2("content"), contentClassName) }, children)),
	        ripples));
	});

	var __assign$3 = (undefined && undefined.__assign) || function () {
	    __assign$3 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$3.apply(this, arguments);
	};
	var context = React.createContext({
	    tabsId: "tabs",
	    activeIndex: 0,
	    onActiveIndexChange: function () {
	        // do nothing
	    },
	    tabs: [],
	});
	/**
	 * This hook returns the current "state" for the tabs which can be useful if you
	 * need additional control or access to the tabs behavior.
	 */
	function useTabs() {
	    return React.useContext(context);
	}
	var Provider = context.Provider;
	/**
	 * The `TabsManager` is used to configure your `Tabs` component and handle some
	 * of the default behavior such as:
	 *
	 * - controlling the `activeIndex`
	 * - general tab configuration
	 * - callbacks when the tab has changed
	 * - providing an `id` prefix for all tabs for simplicity
	 */
	function TabsManager(_a) {
	    var tabsId = _a.tabsId, _b = _a.defaultActiveIndex, defaultActiveIndex = _b === void 0 ? 0 : _b, propActiveIndex = _a.activeIndex, onActiveIndexChange = _a.onActiveIndexChange, tabs = _a.tabs, _c = _a.stacked, stacked = _c === void 0 ? false : _c, _d = _a.iconAfter, iconAfter = _d === void 0 ? false : _d, children = _a.children;
	    var _e = React.useState(defaultActiveIndex), localActiveIndex = _e[0], setActiveIndex = _e[1];
	    var handleActiveIndexChange = React.useCallback(function (activeIndex) {
	        if (onActiveIndexChange) {
	            onActiveIndexChange(activeIndex);
	        }
	        setActiveIndex(activeIndex);
	    }, [onActiveIndexChange]);
	    var activeIndex = typeof propActiveIndex === "number" ? propActiveIndex : localActiveIndex;
	    var updateActiveIndex = typeof propActiveIndex === "number"
	        ? onActiveIndexChange
	        : handleActiveIndexChange;
	    var value = React.useMemo(function () { return ({
	        activeIndex: activeIndex,
	        onActiveIndexChange: updateActiveIndex,
	        tabs: tabs.map(function (config, i) {
	            var tab;
	            if (typeof config === "string" || React.isValidElement(config)) {
	                tab = { children: config };
	            }
	            else {
	                tab = config;
	            }
	            return __assign$3(__assign$3({}, tab), { id: tab.id || tabsId + "-tab-" + (i + 1), panelId: activeIndex === i
	                    ? tabsId + "-panel-" + (activeIndex + 1)
	                    : undefined, stacked: typeof tab.stacked === "boolean" ? tab.stacked : stacked, iconAfter: typeof tab.iconAfter === "boolean" ? tab.iconAfter : iconAfter });
	        }),
	        tabsId: tabsId,
	    }); }, [activeIndex, iconAfter, stacked, tabs, tabsId, updateActiveIndex]);
	    return React__default['default'].createElement(Provider, { value: value }, children);
	}

	var __assign$2 = (undefined && undefined.__assign) || function () {
	    __assign$2 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$2.apply(this, arguments);
	};
	var __rest$2 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	/**
	 * The `Tabs` component is used to render all the configured `tabs` from the
	 * parent `TabsManager` component inside of the `TabsList`.
	 */
	var Tabs = React.forwardRef(function Tabs(props, ref) {
	    var _a = useTabs(), tabsId = _a.tabsId, tabs = _a.tabs, activeIndex = _a.activeIndex, onActiveIndexChange = _a.onActiveIndexChange;
	    return (React__default['default'].createElement(TabsList, __assign$2({}, props, { id: tabsId, ref: ref, activeIndex: activeIndex, onActiveIndexChange: onActiveIndexChange }), tabs.map(function (_a, index) {
	        var id = _a.id, config = __rest$2(_a, ["id"]);
	        return (React__default['default'].createElement(Tab, __assign$2({}, config, { id: id, key: id, active: activeIndex === index })));
	    })));
	});

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */

	function getChildMapping(children, mapFn) {
	  var mapper = function mapper(child) {
	    return mapFn && React.isValidElement(child) ? mapFn(child) : child;
	  };

	  var result = Object.create(null);
	  if (children) React.Children.map(children, function (c) {
	    return c;
	  }).forEach(function (child) {
	    // run the map function here instead so that the key is the computed one
	    result[child.key] = mapper(child);
	  });
	  return result;
	}
	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */

	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};

	  function getValueForKey(key) {
	    return key in next ? next[key] : prev[key];
	  } // For each key of `next`, the list of keys to insert before that key in
	  // the combined list


	  var nextKeysPending = Object.create(null);
	  var pendingKeys = [];

	  for (var prevKey in prev) {
	    if (prevKey in next) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }

	  var i;
	  var childMapping = {};

	  for (var nextKey in next) {
	    if (nextKeysPending[nextKey]) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }

	    childMapping[nextKey] = getValueForKey(nextKey);
	  } // Finally, add the keys which didn't appear before any key in `next`


	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }

	  return childMapping;
	}

	function getProp(child, prop, props) {
	  return props[prop] != null ? props[prop] : child.props[prop];
	}

	function getInitialChildMapping(props, onExited) {
	  return getChildMapping(props.children, function (child) {
	    return React.cloneElement(child, {
	      onExited: onExited.bind(null, child),
	      in: true,
	      appear: getProp(child, 'appear', props),
	      enter: getProp(child, 'enter', props),
	      exit: getProp(child, 'exit', props)
	    });
	  });
	}
	function getNextChildMapping(nextProps, prevChildMapping, onExited) {
	  var nextChildMapping = getChildMapping(nextProps.children);
	  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
	  Object.keys(children).forEach(function (key) {
	    var child = children[key];
	    if (!React.isValidElement(child)) return;
	    var hasPrev = (key in prevChildMapping);
	    var hasNext = (key in nextChildMapping);
	    var prevChild = prevChildMapping[key];
	    var isLeaving = React.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

	    if (hasNext && (!hasPrev || isLeaving)) {
	      // console.log('entering', key)
	      children[key] = React.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: true,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    } else if (!hasNext && hasPrev && !isLeaving) {
	      // item is old (exiting)
	      // console.log('leaving', key)
	      children[key] = React.cloneElement(child, {
	        in: false
	      });
	    } else if (hasNext && hasPrev && React.isValidElement(prevChild)) {
	      // item hasn't changed transition states
	      // copy over the last transition props;
	      // console.log('unchanged', key)
	      children[key] = React.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: prevChild.props.in,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    }
	  });
	  return children;
	}

	var values = Object.values || function (obj) {
	  return Object.keys(obj).map(function (k) {
	    return obj[k];
	  });
	};

	var defaultProps = {
	  component: 'div',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	};
	/**
	 * The `<TransitionGroup>` component manages a set of transition components
	 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
	 * components, `<TransitionGroup>` is a state machine for managing the mounting
	 * and unmounting of components over time.
	 *
	 * Consider the example below. As items are removed or added to the TodoList the
	 * `in` prop is toggled automatically by the `<TransitionGroup>`.
	 *
	 * Note that `<TransitionGroup>`  does not define any animation behavior!
	 * Exactly _how_ a list item animates is up to the individual transition
	 * component. This means you can mix and match animations across different list
	 * items.
	 */

	var TransitionGroup = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(TransitionGroup, _React$Component);

	  function TransitionGroup(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;

	    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear


	    _this.state = {
	      contextValue: {
	        isMounting: true
	      },
	      handleExited: handleExited,
	      firstRender: true
	    };
	    return _this;
	  }

	  var _proto = TransitionGroup.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.mounted = true;
	    this.setState({
	      contextValue: {
	        isMounting: false
	      }
	    });
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };

	  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
	    var prevChildMapping = _ref.children,
	        handleExited = _ref.handleExited,
	        firstRender = _ref.firstRender;
	    return {
	      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
	      firstRender: false
	    };
	  } // node is `undefined` when user provided `nodeRef` prop
	  ;

	  _proto.handleExited = function handleExited(child, node) {
	    var currentChildMapping = getChildMapping(this.props.children);
	    if (child.key in currentChildMapping) return;

	    if (child.props.onExited) {
	      child.props.onExited(node);
	    }

	    if (this.mounted) {
	      this.setState(function (state) {
	        var children = _extends({}, state.children);

	        delete children[child.key];
	        return {
	          children: children
	        };
	      });
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        Component = _this$props.component,
	        childFactory = _this$props.childFactory,
	        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

	    var contextValue = this.state.contextValue;
	    var children = values(this.state.children).map(childFactory);
	    delete props.appear;
	    delete props.enter;
	    delete props.exit;

	    if (Component === null) {
	      return /*#__PURE__*/React__default['default'].createElement(TransitionGroupContext.Provider, {
	        value: contextValue
	      }, children);
	    }

	    return /*#__PURE__*/React__default['default'].createElement(TransitionGroupContext.Provider, {
	      value: contextValue
	    }, /*#__PURE__*/React__default['default'].createElement(Component, props, children));
	  };

	  return TransitionGroup;
	}(React__default['default'].Component);

	TransitionGroup.propTypes = {};
	TransitionGroup.defaultProps = defaultProps;

	/* eslint-disable react/prop-types */
	/**
	 * @internal
	 */
	function PanelGroup(_a) {
	    var persistent = _a.persistent, disableTransition = _a.disableTransition, children = _a.children;
	    if (persistent) {
	        return React__default['default'].createElement(React__default['default'].Fragment, null, children);
	    }
	    return (React__default['default'].createElement(TransitionGroup, { component: null, appear: !disableTransition, enter: !disableTransition, exit: !disableTransition }, children));
	}

	var __assign$1 = (undefined && undefined.__assign) || function () {
	    __assign$1 = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1.apply(this, arguments);
	};
	var __rest$1 = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block$1 = bem("rmd-tab-panels");
	/**
	 * This component allows you to control the visibility of the `TabPanel`
	 * components and animating the next and current panels as needed. This works by
	 * looping over all the children and getting the current `TabPanel` by the
	 * `activeIndex`. This is why the children for this component can only be
	 * `TabPanel` and should not be conditional.
	 */
	var TabPanels = React.forwardRef(function TabPanels(_a, forwardedRef) {
	    var className = _a.className, children = _a.children, _b = _a.disableScrollFix, disableScrollFix = _b === void 0 ? false : _b, _c = _a.disableTransition, disableTransition = _c === void 0 ? false : _c, _d = _a.persistent, persistent = _d === void 0 ? false : _d, props = __rest$1(_a, ["className", "children", "disableScrollFix", "disableTransition", "persistent"]);
	    var _e = useTabs(), tabsId = _e.tabsId, tabs = _e.tabs, activeIndex = _e.activeIndex;
	    var prevIndex = React.useRef(activeIndex);
	    var _f = React.useState({
	        previous: activeIndex,
	        incrementing: true,
	    }), _g = _f[0], previous = _g.previous, incrementing = _g.incrementing, setState = _f[1];
	    // have to set these in refs since changing these might cause mounting
	    // and unmounting in the Transition group component :/ they should only
	    // be re-evaluated when the activeIndex changes.
	    var transitionable = React.useRef(!persistent && !disableTransition);
	    var animimatable = React.useRef(persistent && !disableTransition);
	    if (prevIndex.current !== activeIndex) {
	        prevIndex.current = activeIndex;
	        transitionable.current = !persistent && !disableTransition;
	        animimatable.current = persistent && !disableTransition;
	    }
	    React.useEffect(function () {
	        setState(function (_a) {
	            var previous = _a.previous;
	            return ({
	                incrementing: previous < activeIndex,
	                previous: disableTransition ? activeIndex : previous,
	            });
	        });
	        // this is for only updating the incrementing state and should not be fired
	        // again if the disableTransition prop is changed
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, [activeIndex]);
	    var onEntered = React.useCallback(function () {
	        setState(function (_a) {
	            var incrementing = _a.incrementing;
	            return ({ incrementing: incrementing, previous: activeIndex });
	        });
	    }, [activeIndex]);
	    var _h = useEnsuredRef(forwardedRef), ref = _h[0], refHandler = _h[1];
	    React.useEffect(function () {
	        if (!ref.current || disableScrollFix) {
	            return;
	        }
	        ref.current.scrollTop = 0;
	        // don't want it to be triggered if only the disableScrollFix prop has changed
	        // since it might be independent from active indexes
	        // eslint-disable-next-line react-hooks/exhaustive-deps
	    }, [activeIndex]);
	    return (React__default['default'].createElement("div", __assign$1({}, props, { ref: refHandler, className: cn(block$1({
	            "slide-left": incrementing && !persistent,
	            "slide-left-persistent": incrementing && persistent,
	            "slide-right": !incrementing,
	        }), className) }),
	        React__default['default'].createElement(PanelGroup, { persistent: persistent, disableTransition: disableTransition }, React.Children.map(children, function (child, index) {
	            if (!persistent && index !== activeIndex) {
	                return null;
	            }
	            if (!React.isValidElement(child)) {
	                return child;
	            }
	            var panel = React.Children.only(child);
	            var labelledBy = panel.props["aria-labelledby"];
	            if (!labelledBy && !panel.props["aria-label"] && tabs[index]) {
	                // generally guaranteed to be defined by this point since the TabsManager
	                // will add ids if missing.
	                labelledBy = tabs[index].id;
	            }
	            var key = panel.key || undefined;
	            if (index === activeIndex && transitionable.current) {
	                key = "" + activeIndex;
	            }
	            var animateIn = panel.props.in;
	            if (animimatable.current) {
	                // when the persistent flag is in, I have too handle the TransitionGroup
	                // `in` behavior manually based on activeIndex
	                animateIn = index === activeIndex;
	            }
	            var hidden = index !== activeIndex;
	            if (persistent) {
	                hidden = hidden && index !== previous;
	            }
	            return React.cloneElement(child, {
	                key: key,
	                in: animateIn,
	                id: tabsId + "-panel-" + (index + 1),
	                "aria-labelledby": labelledBy,
	                hidden: hidden,
	                onEntered: disableTransition ? undefined : onEntered,
	            });
	        }))));
	});

	var __assign = (undefined && undefined.__assign) || function () {
	    __assign = Object.assign || function(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	                t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};
	var __rest = (undefined && undefined.__rest) || function (s, e) {
	    var t = {};
	    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
	        t[p] = s[p];
	    if (s != null && typeof Object.getOwnPropertySymbols === "function")
	        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
	            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
	                t[p[i]] = s[p[i]];
	        }
	    return t;
	};
	var block = bem("rmd-tab-panel");
	var prefix = "rmd-tab-panel";
	var DEFAULT_TABPANEL_CLASSNAMES = {
	    enter: prefix + "--enter",
	    enterActive: prefix + "--enter-active " + prefix + "--animate",
	    exit: prefix + "--exit",
	    exitActive: prefix + "--exit-active " + prefix + "--animate",
	};
	/**
	 * This component renders an accessible tab panel with enter and exit
	 * animations.  This probably should only be used internally as it relies on the
	 * `TabPanels` component along with the `TransitionGroup` from
	 * `react-transition-group` to work as expected.
	 */
	var TabPanel = React.forwardRef(function TabPanel(_a, ref) {
	    var className = _a.className, transitionIn = _a.in, appear = _a.appear, enter = _a.enter, exit = _a.exit, onEnter = _a.onEnter, onEntering = _a.onEntering, onEntered = _a.onEntered, onExit = _a.onExit, onExiting = _a.onExiting, onExited = _a.onExited, _b = _a.timeout, timeout = _b === void 0 ? 150 : _b, _c = _a.classNames, classNames = _c === void 0 ? DEFAULT_TABPANEL_CLASSNAMES : _c, children = _a.children, hidden = _a.hidden, props = __rest(_a, ["className", "in", "appear", "enter", "exit", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "timeout", "classNames", "children", "hidden"]);
	    return (React__default['default'].createElement(CSSTransition, { in: transitionIn && !hidden, appear: appear, enter: enter, exit: exit, onEnter: onEnter, onEntering: onEntering, onEntered: onEntered, onExit: onExit, onExiting: onExiting, onExited: onExited, timeout: timeout, classNames: classNames },
	        React__default['default'].createElement("div", __assign({}, props, { ref: ref, role: "tabpanel", hidden: hidden, className: cn(block(), className) }), children)));
	});

	exports.AAA_CONTRAST_RATIO = AAA_CONTRAST_RATIO;
	exports.ABOVE_CENTER_ANCHOR = ABOVE_CENTER_ANCHOR;
	exports.ABOVE_INNER_LEFT_ANCHOR = ABOVE_INNER_LEFT_ANCHOR;
	exports.ABOVE_INNER_RIGHT_ANCHOR = ABOVE_INNER_RIGHT_ANCHOR;
	exports.ABOVE_LEFT_ANCHOR = ABOVE_LEFT_ANCHOR;
	exports.ABOVE_RIGHT_ANCHOR = ABOVE_RIGHT_ANCHOR;
	exports.APP_BAR_OFFSET_CLASSNAME = APP_BAR_OFFSET_CLASSNAME;
	exports.APP_BAR_OFFSET_DENSE_CLASSNAME = APP_BAR_OFFSET_DENSE_CLASSNAME;
	exports.APP_BAR_OFFSET_PROMINENT_CLASSNAME = APP_BAR_OFFSET_PROMINENT_CLASSNAME;
	exports.APP_BAR_OFFSET_PROMINENT_DENSE_CLASSNAME = APP_BAR_OFFSET_PROMINENT_DENSE_CLASSNAME;
	exports.AcUnitFontIcon = AcUnitFontIcon;
	exports.AccessAlarmFontIcon = AccessAlarmFontIcon;
	exports.AccessAlarmsFontIcon = AccessAlarmsFontIcon;
	exports.AccessTimeFontIcon = AccessTimeFontIcon;
	exports.AccessibilityFontIcon = AccessibilityFontIcon;
	exports.AccessibleFontIcon = AccessibleFontIcon;
	exports.AccountBalanceFontIcon = AccountBalanceFontIcon;
	exports.AccountBalanceWalletFontIcon = AccountBalanceWalletFontIcon;
	exports.AccountBoxFontIcon = AccountBoxFontIcon;
	exports.AccountCircleFontIcon = AccountCircleFontIcon;
	exports.AdbFontIcon = AdbFontIcon;
	exports.AddAPhotoFontIcon = AddAPhotoFontIcon;
	exports.AddAlarmFontIcon = AddAlarmFontIcon;
	exports.AddAlertFontIcon = AddAlertFontIcon;
	exports.AddBoxFontIcon = AddBoxFontIcon;
	exports.AddCircleFontIcon = AddCircleFontIcon;
	exports.AddCircleOutlineFontIcon = AddCircleOutlineFontIcon;
	exports.AddFontIcon = AddFontIcon;
	exports.AddLocationFontIcon = AddLocationFontIcon;
	exports.AddMessageContext = AddMessageContext;
	exports.AddShoppingCartFontIcon = AddShoppingCartFontIcon;
	exports.AddToPhotosFontIcon = AddToPhotosFontIcon;
	exports.AddToQueueFontIcon = AddToQueueFontIcon;
	exports.AdjustFontIcon = AdjustFontIcon;
	exports.AirlineSeatFlatAngledFontIcon = AirlineSeatFlatAngledFontIcon;
	exports.AirlineSeatFlatFontIcon = AirlineSeatFlatFontIcon;
	exports.AirlineSeatIndividualSuiteFontIcon = AirlineSeatIndividualSuiteFontIcon;
	exports.AirlineSeatLegroomExtraFontIcon = AirlineSeatLegroomExtraFontIcon;
	exports.AirlineSeatLegroomNormalFontIcon = AirlineSeatLegroomNormalFontIcon;
	exports.AirlineSeatLegroomReducedFontIcon = AirlineSeatLegroomReducedFontIcon;
	exports.AirlineSeatReclineExtraFontIcon = AirlineSeatReclineExtraFontIcon;
	exports.AirlineSeatReclineNormalFontIcon = AirlineSeatReclineNormalFontIcon;
	exports.AirplanemodeActiveFontIcon = AirplanemodeActiveFontIcon;
	exports.AirplanemodeInactiveFontIcon = AirplanemodeInactiveFontIcon;
	exports.AirplayFontIcon = AirplayFontIcon;
	exports.AirportShuttleFontIcon = AirportShuttleFontIcon;
	exports.AlarmAddFontIcon = AlarmAddFontIcon;
	exports.AlarmFontIcon = AlarmFontIcon;
	exports.AlarmOffFontIcon = AlarmOffFontIcon;
	exports.AlarmOnFontIcon = AlarmOnFontIcon;
	exports.AlbumFontIcon = AlbumFontIcon;
	exports.AllInclusiveFontIcon = AllInclusiveFontIcon;
	exports.AllOutFontIcon = AllOutFontIcon;
	exports.AndroidFontIcon = AndroidFontIcon;
	exports.AnnouncementFontIcon = AnnouncementFontIcon;
	exports.AppBar = AppBar;
	exports.AppBarAction = AppBarAction;
	exports.AppBarNav = AppBarNav;
	exports.AppBarTitle = AppBarTitle;
	exports.AppSizeContext = AppSizeContext;
	exports.AppSizeListener = AppSizeListener;
	exports.AppsFontIcon = AppsFontIcon;
	exports.ArchiveFontIcon = ArchiveFontIcon;
	exports.ArrowBackFontIcon = ArrowBackFontIcon;
	exports.ArrowDownwardFontIcon = ArrowDownwardFontIcon;
	exports.ArrowDropDownCircleFontIcon = ArrowDropDownCircleFontIcon;
	exports.ArrowDropDownFontIcon = ArrowDropDownFontIcon;
	exports.ArrowDropUpFontIcon = ArrowDropUpFontIcon;
	exports.ArrowForwardFontIcon = ArrowForwardFontIcon;
	exports.ArrowUpwardFontIcon = ArrowUpwardFontIcon;
	exports.ArtTrackFontIcon = ArtTrackFontIcon;
	exports.AspectRatioFontIcon = AspectRatioFontIcon;
	exports.AssessmentFontIcon = AssessmentFontIcon;
	exports.AssignmentFontIcon = AssignmentFontIcon;
	exports.AssignmentIndFontIcon = AssignmentIndFontIcon;
	exports.AssignmentLateFontIcon = AssignmentLateFontIcon;
	exports.AssignmentReturnFontIcon = AssignmentReturnFontIcon;
	exports.AssignmentReturnedFontIcon = AssignmentReturnedFontIcon;
	exports.AssignmentTurnedInFontIcon = AssignmentTurnedInFontIcon;
	exports.AssistantFontIcon = AssistantFontIcon;
	exports.AssistantPhotoFontIcon = AssistantPhotoFontIcon;
	exports.AsyncSwitch = AsyncSwitch;
	exports.AttachFileFontIcon = AttachFileFontIcon;
	exports.AttachMoneyFontIcon = AttachMoneyFontIcon;
	exports.AttachmentFontIcon = AttachmentFontIcon;
	exports.AudiotrackFontIcon = AudiotrackFontIcon;
	exports.AutoComplete = AutoComplete;
	exports.AutorenewFontIcon = AutorenewFontIcon;
	exports.AvTimerFontIcon = AvTimerFontIcon;
	exports.Avatar = Avatar;
	exports.BELOW_CENTER_ANCHOR = BELOW_CENTER_ANCHOR;
	exports.BELOW_INNER_LEFT_ANCHOR = BELOW_INNER_LEFT_ANCHOR;
	exports.BELOW_INNER_RIGHT_ANCHOR = BELOW_INNER_RIGHT_ANCHOR;
	exports.BELOW_LEFT_ANCHOR = BELOW_LEFT_ANCHOR;
	exports.BELOW_RIGHT_ANCHOR = BELOW_RIGHT_ANCHOR;
	exports.BOTTOM_CENTER_ANCHOR = BOTTOM_CENTER_ANCHOR;
	exports.BOTTOM_INNER_LEFT_ANCHOR = BOTTOM_INNER_LEFT_ANCHOR;
	exports.BOTTOM_INNER_RIGHT_ANCHOR = BOTTOM_INNER_RIGHT_ANCHOR;
	exports.BOTTOM_LEFT_ANCHOR = BOTTOM_LEFT_ANCHOR;
	exports.BOTTOM_RIGHT_ANCHOR = BOTTOM_RIGHT_ANCHOR;
	exports.BackspaceFontIcon = BackspaceFontIcon;
	exports.BackupFontIcon = BackupFontIcon;
	exports.Badge = Badge;
	exports.BadgeContainer = BadgeContainer;
	exports.BadgedButton = BadgedButton;
	exports.BatteryAlertFontIcon = BatteryAlertFontIcon;
	exports.BatteryChargingFullFontIcon = BatteryChargingFullFontIcon;
	exports.BatteryFullFontIcon = BatteryFullFontIcon;
	exports.BatteryStdFontIcon = BatteryStdFontIcon;
	exports.BatteryUnknownFontIcon = BatteryUnknownFontIcon;
	exports.BeachAccessFontIcon = BeachAccessFontIcon;
	exports.BeenhereFontIcon = BeenhereFontIcon;
	exports.BlockFontIcon = BlockFontIcon;
	exports.BluetoothAudioFontIcon = BluetoothAudioFontIcon;
	exports.BluetoothConnectedFontIcon = BluetoothConnectedFontIcon;
	exports.BluetoothDisabledFontIcon = BluetoothDisabledFontIcon;
	exports.BluetoothFontIcon = BluetoothFontIcon;
	exports.BluetoothSearchingFontIcon = BluetoothSearchingFontIcon;
	exports.BlurCircularFontIcon = BlurCircularFontIcon;
	exports.BlurLinearFontIcon = BlurLinearFontIcon;
	exports.BlurOffFontIcon = BlurOffFontIcon;
	exports.BlurOnFontIcon = BlurOnFontIcon;
	exports.BookFontIcon = BookFontIcon;
	exports.BookmarkBorderFontIcon = BookmarkBorderFontIcon;
	exports.BookmarkFontIcon = BookmarkFontIcon;
	exports.BorderAllFontIcon = BorderAllFontIcon;
	exports.BorderBottomFontIcon = BorderBottomFontIcon;
	exports.BorderClearFontIcon = BorderClearFontIcon;
	exports.BorderColorFontIcon = BorderColorFontIcon;
	exports.BorderHorizontalFontIcon = BorderHorizontalFontIcon;
	exports.BorderInnerFontIcon = BorderInnerFontIcon;
	exports.BorderLeftFontIcon = BorderLeftFontIcon;
	exports.BorderOuterFontIcon = BorderOuterFontIcon;
	exports.BorderRightFontIcon = BorderRightFontIcon;
	exports.BorderStyleFontIcon = BorderStyleFontIcon;
	exports.BorderTopFontIcon = BorderTopFontIcon;
	exports.BorderVerticalFontIcon = BorderVerticalFontIcon;
	exports.BrandingWatermarkFontIcon = BrandingWatermarkFontIcon;
	exports.Brightness1FontIcon = Brightness1FontIcon;
	exports.Brightness2FontIcon = Brightness2FontIcon;
	exports.Brightness3FontIcon = Brightness3FontIcon;
	exports.Brightness4FontIcon = Brightness4FontIcon;
	exports.Brightness5FontIcon = Brightness5FontIcon;
	exports.Brightness6FontIcon = Brightness6FontIcon;
	exports.Brightness7FontIcon = Brightness7FontIcon;
	exports.BrightnessAutoFontIcon = BrightnessAutoFontIcon;
	exports.BrightnessHighFontIcon = BrightnessHighFontIcon;
	exports.BrightnessLowFontIcon = BrightnessLowFontIcon;
	exports.BrightnessMediumFontIcon = BrightnessMediumFontIcon;
	exports.BrokenImageFontIcon = BrokenImageFontIcon;
	exports.BrushFontIcon = BrushFontIcon;
	exports.BubbleChartFontIcon = BubbleChartFontIcon;
	exports.BugReportFontIcon = BugReportFontIcon;
	exports.BuildFontIcon = BuildFontIcon;
	exports.BurstModeFontIcon = BurstModeFontIcon;
	exports.BusinessCenterFontIcon = BusinessCenterFontIcon;
	exports.BusinessFontIcon = BusinessFontIcon;
	exports.Button = Button;
	exports.CELL_MARGIN_VAR = CELL_MARGIN_VAR;
	exports.CELL_SIZE_VAR = CELL_SIZE_VAR;
	exports.CENTER_CENTER_ANCHOR = CENTER_CENTER_ANCHOR;
	exports.CENTER_INNER_LEFT_ANCHOR = CENTER_INNER_LEFT_ANCHOR;
	exports.CENTER_INNER_RIGHT_ANCHOR = CENTER_INNER_RIGHT_ANCHOR;
	exports.CENTER_LEFT_ANCHOR = CENTER_LEFT_ANCHOR;
	exports.CENTER_RIGHT_ANCHOR = CENTER_RIGHT_ANCHOR;
	exports.COLLAPSE_TIMEOUT = COLLAPSE_TIMEOUT;
	exports.CROSS_FADE_CLASSNAMES = CROSS_FADE_CLASSNAMES;
	exports.CROSS_FADE_TIMEOUT = CROSS_FADE_TIMEOUT;
	exports.CachedFontIcon = CachedFontIcon;
	exports.CakeFontIcon = CakeFontIcon;
	exports.CallEndFontIcon = CallEndFontIcon;
	exports.CallFontIcon = CallFontIcon;
	exports.CallMadeFontIcon = CallMadeFontIcon;
	exports.CallMergeFontIcon = CallMergeFontIcon;
	exports.CallMissedFontIcon = CallMissedFontIcon;
	exports.CallMissedOutgoingFontIcon = CallMissedOutgoingFontIcon;
	exports.CallReceivedFontIcon = CallReceivedFontIcon;
	exports.CallSplitFontIcon = CallSplitFontIcon;
	exports.CallToActionFontIcon = CallToActionFontIcon;
	exports.CameraAltFontIcon = CameraAltFontIcon;
	exports.CameraEnhanceFontIcon = CameraEnhanceFontIcon;
	exports.CameraFontIcon = CameraFontIcon;
	exports.CameraFrontFontIcon = CameraFrontFontIcon;
	exports.CameraRearFontIcon = CameraRearFontIcon;
	exports.CameraRollFontIcon = CameraRollFontIcon;
	exports.CancelFontIcon = CancelFontIcon;
	exports.Caption = Caption;
	exports.Card = Card;
	exports.CardActions = CardActions;
	exports.CardContent = CardContent;
	exports.CardGiftcardFontIcon = CardGiftcardFontIcon;
	exports.CardHeader = CardHeader;
	exports.CardMembershipFontIcon = CardMembershipFontIcon;
	exports.CardSubtitle = CardSubtitle;
	exports.CardTitle = CardTitle;
	exports.CardTravelFontIcon = CardTravelFontIcon;
	exports.CasinoFontIcon = CasinoFontIcon;
	exports.CastConnectedFontIcon = CastConnectedFontIcon;
	exports.CastFontIcon = CastFontIcon;
	exports.CenterFocusStrongFontIcon = CenterFocusStrongFontIcon;
	exports.CenterFocusWeakFontIcon = CenterFocusWeakFontIcon;
	exports.ChangeHistoryFontIcon = ChangeHistoryFontIcon;
	exports.ChatBubbleFontIcon = ChatBubbleFontIcon;
	exports.ChatBubbleOutlineFontIcon = ChatBubbleOutlineFontIcon;
	exports.ChatFontIcon = ChatFontIcon;
	exports.CheckBoxFontIcon = CheckBoxFontIcon;
	exports.CheckBoxOutlineBlankFontIcon = CheckBoxOutlineBlankFontIcon;
	exports.CheckCircleFontIcon = CheckCircleFontIcon;
	exports.CheckFontIcon = CheckFontIcon;
	exports.Checkbox = Checkbox;
	exports.ChevronLeftFontIcon = ChevronLeftFontIcon;
	exports.ChevronRightFontIcon = ChevronRightFontIcon;
	exports.ChildCareFontIcon = ChildCareFontIcon;
	exports.ChildFriendlyFontIcon = ChildFriendlyFontIcon;
	exports.Chip = Chip;
	exports.ChromeReaderModeFontIcon = ChromeReaderModeFontIcon;
	exports.CircularProgress = CircularProgress;
	exports.ClassFontIcon = ClassFontIcon;
	exports.ClearAllFontIcon = ClearAllFontIcon;
	exports.ClearFontIcon = ClearFontIcon;
	exports.CloseFontIcon = CloseFontIcon;
	exports.ClosedCaptionFontIcon = ClosedCaptionFontIcon;
	exports.CloudCircleFontIcon = CloudCircleFontIcon;
	exports.CloudDoneFontIcon = CloudDoneFontIcon;
	exports.CloudDownloadFontIcon = CloudDownloadFontIcon;
	exports.CloudFontIcon = CloudFontIcon;
	exports.CloudOffFontIcon = CloudOffFontIcon;
	exports.CloudQueueFontIcon = CloudQueueFontIcon;
	exports.CloudUploadFontIcon = CloudUploadFontIcon;
	exports.CodeFontIcon = CodeFontIcon;
	exports.Collapse = Collapse;
	exports.CollectionsBookmarkFontIcon = CollectionsBookmarkFontIcon;
	exports.CollectionsFontIcon = CollectionsFontIcon;
	exports.ColorLensFontIcon = ColorLensFontIcon;
	exports.ColorizeFontIcon = ColorizeFontIcon;
	exports.CommentFontIcon = CommentFontIcon;
	exports.CompareArrowsFontIcon = CompareArrowsFontIcon;
	exports.CompareFontIcon = CompareFontIcon;
	exports.ComputerFontIcon = ComputerFontIcon;
	exports.ConditionalPortal = ConditionalPortal;
	exports.Configuration = Configuration;
	exports.ConfirmationNumberFontIcon = ConfirmationNumberFontIcon;
	exports.ContactMailFontIcon = ContactMailFontIcon;
	exports.ContactPhoneFontIcon = ContactPhoneFontIcon;
	exports.ContactsFontIcon = ContactsFontIcon;
	exports.ContentCopyFontIcon = ContentCopyFontIcon;
	exports.ContentCutFontIcon = ContentCutFontIcon;
	exports.ContentPasteFontIcon = ContentPasteFontIcon;
	exports.ControlPointDuplicateFontIcon = ControlPointDuplicateFontIcon;
	exports.ControlPointFontIcon = ControlPointFontIcon;
	exports.CopyrightFontIcon = CopyrightFontIcon;
	exports.CreateFontIcon = CreateFontIcon;
	exports.CreateNewFolderFontIcon = CreateNewFolderFontIcon;
	exports.CreditCardFontIcon = CreditCardFontIcon;
	exports.Crop169FontIcon = Crop169FontIcon;
	exports.Crop32FontIcon = Crop32FontIcon;
	exports.Crop54FontIcon = Crop54FontIcon;
	exports.Crop75FontIcon = Crop75FontIcon;
	exports.CropDinFontIcon = CropDinFontIcon;
	exports.CropFontIcon = CropFontIcon;
	exports.CropFreeFontIcon = CropFreeFontIcon;
	exports.CropLandscapeFontIcon = CropLandscapeFontIcon;
	exports.CropOriginalFontIcon = CropOriginalFontIcon;
	exports.CropPortraitFontIcon = CropPortraitFontIcon;
	exports.CropRotateFontIcon = CropRotateFontIcon;
	exports.CropSquareFontIcon = CropSquareFontIcon;
	exports.CrossFade = CrossFade;
	exports.DATA_RMD_NOSCROLL = DATA_RMD_NOSCROLL;
	exports.DEFAULT_APP_SIZE = DEFAULT_APP_SIZE;
	exports.DEFAULT_COLLAPSE_MIN_HEIGHT = DEFAULT_COLLAPSE_MIN_HEIGHT;
	exports.DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM = DEFAULT_COLLAPSE_MIN_PADDING_BOTTOM;
	exports.DEFAULT_COLLAPSE_MIN_PADDING_TOP = DEFAULT_COLLAPSE_MIN_PADDING_TOP;
	exports.DEFAULT_DESKTOP_LARGE_MIN_WIDTH = DEFAULT_DESKTOP_LARGE_MIN_WIDTH;
	exports.DEFAULT_DESKTOP_LAYOUT = DEFAULT_DESKTOP_LAYOUT;
	exports.DEFAULT_DESKTOP_MIN_WIDTH = DEFAULT_DESKTOP_MIN_WIDTH;
	exports.DEFAULT_DIR = DEFAULT_DIR;
	exports.DEFAULT_GET_DISPLAY_LABEL = getDisplayLabel;
	exports.DEFAULT_GET_ITEM_VALUE = DEFAULT_GET_ITEM_VALUE;
	exports.DEFAULT_GET_OPTION_ID = getOptionId;
	exports.DEFAULT_GET_OPTION_LABEL = getOptionLabel;
	exports.DEFAULT_GET_RESULT_ID = getResultId;
	exports.DEFAULT_GET_RESULT_LABEL = getResultLabel;
	exports.DEFAULT_GET_RESULT_VALUE = getResultValue;
	exports.DEFAULT_GRID_LIST_MAX_CELL_SIZE = DEFAULT_GRID_LIST_MAX_CELL_SIZE;
	exports.DEFAULT_GRID_LIST_PADDING = DEFAULT_GRID_LIST_PADDING;
	exports.DEFAULT_HOVER_MODE_DEACTIVATION_TIME = DEFAULT_HOVER_MODE_DEACTIVATION_TIME;
	exports.DEFAULT_HOVER_MODE_STICKY_EXIT_TIME = DEFAULT_HOVER_MODE_STICKY_EXIT_TIME;
	exports.DEFAULT_HOVER_MODE_VISIBLE_IN_TIME = DEFAULT_HOVER_MODE_VISIBLE_IN_TIME;
	exports.DEFAULT_IGNORE_WHITESPACE = DEFAULT_IGNORE_WHITESPACE;
	exports.DEFAULT_LANDSCAPE_TABLET_LAYOUT = DEFAULT_LANDSCAPE_TABLET_LAYOUT;
	exports.DEFAULT_LAYOUT_MAIN_CLASSNAMES = DEFAULT_LAYOUT_MAIN_CLASSNAMES;
	exports.DEFAULT_MESSAGE_QUEUE_TIMEOUT = DEFAULT_MESSAGE_QUEUE_TIMEOUT;
	exports.DEFAULT_OVERLAY_CLASSNAMES = DEFAULT_OVERLAY_CLASSNAMES;
	exports.DEFAULT_OVERLAY_TIMEOUT = DEFAULT_OVERLAY_TIMEOUT;
	exports.DEFAULT_PHONE_LAYOUT = DEFAULT_PHONE_LAYOUT;
	exports.DEFAULT_PHONE_MAX_WIDTH = DEFAULT_PHONE_MAX_WIDTH;
	exports.DEFAULT_RIPPLE_CLASSNAMES = DEFAULT_RIPPLE_CLASSNAMES;
	exports.DEFAULT_RIPPLE_TIMEOUT = DEFAULT_RIPPLE_TIMEOUT;
	exports.DEFAULT_SEARCH_OPTIONS = DEFAULT_SEARCH_OPTIONS;
	exports.DEFAULT_SEARCH_RESET_TIME = DEFAULT_SEARCH_RESET_TIME;
	exports.DEFAULT_SHEET_CLASSNAMES = DEFAULT_SHEET_CLASSNAMES;
	exports.DEFAULT_SHEET_TIMEOUT = DEFAULT_SHEET_TIMEOUT;
	exports.DEFAULT_SLIDER_ANIMATION_TIME = DEFAULT_SLIDER_ANIMATION_TIME;
	exports.DEFAULT_SLIDER_GET_VALUE_TEXT = DEFAULT_SLIDER_GET_VALUE_TEXT;
	exports.DEFAULT_SLIDER_MAX = DEFAULT_SLIDER_MAX;
	exports.DEFAULT_SLIDER_MIN = DEFAULT_SLIDER_MIN;
	exports.DEFAULT_SLIDER_STEP = DEFAULT_SLIDER_STEP;
	exports.DEFAULT_TABLET_LAYOUT = DEFAULT_TABLET_LAYOUT;
	exports.DEFAULT_TABLET_MAX_WIDTH = DEFAULT_TABLET_MAX_WIDTH;
	exports.DEFAULT_TABLET_MIN_WIDTH = DEFAULT_TABLET_MIN_WIDTH;
	exports.DEFAULT_TOAST_CLASSNAMES = DEFAULT_TOAST_CLASSNAMES;
	exports.DEFAULT_TOAST_TIMEOUT = DEFAULT_TOAST_TIMEOUT;
	exports.DEFAULT_TOOLTIP_CLASSNAMES = DEFAULT_TOOLTIP_CLASSNAMES;
	exports.DEFAULT_TOOLTIP_DELAY = DEFAULT_TOOLTIP_DELAY;
	exports.DEFAULT_TOOLTIP_DENSE_SPACING = DEFAULT_TOOLTIP_DENSE_SPACING;
	exports.DEFAULT_TOOLTIP_MARGIN = DEFAULT_TOOLTIP_MARGIN;
	exports.DEFAULT_TOOLTIP_POSITION = DEFAULT_TOOLTIP_POSITION;
	exports.DEFAULT_TOOLTIP_SPACING = DEFAULT_TOOLTIP_SPACING;
	exports.DEFAULT_TOOLTIP_THRESHOLD = DEFAULT_TOOLTIP_THRESHOLD;
	exports.DEFAULT_TOOLTIP_TIMEOUT = DEFAULT_TOOLTIP_TIMEOUT;
	exports.DEFAULT_TRIM = DEFAULT_TRIM;
	exports.DEFAULT_VALUE_KEY = DEFAULT_VALUE_KEY;
	exports.DEFFAULT_LAYOUT_NAV_TOGGLE_CLASSNAMES = DEFFAULT_LAYOUT_NAV_TOGGLE_CLASSNAMES;
	exports.DashboardFontIcon = DashboardFontIcon;
	exports.DataUsageFontIcon = DataUsageFontIcon;
	exports.DateRangeFontIcon = DateRangeFontIcon;
	exports.DehazeFontIcon = DehazeFontIcon;
	exports.DeleteFontIcon = DeleteFontIcon;
	exports.DeleteForeverFontIcon = DeleteForeverFontIcon;
	exports.DeleteSweepFontIcon = DeleteSweepFontIcon;
	exports.DescriptionFontIcon = DescriptionFontIcon;
	exports.DesktopMacFontIcon = DesktopMacFontIcon;
	exports.DesktopOnly = DesktopOnly;
	exports.DesktopWindowsFontIcon = DesktopWindowsFontIcon;
	exports.DetailsFontIcon = DetailsFontIcon;
	exports.DeveloperBoardFontIcon = DeveloperBoardFontIcon;
	exports.DeveloperModeFontIcon = DeveloperModeFontIcon;
	exports.DeviceHubFontIcon = DeviceHubFontIcon;
	exports.DevicesFontIcon = DevicesFontIcon;
	exports.DevicesOtherFontIcon = DevicesOtherFontIcon;
	exports.DialerSipFontIcon = DialerSipFontIcon;
	exports.Dialog = Dialog;
	exports.DialogContent = DialogContent;
	exports.DialogFooter = DialogFooter;
	exports.DialogHeader = DialogHeader;
	exports.DialogTitle = DialogTitle;
	exports.DialpadFontIcon = DialpadFontIcon;
	exports.Dir = Dir;
	exports.DirectionsBikeFontIcon = DirectionsBikeFontIcon;
	exports.DirectionsBoatFontIcon = DirectionsBoatFontIcon;
	exports.DirectionsBusFontIcon = DirectionsBusFontIcon;
	exports.DirectionsCarFontIcon = DirectionsCarFontIcon;
	exports.DirectionsFontIcon = DirectionsFontIcon;
	exports.DirectionsRailwayFontIcon = DirectionsRailwayFontIcon;
	exports.DirectionsRunFontIcon = DirectionsRunFontIcon;
	exports.DirectionsSubwayFontIcon = DirectionsSubwayFontIcon;
	exports.DirectionsTransitFontIcon = DirectionsTransitFontIcon;
	exports.DirectionsWalkFontIcon = DirectionsWalkFontIcon;
	exports.DiscFullFontIcon = DiscFullFontIcon;
	exports.Divider = Divider;
	exports.DnsFontIcon = DnsFontIcon;
	exports.DoNotDisturbAltFontIcon = DoNotDisturbAltFontIcon;
	exports.DoNotDisturbFontIcon = DoNotDisturbFontIcon;
	exports.DoNotDisturbOffFontIcon = DoNotDisturbOffFontIcon;
	exports.DoNotDisturbOnFontIcon = DoNotDisturbOnFontIcon;
	exports.DockFontIcon = DockFontIcon;
	exports.DomainFontIcon = DomainFontIcon;
	exports.DoneAllFontIcon = DoneAllFontIcon;
	exports.DoneFontIcon = DoneFontIcon;
	exports.DonutLargeFontIcon = DonutLargeFontIcon;
	exports.DonutSmallFontIcon = DonutSmallFontIcon;
	exports.DraftsFontIcon = DraftsFontIcon;
	exports.DragHandleFontIcon = DragHandleFontIcon;
	exports.DriveEtaFontIcon = DriveEtaFontIcon;
	exports.DropdownMenu = DropdownMenu;
	exports.DropdownMenuItem = DropdownMenuItem;
	exports.DvrFontIcon = DvrFontIcon;
	exports.ENTER = ENTER;
	exports.ENTERED = ENTERED;
	exports.ENTERING = ENTERING;
	exports.EXIT = EXIT;
	exports.EXITED = EXITED;
	exports.EXITING = EXITING;
	exports.EditFontIcon = EditFontIcon;
	exports.EditLocationFontIcon = EditLocationFontIcon;
	exports.EjectFontIcon = EjectFontIcon;
	exports.EmailFontIcon = EmailFontIcon;
	exports.EnhancedEncryptionFontIcon = EnhancedEncryptionFontIcon;
	exports.EqualizerFontIcon = EqualizerFontIcon;
	exports.ErrorFontIcon = ErrorFontIcon;
	exports.ErrorOutlineFontIcon = ErrorOutlineFontIcon;
	exports.EuroSymbolFontIcon = EuroSymbolFontIcon;
	exports.EvStationFontIcon = EvStationFontIcon;
	exports.EventAvailableFontIcon = EventAvailableFontIcon;
	exports.EventBusyFontIcon = EventBusyFontIcon;
	exports.EventFontIcon = EventFontIcon;
	exports.EventNoteFontIcon = EventNoteFontIcon;
	exports.EventSeatFontIcon = EventSeatFontIcon;
	exports.ExitToAppFontIcon = ExitToAppFontIcon;
	exports.ExpandLessFontIcon = ExpandLessFontIcon;
	exports.ExpandMoreFontIcon = ExpandMoreFontIcon;
	exports.ExpansionList = ExpansionList;
	exports.ExpansionPanel = ExpansionPanel;
	exports.ExpansionPanelHeader = ExpansionPanelHeader;
	exports.ExplicitFontIcon = ExplicitFontIcon;
	exports.ExploreFontIcon = ExploreFontIcon;
	exports.ExposureFontIcon = ExposureFontIcon;
	exports.ExposureNeg1FontIcon = ExposureNeg1FontIcon;
	exports.ExposureNeg2FontIcon = ExposureNeg2FontIcon;
	exports.ExposurePlus1FontIcon = ExposurePlus1FontIcon;
	exports.ExposurePlus2FontIcon = ExposurePlus2FontIcon;
	exports.ExposureZeroFontIcon = ExposureZeroFontIcon;
	exports.ExtensionFontIcon = ExtensionFontIcon;
	exports.FAB = FAB;
	exports.FaceFontIcon = FaceFontIcon;
	exports.FastForwardFontIcon = FastForwardFontIcon;
	exports.FastRewindFontIcon = FastRewindFontIcon;
	exports.FavoriteBorderFontIcon = FavoriteBorderFontIcon;
	exports.FavoriteFontIcon = FavoriteFontIcon;
	exports.FeaturedPlayListFontIcon = FeaturedPlayListFontIcon;
	exports.FeaturedVideoFontIcon = FeaturedVideoFontIcon;
	exports.FeedbackFontIcon = FeedbackFontIcon;
	exports.FiberDvrFontIcon = FiberDvrFontIcon;
	exports.FiberManualRecordFontIcon = FiberManualRecordFontIcon;
	exports.FiberNewFontIcon = FiberNewFontIcon;
	exports.FiberPinFontIcon = FiberPinFontIcon;
	exports.FiberSmartRecordFontIcon = FiberSmartRecordFontIcon;
	exports.Fieldset = Fieldset;
	exports.FileDownloadFontIcon = FileDownloadFontIcon;
	exports.FileInput = FileInput;
	exports.FileUploadFontIcon = FileUploadFontIcon;
	exports.Filter1FontIcon = Filter1FontIcon;
	exports.Filter2FontIcon = Filter2FontIcon;
	exports.Filter3FontIcon = Filter3FontIcon;
	exports.Filter4FontIcon = Filter4FontIcon;
	exports.Filter5FontIcon = Filter5FontIcon;
	exports.Filter6FontIcon = Filter6FontIcon;
	exports.Filter7FontIcon = Filter7FontIcon;
	exports.Filter8FontIcon = Filter8FontIcon;
	exports.Filter9FontIcon = Filter9FontIcon;
	exports.Filter9PlusFontIcon = Filter9PlusFontIcon;
	exports.FilterBAndWFontIcon = FilterBAndWFontIcon;
	exports.FilterCenterFocusFontIcon = FilterCenterFocusFontIcon;
	exports.FilterDramaFontIcon = FilterDramaFontIcon;
	exports.FilterFontIcon = FilterFontIcon;
	exports.FilterFramesFontIcon = FilterFramesFontIcon;
	exports.FilterHdrFontIcon = FilterHdrFontIcon;
	exports.FilterListFontIcon = FilterListFontIcon;
	exports.FilterNoneFontIcon = FilterNoneFontIcon;
	exports.FilterTiltShiftFontIcon = FilterTiltShiftFontIcon;
	exports.FilterVintageFontIcon = FilterVintageFontIcon;
	exports.FindInPageFontIcon = FindInPageFontIcon;
	exports.FindReplaceFontIcon = FindReplaceFontIcon;
	exports.FingerprintFontIcon = FingerprintFontIcon;
	exports.FirstPageFontIcon = FirstPageFontIcon;
	exports.FitnessCenterFontIcon = FitnessCenterFontIcon;
	exports.FixedDialog = FixedDialog;
	exports.FlagFontIcon = FlagFontIcon;
	exports.FlareFontIcon = FlareFontIcon;
	exports.FlashAutoFontIcon = FlashAutoFontIcon;
	exports.FlashOffFontIcon = FlashOffFontIcon;
	exports.FlashOnFontIcon = FlashOnFontIcon;
	exports.FlightFontIcon = FlightFontIcon;
	exports.FlightLandFontIcon = FlightLandFontIcon;
	exports.FlightTakeoffFontIcon = FlightTakeoffFontIcon;
	exports.FlipFontIcon = FlipFontIcon;
	exports.FlipToBackFontIcon = FlipToBackFontIcon;
	exports.FlipToFrontFontIcon = FlipToFrontFontIcon;
	exports.FocusContainer = FocusContainer;
	exports.FolderFontIcon = FolderFontIcon;
	exports.FolderOpenFontIcon = FolderOpenFontIcon;
	exports.FolderSharedFontIcon = FolderSharedFontIcon;
	exports.FolderSpecialFontIcon = FolderSpecialFontIcon;
	exports.FontDownloadFontIcon = FontDownloadFontIcon;
	exports.FontIcon = FontIcon;
	exports.Form = Form;
	exports.FormMessage = FormMessage;
	exports.FormMessageContainer = FormMessageContainer;
	exports.FormThemeProvider = FormThemeProvider;
	exports.FormatAlignCenterFontIcon = FormatAlignCenterFontIcon;
	exports.FormatAlignJustifyFontIcon = FormatAlignJustifyFontIcon;
	exports.FormatAlignLeftFontIcon = FormatAlignLeftFontIcon;
	exports.FormatAlignRightFontIcon = FormatAlignRightFontIcon;
	exports.FormatBoldFontIcon = FormatBoldFontIcon;
	exports.FormatClearFontIcon = FormatClearFontIcon;
	exports.FormatColorFillFontIcon = FormatColorFillFontIcon;
	exports.FormatColorResetFontIcon = FormatColorResetFontIcon;
	exports.FormatColorTextFontIcon = FormatColorTextFontIcon;
	exports.FormatIndentDecreaseFontIcon = FormatIndentDecreaseFontIcon;
	exports.FormatIndentIncreaseFontIcon = FormatIndentIncreaseFontIcon;
	exports.FormatItalicFontIcon = FormatItalicFontIcon;
	exports.FormatLineSpacingFontIcon = FormatLineSpacingFontIcon;
	exports.FormatListBulletedFontIcon = FormatListBulletedFontIcon;
	exports.FormatListNumberedFontIcon = FormatListNumberedFontIcon;
	exports.FormatPaintFontIcon = FormatPaintFontIcon;
	exports.FormatQuoteFontIcon = FormatQuoteFontIcon;
	exports.FormatShapesFontIcon = FormatShapesFontIcon;
	exports.FormatSizeFontIcon = FormatSizeFontIcon;
	exports.FormatStrikethroughFontIcon = FormatStrikethroughFontIcon;
	exports.FormatTextdirectionLToRFontIcon = FormatTextdirectionLToRFontIcon;
	exports.FormatTextdirectionRToLFontIcon = FormatTextdirectionRToLFontIcon;
	exports.FormatUnderlinedFontIcon = FormatUnderlinedFontIcon;
	exports.ForumFontIcon = ForumFontIcon;
	exports.Forward10FontIcon = Forward10FontIcon;
	exports.Forward30FontIcon = Forward30FontIcon;
	exports.Forward5FontIcon = Forward5FontIcon;
	exports.ForwardFontIcon = ForwardFontIcon;
	exports.FreeBreakfastFontIcon = FreeBreakfastFontIcon;
	exports.FullscreenExitFontIcon = FullscreenExitFontIcon;
	exports.FullscreenFontIcon = FullscreenFontIcon;
	exports.FunctionsFontIcon = FunctionsFontIcon;
	exports.GRID_COLUMNS_VAR = GRID_COLUMNS_VAR;
	exports.GRID_GUTTER_VAR = GRID_GUTTER_VAR;
	exports.GTranslateFontIcon = GTranslateFontIcon;
	exports.GamepadFontIcon = GamepadFontIcon;
	exports.GamesFontIcon = GamesFontIcon;
	exports.GavelFontIcon = GavelFontIcon;
	exports.GestureFontIcon = GestureFontIcon;
	exports.GetAppFontIcon = GetAppFontIcon;
	exports.GifFontIcon = GifFontIcon;
	exports.GolfCourseFontIcon = GolfCourseFontIcon;
	exports.GpsFixedFontIcon = GpsFixedFontIcon;
	exports.GpsNotFixedFontIcon = GpsNotFixedFontIcon;
	exports.GpsOffFontIcon = GpsOffFontIcon;
	exports.GradeFontIcon = GradeFontIcon;
	exports.GradientFontIcon = GradientFontIcon;
	exports.GrainFontIcon = GrainFontIcon;
	exports.GraphicEqFontIcon = GraphicEqFontIcon;
	exports.Grid = Grid;
	exports.GridCell = GridCell;
	exports.GridList = GridList;
	exports.GridListCell = GridListCell;
	exports.GridListSizeProvider = GridListSizeProvider;
	exports.GridOffFontIcon = GridOffFontIcon;
	exports.GridOnFontIcon = GridOnFontIcon;
	exports.GroupAddFontIcon = GroupAddFontIcon;
	exports.GroupFontIcon = GroupFontIcon;
	exports.GroupWorkFontIcon = GroupWorkFontIcon;
	exports.HdFontIcon = HdFontIcon;
	exports.HdrOffFontIcon = HdrOffFontIcon;
	exports.HdrOnFontIcon = HdrOnFontIcon;
	exports.HdrStrongFontIcon = HdrStrongFontIcon;
	exports.HdrWeakFontIcon = HdrWeakFontIcon;
	exports.HeadsetFontIcon = HeadsetFontIcon;
	exports.HeadsetMicFontIcon = HeadsetMicFontIcon;
	exports.HealingFontIcon = HealingFontIcon;
	exports.HearingFontIcon = HearingFontIcon;
	exports.HelpFontIcon = HelpFontIcon;
	exports.HelpOutlineFontIcon = HelpOutlineFontIcon;
	exports.HighQualityFontIcon = HighQualityFontIcon;
	exports.HighlightFontIcon = HighlightFontIcon;
	exports.HighlightOffFontIcon = HighlightOffFontIcon;
	exports.HighlightedResult = HighlightedResult;
	exports.HistoryFontIcon = HistoryFontIcon;
	exports.HomeFontIcon = HomeFontIcon;
	exports.HotTubFontIcon = HotTubFontIcon;
	exports.HotelFontIcon = HotelFontIcon;
	exports.HourglassEmptyFontIcon = HourglassEmptyFontIcon;
	exports.HourglassFullFontIcon = HourglassFullFontIcon;
	exports.HoverModeContextProvider = HoverModeContextProvider;
	exports.HoverModeProvider = HoverModeProvider;
	exports.HttpFontIcon = HttpFontIcon;
	exports.HttpsFontIcon = HttpsFontIcon;
	exports.IconProvider = IconProvider;
	exports.IconRotator = IconRotator;
	exports.ImageAspectRatioFontIcon = ImageAspectRatioFontIcon;
	exports.ImageFontIcon = ImageFontIcon;
	exports.ImportContactsFontIcon = ImportContactsFontIcon;
	exports.ImportExportFontIcon = ImportExportFontIcon;
	exports.ImportantDevicesFontIcon = ImportantDevicesFontIcon;
	exports.InboxFontIcon = InboxFontIcon;
	exports.IndeterminateCheckBoxFontIcon = IndeterminateCheckBoxFontIcon;
	exports.InfoFontIcon = InfoFontIcon;
	exports.InfoOutlineFontIcon = InfoOutlineFontIcon;
	exports.InputFontIcon = InputFontIcon;
	exports.InputToggle = InputToggle;
	exports.InputToggleIcon = InputToggleIcon;
	exports.InsertChartFontIcon = InsertChartFontIcon;
	exports.InsertCommentFontIcon = InsertCommentFontIcon;
	exports.InsertDriveFileFontIcon = InsertDriveFileFontIcon;
	exports.InsertEmoticonFontIcon = InsertEmoticonFontIcon;
	exports.InsertInvitationFontIcon = InsertInvitationFontIcon;
	exports.InsertLinkFontIcon = InsertLinkFontIcon;
	exports.InsertPhotoFontIcon = InsertPhotoFontIcon;
	exports.InteractionModeListener = InteractionModeListener;
	exports.InvertColorsFontIcon = InvertColorsFontIcon;
	exports.InvertColorsOffFontIcon = InvertColorsOffFontIcon;
	exports.IsoFontIcon = IsoFontIcon;
	exports.KeyboardArrowDownFontIcon = KeyboardArrowDownFontIcon;
	exports.KeyboardArrowLeftFontIcon = KeyboardArrowLeftFontIcon;
	exports.KeyboardArrowRightFontIcon = KeyboardArrowRightFontIcon;
	exports.KeyboardArrowUpFontIcon = KeyboardArrowUpFontIcon;
	exports.KeyboardBackspaceFontIcon = KeyboardBackspaceFontIcon;
	exports.KeyboardCapslockFontIcon = KeyboardCapslockFontIcon;
	exports.KeyboardFontIcon = KeyboardFontIcon;
	exports.KeyboardHideFontIcon = KeyboardHideFontIcon;
	exports.KeyboardReturnFontIcon = KeyboardReturnFontIcon;
	exports.KeyboardTabFontIcon = KeyboardTabFontIcon;
	exports.KeyboardVoiceFontIcon = KeyboardVoiceFontIcon;
	exports.KitchenFontIcon = KitchenFontIcon;
	exports.LARGE_TEXT_CONTRAST_RATIO = LARGE_TEXT_CONTRAST_RATIO;
	exports.Label = Label;
	exports.LabelFontIcon = LabelFontIcon;
	exports.LabelOutlineFontIcon = LabelOutlineFontIcon;
	exports.LandscapeFontIcon = LandscapeFontIcon;
	exports.LanguageFontIcon = LanguageFontIcon;
	exports.LaptopChromebookFontIcon = LaptopChromebookFontIcon;
	exports.LaptopFontIcon = LaptopFontIcon;
	exports.LaptopMacFontIcon = LaptopMacFontIcon;
	exports.LaptopWindowsFontIcon = LaptopWindowsFontIcon;
	exports.LastPageFontIcon = LastPageFontIcon;
	exports.LaunchFontIcon = LaunchFontIcon;
	exports.LayersClearFontIcon = LayersClearFontIcon;
	exports.LayersFontIcon = LayersFontIcon;
	exports.Layout = Layout;
	exports.LayoutAppBar = LayoutAppBar;
	exports.LayoutAppBarTitle = LayoutAppBarTitle;
	exports.LayoutChildren = LayoutChildren;
	exports.LayoutCloseNavigationButton = LayoutCloseNavigationButton;
	exports.LayoutMain = LayoutMain;
	exports.LayoutNavToggle = LayoutNavToggle;
	exports.LayoutNavigation = LayoutNavigation;
	exports.LayoutNavigationHeader = LayoutNavigationHeader;
	exports.LayoutProvider = LayoutProvider;
	exports.LayoutTree = LayoutTree;
	exports.LeakAddFontIcon = LeakAddFontIcon;
	exports.LeakRemoveFontIcon = LeakRemoveFontIcon;
	exports.LensFontIcon = LensFontIcon;
	exports.LibraryAddFontIcon = LibraryAddFontIcon;
	exports.LibraryBooksFontIcon = LibraryBooksFontIcon;
	exports.LibraryMusicFontIcon = LibraryMusicFontIcon;
	exports.LightbulbOutlineFontIcon = LightbulbOutlineFontIcon;
	exports.LineStyleFontIcon = LineStyleFontIcon;
	exports.LineWeightFontIcon = LineWeightFontIcon;
	exports.LinearProgress = LinearProgress;
	exports.LinearScaleFontIcon = LinearScaleFontIcon;
	exports.Link = Link;
	exports.LinkFontIcon = LinkFontIcon;
	exports.LinkedCameraFontIcon = LinkedCameraFontIcon;
	exports.List = List;
	exports.ListFontIcon = ListFontIcon;
	exports.ListItem = ListItem;
	exports.ListItemAddon = ListItemAddon;
	exports.ListItemChildren = ListItemChildren;
	exports.ListItemLink = ListItemLink;
	exports.ListItemText = ListItemText;
	exports.ListSubheader = ListSubheader;
	exports.Listbox = Listbox;
	exports.LiveHelpFontIcon = LiveHelpFontIcon;
	exports.LiveTvFontIcon = LiveTvFontIcon;
	exports.LocalActivityFontIcon = LocalActivityFontIcon;
	exports.LocalAirportFontIcon = LocalAirportFontIcon;
	exports.LocalAtmFontIcon = LocalAtmFontIcon;
	exports.LocalBarFontIcon = LocalBarFontIcon;
	exports.LocalCafeFontIcon = LocalCafeFontIcon;
	exports.LocalCarWashFontIcon = LocalCarWashFontIcon;
	exports.LocalConvenienceStoreFontIcon = LocalConvenienceStoreFontIcon;
	exports.LocalDiningFontIcon = LocalDiningFontIcon;
	exports.LocalDrinkFontIcon = LocalDrinkFontIcon;
	exports.LocalFloristFontIcon = LocalFloristFontIcon;
	exports.LocalGasStationFontIcon = LocalGasStationFontIcon;
	exports.LocalGroceryStoreFontIcon = LocalGroceryStoreFontIcon;
	exports.LocalHospitalFontIcon = LocalHospitalFontIcon;
	exports.LocalHotelFontIcon = LocalHotelFontIcon;
	exports.LocalLaundryServiceFontIcon = LocalLaundryServiceFontIcon;
	exports.LocalLibraryFontIcon = LocalLibraryFontIcon;
	exports.LocalMallFontIcon = LocalMallFontIcon;
	exports.LocalMoviesFontIcon = LocalMoviesFontIcon;
	exports.LocalOfferFontIcon = LocalOfferFontIcon;
	exports.LocalParkingFontIcon = LocalParkingFontIcon;
	exports.LocalPharmacyFontIcon = LocalPharmacyFontIcon;
	exports.LocalPhoneFontIcon = LocalPhoneFontIcon;
	exports.LocalPizzaFontIcon = LocalPizzaFontIcon;
	exports.LocalPlayFontIcon = LocalPlayFontIcon;
	exports.LocalPostOfficeFontIcon = LocalPostOfficeFontIcon;
	exports.LocalPrintshopFontIcon = LocalPrintshopFontIcon;
	exports.LocalSeeFontIcon = LocalSeeFontIcon;
	exports.LocalShippingFontIcon = LocalShippingFontIcon;
	exports.LocalTaxiFontIcon = LocalTaxiFontIcon;
	exports.LocationCityFontIcon = LocationCityFontIcon;
	exports.LocationDisabledFontIcon = LocationDisabledFontIcon;
	exports.LocationOffFontIcon = LocationOffFontIcon;
	exports.LocationOnFontIcon = LocationOnFontIcon;
	exports.LocationSearchingFontIcon = LocationSearchingFontIcon;
	exports.LockFontIcon = LockFontIcon;
	exports.LockOpenFontIcon = LockOpenFontIcon;
	exports.LockOutlineFontIcon = LockOutlineFontIcon;
	exports.Looks3FontIcon = Looks3FontIcon;
	exports.Looks4FontIcon = Looks4FontIcon;
	exports.Looks5FontIcon = Looks5FontIcon;
	exports.Looks6FontIcon = Looks6FontIcon;
	exports.LooksFontIcon = LooksFontIcon;
	exports.LooksOneFontIcon = LooksOneFontIcon;
	exports.LooksTwoFontIcon = LooksTwoFontIcon;
	exports.LoopFontIcon = LoopFontIcon;
	exports.LoupeFontIcon = LoupeFontIcon;
	exports.LowPriorityFontIcon = LowPriorityFontIcon;
	exports.LoyaltyFontIcon = LoyaltyFontIcon;
	exports.MailFontIcon = MailFontIcon;
	exports.MailOutlineFontIcon = MailOutlineFontIcon;
	exports.MapFontIcon = MapFontIcon;
	exports.MarkunreadFontIcon = MarkunreadFontIcon;
	exports.MarkunreadMailboxFontIcon = MarkunreadMailboxFontIcon;
	exports.MediaContainer = MediaContainer;
	exports.MediaOverlay = MediaOverlay;
	exports.MemoryFontIcon = MemoryFontIcon;
	exports.Menu = Menu;
	exports.MenuButton = MenuButton;
	exports.MenuFontIcon = MenuFontIcon;
	exports.MenuItem = MenuItem;
	exports.MenuItemCheckbox = MenuItemCheckbox;
	exports.MenuItemInputToggle = MenuItemInputToggle;
	exports.MenuItemLink = MenuItemLink;
	exports.MenuItemRadio = MenuItemRadio;
	exports.MenuItemSeparator = MenuItemSeparator;
	exports.MenuItemSwitch = MenuItemSwitch;
	exports.MergeTypeFontIcon = MergeTypeFontIcon;
	exports.MessageFontIcon = MessageFontIcon;
	exports.MessageQueue = MessageQueue;
	exports.MessageQueueActionsContext = MessageQueueActionsContext;
	exports.MessageQueueContext = MessageQueueContext;
	exports.MessageVisibilityContext = MessageVisibilityContext;
	exports.MicFontIcon = MicFontIcon;
	exports.MicNoneFontIcon = MicNoneFontIcon;
	exports.MicOffFontIcon = MicOffFontIcon;
	exports.MmsFontIcon = MmsFontIcon;
	exports.MobileOnly = MobileOnly;
	exports.ModeCommentFontIcon = ModeCommentFontIcon;
	exports.ModeEditFontIcon = ModeEditFontIcon;
	exports.MonetizationOnFontIcon = MonetizationOnFontIcon;
	exports.MoneyOffFontIcon = MoneyOffFontIcon;
	exports.MonochromePhotosFontIcon = MonochromePhotosFontIcon;
	exports.MoodBadFontIcon = MoodBadFontIcon;
	exports.MoodFontIcon = MoodFontIcon;
	exports.MoreFontIcon = MoreFontIcon;
	exports.MoreHorizFontIcon = MoreHorizFontIcon;
	exports.MoreVertFontIcon = MoreVertFontIcon;
	exports.MotorcycleFontIcon = MotorcycleFontIcon;
	exports.MouseFontIcon = MouseFontIcon;
	exports.MoveToInboxFontIcon = MoveToInboxFontIcon;
	exports.MovementPresets = presets;
	exports.MovieCreationFontIcon = MovieCreationFontIcon;
	exports.MovieFilterFontIcon = MovieFilterFontIcon;
	exports.MovieFontIcon = MovieFontIcon;
	exports.MultilineChartFontIcon = MultilineChartFontIcon;
	exports.MusicNoteFontIcon = MusicNoteFontIcon;
	exports.MusicVideoFontIcon = MusicVideoFontIcon;
	exports.MyLocationFontIcon = MyLocationFontIcon;
	exports.NORMAL_TEXT_CONTRAST_RATIO = NORMAL_TEXT_CONTRAST_RATIO;
	exports.NativeSelect = NativeSelect;
	exports.NatureFontIcon = NatureFontIcon;
	exports.NaturePeopleFontIcon = NaturePeopleFontIcon;
	exports.NavigateBeforeFontIcon = NavigateBeforeFontIcon;
	exports.NavigateNextFontIcon = NavigateNextFontIcon;
	exports.NavigationFontIcon = NavigationFontIcon;
	exports.NearMeFontIcon = NearMeFontIcon;
	exports.NestedDialogContextProvider = NestedDialogContextProvider;
	exports.NetworkCellFontIcon = NetworkCellFontIcon;
	exports.NetworkCheckFontIcon = NetworkCheckFontIcon;
	exports.NetworkLockedFontIcon = NetworkLockedFontIcon;
	exports.NetworkWifiFontIcon = NetworkWifiFontIcon;
	exports.NewReleasesFontIcon = NewReleasesFontIcon;
	exports.NextWeekFontIcon = NextWeekFontIcon;
	exports.NfcFontIcon = NfcFontIcon;
	exports.NoEncryptionFontIcon = NoEncryptionFontIcon;
	exports.NoSimFontIcon = NoSimFontIcon;
	exports.NotInterestedFontIcon = NotInterestedFontIcon;
	exports.NoteAddFontIcon = NoteAddFontIcon;
	exports.NoteFontIcon = NoteFontIcon;
	exports.NotificationsActiveFontIcon = NotificationsActiveFontIcon;
	exports.NotificationsFontIcon = NotificationsFontIcon;
	exports.NotificationsNoneFontIcon = NotificationsNoneFontIcon;
	exports.NotificationsOffFontIcon = NotificationsOffFontIcon;
	exports.NotificationsPausedFontIcon = NotificationsPausedFontIcon;
	exports.OfflinePinFontIcon = OfflinePinFontIcon;
	exports.OndemandVideoFontIcon = OndemandVideoFontIcon;
	exports.OpacityFontIcon = OpacityFontIcon;
	exports.OpenInBrowserFontIcon = OpenInBrowserFontIcon;
	exports.OpenInNewFontIcon = OpenInNewFontIcon;
	exports.OpenWithFontIcon = OpenWithFontIcon;
	exports.Option = Option;
	exports.Overlay = Overlay;
	exports.PagesFontIcon = PagesFontIcon;
	exports.PageviewFontIcon = PageviewFontIcon;
	exports.PaletteFontIcon = PaletteFontIcon;
	exports.PanToolFontIcon = PanToolFontIcon;
	exports.PanoramaFishEyeFontIcon = PanoramaFishEyeFontIcon;
	exports.PanoramaFontIcon = PanoramaFontIcon;
	exports.PanoramaHorizontalFontIcon = PanoramaHorizontalFontIcon;
	exports.PanoramaVerticalFontIcon = PanoramaVerticalFontIcon;
	exports.PanoramaWideAngleFontIcon = PanoramaWideAngleFontIcon;
	exports.PartyModeFontIcon = PartyModeFontIcon;
	exports.PassiveEvents = passiveEvents;
	exports.Password = Password;
	exports.PasswordWithMessage = PasswordWithMessage;
	exports.PauseCircleFilledFontIcon = PauseCircleFilledFontIcon;
	exports.PauseCircleOutlineFontIcon = PauseCircleOutlineFontIcon;
	exports.PauseFontIcon = PauseFontIcon;
	exports.PaymentFontIcon = PaymentFontIcon;
	exports.PeopleFontIcon = PeopleFontIcon;
	exports.PeopleOutlineFontIcon = PeopleOutlineFontIcon;
	exports.PermCameraMicFontIcon = PermCameraMicFontIcon;
	exports.PermContactCalendarFontIcon = PermContactCalendarFontIcon;
	exports.PermDataSettingFontIcon = PermDataSettingFontIcon;
	exports.PermDeviceInformationFontIcon = PermDeviceInformationFontIcon;
	exports.PermIdentityFontIcon = PermIdentityFontIcon;
	exports.PermMediaFontIcon = PermMediaFontIcon;
	exports.PermPhoneMsgFontIcon = PermPhoneMsgFontIcon;
	exports.PermScanWifiFontIcon = PermScanWifiFontIcon;
	exports.PersonAddFontIcon = PersonAddFontIcon;
	exports.PersonFontIcon = PersonFontIcon;
	exports.PersonOutlineFontIcon = PersonOutlineFontIcon;
	exports.PersonPinCircleFontIcon = PersonPinCircleFontIcon;
	exports.PersonPinFontIcon = PersonPinFontIcon;
	exports.PersonalVideoFontIcon = PersonalVideoFontIcon;
	exports.PetsFontIcon = PetsFontIcon;
	exports.PhoneAndroidFontIcon = PhoneAndroidFontIcon;
	exports.PhoneBluetoothSpeakerFontIcon = PhoneBluetoothSpeakerFontIcon;
	exports.PhoneFontIcon = PhoneFontIcon;
	exports.PhoneForwardedFontIcon = PhoneForwardedFontIcon;
	exports.PhoneInTalkFontIcon = PhoneInTalkFontIcon;
	exports.PhoneIphoneFontIcon = PhoneIphoneFontIcon;
	exports.PhoneLockedFontIcon = PhoneLockedFontIcon;
	exports.PhoneMissedFontIcon = PhoneMissedFontIcon;
	exports.PhoneOnly = PhoneOnly;
	exports.PhonePausedFontIcon = PhonePausedFontIcon;
	exports.PhonelinkEraseFontIcon = PhonelinkEraseFontIcon;
	exports.PhonelinkFontIcon = PhonelinkFontIcon;
	exports.PhonelinkLockFontIcon = PhonelinkLockFontIcon;
	exports.PhonelinkOffFontIcon = PhonelinkOffFontIcon;
	exports.PhonelinkRingFontIcon = PhonelinkRingFontIcon;
	exports.PhonelinkSetupFontIcon = PhonelinkSetupFontIcon;
	exports.PhotoAlbumFontIcon = PhotoAlbumFontIcon;
	exports.PhotoCameraFontIcon = PhotoCameraFontIcon;
	exports.PhotoFilterFontIcon = PhotoFilterFontIcon;
	exports.PhotoFontIcon = PhotoFontIcon;
	exports.PhotoLibraryFontIcon = PhotoLibraryFontIcon;
	exports.PhotoSizeSelectActualFontIcon = PhotoSizeSelectActualFontIcon;
	exports.PhotoSizeSelectLargeFontIcon = PhotoSizeSelectLargeFontIcon;
	exports.PhotoSizeSelectSmallFontIcon = PhotoSizeSelectSmallFontIcon;
	exports.PictureAsPdfFontIcon = PictureAsPdfFontIcon;
	exports.PictureInPictureAltFontIcon = PictureInPictureAltFontIcon;
	exports.PictureInPictureFontIcon = PictureInPictureFontIcon;
	exports.PieChartFontIcon = PieChartFontIcon;
	exports.PieChartOutlinedFontIcon = PieChartOutlinedFontIcon;
	exports.PinDropFontIcon = PinDropFontIcon;
	exports.PlaceFontIcon = PlaceFontIcon;
	exports.PlayArrowFontIcon = PlayArrowFontIcon;
	exports.PlayCircleFilledFontIcon = PlayCircleFilledFontIcon;
	exports.PlayCircleOutlineFontIcon = PlayCircleOutlineFontIcon;
	exports.PlayForWorkFontIcon = PlayForWorkFontIcon;
	exports.PlaylistAddCheckFontIcon = PlaylistAddCheckFontIcon;
	exports.PlaylistAddFontIcon = PlaylistAddFontIcon;
	exports.PlaylistPlayFontIcon = PlaylistPlayFontIcon;
	exports.PlusOneFontIcon = PlusOneFontIcon;
	exports.PollFontIcon = PollFontIcon;
	exports.PolymerFontIcon = PolymerFontIcon;
	exports.PoolFontIcon = PoolFontIcon;
	exports.PortableWifiOffFontIcon = PortableWifiOffFontIcon;
	exports.Portal = Portal;
	exports.PortraitFontIcon = PortraitFontIcon;
	exports.PowerFontIcon = PowerFontIcon;
	exports.PowerInputFontIcon = PowerInputFontIcon;
	exports.PowerSettingsNewFontIcon = PowerSettingsNewFontIcon;
	exports.PregnantWomanFontIcon = PregnantWomanFontIcon;
	exports.PresentToAllFontIcon = PresentToAllFontIcon;
	exports.PrintFontIcon = PrintFontIcon;
	exports.PriorityHighFontIcon = PriorityHighFontIcon;
	exports.PublicFontIcon = PublicFontIcon;
	exports.PublishFontIcon = PublishFontIcon;
	exports.QueryBuilderFontIcon = QueryBuilderFontIcon;
	exports.QuestionAnswerFontIcon = QuestionAnswerFontIcon;
	exports.QueueFontIcon = QueueFontIcon;
	exports.QueueMusicFontIcon = QueueMusicFontIcon;
	exports.QueuePlayNextFontIcon = QueuePlayNextFontIcon;
	exports.RECOMMENDED_NUMBER_STATE_KEYS = RECOMMENDED_NUMBER_STATE_KEYS;
	exports.RECOMMENDED_STATE_KEYS = RECOMMENDED_STATE_KEYS;
	exports.Radio = Radio;
	exports.RadioButtonCheckedFontIcon = RadioButtonCheckedFontIcon;
	exports.RadioButtonUncheckedFontIcon = RadioButtonUncheckedFontIcon;
	exports.RadioFontIcon = RadioFontIcon;
	exports.RadioGroup = RadioGroup;
	exports.RadioWidget = RadioWidget;
	exports.RangeSlider = RangeSlider;
	exports.RateReviewFontIcon = RateReviewFontIcon;
	exports.ReceiptFontIcon = ReceiptFontIcon;
	exports.RecentActorsFontIcon = RecentActorsFontIcon;
	exports.RecordVoiceOverFontIcon = RecordVoiceOverFontIcon;
	exports.RedeemFontIcon = RedeemFontIcon;
	exports.RedoFontIcon = RedoFontIcon;
	exports.RefreshFontIcon = RefreshFontIcon;
	exports.RemoveCircleFontIcon = RemoveCircleFontIcon;
	exports.RemoveCircleOutlineFontIcon = RemoveCircleOutlineFontIcon;
	exports.RemoveFontIcon = RemoveFontIcon;
	exports.RemoveFromQueueFontIcon = RemoveFromQueueFontIcon;
	exports.RemoveRedEyeFontIcon = RemoveRedEyeFontIcon;
	exports.RemoveShoppingCartFontIcon = RemoveShoppingCartFontIcon;
	exports.ReorderFontIcon = ReorderFontIcon;
	exports.RepeatFontIcon = RepeatFontIcon;
	exports.RepeatOneFontIcon = RepeatOneFontIcon;
	exports.Replay10FontIcon = Replay10FontIcon;
	exports.Replay30FontIcon = Replay30FontIcon;
	exports.Replay5FontIcon = Replay5FontIcon;
	exports.ReplayFontIcon = ReplayFontIcon;
	exports.ReplyAllFontIcon = ReplyAllFontIcon;
	exports.ReplyFontIcon = ReplyFontIcon;
	exports.ReportFontIcon = ReportFontIcon;
	exports.ReportProblemFontIcon = ReportProblemFontIcon;
	exports.ResizeListener = ResizeListener;
	exports.ResizeObserver = ResizeObserver;
	exports.RestaurantFontIcon = RestaurantFontIcon;
	exports.RestaurantMenuFontIcon = RestaurantMenuFontIcon;
	exports.RestoreFontIcon = RestoreFontIcon;
	exports.RestorePageFontIcon = RestorePageFontIcon;
	exports.RingVolumeFontIcon = RingVolumeFontIcon;
	exports.RoomFontIcon = RoomFontIcon;
	exports.RoomServiceFontIcon = RoomServiceFontIcon;
	exports.Rotate90DegreesCcwFontIcon = Rotate90DegreesCcwFontIcon;
	exports.RotateLeftFontIcon = RotateLeftFontIcon;
	exports.RotateRightFontIcon = RotateRightFontIcon;
	exports.Rotation3DFontIcon = Rotation3DFontIcon;
	exports.RoundedCornerFontIcon = RoundedCornerFontIcon;
	exports.RouterFontIcon = RouterFontIcon;
	exports.RowingFontIcon = RowingFontIcon;
	exports.RssFeedFontIcon = RssFeedFontIcon;
	exports.RvHookupFontIcon = RvHookupFontIcon;
	exports.SCALE_CLASSNAMES = SCALE_CLASSNAMES;
	exports.SCALE_TIMEOUT = SCALE_TIMEOUT;
	exports.SCALE_Y_CLASSNAMES = SCALE_Y_CLASSNAMES;
	exports.SVGIcon = SVGIcon;
	exports.SatelliteFontIcon = SatelliteFontIcon;
	exports.SaveFontIcon = SaveFontIcon;
	exports.ScaleTransition = ScaleTransition;
	exports.ScannerFontIcon = ScannerFontIcon;
	exports.ScheduleFontIcon = ScheduleFontIcon;
	exports.SchoolFontIcon = SchoolFontIcon;
	exports.ScreenLockLandscapeFontIcon = ScreenLockLandscapeFontIcon;
	exports.ScreenLockPortraitFontIcon = ScreenLockPortraitFontIcon;
	exports.ScreenLockRotationFontIcon = ScreenLockRotationFontIcon;
	exports.ScreenRotationFontIcon = ScreenRotationFontIcon;
	exports.ScreenShareFontIcon = ScreenShareFontIcon;
	exports.ScrollListener = ScrollListener;
	exports.SdCardFontIcon = SdCardFontIcon;
	exports.SdStorageFontIcon = SdStorageFontIcon;
	exports.SearchFontIcon = SearchFontIcon;
	exports.SecurityFontIcon = SecurityFontIcon;
	exports.Select = Select;
	exports.SelectAllFontIcon = SelectAllFontIcon;
	exports.SendFontIcon = SendFontIcon;
	exports.SentimentDissatisfiedFontIcon = SentimentDissatisfiedFontIcon;
	exports.SentimentNeutralFontIcon = SentimentNeutralFontIcon;
	exports.SentimentSatisfiedFontIcon = SentimentSatisfiedFontIcon;
	exports.SentimentVeryDissatisfiedFontIcon = SentimentVeryDissatisfiedFontIcon;
	exports.SentimentVerySatisfiedFontIcon = SentimentVerySatisfiedFontIcon;
	exports.SettingsApplicationsFontIcon = SettingsApplicationsFontIcon;
	exports.SettingsBackupRestoreFontIcon = SettingsBackupRestoreFontIcon;
	exports.SettingsBluetoothFontIcon = SettingsBluetoothFontIcon;
	exports.SettingsBrightnessFontIcon = SettingsBrightnessFontIcon;
	exports.SettingsCellFontIcon = SettingsCellFontIcon;
	exports.SettingsEthernetFontIcon = SettingsEthernetFontIcon;
	exports.SettingsFontIcon = SettingsFontIcon;
	exports.SettingsInputAntennaFontIcon = SettingsInputAntennaFontIcon;
	exports.SettingsInputComponentFontIcon = SettingsInputComponentFontIcon;
	exports.SettingsInputCompositeFontIcon = SettingsInputCompositeFontIcon;
	exports.SettingsInputHdmiFontIcon = SettingsInputHdmiFontIcon;
	exports.SettingsInputSvideoFontIcon = SettingsInputSvideoFontIcon;
	exports.SettingsOverscanFontIcon = SettingsOverscanFontIcon;
	exports.SettingsPhoneFontIcon = SettingsPhoneFontIcon;
	exports.SettingsPowerFontIcon = SettingsPowerFontIcon;
	exports.SettingsRemoteFontIcon = SettingsRemoteFontIcon;
	exports.SettingsSystemDaydreamFontIcon = SettingsSystemDaydreamFontIcon;
	exports.SettingsVoiceFontIcon = SettingsVoiceFontIcon;
	exports.ShareFontIcon = ShareFontIcon;
	exports.Sheet = Sheet;
	exports.ShopFontIcon = ShopFontIcon;
	exports.ShopTwoFontIcon = ShopTwoFontIcon;
	exports.ShoppingBasketFontIcon = ShoppingBasketFontIcon;
	exports.ShoppingCartFontIcon = ShoppingCartFontIcon;
	exports.ShortTextFontIcon = ShortTextFontIcon;
	exports.ShowChartFontIcon = ShowChartFontIcon;
	exports.ShuffleFontIcon = ShuffleFontIcon;
	exports.SignalCellular4BarFontIcon = SignalCellular4BarFontIcon;
	exports.SignalCellularConnectedNoInternet4BarFontIcon = SignalCellularConnectedNoInternet4BarFontIcon;
	exports.SignalCellularNoSimFontIcon = SignalCellularNoSimFontIcon;
	exports.SignalCellularNullFontIcon = SignalCellularNullFontIcon;
	exports.SignalCellularOffFontIcon = SignalCellularOffFontIcon;
	exports.SignalWifi4BarFontIcon = SignalWifi4BarFontIcon;
	exports.SignalWifi4BarLockFontIcon = SignalWifi4BarLockFontIcon;
	exports.SignalWifiOffFontIcon = SignalWifiOffFontIcon;
	exports.SimCardAlertFontIcon = SimCardAlertFontIcon;
	exports.SimCardFontIcon = SimCardFontIcon;
	exports.SimpleListItem = SimpleListItem;
	exports.SkipNextFontIcon = SkipNextFontIcon;
	exports.SkipPreviousFontIcon = SkipPreviousFontIcon;
	exports.SkipToMainContent = SkipToMainContent;
	exports.Slider = Slider;
	exports.SliderContainer = SliderContainer;
	exports.SliderThumb = SliderThumb;
	exports.SliderTrack = SliderTrack;
	exports.SlideshowFontIcon = SlideshowFontIcon;
	exports.SlowMotionVideoFontIcon = SlowMotionVideoFontIcon;
	exports.SmartphoneFontIcon = SmartphoneFontIcon;
	exports.SmokeFreeFontIcon = SmokeFreeFontIcon;
	exports.SmokingRoomsFontIcon = SmokingRoomsFontIcon;
	exports.SmsFailedFontIcon = SmsFailedFontIcon;
	exports.SmsFontIcon = SmsFontIcon;
	exports.Snackbar = Snackbar;
	exports.SnoozeFontIcon = SnoozeFontIcon;
	exports.SortByAlphaFontIcon = SortByAlphaFontIcon;
	exports.SortFontIcon = SortFontIcon;
	exports.SpaFontIcon = SpaFontIcon;
	exports.SpaceBarFontIcon = SpaceBarFontIcon;
	exports.SpeakerFontIcon = SpeakerFontIcon;
	exports.SpeakerGroupFontIcon = SpeakerGroupFontIcon;
	exports.SpeakerNotesFontIcon = SpeakerNotesFontIcon;
	exports.SpeakerNotesOffFontIcon = SpeakerNotesOffFontIcon;
	exports.SpeakerPhoneFontIcon = SpeakerPhoneFontIcon;
	exports.SpellcheckFontIcon = SpellcheckFontIcon;
	exports.SrOnly = SrOnly;
	exports.StarBorderFontIcon = StarBorderFontIcon;
	exports.StarFontIcon = StarFontIcon;
	exports.StarHalfFontIcon = StarHalfFontIcon;
	exports.StarsFontIcon = StarsFontIcon;
	exports.StatesConfig = StatesConfig;
	exports.StatesConfigContext = StatesConfigContext;
	exports.StayCurrentLandscapeFontIcon = StayCurrentLandscapeFontIcon;
	exports.StayCurrentPortraitFontIcon = StayCurrentPortraitFontIcon;
	exports.StayPrimaryLandscapeFontIcon = StayPrimaryLandscapeFontIcon;
	exports.StayPrimaryPortraitFontIcon = StayPrimaryPortraitFontIcon;
	exports.StopFontIcon = StopFontIcon;
	exports.StopScreenShareFontIcon = StopScreenShareFontIcon;
	exports.StorageFontIcon = StorageFontIcon;
	exports.StoreFontIcon = StoreFontIcon;
	exports.StoreMallDirectoryFontIcon = StoreMallDirectoryFontIcon;
	exports.StraightenFontIcon = StraightenFontIcon;
	exports.StreetviewFontIcon = StreetviewFontIcon;
	exports.StrikethroughSFontIcon = StrikethroughSFontIcon;
	exports.StyleFontIcon = StyleFontIcon;
	exports.SubdirectoryArrowLeftFontIcon = SubdirectoryArrowLeftFontIcon;
	exports.SubdirectoryArrowRightFontIcon = SubdirectoryArrowRightFontIcon;
	exports.SubjectFontIcon = SubjectFontIcon;
	exports.SubscriptionsFontIcon = SubscriptionsFontIcon;
	exports.SubtitlesFontIcon = SubtitlesFontIcon;
	exports.SubwayFontIcon = SubwayFontIcon;
	exports.SupervisorAccountFontIcon = SupervisorAccountFontIcon;
	exports.SurroundSoundFontIcon = SurroundSoundFontIcon;
	exports.SwapCallsFontIcon = SwapCallsFontIcon;
	exports.SwapHorizFontIcon = SwapHorizFontIcon;
	exports.SwapVertFontIcon = SwapVertFontIcon;
	exports.SwapVerticalCircleFontIcon = SwapVerticalCircleFontIcon;
	exports.Switch = Switch;
	exports.SwitchCameraFontIcon = SwitchCameraFontIcon;
	exports.SwitchTrack = SwitchTrack;
	exports.SwitchVideoFontIcon = SwitchVideoFontIcon;
	exports.SyncDisabledFontIcon = SyncDisabledFontIcon;
	exports.SyncFontIcon = SyncFontIcon;
	exports.SyncProblemFontIcon = SyncProblemFontIcon;
	exports.SystemUpdateAltFontIcon = SystemUpdateAltFontIcon;
	exports.SystemUpdateFontIcon = SystemUpdateFontIcon;
	exports.THUMB_1_VAR = THUMB_1_VAR;
	exports.THUMB_2_VAR = THUMB_2_VAR;
	exports.TOOLTIP_SPACING_VAR = TOOLTIP_SPACING_VAR;
	exports.TOP_CENTER_ANCHOR = TOP_CENTER_ANCHOR;
	exports.TOP_INNER_LEFT_ANCHOR = TOP_INNER_LEFT_ANCHOR;
	exports.TOP_INNER_RIGHT_ANCHOR = TOP_INNER_RIGHT_ANCHOR;
	exports.TOP_LEFT_ANCHOR = TOP_LEFT_ANCHOR;
	exports.TOP_RIGHT_ANCHOR = TOP_RIGHT_ANCHOR;
	exports.Tab = Tab;
	exports.TabFontIcon = TabFontIcon;
	exports.TabPanel = TabPanel;
	exports.TabPanels = TabPanels;
	exports.TabUnselectedFontIcon = TabUnselectedFontIcon;
	exports.Table = Table;
	exports.TableBody = TableBody;
	exports.TableCell = TableCell;
	exports.TableCellContent = TableCellContent;
	exports.TableCheckbox = TableCheckbox;
	exports.TableContainer = TableContainer;
	exports.TableFooter = TableFooter;
	exports.TableHeader = TableHeader;
	exports.TableRow = TableRow;
	exports.TabletAndroidFontIcon = TabletAndroidFontIcon;
	exports.TabletFontIcon = TabletFontIcon;
	exports.TabletMacFontIcon = TabletMacFontIcon;
	exports.TabletOnly = TabletOnly;
	exports.Tabs = Tabs;
	exports.TabsList = TabsList;
	exports.TabsManager = TabsManager;
	exports.TagFacesFontIcon = TagFacesFontIcon;
	exports.TapAndPlayFontIcon = TapAndPlayFontIcon;
	exports.TerrainFontIcon = TerrainFontIcon;
	exports.Text = Text;
	exports.TextArea = TextArea;
	exports.TextAreaWithMessage = TextAreaWithMessage;
	exports.TextContainer = TextContainer;
	exports.TextField = TextField;
	exports.TextFieldAddon = TextFieldAddon;
	exports.TextFieldContainer = TextFieldContainer;
	exports.TextFieldWithMessage = TextFieldWithMessage;
	exports.TextFieldsFontIcon = TextFieldsFontIcon;
	exports.TextFormatFontIcon = TextFormatFontIcon;
	exports.TextIconSpacing = TextIconSpacing;
	exports.TextsmsFontIcon = TextsmsFontIcon;
	exports.TextureFontIcon = TextureFontIcon;
	exports.TheatersFontIcon = TheatersFontIcon;
	exports.ThumbDownFontIcon = ThumbDownFontIcon;
	exports.ThumbUpFontIcon = ThumbUpFontIcon;
	exports.ThumbsUpDownFontIcon = ThumbsUpDownFontIcon;
	exports.TimeToLeaveFontIcon = TimeToLeaveFontIcon;
	exports.TimelapseFontIcon = TimelapseFontIcon;
	exports.TimelineFontIcon = TimelineFontIcon;
	exports.Timer10FontIcon = Timer10FontIcon;
	exports.Timer3FontIcon = Timer3FontIcon;
	exports.TimerFontIcon = TimerFontIcon;
	exports.TimerOffFontIcon = TimerOffFontIcon;
	exports.TitleFontIcon = TitleFontIcon;
	exports.Toast = Toast;
	exports.TocFontIcon = TocFontIcon;
	exports.TodayFontIcon = TodayFontIcon;
	exports.ToggleContainer = ToggleContainer;
	exports.TollFontIcon = TollFontIcon;
	exports.TonalityFontIcon = TonalityFontIcon;
	exports.Tooltip = Tooltip;
	exports.TooltipHoverModeConfig = TooltipHoverModeConfig;
	exports.Tooltipped = Tooltipped;
	exports.TouchAppFontIcon = TouchAppFontIcon;
	exports.ToysFontIcon = ToysFontIcon;
	exports.TrackChangesFontIcon = TrackChangesFontIcon;
	exports.TrafficFontIcon = TrafficFontIcon;
	exports.TrainFontIcon = TrainFontIcon;
	exports.TramFontIcon = TramFontIcon;
	exports.TransferWithinAStationFontIcon = TransferWithinAStationFontIcon;
	exports.TransformFontIcon = TransformFontIcon;
	exports.TranslateFontIcon = TranslateFontIcon;
	exports.Tree = Tree;
	exports.TreeGroup = TreeGroup;
	exports.TreeItem = TreeItem;
	exports.TrendingDownFontIcon = TrendingDownFontIcon;
	exports.TrendingFlatFontIcon = TrendingFlatFontIcon;
	exports.TrendingUpFontIcon = TrendingUpFontIcon;
	exports.TuneFontIcon = TuneFontIcon;
	exports.TurnedInFontIcon = TurnedInFontIcon;
	exports.TurnedInNotFontIcon = TurnedInNotFontIcon;
	exports.TvFontIcon = TvFontIcon;
	exports.UNMOUNT = UNMOUNT;
	exports.UnarchiveFontIcon = UnarchiveFontIcon;
	exports.UndoFontIcon = UndoFontIcon;
	exports.UnfoldLessFontIcon = UnfoldLessFontIcon;
	exports.UnfoldMoreFontIcon = UnfoldMoreFontIcon;
	exports.UnstyledButton = UnstyledButton;
	exports.UpdateFontIcon = UpdateFontIcon;
	exports.UsbFontIcon = UsbFontIcon;
	exports.UserInteractionModeListener = UserInteractionModeListener;
	exports.VerifiedUserFontIcon = VerifiedUserFontIcon;
	exports.VerticalAlignBottomFontIcon = VerticalAlignBottomFontIcon;
	exports.VerticalAlignCenterFontIcon = VerticalAlignCenterFontIcon;
	exports.VerticalAlignTopFontIcon = VerticalAlignTopFontIcon;
	exports.VerticalDivider = VerticalDivider;
	exports.VibrationFontIcon = VibrationFontIcon;
	exports.VideoCallFontIcon = VideoCallFontIcon;
	exports.VideoLabelFontIcon = VideoLabelFontIcon;
	exports.VideoLibraryFontIcon = VideoLibraryFontIcon;
	exports.VideocamFontIcon = VideocamFontIcon;
	exports.VideocamOffFontIcon = VideocamOffFontIcon;
	exports.VideogameAssetFontIcon = VideogameAssetFontIcon;
	exports.ViewAgendaFontIcon = ViewAgendaFontIcon;
	exports.ViewArrayFontIcon = ViewArrayFontIcon;
	exports.ViewCarouselFontIcon = ViewCarouselFontIcon;
	exports.ViewColumnFontIcon = ViewColumnFontIcon;
	exports.ViewComfyFontIcon = ViewComfyFontIcon;
	exports.ViewCompactFontIcon = ViewCompactFontIcon;
	exports.ViewDayFontIcon = ViewDayFontIcon;
	exports.ViewHeadlineFontIcon = ViewHeadlineFontIcon;
	exports.ViewListFontIcon = ViewListFontIcon;
	exports.ViewModuleFontIcon = ViewModuleFontIcon;
	exports.ViewQuiltFontIcon = ViewQuiltFontIcon;
	exports.ViewStreamFontIcon = ViewStreamFontIcon;
	exports.ViewWeekFontIcon = ViewWeekFontIcon;
	exports.VignetteFontIcon = VignetteFontIcon;
	exports.VisibilityFontIcon = VisibilityFontIcon;
	exports.VisibilityOffFontIcon = VisibilityOffFontIcon;
	exports.VoiceChatFontIcon = VoiceChatFontIcon;
	exports.VoicemailFontIcon = VoicemailFontIcon;
	exports.VolumeDownFontIcon = VolumeDownFontIcon;
	exports.VolumeMuteFontIcon = VolumeMuteFontIcon;
	exports.VolumeOffFontIcon = VolumeOffFontIcon;
	exports.VolumeUpFontIcon = VolumeUpFontIcon;
	exports.VpnKeyFontIcon = VpnKeyFontIcon;
	exports.VpnLockFontIcon = VpnLockFontIcon;
	exports.WallpaperFontIcon = WallpaperFontIcon;
	exports.WarningFontIcon = WarningFontIcon;
	exports.WatchFontIcon = WatchFontIcon;
	exports.WatchLaterFontIcon = WatchLaterFontIcon;
	exports.WbAutoFontIcon = WbAutoFontIcon;
	exports.WbCloudyFontIcon = WbCloudyFontIcon;
	exports.WbIncandescentFontIcon = WbIncandescentFontIcon;
	exports.WbIridescentFontIcon = WbIridescentFontIcon;
	exports.WbSunnyFontIcon = WbSunnyFontIcon;
	exports.WcFontIcon = WcFontIcon;
	exports.WebAssetFontIcon = WebAssetFontIcon;
	exports.WebFontIcon = WebFontIcon;
	exports.WeekendFontIcon = WeekendFontIcon;
	exports.WhatshotFontIcon = WhatshotFontIcon;
	exports.WidgetsFontIcon = WidgetsFontIcon;
	exports.WifiFontIcon = WifiFontIcon;
	exports.WifiLockFontIcon = WifiLockFontIcon;
	exports.WifiTetheringFontIcon = WifiTetheringFontIcon;
	exports.WorkFontIcon = WorkFontIcon;
	exports.WrapTextFontIcon = WrapTextFontIcon;
	exports.YoutubeSearchedForFontIcon = YoutubeSearchedForFontIcon;
	exports.ZoomInFontIcon = ZoomInFontIcon;
	exports.ZoomOutFontIcon = ZoomOutFontIcon;
	exports.ZoomOutMapFontIcon = ZoomOutMapFontIcon;
	exports.addTouchEvent = addTouchEvent;
	exports.applyRef = applyRef;
	exports.bem = bem;
	exports.buttonThemeClassNames = buttonThemeClassNames;
	exports.caseInsensitiveFilter = caseInsensitiveFilter;
	exports.containsElement = containsElement;
	exports.defaultGetErrorIcon = defaultGetErrorIcon;
	exports.defaultGetErrorMessage = defaultGetErrorMessage;
	exports.defaultGetRadioClassName = defaultGetRadioClassName;
	exports.defaultGetRadioStyle = defaultGetRadioStyle;
	exports.defaultIsErrored = defaultIsErrored;
	exports.defaultMenuItemRenderer = defaultMenuItemRenderer;
	exports.defaultMenuRenderer = defaultMenuRenderer;
	exports.defaultMiniNavigationItemRenderer = defaultMiniNavigationItemRenderer;
	exports.defaultNavigationItemRenderer = defaultNavigationItemRenderer;
	exports.defaultTreeItemRenderer = defaultTreeItemRenderer;
	exports.defaults = defaults;
	exports.delegateEvent = delegateEvent;
	exports.disable = disable;
	exports.enable = enable;
	exports.extractTextContent = extractTextContent;
	exports.findIgnoreCase = findIgnoreCase;
	exports.findMatchInRange = findMatchInRange;
	exports.findMatchIndex = findMatchIndex;
	exports.findSizingContainer = findSizingContainer;
	exports.focusElementWithin = focusElementWithin;
	exports.fuzzyFilter = fuzzyFilter;
	exports.getChildItems = getChildItems;
	exports.getContrastRatio = getContrastRatio;
	exports.getElement = getElement;
	exports.getElementRect = getElementRect;
	exports.getFixedPosition = getFixedPosition;
	exports.getFocusableElements = getFocusableElements;
	exports.getFuzzyRegExp = getFuzzyRegExp;
	exports.getItemId = getItemId;
	exports.getItemValue = getItemValue;
	exports.getItemsFrom = getItemsFrom;
	exports.getLayoutType = getLayoutType;
	exports.getListItemHeight = getListItemHeight;
	exports.getOrientationType = getOrientationType;
	exports.getPercentage = getPercentage;
	exports.getProgressA11y = getProgressA11y;
	exports.getRadioItemValue = getRadioItemValue;
	exports.getSearchString = getSearchString;
	exports.getViewportSize = getViewportSize;
	exports.hexToRGB = hexToRGB;
	exports.isContrastCompliant = isContrastCompliant;
	exports.isFocusable = isFocusable;
	exports.isFullHeightLayout = isFullHeightLayout;
	exports.isListboxOptionProps = isListboxOptionProps;
	exports.isMiniLayout = isMiniLayout;
	exports.isPersistentLayout = isPersistentLayout;
	exports.isResultOf = isResultOf;
	exports.isTemporaryLayout = isTemporaryLayout;
	exports.isToggleableLayout = isToggleableLayout;
	exports.labelStyles = labelStyles;
	exports.loop = loop;
	exports.nearest = nearest;
	exports.omit = omit;
	exports.removeTouchEvent = removeTouchEvent;
	exports.scrollIntoView = scrollIntoView;
	exports.setTouchEvent = setTouchEvent;
	exports.throttle = throttle;
	exports.toWidthPart = toWidthPart;
	exports.tryToSubmitRelatedForm = tryToSubmitRelatedForm;
	exports.unitToNumber = unitToNumber;
	exports.useActionClassName = useActionClassName;
	exports.useActiveDescendantMovement = useActiveDescendantMovement;
	exports.useAddMessage = useAddMessage;
	exports.useAppSize = useAppSize;
	exports.useAppSizeMedia = useAppSizeMedia;
	exports.useAutoComplete = useAutoComplete;
	exports.useCSSTransition = useCSSTransition;
	exports.useChecked = useChecked;
	exports.useChoice = useChoice;
	exports.useCloseOnEscape = useCloseOnEscape;
	exports.useCloseOnOutsideClick = useCloseOnOutsideClick;
	exports.useCollapse = useCollapse;
	exports.useContextMenu = useContextMenu;
	exports.useCrossFade = useCrossFade;
	exports.useDir = useDir;
	exports.useEnsuredRef = useEnsuredRef;
	exports.useFixedPositioning = useFixedPositioning;
	exports.useFocusMovement = useFocusMovement;
	exports.useFocusOnMount = useFocusOnMount;
	exports.useFormTheme = useFormTheme;
	exports.useGridList = useGridList;
	exports.useGridListSize = useGridListSize;
	exports.useHoverMode = useHoverMode;
	exports.useHoverModeContext = useHoverModeContext;
	exports.useIcon = useIcon;
	exports.useIndeterminateChecked = useIndeterminateChecked;
	exports.useInteractionStates = useInteractionStates;
	exports.useInterval = useInterval;
	exports.useIsUserInteractionMode = useIsUserInteractionMode;
	exports.useIsomorphicLayoutEffect = useIsomorphicLayoutEffect;
	exports.useKeyboardMovement = useKeyboardMovement;
	exports.useKeyboardSearch = useKeyboardSearch;
	exports.useLayoutConfig = useLayoutConfig;
	exports.useLayoutNavigation = useLayoutNavigation;
	exports.useMediaQuery = useMediaQuery;
	exports.useMessageQueueActions = useMessageQueueActions;
	exports.useMessageVisibility = useMessageVisibility;
	exports.useNumberField = useNumberField;
	exports.useOnUnmount = useOnUnmount;
	exports.useOrientation = useOrientation$1;
	exports.usePanels = usePanels;
	exports.usePreviousFocus = usePreviousFocus;
	exports.useQueue = useQueue;
	exports.useRangeSlider = useRangeSlider;
	exports.useRefCache = useRefCache;
	exports.useResizeListener = useResizeListener;
	exports.useResizeObserver = useResizeObserver;
	exports.useScrollListener = useScrollListener;
	exports.useScrollLock = useScrollLock;
	exports.useSelectState = useSelectState;
	exports.useSlider = useSlider;
	exports.useStatesConfigContext = useStatesConfigContext;
	exports.useTabs = useTabs;
	exports.useTempValue = useTempValue;
	exports.useTextField = useTextField;
	exports.useTimeout = useTimeout;
	exports.useToggle = useToggle;
	exports.useTooltip = useTooltip;
	exports.useTooltipPosition = useTooltipPosition;
	exports.useTransition = useTransition;
	exports.useTreeItemExpansion = useTreeItemExpansion;
	exports.useTreeItemSelection = useTreeItemSelection;
	exports.useUserInteractionMode = useUserInteractionMode;
	exports.useVerticalDividerHeight = useVerticalDividerHeight;
	exports.useWidthMediaQuery = useWidthMediaQuery;
	exports.withinRange = withinRange;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=react-md-with-font-icons.development.js.map
