{"ast":null,"code":"var SHORTHAND_REGEX = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\nvar VERBOSE_REGEX = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n/**\n * Converts a hex string into an rgb value. This is useful for deteching color\n * contrast ratios and other stuff.\n *\n * @param hex - The hex string to convert\n * @returns an object containing the r, g, b values for the color.\n */\n\nexport function hexToRGB(hex) {\n  if (process.env.NODE_ENV !== \"production\" && !SHORTHAND_REGEX.test(hex) && !VERBOSE_REGEX.test(hex)) {\n    throw new TypeError(\"Invalid color string.\");\n  }\n\n  hex = hex.replace(SHORTHAND_REGEX, function (_m, r, g, b) {\n    return \"\" + r + r + g + g + b + b;\n  });\n  var result = hex.match(VERBOSE_REGEX) || [];\n  var r = parseInt(result[1] || \"\", 16) || 0;\n  var g = parseInt(result[2] || \"\", 16) || 0;\n  var b = parseInt(result[3] || \"\", 16) || 0;\n  return [r, g, b];\n}","map":{"version":3,"sources":["../../src/colors/hexToRGB.ts"],"names":[],"mappings":"AAKA,IAAM,eAAe,GAAG,kCAAxB;AACA,IAAM,aAAa,GAAG,2CAAtB;AAEA;;;;;;AAMG;;AACH,OAAM,SAAU,QAAV,CAAmB,GAAnB,EAAiC;AACrC,MACE,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAAzB,IACA,CAAC,eAAe,CAAC,IAAhB,CAAqB,GAArB,CADD,IAEA,CAAC,aAAa,CAAC,IAAd,CAAmB,GAAnB,CAHH,EAIE;AACA,UAAM,IAAI,SAAJ,CAAc,uBAAd,CAAN;AACD;;AAED,EAAA,GAAG,GAAG,GAAG,CAAC,OAAJ,CACJ,eADI,EAEJ,UAAC,EAAD,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAY;AAAK,WAAA,KAAG,CAAH,GAAO,CAAP,GAAW,CAAX,GAAe,CAAf,GAAmB,CAAnB,GAAA,CAAA;AAA0B,GAFvC,CAAN;AAKA,MAAM,MAAM,GAAG,GAAG,CAAC,KAAJ,CAAU,aAAV,KAA4B,EAA3C;AACA,MAAM,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAD,CAAN,IAAa,EAAd,EAAkB,EAAlB,CAAR,IAAiC,CAA3C;AACA,MAAM,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAD,CAAN,IAAa,EAAd,EAAkB,EAAlB,CAAR,IAAiC,CAA3C;AACA,MAAM,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAD,CAAN,IAAa,EAAd,EAAkB,EAAlB,CAAR,IAAiC,CAA3C;AAEA,SAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAP;AACD","sourceRoot":"","sourcesContent":["var SHORTHAND_REGEX = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\nvar VERBOSE_REGEX = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i;\n/**\n * Converts a hex string into an rgb value. This is useful for deteching color\n * contrast ratios and other stuff.\n *\n * @param hex - The hex string to convert\n * @returns an object containing the r, g, b values for the color.\n */\nexport function hexToRGB(hex) {\n    if (process.env.NODE_ENV !== \"production\" &&\n        !SHORTHAND_REGEX.test(hex) &&\n        !VERBOSE_REGEX.test(hex)) {\n        throw new TypeError(\"Invalid color string.\");\n    }\n    hex = hex.replace(SHORTHAND_REGEX, function (_m, r, g, b) { return \"\" + r + r + g + g + b + b; });\n    var result = hex.match(VERBOSE_REGEX) || [];\n    var r = parseInt(result[1] || \"\", 16) || 0;\n    var g = parseInt(result[2] || \"\", 16) || 0;\n    var b = parseInt(result[3] || \"\", 16) || 0;\n    return [r, g, b];\n}\n//# sourceMappingURL=hexToRGB.js.map"]},"metadata":{},"sourceType":"module"}