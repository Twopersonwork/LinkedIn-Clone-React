{"ast":null,"code":"import { createContext, useContext } from \"react\";\nimport { DEFAULT_HOVER_MODE_VISIBLE_IN_TIME } from \"./constants\";\n/** @internal */\n\nvar noop = function () {// do nothing\n};\n/** @internal */\n\n\nvar context = createContext({\n  visibleInTime: DEFAULT_HOVER_MODE_VISIBLE_IN_TIME,\n  enableHoverMode: noop,\n  disableHoverMode: noop,\n  startDisableTimer: noop\n});\n/**\n * @internal\n * @remarks \\@since 2.8.0\n */\n\nexport var HoverModeContextProvider = context.Provider;\n/**\n * Gets the {@link HoverModeContext} which allows you implement hover mode\n * functionality for any component. This is mostly an internal hook since\n * everything you need will be available in the {@link useHoverMode} hook.\n *\n * @internal\n * @remarks \\@since 2.8.0\n * @returns The {@link HoverModeContext}\n */\n\nexport function useHoverModeContext() {\n  return useContext(context);\n}","map":{"version":3,"sources":["../../src/hover/useHoverModeContext.ts"],"names":[],"mappings":"AAAA,SAAS,aAAT,EAAwB,UAAxB,QAA0C,OAA1C;AAEA,SAAS,kCAAT,QAAmD,aAAnD;AAEA;;AACA,IAAM,IAAI,GAAG,YAAA,CACX;AACD,CAFD;AA+CA;;;AACA,IAAM,OAAO,GAAG,aAAa,CAAmB;AAC9C,EAAA,aAAa,EAAE,kCAD+B;AAE9C,EAAA,eAAe,EAAE,IAF6B;AAG9C,EAAA,gBAAgB,EAAE,IAH4B;AAI9C,EAAA,iBAAiB,EAAE;AAJ2B,CAAnB,CAA7B;AAOA;;;AAGG;;AACH,OAAe,IAAU,wBAAwB,GAAK,OAAO,CAAZ,QAAlC;AAEf;;;;;;;;AAQG;;AACH,OAAM,SAAU,mBAAV,GAA6B;AACjC,SAAO,UAAU,CAAC,OAAD,CAAjB;AACD","sourceRoot":"","sourcesContent":["import { createContext, useContext } from \"react\";\nimport { DEFAULT_HOVER_MODE_VISIBLE_IN_TIME } from \"./constants\";\n/** @internal */\nvar noop = function () {\n    // do nothing\n};\n/** @internal */\nvar context = createContext({\n    visibleInTime: DEFAULT_HOVER_MODE_VISIBLE_IN_TIME,\n    enableHoverMode: noop,\n    disableHoverMode: noop,\n    startDisableTimer: noop,\n});\n/**\n * @internal\n * @remarks \\@since 2.8.0\n */\nexport var HoverModeContextProvider = context.Provider;\n/**\n * Gets the {@link HoverModeContext} which allows you implement hover mode\n * functionality for any component. This is mostly an internal hook since\n * everything you need will be available in the {@link useHoverMode} hook.\n *\n * @internal\n * @remarks \\@since 2.8.0\n * @returns The {@link HoverModeContext}\n */\nexport function useHoverModeContext() {\n    return useContext(context);\n}\n//# sourceMappingURL=useHoverModeContext.js.map"]},"metadata":{},"sourceType":"module"}