{"ast":null,"code":"import { useEffect } from \"react\";\nimport { useRefCache } from \"../useRefCache\";\nimport { delegateEvent } from \"./delegateEvent\";\nimport { isSupported } from \"./passiveEvents\";\n/**\n * This hook will create a performant scroll listener by enabling passive events\n * if it's supported by the browser and delegating the event as needed.\n */\n\nexport function useScrollListener(_a) {\n  var _b = _a.enabled,\n      enabled = _b === void 0 ? true : _b,\n      onScroll = _a.onScroll,\n      element = _a.element,\n      _c = _a.options,\n      options = _c === void 0 ? isSupported ? {\n    passive: true\n  } : false : _c;\n  var callback = useRefCache(onScroll);\n  useEffect(function () {\n    if (!enabled) {\n      return;\n    }\n\n    var eventHandler = delegateEvent(\"scroll\", element || window, true, options);\n\n    var handler = function (event) {\n      return callback.current(event);\n    };\n\n    eventHandler.add(handler);\n    return function () {\n      eventHandler.remove(handler);\n    }; // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [enabled, element, options]);\n}","map":{"version":3,"sources":["../../src/events/useScrollListener.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,OAA1B;AAEA,SAAS,WAAT,QAA4B,gBAA5B;AACA,SAAS,aAAT,QAA8B,iBAA9B;AACA,SAAS,WAAT,QAA4B,iBAA5B;AA2BA;;;AAGG;;AACH,OAAM,SAAU,iBAAV,CAAiE,EAAjE,EAKO;MAJX,EAAA,GAAA,EAAA,CAAA,O;MAAA,OAAO,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,E;MACd,QAAQ,GAAA,EAAA,CAAA,Q;MACR,OAAO,GAAA,EAAA,CAAA,O;MACP,EAAA,GAAA,EAAA,CAAA,O;MAAA,OAAO,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,WAAW,GAAG;AAAE,IAAA,OAAO,EAAE;AAAX,GAAH,GAAuB,KAArC,GAA0C,E;AAEjD,MAAM,QAAQ,GAAG,WAAW,CAAC,QAAD,CAA5B;AAEA,EAAA,SAAS,CAAC,YAAA;AACR,QAAI,CAAC,OAAL,EAAc;AACZ;AACD;;AAED,QAAM,YAAY,GAAG,aAAa,CAChC,QADgC,EAEhC,OAAO,IAAI,MAFqB,EAGhC,IAHgC,EAIhC,OAJgC,CAAlC;;AAMA,QAAM,OAAO,GAAG,UAAC,KAAD,EAAa;AAAW,aAAA,QAAQ,CAAC,OAAT,CAAA,KAAA,CAAA;AAAuB,KAA/D;;AACA,IAAA,YAAY,CAAC,GAAb,CAAiB,OAAjB;AACA,WAAO,YAAA;AACL,MAAA,YAAY,CAAC,MAAb,CAAoB,OAApB;AACD,KAFD,CAbQ,CAgBR;AACA;AACD,GAlBQ,EAkBN,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAlBM,CAAT;AAmBD","sourceRoot":"","sourcesContent":["import { useEffect } from \"react\";\nimport { useRefCache } from \"../useRefCache\";\nimport { delegateEvent } from \"./delegateEvent\";\nimport { isSupported } from \"./passiveEvents\";\n/**\n * This hook will create a performant scroll listener by enabling passive events\n * if it's supported by the browser and delegating the event as needed.\n */\nexport function useScrollListener(_a) {\n    var _b = _a.enabled, enabled = _b === void 0 ? true : _b, onScroll = _a.onScroll, element = _a.element, _c = _a.options, options = _c === void 0 ? isSupported ? { passive: true } : false : _c;\n    var callback = useRefCache(onScroll);\n    useEffect(function () {\n        if (!enabled) {\n            return;\n        }\n        var eventHandler = delegateEvent(\"scroll\", element || window, true, options);\n        var handler = function (event) { return callback.current(event); };\n        eventHandler.add(handler);\n        return function () {\n            eventHandler.remove(handler);\n        };\n        // disabled since useRefCache\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [enabled, element, options]);\n}\n//# sourceMappingURL=useScrollListener.js.map"]},"metadata":{},"sourceType":"module"}