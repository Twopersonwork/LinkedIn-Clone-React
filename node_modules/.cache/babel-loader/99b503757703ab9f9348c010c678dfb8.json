{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useCallback, useRef } from \"react\";\nimport { useRefCache } from \"@react-md/utils\";\n/**\n * This hook is used to create all the event handlers required for\n * creating ripples on an element. Each handler will be memoized and\n * merged with any provided event handlers of the same type. If the\n * ripple effect is disabled, the provided event handlers will be\n * returned instead.\n */\n\nexport function useRippleHandlers(_a) {\n  var create = _a.create,\n      release = _a.release,\n      cancel = _a.cancel,\n      _b = _a.handlers,\n      handlers = _b === void 0 ? {} : _b,\n      _c = _a.disabled,\n      propDisabled = _c === void 0 ? false : _c,\n      _d = _a.disableRipple,\n      disableRipple = _d === void 0 ? false : _d,\n      _e = _a.disableProgrammaticRipple,\n      disableProgrammaticRipple = _e === void 0 ? false : _e;\n  var disabled = propDisabled || disableRipple;\n  var ref = useRefCache(__assign(__assign({}, handlers), {\n    disableProgrammaticRipple: disableProgrammaticRipple\n  })); // some OS/browser don't actually focus buttons/elements that are focusable after a click\n  // event which causes a double ripple effect. This ref is used to disable the programmatic\n  // ripple in these cases.\n\n  var disableProgrammatic = useRef(false);\n  var onKeyDown = useCallback(function (event) {\n    var callback = ref.current.onKeyDown;\n\n    if (callback) {\n      callback(event);\n    }\n\n    create(event);\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [create]);\n  var onKeyUp = useCallback(function (event) {\n    var callback = ref.current.onKeyUp;\n\n    if (callback) {\n      callback(event);\n    }\n\n    release(event);\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [release]);\n  var onMouseDown = useCallback(function (event) {\n    var callback = ref.current.onMouseDown;\n\n    if (callback) {\n      callback(event);\n    }\n\n    create(event);\n    disableProgrammatic.current = true;\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [create]);\n  var onMouseUp = useCallback(function (event) {\n    var callback = ref.current.onMouseUp;\n\n    if (callback) {\n      callback(event);\n    }\n\n    release(event);\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [release]);\n  var onMouseLeave = useCallback(function (event) {\n    var callback = ref.current.onMouseLeave;\n\n    if (callback) {\n      callback(event);\n    }\n\n    cancel(true);\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [cancel]);\n  var onTouchStart = useCallback(function (event) {\n    var callback = ref.current.onTouchStart;\n\n    if (callback) {\n      callback(event);\n    }\n\n    create(event);\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [create]);\n  var onTouchMove = useCallback(function (event) {\n    var callback = ref.current.onTouchMove;\n\n    if (callback) {\n      callback(event);\n    }\n\n    cancel(false);\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [cancel]);\n  var onTouchEnd = useCallback(function (event) {\n    var callback = ref.current.onTouchEnd;\n\n    if (callback) {\n      callback(event);\n    }\n\n    release(event);\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [release]);\n  var onClick = useCallback(function (event) {\n    var _a = ref.current,\n        callback = _a.onClick,\n        disableProgrammaticRipple = _a.disableProgrammaticRipple;\n\n    if (callback) {\n      callback(event);\n    } // when a click event is triggered and the current active element is not\n    // the event target, we know it was a true programmatic event and should\n    // trigger a ripple for it.\n\n\n    if (disableProgrammaticRipple || document.activeElement === event.currentTarget || disableProgrammatic.current) {\n      disableProgrammatic.current = false;\n      return;\n    }\n\n    create(event);\n  }, // disabled since useRefCache\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [create]);\n  return {\n    onKeyDown: disabled ? handlers.onKeyDown : onKeyDown,\n    onKeyUp: disabled ? handlers.onKeyUp : onKeyUp,\n    onMouseDown: disabled ? handlers.onMouseDown : onMouseDown,\n    onMouseUp: disabled ? handlers.onMouseUp : onMouseUp,\n    onMouseLeave: disabled ? handlers.onMouseLeave : onMouseLeave,\n    onTouchStart: disabled ? handlers.onTouchStart : onTouchStart,\n    onTouchMove: disabled ? handlers.onTouchMove : onTouchMove,\n    onTouchEnd: disabled ? handlers.onTouchEnd : onTouchEnd,\n    onClick: disabled || disableProgrammaticRipple ? handlers.onClick : onClick\n  };\n}","map":{"version":3,"sources":["../../src/ripples/useRippleHandlers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { useCallback, useRef } from \"react\";\nimport { useRefCache } from \"@react-md/utils\";\n/**\n * This hook is used to create all the event handlers required for\n * creating ripples on an element. Each handler will be memoized and\n * merged with any provided event handlers of the same type. If the\n * ripple effect is disabled, the provided event handlers will be\n * returned instead.\n */\nexport function useRippleHandlers(_a) {\n    var create = _a.create, release = _a.release, cancel = _a.cancel, _b = _a.handlers, handlers = _b === void 0 ? {} : _b, _c = _a.disabled, propDisabled = _c === void 0 ? false : _c, _d = _a.disableRipple, disableRipple = _d === void 0 ? false : _d, _e = _a.disableProgrammaticRipple, disableProgrammaticRipple = _e === void 0 ? false : _e;\n    var disabled = propDisabled || disableRipple;\n    var ref = useRefCache(__assign(__assign({}, handlers), { disableProgrammaticRipple: disableProgrammaticRipple }));\n    // some OS/browser don't actually focus buttons/elements that are focusable after a click\n    // event which causes a double ripple effect. This ref is used to disable the programmatic\n    // ripple in these cases.\n    var disableProgrammatic = useRef(false);\n    var onKeyDown = useCallback(function (event) {\n        var callback = ref.current.onKeyDown;\n        if (callback) {\n            callback(event);\n        }\n        create(event);\n    }, \n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [create]);\n    var onKeyUp = useCallback(function (event) {\n        var callback = ref.current.onKeyUp;\n        if (callback) {\n            callback(event);\n        }\n        release(event);\n    }, \n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [release]);\n    var onMouseDown = useCallback(function (event) {\n        var callback = ref.current.onMouseDown;\n        if (callback) {\n            callback(event);\n        }\n        create(event);\n        disableProgrammatic.current = true;\n    }, \n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [create]);\n    var onMouseUp = useCallback(function (event) {\n        var callback = ref.current.onMouseUp;\n        if (callback) {\n            callback(event);\n        }\n        release(event);\n    }, \n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [release]);\n    var onMouseLeave = useCallback(function (event) {\n        var callback = ref.current.onMouseLeave;\n        if (callback) {\n            callback(event);\n        }\n        cancel(true);\n    }, \n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [cancel]);\n    var onTouchStart = useCallback(function (event) {\n        var callback = ref.current.onTouchStart;\n        if (callback) {\n            callback(event);\n        }\n        create(event);\n    }, \n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [create]);\n    var onTouchMove = useCallback(function (event) {\n        var callback = ref.current.onTouchMove;\n        if (callback) {\n            callback(event);\n        }\n        cancel(false);\n    }, \n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [cancel]);\n    var onTouchEnd = useCallback(function (event) {\n        var callback = ref.current.onTouchEnd;\n        if (callback) {\n            callback(event);\n        }\n        release(event);\n    }, \n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [release]);\n    var onClick = useCallback(function (event) {\n        var _a = ref.current, callback = _a.onClick, disableProgrammaticRipple = _a.disableProgrammaticRipple;\n        if (callback) {\n            callback(event);\n        }\n        // when a click event is triggered and the current active element is not\n        // the event target, we know it was a true programmatic event and should\n        // trigger a ripple for it.\n        if (disableProgrammaticRipple ||\n            document.activeElement === event.currentTarget ||\n            disableProgrammatic.current) {\n            disableProgrammatic.current = false;\n            return;\n        }\n        create(event);\n    }, \n    // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [create]);\n    return {\n        onKeyDown: disabled ? handlers.onKeyDown : onKeyDown,\n        onKeyUp: disabled ? handlers.onKeyUp : onKeyUp,\n        onMouseDown: disabled ? handlers.onMouseDown : onMouseDown,\n        onMouseUp: disabled ? handlers.onMouseUp : onMouseUp,\n        onMouseLeave: disabled ? handlers.onMouseLeave : onMouseLeave,\n        onTouchStart: disabled ? handlers.onTouchStart : onTouchStart,\n        onTouchMove: disabled ? handlers.onTouchMove : onTouchMove,\n        onTouchEnd: disabled ? handlers.onTouchEnd : onTouchEnd,\n        onClick: disabled || disableProgrammaticRipple ? handlers.onClick : onClick,\n    };\n}\n//# sourceMappingURL=useRippleHandlers.js.map"]},"metadata":{},"sourceType":"module"}