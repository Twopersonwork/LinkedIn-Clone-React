{"ast":null,"code":"import { useEffect, useState } from \"react\";\n/**\n * An extremely simple \"pollyfill\" for the `window.screen.orientation` just for\n * the `type` value that is required for the `useOrientation` hook.\n */\n\nexport var getOrientationType = function () {\n  var _a;\n\n  var screenOrientation = (_a = window.screen.orientation) === null || _a === void 0 ? void 0 : _a.type;\n\n  if (typeof screenOrientation === \"string\") {\n    return screenOrientation;\n  }\n\n  var _b = window.screen,\n      availHeight = _b.availHeight,\n      availWidth = _b.availWidth;\n  return availHeight > availWidth ? \"portrait-primary\" : \"landscape-primary\";\n};\n/**\n * This media query is used to determine the current orientation of the app\n * based on the `window.screen.orientation.type`. This will always be\n * `\"landscape-primary\"` server side unless a default value is provided.\n *\n * @param defaultValue - an optional default value to use. When this is omitted,\n * it will default to `\"landscape-primary\"` unless the `window` is defined. If\n * the `window` is defined, it will immediately check the orientation type on\n * mount.\n * @returns the orientation type value.\n */\n\nexport function useOrientation(defaultValue) {\n  var _a = useState(function () {\n    if (defaultValue) {\n      return defaultValue;\n    }\n\n    if (typeof window !== \"undefined\") {\n      return getOrientationType();\n    }\n\n    return \"landscape-primary\";\n  }),\n      value = _a[0],\n      setValue = _a[1];\n\n  useEffect(function () {\n    if (typeof window === \"undefined\") {\n      return;\n    }\n\n    var handler = function () {\n      setValue(getOrientationType());\n    };\n\n    window.addEventListener(\"orientationchange\", handler);\n    return function () {\n      return window.removeEventListener(\"orientationchange\", handler);\n    };\n  }, []);\n  return value;\n}","map":{"version":3,"sources":["../../src/sizing/useOrientation.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,EAAoB,QAApB,QAAoC,OAApC;AAEA;;;AAGG;;AACH,OAAO,IAAM,kBAAkB,GAAG,YAAA;;;AAChC,MAAM,iBAAiB,GAAG,CAAA,EAAA,GAAA,MAAM,CAAC,MAAP,CAAc,WAAd,MAAyB,IAAzB,IAAyB,EAAA,KAAA,KAAA,CAAzB,GAAyB,KAAA,CAAzB,GAAyB,EAAA,CAAE,IAArD;;AACA,MAAI,OAAO,iBAAP,KAA6B,QAAjC,EAA2C;AACzC,WAAO,iBAAP;AACD;;AAEK,MAAA,EAAA,GAA8B,MAAM,CAAC,MAArC;AAAA,MAAE,WAAW,GAAA,EAAA,CAAA,WAAb;AAAA,MAAe,UAAU,GAAA,EAAA,CAAA,UAAzB;AAEN,SAAO,WAAW,GAAG,UAAd,GAA2B,kBAA3B,GAAgD,mBAAvD;AACD,CATM;AAWP;;;;;;;;;;AAUG;;AACH,OAAM,SAAU,cAAV,CACJ,YADI,EAC0B;AAExB,MAAA,EAAA,GAAoB,QAAQ,CAAkB,YAAA;AAClD,QAAI,YAAJ,EAAkB;AAChB,aAAO,YAAP;AACD;;AAED,QAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC,aAAO,kBAAkB,EAAzB;AACD;;AAED,WAAO,mBAAP;AACD,GAViC,CAA5B;AAAA,MAAC,KAAK,GAAA,EAAA,CAAA,CAAA,CAAN;AAAA,MAAQ,QAAQ,GAAA,EAAA,CAAA,CAAA,CAAhB;;AAYN,EAAA,SAAS,CAAC,YAAA;AACR,QAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC;AACD;;AAED,QAAM,OAAO,GAAG,YAAA;AACd,MAAA,QAAQ,CAAC,kBAAkB,EAAnB,CAAR;AACD,KAFD;;AAGA,IAAA,MAAM,CAAC,gBAAP,CAAwB,mBAAxB,EAA6C,OAA7C;AAEA,WAAO,YAAA;AAAM,aAAA,MAAM,CAAC,mBAAP,CAA2B,mBAA3B,EAAA,OAAA,CAAA;AAAwD,KAArE;AACD,GAXQ,EAWN,EAXM,CAAT;AAaA,SAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["import { useEffect, useState } from \"react\";\n/**\n * An extremely simple \"pollyfill\" for the `window.screen.orientation` just for\n * the `type` value that is required for the `useOrientation` hook.\n */\nexport var getOrientationType = function () {\n    var _a;\n    var screenOrientation = (_a = window.screen.orientation) === null || _a === void 0 ? void 0 : _a.type;\n    if (typeof screenOrientation === \"string\") {\n        return screenOrientation;\n    }\n    var _b = window.screen, availHeight = _b.availHeight, availWidth = _b.availWidth;\n    return availHeight > availWidth ? \"portrait-primary\" : \"landscape-primary\";\n};\n/**\n * This media query is used to determine the current orientation of the app\n * based on the `window.screen.orientation.type`. This will always be\n * `\"landscape-primary\"` server side unless a default value is provided.\n *\n * @param defaultValue - an optional default value to use. When this is omitted,\n * it will default to `\"landscape-primary\"` unless the `window` is defined. If\n * the `window` is defined, it will immediately check the orientation type on\n * mount.\n * @returns the orientation type value.\n */\nexport function useOrientation(defaultValue) {\n    var _a = useState(function () {\n        if (defaultValue) {\n            return defaultValue;\n        }\n        if (typeof window !== \"undefined\") {\n            return getOrientationType();\n        }\n        return \"landscape-primary\";\n    }), value = _a[0], setValue = _a[1];\n    useEffect(function () {\n        if (typeof window === \"undefined\") {\n            return;\n        }\n        var handler = function () {\n            setValue(getOrientationType());\n        };\n        window.addEventListener(\"orientationchange\", handler);\n        return function () { return window.removeEventListener(\"orientationchange\", handler); };\n    }, []);\n    return value;\n}\n//# sourceMappingURL=useOrientation.js.map"]},"metadata":{},"sourceType":"module"}