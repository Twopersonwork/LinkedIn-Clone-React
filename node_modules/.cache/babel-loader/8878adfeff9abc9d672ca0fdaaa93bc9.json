{"ast":null,"code":"import { useAppSize } from \"./useAppSize\";\n/**\n * A simple component that will render the children only when the app is\n * considered in mobile mode via the `AppSizeContext`. A mobile view will be\n * true for both phones and tablets.\n */\n\nexport function MobileOnly(_a) {\n  var children = _a.children,\n      _b = _a.fallback,\n      fallback = _b === void 0 ? null : _b;\n\n  var _c = useAppSize(),\n      isPhone = _c.isPhone,\n      isTablet = _c.isTablet;\n\n  if (isPhone || isTablet) {\n    return children;\n  }\n\n  return fallback;\n}\n/**\n * A simple component that will render the children only when the app is\n * considered in phone mode via the `AppSizeContext`.\n */\n\nexport function PhoneOnly(_a) {\n  var children = _a.children,\n      _b = _a.fallback,\n      fallback = _b === void 0 ? null : _b;\n  var isPhone = useAppSize().isPhone;\n\n  if (isPhone) {\n    return children;\n  }\n\n  return fallback;\n}\n/**\n * A simple component that will render the children only when the app is\n * considered in tablet mode via the `AppSizeContext`.\n */\n\nexport function TabletOnly(_a) {\n  var children = _a.children,\n      _b = _a.fallback,\n      fallback = _b === void 0 ? null : _b;\n  var isTablet = useAppSize().isTablet;\n\n  if (isTablet) {\n    return children;\n  }\n\n  return fallback;\n}\n/**\n * A simple component that will render the children only when the app is\n * considered in desktop mode via the `AppSizeContext`.\n */\n\nexport function DesktopOnly(_a) {\n  var children = _a.children,\n      _b = _a.fallback,\n      fallback = _b === void 0 ? null : _b;\n  var isDesktop = useAppSize().isDesktop;\n\n  if (isDesktop) {\n    return children;\n  }\n\n  return fallback;\n}","map":{"version":3,"sources":["../../src/sizing/MediaOnly.tsx"],"names":[],"mappings":"AAEA,SAAS,UAAT,QAA2B,cAA3B;AAcA;;;;AAIG;;AACH,OAAM,SAAU,UAAV,CAAqB,EAArB,EAGW;MAFf,QAAQ,GAAA,EAAA,CAAA,Q;MACR,EAAA,GAAA,EAAA,CAAA,Q;MAAA,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,E;;AAET,MAAA,EAAA,GAAwB,UAAU,EAAlC;AAAA,MAAE,OAAO,GAAA,EAAA,CAAA,OAAT;AAAA,MAAW,QAAQ,GAAA,EAAA,CAAA,QAAnB;;AACN,MAAI,OAAO,IAAI,QAAf,EAAyB;AACvB,WAAO,QAAP;AACD;;AAED,SAAO,QAAP;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,SAAV,CAAoB,EAApB,EAGW;MAFf,QAAQ,GAAA,EAAA,CAAA,Q;MACR,EAAA,GAAA,EAAA,CAAA,Q;MAAA,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,E;AAEP,MAAA,OAAO,GAAK,UAAU,GAAf,OAAP;;AACR,MAAI,OAAJ,EAAa;AACX,WAAO,QAAP;AACD;;AAED,SAAO,QAAP;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,UAAV,CAAqB,EAArB,EAGW;MAFf,QAAQ,GAAA,EAAA,CAAA,Q;MACR,EAAA,GAAA,EAAA,CAAA,Q;MAAA,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,E;AAEP,MAAA,QAAQ,GAAK,UAAU,GAAf,QAAR;;AACR,MAAI,QAAJ,EAAc;AACZ,WAAO,QAAP;AACD;;AAED,SAAO,QAAP;AACD;AAED;;;AAGG;;AACH,OAAM,SAAU,WAAV,CAAsB,EAAtB,EAGW;MAFf,QAAQ,GAAA,EAAA,CAAA,Q;MACR,EAAA,GAAA,EAAA,CAAA,Q;MAAA,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,E;AAEP,MAAA,SAAS,GAAK,UAAU,GAAf,SAAT;;AACR,MAAI,SAAJ,EAAe;AACb,WAAO,QAAP;AACD;;AAED,SAAO,QAAP;AACD","sourceRoot":"","sourcesContent":["import { useAppSize } from \"./useAppSize\";\n/**\n * A simple component that will render the children only when the app is\n * considered in mobile mode via the `AppSizeContext`. A mobile view will be\n * true for both phones and tablets.\n */\nexport function MobileOnly(_a) {\n    var children = _a.children, _b = _a.fallback, fallback = _b === void 0 ? null : _b;\n    var _c = useAppSize(), isPhone = _c.isPhone, isTablet = _c.isTablet;\n    if (isPhone || isTablet) {\n        return children;\n    }\n    return fallback;\n}\n/**\n * A simple component that will render the children only when the app is\n * considered in phone mode via the `AppSizeContext`.\n */\nexport function PhoneOnly(_a) {\n    var children = _a.children, _b = _a.fallback, fallback = _b === void 0 ? null : _b;\n    var isPhone = useAppSize().isPhone;\n    if (isPhone) {\n        return children;\n    }\n    return fallback;\n}\n/**\n * A simple component that will render the children only when the app is\n * considered in tablet mode via the `AppSizeContext`.\n */\nexport function TabletOnly(_a) {\n    var children = _a.children, _b = _a.fallback, fallback = _b === void 0 ? null : _b;\n    var isTablet = useAppSize().isTablet;\n    if (isTablet) {\n        return children;\n    }\n    return fallback;\n}\n/**\n * A simple component that will render the children only when the app is\n * considered in desktop mode via the `AppSizeContext`.\n */\nexport function DesktopOnly(_a) {\n    var children = _a.children, _b = _a.fallback, fallback = _b === void 0 ? null : _b;\n    var isDesktop = useAppSize().isDesktop;\n    if (isDesktop) {\n        return children;\n    }\n    return fallback;\n}\n//# sourceMappingURL=MediaOnly.js.map"]},"metadata":{},"sourceType":"module"}