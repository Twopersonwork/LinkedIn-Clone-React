{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { useCallback, useState } from \"react\";\nimport { useRefCache } from \"@react-md/utils\";\nimport { isBubbled } from \"./ripples/utils\";\n/**\n * This is a different version of the useRippleStates that will allow you to\n * know when a component is being pressed by the user. This is really just a\n * fallback for when the ripples are disabled.\n *\n * This will return an object containing the current pressed state of the\n * element as well as all the merged eventHandlers required to trigger the\n * different states.\n *\n * NOTE: Unlike the ripple effect, this pressed states will not be triggered\n * from a programmatic click event.\n */\n\nexport function usePressedStates(_a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.handlers,\n      handlers = _c === void 0 ? {} : _c,\n      _d = _b.disableSpacebarClick,\n      disableSpacebarClick = _d === void 0 ? false : _d;\n\n  var _e = useState(false),\n      pressed = _e[0],\n      setPressed = _e[1];\n\n  var ref = useRefCache(__assign(__assign({}, handlers), {\n    pressed: pressed\n  }));\n  var handleKeyDown = useCallback(function (event) {\n    var _a = ref.current,\n        onKeyDown = _a.onKeyDown,\n        pressed = _a.pressed;\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    var key = event.key;\n\n    if (!pressed && (key === \"Enter\" || !disableSpacebarClick && key === \" \")) {\n      setPressed(true);\n    }\n  }, // disabled since useRefCache for ref\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [disableSpacebarClick]);\n  var handleKeyUp = useCallback(function (event) {\n    var _a = ref.current,\n        onKeyUp = _a.onKeyUp,\n        pressed = _a.pressed;\n\n    if (onKeyUp) {\n      onKeyUp(event);\n    }\n\n    if (pressed) {\n      setPressed(false);\n    } // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var handleMouseDown = useCallback(function (event) {\n    var _a = ref.current,\n        onMouseDown = _a.onMouseDown,\n        pressed = _a.pressed;\n\n    if (onMouseDown) {\n      onMouseDown(event);\n    }\n\n    if (!pressed && event.button === 0 && !isBubbled(event)) {\n      setPressed(true);\n    } // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var handleMouseUp = useCallback(function (event) {\n    var _a = ref.current,\n        onMouseUp = _a.onMouseUp,\n        pressed = _a.pressed;\n\n    if (onMouseUp) {\n      onMouseUp(event);\n    }\n\n    if (pressed) {\n      setPressed(false);\n    } // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var handleMouseLeave = useCallback(function (event) {\n    var _a = ref.current,\n        onMouseLeave = _a.onMouseLeave,\n        pressed = _a.pressed;\n\n    if (onMouseLeave) {\n      onMouseLeave(event);\n    }\n\n    if (pressed) {\n      setPressed(false);\n    } // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var handleTouchStart = useCallback(function (event) {\n    var _a = ref.current,\n        onTouchStart = _a.onTouchStart,\n        pressed = _a.pressed;\n\n    if (onTouchStart) {\n      onTouchStart(event);\n    }\n\n    if (!pressed && !isBubbled(event)) {\n      setPressed(true);\n    } // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var handleTouchMove = useCallback(function (event) {\n    var _a = ref.current,\n        onTouchMove = _a.onTouchMove,\n        pressed = _a.pressed;\n\n    if (onTouchMove) {\n      onTouchMove(event);\n    }\n\n    if (pressed) {\n      setPressed(false);\n    } // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  var handleTouchEnd = useCallback(function (event) {\n    var _a = ref.current,\n        onTouchEnd = _a.onTouchEnd,\n        pressed = _a.pressed;\n\n    if (onTouchEnd) {\n      onTouchEnd(event);\n    }\n\n    if (pressed) {\n      setPressed(false);\n    } // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  return {\n    pressed: pressed,\n    handlers: {\n      onClick: handlers.onClick,\n      onKeyDown: handleKeyDown,\n      onKeyUp: handleKeyUp,\n      onMouseDown: handleMouseDown,\n      onMouseUp: handleMouseUp,\n      onMouseLeave: handleMouseLeave,\n      onTouchStart: handleTouchStart,\n      onTouchMove: handleTouchMove,\n      onTouchEnd: handleTouchEnd\n    }\n  };\n}","map":{"version":3,"sources":["../src/usePressedStates.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { useCallback, useState } from \"react\";\nimport { useRefCache } from \"@react-md/utils\";\nimport { isBubbled } from \"./ripples/utils\";\n/**\n * This is a different version of the useRippleStates that will allow you to\n * know when a component is being pressed by the user. This is really just a\n * fallback for when the ripples are disabled.\n *\n * This will return an object containing the current pressed state of the\n * element as well as all the merged eventHandlers required to trigger the\n * different states.\n *\n * NOTE: Unlike the ripple effect, this pressed states will not be triggered\n * from a programmatic click event.\n */\nexport function usePressedStates(_a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.handlers, handlers = _c === void 0 ? {} : _c, _d = _b.disableSpacebarClick, disableSpacebarClick = _d === void 0 ? false : _d;\n    var _e = useState(false), pressed = _e[0], setPressed = _e[1];\n    var ref = useRefCache(__assign(__assign({}, handlers), { pressed: pressed }));\n    var handleKeyDown = useCallback(function (event) {\n        var _a = ref.current, onKeyDown = _a.onKeyDown, pressed = _a.pressed;\n        if (onKeyDown) {\n            onKeyDown(event);\n        }\n        var key = event.key;\n        if (!pressed &&\n            (key === \"Enter\" || (!disableSpacebarClick && key === \" \"))) {\n            setPressed(true);\n        }\n    }, \n    // disabled since useRefCache for ref\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [disableSpacebarClick]);\n    var handleKeyUp = useCallback(function (event) {\n        var _a = ref.current, onKeyUp = _a.onKeyUp, pressed = _a.pressed;\n        if (onKeyUp) {\n            onKeyUp(event);\n        }\n        if (pressed) {\n            setPressed(false);\n        }\n        // disabled since useRefCache for ref\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    var handleMouseDown = useCallback(function (event) {\n        var _a = ref.current, onMouseDown = _a.onMouseDown, pressed = _a.pressed;\n        if (onMouseDown) {\n            onMouseDown(event);\n        }\n        if (!pressed && event.button === 0 && !isBubbled(event)) {\n            setPressed(true);\n        }\n        // disabled since useRefCache for ref\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    var handleMouseUp = useCallback(function (event) {\n        var _a = ref.current, onMouseUp = _a.onMouseUp, pressed = _a.pressed;\n        if (onMouseUp) {\n            onMouseUp(event);\n        }\n        if (pressed) {\n            setPressed(false);\n        }\n        // disabled since useRefCache for ref\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    var handleMouseLeave = useCallback(function (event) {\n        var _a = ref.current, onMouseLeave = _a.onMouseLeave, pressed = _a.pressed;\n        if (onMouseLeave) {\n            onMouseLeave(event);\n        }\n        if (pressed) {\n            setPressed(false);\n        }\n        // disabled since useRefCache for ref\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    var handleTouchStart = useCallback(function (event) {\n        var _a = ref.current, onTouchStart = _a.onTouchStart, pressed = _a.pressed;\n        if (onTouchStart) {\n            onTouchStart(event);\n        }\n        if (!pressed && !isBubbled(event)) {\n            setPressed(true);\n        }\n        // disabled since useRefCache for ref\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    var handleTouchMove = useCallback(function (event) {\n        var _a = ref.current, onTouchMove = _a.onTouchMove, pressed = _a.pressed;\n        if (onTouchMove) {\n            onTouchMove(event);\n        }\n        if (pressed) {\n            setPressed(false);\n        }\n        // disabled since useRefCache for ref\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    var handleTouchEnd = useCallback(function (event) {\n        var _a = ref.current, onTouchEnd = _a.onTouchEnd, pressed = _a.pressed;\n        if (onTouchEnd) {\n            onTouchEnd(event);\n        }\n        if (pressed) {\n            setPressed(false);\n        }\n        // disabled since useRefCache for ref\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return {\n        pressed: pressed,\n        handlers: {\n            onClick: handlers.onClick,\n            onKeyDown: handleKeyDown,\n            onKeyUp: handleKeyUp,\n            onMouseDown: handleMouseDown,\n            onMouseUp: handleMouseUp,\n            onMouseLeave: handleMouseLeave,\n            onTouchStart: handleTouchStart,\n            onTouchMove: handleTouchMove,\n            onTouchEnd: handleTouchEnd,\n        },\n    };\n}\n//# sourceMappingURL=usePressedStates.js.map"]},"metadata":{},"sourceType":"module"}