{"ast":null,"code":"import { useEffect } from \"react\";\nimport { containsElement } from \"./containsElement\";\n/**\n * Gets the HTMLElement or null from a provided RefObject or HTMLElement/null\n * @internal\n */\n\nexport function getElement(element) {\n  if (!element) {\n    return null;\n  }\n\n  if (typeof element.current !== \"undefined\") {\n    return element.current;\n  }\n\n  return element;\n}\n/**\n * Triggers a callback function when another element in the page is clicked that\n * is outside of the provided element. This is generally used for closing\n * temporary elements when something else within the page has been clicked.\n *\n * The callback will be provided the current `element` as well as the click\n * target if additional logic should be applied before closing.\n *\n * @typeParam E - The type of element\n */\n\nexport function useCloseOnOutsideClick(_a) {\n  var enabled = _a.enabled,\n      element = _a.element,\n      onOutsideClick = _a.onOutsideClick;\n  useEffect(function () {\n    if (!enabled) {\n      return;\n    }\n\n    function handleClick(event) {\n      var target = event.target;\n      var el = getElement(element);\n\n      if (!containsElement(el, target)) {\n        onOutsideClick(el, target, containsElement);\n      }\n    }\n\n    window.addEventListener(\"click\", handleClick);\n    return function () {\n      window.removeEventListener(\"click\", handleClick);\n    };\n  }, [enabled, element, onOutsideClick]);\n}","map":{"version":3,"sources":["../src/useCloseOnOutsideClick.ts"],"names":[],"mappings":"AAAA,SAA2B,SAA3B,QAA4C,OAA5C;AAEA,SAAS,eAAT,QAAgC,mBAAhC;AAEA;;;AAGG;;AACH,OAAM,SAAU,UAAV,CACJ,OADI,EAC0C;AAE9C,MAAI,CAAC,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,MAAI,OAAQ,OAAsC,CAAC,OAA/C,KAA2D,WAA/D,EAA4E;AAC1E,WAAQ,OAAsC,CAAC,OAA/C;AACD;;AAED,SAAO,OAAP;AACD;AAyCD;;;;;;;;;AASG;;AACH,OAAM,SAAU,sBAAV,CAAwD,EAAxD,EAI0B;MAH9B,OAAO,GAAA,EAAA,CAAA,O;MACP,OAAO,GAAA,EAAA,CAAA,O;MACP,cAAc,GAAA,EAAA,CAAA,c;AAEd,EAAA,SAAS,CAAC,YAAA;AACR,QAAI,CAAC,OAAL,EAAc;AACZ;AACD;;AAED,aAAS,WAAT,CAAqB,KAArB,EAAsC;AACpC,UAAM,MAAM,GAAG,KAAK,CAAC,MAArB;AACA,UAAM,EAAE,GAAG,UAAU,CAAI,OAAJ,CAArB;;AAEA,UAAI,CAAC,eAAe,CAAC,EAAD,EAAK,MAAL,CAApB,EAAkC;AAChC,QAAA,cAAc,CAAC,EAAD,EAAK,MAAL,EAAa,eAAb,CAAd;AACD;AACF;;AAED,IAAA,MAAM,CAAC,gBAAP,CAAwB,OAAxB,EAAiC,WAAjC;AACA,WAAO,YAAA;AACL,MAAA,MAAM,CAAC,mBAAP,CAA2B,OAA3B,EAAoC,WAApC;AACD,KAFD;AAGD,GAlBQ,EAkBN,CAAC,OAAD,EAAU,OAAV,EAAmB,cAAnB,CAlBM,CAAT;AAmBD","sourceRoot":"","sourcesContent":["import { useEffect } from \"react\";\nimport { containsElement } from \"./containsElement\";\n/**\n * Gets the HTMLElement or null from a provided RefObject or HTMLElement/null\n * @internal\n */\nexport function getElement(element) {\n    if (!element) {\n        return null;\n    }\n    if (typeof element.current !== \"undefined\") {\n        return element.current;\n    }\n    return element;\n}\n/**\n * Triggers a callback function when another element in the page is clicked that\n * is outside of the provided element. This is generally used for closing\n * temporary elements when something else within the page has been clicked.\n *\n * The callback will be provided the current `element` as well as the click\n * target if additional logic should be applied before closing.\n *\n * @typeParam E - The type of element\n */\nexport function useCloseOnOutsideClick(_a) {\n    var enabled = _a.enabled, element = _a.element, onOutsideClick = _a.onOutsideClick;\n    useEffect(function () {\n        if (!enabled) {\n            return;\n        }\n        function handleClick(event) {\n            var target = event.target;\n            var el = getElement(element);\n            if (!containsElement(el, target)) {\n                onOutsideClick(el, target, containsElement);\n            }\n        }\n        window.addEventListener(\"click\", handleClick);\n        return function () {\n            window.removeEventListener(\"click\", handleClick);\n        };\n    }, [enabled, element, onOutsideClick]);\n}\n//# sourceMappingURL=useCloseOnOutsideClick.js.map"]},"metadata":{},"sourceType":"module"}