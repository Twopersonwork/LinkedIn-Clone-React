{"ast":null,"code":"function modify(base, modifier) {\n  if (!modifier) {\n    return base;\n  }\n\n  var hasOwn = Object.prototype.hasOwnProperty;\n  return Object.keys(modifier).reduce(function (s, mod) {\n    if (hasOwn.call(modifier, mod) && modifier[mod]) {\n      s = s + \" \" + base + \"--\" + mod;\n    }\n\n    return s;\n  }, base);\n}\n/**\n * Applies the BEM styled class name to an element.\n *\n * @see https://en.bem.info/methodology/css/\n * @param base - The base class to use\n * @returns a function to call that generates the full class name\n */\n\n\nexport function bem(base) {\n  if (process.env.NODE_ENV !== \"production\") {\n    if (!base) {\n      throw new Error(\"bem requires a base block class but none were provided.\");\n    }\n  }\n  /**\n   * Creates the full class name from the base block name. This can be called\n   * without any arguments which will just return the base block name (kind of\n   * worthless), or you can provide a child element name and modifiers.\n   *\n   * @param elementOrModifier - This is either the child element name or an\n   * object of modifiers to apply. This **must** be a string if the second\n   * argument is provided.\n   * @param modifier - Any optional modifiers to apply to the block and optional\n   * element.\n   * @returns the full class name\n   */\n\n\n  return function block(elementOrModifier, modifier) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (typeof elementOrModifier !== \"string\" && modifier) {\n        throw new TypeError(\"bem does not support having two modifier arguments.\");\n      }\n    }\n\n    if (!elementOrModifier) {\n      return base;\n    }\n\n    if (typeof elementOrModifier !== \"string\") {\n      return modify(base, elementOrModifier);\n    }\n\n    return modify(base + \"__\" + elementOrModifier, modifier);\n  };\n}","map":{"version":3,"sources":["../src/bem.ts"],"names":[],"mappings":"AAIA,SAAS,MAAT,CAAgB,IAAhB,EAA8B,QAA9B,EAAiD;AAC/C,MAAI,CAAC,QAAL,EAAe;AACb,WAAO,IAAP;AACD;;AAED,MAAM,MAAM,GAAG,MAAM,CAAC,SAAP,CAAiB,cAAhC;AACA,SAAO,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,MAAtB,CAA6B,UAAC,CAAD,EAAI,GAAJ,EAAO;AACzC,QAAI,MAAM,CAAC,IAAP,CAAY,QAAZ,EAAsB,GAAtB,KAA8B,QAAQ,CAAC,GAAD,CAA1C,EAAiD;AAC/C,MAAA,CAAC,GAAM,CAAC,GAAA,GAAD,GAAK,IAAL,GAAS,IAAT,GAAc,GAArB;AACD;;AAED,WAAO,CAAP;AACD,GANM,EAMJ,IANI,CAAP;AAOD;AAOD;;;;;;AAMG;;;AACH,OAAM,SAAU,GAAV,CAAc,IAAd,EAAyB;AAC7B,MAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAI,CAAC,IAAL,EAAW;AACT,YAAM,IAAI,KAAJ,CACJ,yDADI,CAAN;AAGD;AACF;AAED;;;;;;;;;;;AAWG;;;AACH,SAAO,SAAS,KAAT,CACL,iBADK,EAEL,QAFK,EAEc;AAEnB,QAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAI,OAAO,iBAAP,KAA6B,QAA7B,IAAyC,QAA7C,EAAuD;AACrD,cAAM,IAAI,SAAJ,CACJ,qDADI,CAAN;AAGD;AACF;;AAED,QAAI,CAAC,iBAAL,EAAwB;AACtB,aAAO,IAAP;AACD;;AAED,QAAI,OAAO,iBAAP,KAA6B,QAAjC,EAA2C;AACzC,aAAO,MAAM,CAAC,IAAD,EAAO,iBAAP,CAAb;AACD;;AAED,WAAO,MAAM,CAAI,IAAI,GAAA,IAAJ,GAAS,iBAAb,EAAkC,QAAlC,CAAb;AACD,GArBD;AAsBD","sourceRoot":"","sourcesContent":["function modify(base, modifier) {\n    if (!modifier) {\n        return base;\n    }\n    var hasOwn = Object.prototype.hasOwnProperty;\n    return Object.keys(modifier).reduce(function (s, mod) {\n        if (hasOwn.call(modifier, mod) && modifier[mod]) {\n            s = s + \" \" + base + \"--\" + mod;\n        }\n        return s;\n    }, base);\n}\n/**\n * Applies the BEM styled class name to an element.\n *\n * @see https://en.bem.info/methodology/css/\n * @param base - The base class to use\n * @returns a function to call that generates the full class name\n */\nexport function bem(base) {\n    if (process.env.NODE_ENV !== \"production\") {\n        if (!base) {\n            throw new Error(\"bem requires a base block class but none were provided.\");\n        }\n    }\n    /**\n     * Creates the full class name from the base block name. This can be called\n     * without any arguments which will just return the base block name (kind of\n     * worthless), or you can provide a child element name and modifiers.\n     *\n     * @param elementOrModifier - This is either the child element name or an\n     * object of modifiers to apply. This **must** be a string if the second\n     * argument is provided.\n     * @param modifier - Any optional modifiers to apply to the block and optional\n     * element.\n     * @returns the full class name\n     */\n    return function block(elementOrModifier, modifier) {\n        if (process.env.NODE_ENV !== \"production\") {\n            if (typeof elementOrModifier !== \"string\" && modifier) {\n                throw new TypeError(\"bem does not support having two modifier arguments.\");\n            }\n        }\n        if (!elementOrModifier) {\n            return base;\n        }\n        if (typeof elementOrModifier !== \"string\") {\n            return modify(base, elementOrModifier);\n        }\n        return modify(base + \"__\" + elementOrModifier, modifier);\n    };\n}\n//# sourceMappingURL=bem.js.map"]},"metadata":{},"sourceType":"module"}