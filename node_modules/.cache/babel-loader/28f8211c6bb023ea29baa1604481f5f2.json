{"ast":null,"code":"import { useEffect } from \"react\";\n/**\n * This is used with the `useScrollLock` effect to determine if the styles were\n * applied by scroll locking or not in the cleanup stage.\n */\n\nexport var DATA_RMD_NOSCROLL = \"data-rmd-noscroll\";\n/**\n * This will enable scroll locking for the provided element. Scroll locking\n * works by fixing the element within the page and hiding overflow for that\n * element.\n *\n * @param element - Either the `<body>` tag or an element within the page to\n * disable scroll for.\n * @internal\n */\n\nexport function enable(element) {\n  element.style.overflow = \"hidden\";\n  element.setAttribute(DATA_RMD_NOSCROLL, \"\");\n}\n/**\n * Attempts to disable the scroll locking behavior for an element. If the\n * element does not have `data-rmd-noscroll`, it will not be modified. This is\n * really just a safety catch to ensure that pre-existing styles aren't removed\n * on accident.\n *\n * If the `data-rmd-noscroll` attribute exists, overflow style and the\n * `data-rmd-noscroll` attribute will be removed.\n *\n * @param element - Either the `<body>` tag or an element within the page to\n * disable scroll locking for.\n * @internal\n */\n\nexport function disable(element) {\n  if (element.getAttribute(DATA_RMD_NOSCROLL) === null) {\n    return;\n  }\n\n  element.style.overflow = \"\";\n  element.removeAttribute(DATA_RMD_NOSCROLL);\n}\n/**\n * A hook that is used to dynamically add scroll locking to an element. By\n * default, this will use the main `<body>` tag for scroll locking, but a query\n * selector string or an HTML element can also be used instead.\n *\n * @param enabled - Boolean if the scroll locking behavior should be enabled\n * @param selectorOrElement - Either a query selector string, HTMLElement, or a\n * function that returns an HTMLElement to apply scroll locking to.\n */\n\nexport function useScrollLock(enabled, selectorOrElement) {\n  useEffect(function () {\n    if (!enabled || typeof document === \"undefined\") {\n      return;\n    }\n\n    var element = null;\n\n    if (typeof selectorOrElement === \"string\") {\n      element = document.querySelector(selectorOrElement);\n    } else if (typeof selectorOrElement === \"function\") {\n      element = selectorOrElement();\n    } else if (selectorOrElement) {\n      element = selectorOrElement;\n    } else {\n      element = document.body;\n    }\n\n    if (!element || element.getAttribute(DATA_RMD_NOSCROLL) !== null) {\n      return;\n    }\n\n    enable(element);\n    return function () {\n      disable(element);\n    };\n  }, [enabled, selectorOrElement]);\n}","map":{"version":3,"sources":["../../src/wia-aria/useScrollLock.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,OAA1B;AAEA;;;AAGG;;AACH,OAAO,IAAM,iBAAiB,GAAG,mBAA1B;AAEP;;;;;;;;AAQG;;AACH,OAAM,SAAU,MAAV,CAAiB,OAAjB,EAAqC;AACzC,EAAA,OAAO,CAAC,KAAR,CAAc,QAAd,GAAyB,QAAzB;AACA,EAAA,OAAO,CAAC,YAAR,CAAqB,iBAArB,EAAwC,EAAxC;AACD;AAED;;;;;;;;;;;;AAYG;;AACH,OAAM,SAAU,OAAV,CAAkB,OAAlB,EAAsC;AAC1C,MAAI,OAAO,CAAC,YAAR,CAAqB,iBAArB,MAA4C,IAAhD,EAAsD;AACpD;AACD;;AAED,EAAA,OAAO,CAAC,KAAR,CAAc,QAAd,GAAyB,EAAzB;AACA,EAAA,OAAO,CAAC,eAAR,CAAwB,iBAAxB;AACD;AAED;;;;;;;;AAQG;;AACH,OAAM,SAAU,aAAV,CACJ,OADI,EAEJ,iBAFI,EAEiE;AAErE,EAAA,SAAS,CAAC,YAAA;AACR,QAAI,CAAC,OAAD,IAAY,OAAO,QAAP,KAAoB,WAApC,EAAiD;AAC/C;AACD;;AAED,QAAI,OAAO,GAAuB,IAAlC;;AACA,QAAI,OAAO,iBAAP,KAA6B,QAAjC,EAA2C;AACzC,MAAA,OAAO,GAAG,QAAQ,CAAC,aAAT,CAAoC,iBAApC,CAAV;AACD,KAFD,MAEO,IAAI,OAAO,iBAAP,KAA6B,UAAjC,EAA6C;AAClD,MAAA,OAAO,GAAG,iBAAiB,EAA3B;AACD,KAFM,MAEA,IAAI,iBAAJ,EAAuB;AAC5B,MAAA,OAAO,GAAG,iBAAV;AACD,KAFM,MAEA;AACL,MAAA,OAAO,GAAG,QAAQ,CAAC,IAAnB;AACD;;AAED,QAAI,CAAC,OAAD,IAAY,OAAO,CAAC,YAAR,CAAqB,iBAArB,MAA4C,IAA5D,EAAkE;AAChE;AACD;;AAED,IAAA,MAAM,CAAC,OAAD,CAAN;AACA,WAAO,YAAA;AACL,MAAA,OAAO,CAAC,OAAD,CAAP;AACD,KAFD;AAGD,GAxBQ,EAwBN,CAAC,OAAD,EAAU,iBAAV,CAxBM,CAAT;AAyBD","sourceRoot":"","sourcesContent":["import { useEffect } from \"react\";\n/**\n * This is used with the `useScrollLock` effect to determine if the styles were\n * applied by scroll locking or not in the cleanup stage.\n */\nexport var DATA_RMD_NOSCROLL = \"data-rmd-noscroll\";\n/**\n * This will enable scroll locking for the provided element. Scroll locking\n * works by fixing the element within the page and hiding overflow for that\n * element.\n *\n * @param element - Either the `<body>` tag or an element within the page to\n * disable scroll for.\n * @internal\n */\nexport function enable(element) {\n    element.style.overflow = \"hidden\";\n    element.setAttribute(DATA_RMD_NOSCROLL, \"\");\n}\n/**\n * Attempts to disable the scroll locking behavior for an element. If the\n * element does not have `data-rmd-noscroll`, it will not be modified. This is\n * really just a safety catch to ensure that pre-existing styles aren't removed\n * on accident.\n *\n * If the `data-rmd-noscroll` attribute exists, overflow style and the\n * `data-rmd-noscroll` attribute will be removed.\n *\n * @param element - Either the `<body>` tag or an element within the page to\n * disable scroll locking for.\n * @internal\n */\nexport function disable(element) {\n    if (element.getAttribute(DATA_RMD_NOSCROLL) === null) {\n        return;\n    }\n    element.style.overflow = \"\";\n    element.removeAttribute(DATA_RMD_NOSCROLL);\n}\n/**\n * A hook that is used to dynamically add scroll locking to an element. By\n * default, this will use the main `<body>` tag for scroll locking, but a query\n * selector string or an HTML element can also be used instead.\n *\n * @param enabled - Boolean if the scroll locking behavior should be enabled\n * @param selectorOrElement - Either a query selector string, HTMLElement, or a\n * function that returns an HTMLElement to apply scroll locking to.\n */\nexport function useScrollLock(enabled, selectorOrElement) {\n    useEffect(function () {\n        if (!enabled || typeof document === \"undefined\") {\n            return;\n        }\n        var element = null;\n        if (typeof selectorOrElement === \"string\") {\n            element = document.querySelector(selectorOrElement);\n        }\n        else if (typeof selectorOrElement === \"function\") {\n            element = selectorOrElement();\n        }\n        else if (selectorOrElement) {\n            element = selectorOrElement;\n        }\n        else {\n            element = document.body;\n        }\n        if (!element || element.getAttribute(DATA_RMD_NOSCROLL) !== null) {\n            return;\n        }\n        enable(element);\n        return function () {\n            disable(element);\n        };\n    }, [enabled, selectorOrElement]);\n}\n//# sourceMappingURL=useScrollLock.js.map"]},"metadata":{},"sourceType":"module"}