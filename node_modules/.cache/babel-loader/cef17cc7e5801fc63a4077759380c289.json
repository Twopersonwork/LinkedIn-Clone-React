{"ast":null,"code":"import { useEffect } from \"react\";\nimport { useRefCache } from \"./useRefCache\";\nimport { useToggle } from \"./useToggle\";\n/**\n * Simple hook to use an interval with auto setup and teardown. The provided\n * functions will be guaranteed to not change and are memoized.\n *\n * @param callback - The callback function to call\n * @param delay - The time in milliseconds the timer should delay between\n * executions of the callback function\n * @param defaultRunning - Boolean if the interval should be started immediately\n * @returns a list containing a boolean if the interval is running, function to\n * start the interval, and a function to stop the interval.\n */\n\nexport function useInterval(callback, delay, defaultRunning) {\n  if (defaultRunning === void 0) {\n    defaultRunning = false;\n  }\n\n  var ref = useRefCache(callback);\n\n  var _a = useToggle(defaultRunning),\n      running = _a[0],\n      start = _a[1],\n      stop = _a[2];\n\n  useEffect(function () {\n    if (!running) {\n      return;\n    }\n\n    var interval = window.setInterval(function () {\n      ref.current(stop);\n    }, delay);\n    return function () {\n      window.clearInterval(interval);\n    }; // disabled since useRefCache for the callback\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [delay, running, stop]);\n  return [running, start, stop];\n}","map":{"version":3,"sources":["../src/useInterval.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,OAA1B;AAEA,SAAS,WAAT,QAA4B,eAA5B;AACA,SAAS,SAAT,QAA0B,aAA1B;AAOA;;;;;;;;;;AAUG;;AACH,OAAM,SAAU,WAAV,CACJ,QADI,EAEJ,KAFI,EAGJ,cAHI,EAGkB;AAAtB,MAAA,cAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,cAAA,GAAA,KAAA;AAAsB;;AAEtB,MAAM,GAAG,GAAG,WAAW,CAAC,QAAD,CAAvB;;AAEM,MAAA,EAAA,GAAyB,SAAS,CAAC,cAAD,CAAlC;AAAA,MAAC,OAAO,GAAA,EAAA,CAAA,CAAA,CAAR;AAAA,MAAU,KAAK,GAAA,EAAA,CAAA,CAAA,CAAf;AAAA,MAAiB,IAAI,GAAA,EAAA,CAAA,CAAA,CAArB;;AAEN,EAAA,SAAS,CAAC,YAAA;AACR,QAAI,CAAC,OAAL,EAAc;AACZ;AACD;;AAED,QAAM,QAAQ,GAAG,MAAM,CAAC,WAAP,CAAmB,YAAA;AAClC,MAAA,GAAG,CAAC,OAAJ,CAAY,IAAZ;AACD,KAFgB,EAEd,KAFc,CAAjB;AAGA,WAAO,YAAA;AACL,MAAA,MAAM,CAAC,aAAP,CAAqB,QAArB;AACD,KAFD,CARQ,CAWR;AACA;AACD,GAbQ,EAaN,CAAC,KAAD,EAAQ,OAAR,EAAiB,IAAjB,CAbM,CAAT;AAeA,SAAO,CAAC,OAAD,EAAU,KAAV,EAAiB,IAAjB,CAAP;AACD","sourceRoot":"","sourcesContent":["import { useEffect } from \"react\";\nimport { useRefCache } from \"./useRefCache\";\nimport { useToggle } from \"./useToggle\";\n/**\n * Simple hook to use an interval with auto setup and teardown. The provided\n * functions will be guaranteed to not change and are memoized.\n *\n * @param callback - The callback function to call\n * @param delay - The time in milliseconds the timer should delay between\n * executions of the callback function\n * @param defaultRunning - Boolean if the interval should be started immediately\n * @returns a list containing a boolean if the interval is running, function to\n * start the interval, and a function to stop the interval.\n */\nexport function useInterval(callback, delay, defaultRunning) {\n    if (defaultRunning === void 0) { defaultRunning = false; }\n    var ref = useRefCache(callback);\n    var _a = useToggle(defaultRunning), running = _a[0], start = _a[1], stop = _a[2];\n    useEffect(function () {\n        if (!running) {\n            return;\n        }\n        var interval = window.setInterval(function () {\n            ref.current(stop);\n        }, delay);\n        return function () {\n            window.clearInterval(interval);\n        };\n        // disabled since useRefCache for the callback\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [delay, running, stop]);\n    return [running, start, stop];\n}\n//# sourceMappingURL=useInterval.js.map"]},"metadata":{},"sourceType":"module"}