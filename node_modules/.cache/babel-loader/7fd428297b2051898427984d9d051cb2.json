{"ast":null,"code":"import { useEffect } from \"react\";\nimport { delegateEvent } from \"../events/delegateEvent\";\nimport { useRefCache } from \"../useRefCache\";\n/**\n * This is a simple hook that will attach a throttled resize event listener when\n * mounted, and detach when it unmounts.\n *\n * This hook only works for entire app resize events. If you are looking for\n * specific element resize events, check out the `ResizeObserver` component or\n * `useReiszeObserver` hook instead.\n */\n\nexport function useResizeListener(_a) {\n  var onResize = _a.onResize,\n      options = _a.options,\n      immediate = _a.immediate,\n      _b = _a.enabled,\n      enabled = _b === void 0 ? true : _b;\n  var callback = useRefCache(onResize);\n  useEffect(function () {\n    if (!enabled) {\n      return;\n    }\n\n    var eventHandler = delegateEvent(\"resize\", window, true, options);\n\n    var handler = function (event) {\n      return callback.current(event);\n    };\n\n    eventHandler.add(handler);\n\n    if (immediate && typeof window !== \"undefined\") {\n      window.dispatchEvent(new UIEvent(\"resize\"));\n    }\n\n    return function () {\n      eventHandler.remove(handler);\n    }; // disabled since useRefCache for callback and don't want immediate to\n    // re-trigger it.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [options, enabled]);\n}","map":{"version":3,"sources":["../../src/sizing/useResizeListener.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,OAA1B;AAEA,SAAS,aAAT,QAA8B,yBAA9B;AACA,SAAS,WAAT,QAA4B,gBAA5B;AA6BA;;;;;;;AAOG;;AACH,OAAM,SAAU,iBAAV,CAA4B,EAA5B,EAKkB;MAJtB,QAAQ,GAAA,EAAA,CAAA,Q;MACR,OAAO,GAAA,EAAA,CAAA,O;MACP,SAAS,GAAA,EAAA,CAAA,S;MACT,EAAA,GAAA,EAAA,CAAA,O;MAAA,OAAO,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,IAAH,GAAO,E;AAEd,MAAM,QAAQ,GAAG,WAAW,CAAC,QAAD,CAA5B;AACA,EAAA,SAAS,CAAC,YAAA;AACR,QAAI,CAAC,OAAL,EAAc;AACZ;AACD;;AAED,QAAM,YAAY,GAAG,aAAa,CAAC,QAAD,EAAW,MAAX,EAAmB,IAAnB,EAAyB,OAAzB,CAAlC;;AACA,QAAM,OAAO,GAAG,UAAC,KAAD,EAAa;AAAW,aAAA,QAAQ,CAAC,OAAT,CAAA,KAAA,CAAA;AAAuB,KAA/D;;AACA,IAAA,YAAY,CAAC,GAAb,CAAiB,OAAjB;;AAEA,QAAI,SAAS,IAAI,OAAO,MAAP,KAAkB,WAAnC,EAAgD;AAC9C,MAAA,MAAM,CAAC,aAAP,CAAqB,IAAI,OAAJ,CAAY,QAAZ,CAArB;AACD;;AAED,WAAO,YAAA;AACL,MAAA,YAAY,CAAC,MAAb,CAAoB,OAApB;AACD,KAFD,CAbQ,CAgBR;AACA;AACA;AACD,GAnBQ,EAmBN,CAAC,OAAD,EAAU,OAAV,CAnBM,CAAT;AAoBD","sourceRoot":"","sourcesContent":["import { useEffect } from \"react\";\nimport { delegateEvent } from \"../events/delegateEvent\";\nimport { useRefCache } from \"../useRefCache\";\n/**\n * This is a simple hook that will attach a throttled resize event listener when\n * mounted, and detach when it unmounts.\n *\n * This hook only works for entire app resize events. If you are looking for\n * specific element resize events, check out the `ResizeObserver` component or\n * `useReiszeObserver` hook instead.\n */\nexport function useResizeListener(_a) {\n    var onResize = _a.onResize, options = _a.options, immediate = _a.immediate, _b = _a.enabled, enabled = _b === void 0 ? true : _b;\n    var callback = useRefCache(onResize);\n    useEffect(function () {\n        if (!enabled) {\n            return;\n        }\n        var eventHandler = delegateEvent(\"resize\", window, true, options);\n        var handler = function (event) { return callback.current(event); };\n        eventHandler.add(handler);\n        if (immediate && typeof window !== \"undefined\") {\n            window.dispatchEvent(new UIEvent(\"resize\"));\n        }\n        return function () {\n            eventHandler.remove(handler);\n        };\n        // disabled since useRefCache for callback and don't want immediate to\n        // re-trigger it.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [options, enabled]);\n}\n//# sourceMappingURL=useResizeListener.js.map"]},"metadata":{},"sourceType":"module"}