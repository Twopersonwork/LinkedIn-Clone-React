{"ast":null,"code":"import { useEffect } from \"react\";\nimport { focusElementWithin } from \"./focusElementWithin\";\nimport { getInstance } from \"./getInstance\";\n/**\n * This hook is used to focus an element once a component has mounted. To help\n * with keyboard click events, it will actually wait for an animation frame\n * before attempting to focus as an enter key might click both elements at the\n * same time.\n *\n * This hook will first focus the HTMLElement (if it is focusable) and then\n * focus an element based on the defaultFocus prop.\n *\n * @param refOrInstance - This is either a ref object containing the element to\n * focus or the element itself.\n * @param defaultFocus - The element to focus within the containing element once\n * it has been mounted. This can either be \"first\" or \"last\" to focus the first\n * or last focusable elements or a query selector string to find an element to\n * focus.\n * @param preventScroll - Boolean if the focus events should try to prevent the\n * default scroll-into-view behavior. This is generally recommended to be kept\n * as `false`, but can be useful to enable if the component mounts offscreen\n * during a transition.\n * @param programatic - Boolean if programatically focusable elements should be\n * included instead of only tab focusable.\n * @param disabled - Boolean if the focus behavior should be disabled.\n */\n\nexport function useFocusOnMount(refOrInstance, defaultFocus, preventScroll, programatic, disabled) {\n  if (preventScroll === void 0) {\n    preventScroll = false;\n  }\n\n  if (programatic === void 0) {\n    programatic = false;\n  }\n\n  if (disabled === void 0) {\n    disabled = false;\n  }\n\n  useEffect(function () {\n    if (disabled) {\n      return;\n    }\n\n    var frame = window.requestAnimationFrame(function () {\n      var instance = getInstance(refOrInstance);\n\n      if (!instance) {\n        return;\n      }\n\n      instance.focus({\n        preventScroll: preventScroll\n      });\n      focusElementWithin(instance, defaultFocus, programatic, preventScroll);\n    });\n    return function () {\n      window.cancelAnimationFrame(frame);\n    };\n  }, [defaultFocus, disabled, refOrInstance, programatic, preventScroll]);\n}","map":{"version":3,"sources":["../../src/wia-aria/useFocusOnMount.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,OAA1B;AAEA,SAAgB,kBAAhB,QAA0C,sBAA1C;AACA,SAAS,WAAT,QAA2C,eAA3C;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBG;;AACH,OAAM,SAAU,eAAV,CACJ,aADI,EAEJ,YAFI,EAGJ,aAHI,EAIJ,WAJI,EAKJ,QALI,EAKY;AAFhB,MAAA,aAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,aAAA,GAAA,KAAA;AAAqB;;AACrB,MAAA,WAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,WAAA,GAAA,KAAA;AAAmB;;AACnB,MAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,KAAA;AAAgB;;AAEhB,EAAA,SAAS,CAAC,YAAA;AACR,QAAI,QAAJ,EAAc;AACZ;AACD;;AAED,QAAM,KAAK,GAAG,MAAM,CAAC,qBAAP,CAA6B,YAAA;AACzC,UAAM,QAAQ,GAAG,WAAW,CAAC,aAAD,CAA5B;;AACA,UAAI,CAAC,QAAL,EAAe;AACb;AACD;;AAED,MAAA,QAAQ,CAAC,KAAT,CAAe;AAAE,QAAA,aAAa,EAAA;AAAf,OAAf;AACA,MAAA,kBAAkB,CAAC,QAAD,EAAW,YAAX,EAAyB,WAAzB,EAAsC,aAAtC,CAAlB;AACD,KARa,CAAd;AAUA,WAAO,YAAA;AACL,MAAA,MAAM,CAAC,oBAAP,CAA4B,KAA5B;AACD,KAFD;AAGD,GAlBQ,EAkBN,CAAC,YAAD,EAAe,QAAf,EAAyB,aAAzB,EAAwC,WAAxC,EAAqD,aAArD,CAlBM,CAAT;AAmBD","sourceRoot":"","sourcesContent":["import { useEffect } from \"react\";\nimport { focusElementWithin } from \"./focusElementWithin\";\nimport { getInstance } from \"./getInstance\";\n/**\n * This hook is used to focus an element once a component has mounted. To help\n * with keyboard click events, it will actually wait for an animation frame\n * before attempting to focus as an enter key might click both elements at the\n * same time.\n *\n * This hook will first focus the HTMLElement (if it is focusable) and then\n * focus an element based on the defaultFocus prop.\n *\n * @param refOrInstance - This is either a ref object containing the element to\n * focus or the element itself.\n * @param defaultFocus - The element to focus within the containing element once\n * it has been mounted. This can either be \"first\" or \"last\" to focus the first\n * or last focusable elements or a query selector string to find an element to\n * focus.\n * @param preventScroll - Boolean if the focus events should try to prevent the\n * default scroll-into-view behavior. This is generally recommended to be kept\n * as `false`, but can be useful to enable if the component mounts offscreen\n * during a transition.\n * @param programatic - Boolean if programatically focusable elements should be\n * included instead of only tab focusable.\n * @param disabled - Boolean if the focus behavior should be disabled.\n */\nexport function useFocusOnMount(refOrInstance, defaultFocus, preventScroll, programatic, disabled) {\n    if (preventScroll === void 0) { preventScroll = false; }\n    if (programatic === void 0) { programatic = false; }\n    if (disabled === void 0) { disabled = false; }\n    useEffect(function () {\n        if (disabled) {\n            return;\n        }\n        var frame = window.requestAnimationFrame(function () {\n            var instance = getInstance(refOrInstance);\n            if (!instance) {\n                return;\n            }\n            instance.focus({ preventScroll: preventScroll });\n            focusElementWithin(instance, defaultFocus, programatic, preventScroll);\n        });\n        return function () {\n            window.cancelAnimationFrame(frame);\n        };\n    }, [defaultFocus, disabled, refOrInstance, programatic, preventScroll]);\n}\n//# sourceMappingURL=useFocusOnMount.js.map"]},"metadata":{},"sourceType":"module"}