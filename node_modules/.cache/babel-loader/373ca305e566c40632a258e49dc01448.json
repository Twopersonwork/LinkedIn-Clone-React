{"ast":null,"code":"/**\n * This is a small util that is used to transform a search string with common\n * patterns.\n *\n * @param value - The string to transform\n * @param lowercase - Boolean if the value should be lowercased for\n * case-insensitive searches\n * @param trim - Boolean if the leading and trailing whitespace should be\n * trimmed\n * @param ignoreWhitespace - Boolean if all whitespace should be ignored. This\n * will take precedence over the `trim` parameter if set to true.\n * @returns The transformed search string\n * @internal\n */\nexport function getSearchString(value, lowercase, trim, ignoreWhitespace) {\n  if (lowercase === void 0) {\n    lowercase = false;\n  }\n\n  if (trim === void 0) {\n    trim = false;\n  }\n\n  if (ignoreWhitespace === void 0) {\n    ignoreWhitespace = false;\n  }\n\n  if (lowercase) {\n    value = value.toLowerCase();\n  }\n\n  if (ignoreWhitespace) {\n    value = value.replace(/\\s/g, \"\");\n  } else if (trim) {\n    value = value.trim();\n  }\n\n  return value;\n}\n/**\n * The default implementation of the getItemValue search option that will\n * attempt to \"stringify\" any unknown item as a string.\n *\n * @param item - The current item to transform\n * @param valueKey - The key to use that should hold the value if the item is an\n * object\n * @returns the item as a string\n * @internal\n */\n\nexport function getItemValue(item, valueKey) {\n  if (valueKey === void 0) {\n    valueKey = \"value\";\n  }\n\n  switch (typeof item) {\n    case \"string\":\n      return item;\n\n    case \"number\":\n      return Number.isNaN(item) ? \"\" : \"\" + item;\n\n    case \"function\":\n      return getItemValue(item(), valueKey);\n\n    case \"object\":\n      return item ? getItemValue(item[valueKey], valueKey) : \"\";\n\n    default:\n      return \"\";\n  }\n}\nexport var DEFAULT_GET_ITEM_VALUE = getItemValue;\nexport var DEFAULT_VALUE_KEY = \"value\";\nexport var DEFAULT_TRIM = true;\nexport var DEFAULT_IGNORE_WHITESPACE = false;\nexport var DEFAULT_SEARCH_RESET_TIME = 500;\nexport var DEFAULT_SEARCH_OPTIONS = {\n  getItemValue: DEFAULT_GET_ITEM_VALUE,\n  valueKey: DEFAULT_VALUE_KEY,\n  trim: DEFAULT_TRIM,\n  ignoreWhitespace: DEFAULT_IGNORE_WHITESPACE\n};","map":{"version":3,"sources":["../../src/search/utils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAaG;AACH,OAAM,SAAU,eAAV,CACJ,KADI,EAEJ,SAFI,EAGJ,IAHI,EAIJ,gBAJI,EAIoB;AAFxB,MAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,KAAA;AAAiB;;AACjB,MAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,IAAA,GAAA,KAAA;AAAY;;AACZ,MAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,gBAAA,GAAA,KAAA;AAAwB;;AAExB,MAAI,SAAJ,EAAe;AACb,IAAA,KAAK,GAAG,KAAK,CAAC,WAAN,EAAR;AACD;;AAED,MAAI,gBAAJ,EAAsB;AACpB,IAAA,KAAK,GAAG,KAAK,CAAC,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAR;AACD,GAFD,MAEO,IAAI,IAAJ,EAAU;AACf,IAAA,KAAK,GAAG,KAAK,CAAC,IAAN,EAAR;AACD;;AAED,SAAO,KAAP;AACD;AAED;;;;;;;;;AASG;;AACH,OAAM,SAAU,YAAV,CAAuB,IAAvB,EAAsC,QAAtC,EAAwD;AAAlB,MAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,OAAA;AAAkB;;AAC5D,UAAQ,OAAO,IAAf;AACE,SAAK,QAAL;AACE,aAAO,IAAP;;AACF,SAAK,QAAL;AACE,aAAO,MAAM,CAAC,KAAP,CAAa,IAAb,IAAqB,EAArB,GAA0B,KAAG,IAApC;;AACF,SAAK,UAAL;AACE,aAAO,YAAY,CAAC,IAAI,EAAL,EAAS,QAAT,CAAnB;;AACF,SAAK,QAAL;AACE,aAAO,IAAI,GACP,YAAY,CAAE,IAAgC,CAAC,QAAD,CAAlC,EAA8C,QAA9C,CADL,GAEP,EAFJ;;AAGF;AACE,aAAO,EAAP;AAZJ;AAcD;AAiDD,OAAO,IAAM,sBAAsB,GAAG,YAA/B;AACP,OAAO,IAAM,iBAAiB,GAAG,OAA1B;AACP,OAAO,IAAM,YAAY,GAAG,IAArB;AACP,OAAO,IAAM,yBAAyB,GAAG,KAAlC;AACP,OAAO,IAAM,yBAAyB,GAAG,GAAlC;AAEP,OAAO,IAAM,sBAAsB,GAA4B;AAC7D,EAAA,YAAY,EAAE,sBAD+C;AAE7D,EAAA,QAAQ,EAAE,iBAFmD;AAG7D,EAAA,IAAI,EAAE,YAHuD;AAI7D,EAAA,gBAAgB,EAAE;AAJ2C,CAAxD","sourceRoot":"","sourcesContent":["/**\n * This is a small util that is used to transform a search string with common\n * patterns.\n *\n * @param value - The string to transform\n * @param lowercase - Boolean if the value should be lowercased for\n * case-insensitive searches\n * @param trim - Boolean if the leading and trailing whitespace should be\n * trimmed\n * @param ignoreWhitespace - Boolean if all whitespace should be ignored. This\n * will take precedence over the `trim` parameter if set to true.\n * @returns The transformed search string\n * @internal\n */\nexport function getSearchString(value, lowercase, trim, ignoreWhitespace) {\n    if (lowercase === void 0) { lowercase = false; }\n    if (trim === void 0) { trim = false; }\n    if (ignoreWhitespace === void 0) { ignoreWhitespace = false; }\n    if (lowercase) {\n        value = value.toLowerCase();\n    }\n    if (ignoreWhitespace) {\n        value = value.replace(/\\s/g, \"\");\n    }\n    else if (trim) {\n        value = value.trim();\n    }\n    return value;\n}\n/**\n * The default implementation of the getItemValue search option that will\n * attempt to \"stringify\" any unknown item as a string.\n *\n * @param item - The current item to transform\n * @param valueKey - The key to use that should hold the value if the item is an\n * object\n * @returns the item as a string\n * @internal\n */\nexport function getItemValue(item, valueKey) {\n    if (valueKey === void 0) { valueKey = \"value\"; }\n    switch (typeof item) {\n        case \"string\":\n            return item;\n        case \"number\":\n            return Number.isNaN(item) ? \"\" : \"\" + item;\n        case \"function\":\n            return getItemValue(item(), valueKey);\n        case \"object\":\n            return item\n                ? getItemValue(item[valueKey], valueKey)\n                : \"\";\n        default:\n            return \"\";\n    }\n}\nexport var DEFAULT_GET_ITEM_VALUE = getItemValue;\nexport var DEFAULT_VALUE_KEY = \"value\";\nexport var DEFAULT_TRIM = true;\nexport var DEFAULT_IGNORE_WHITESPACE = false;\nexport var DEFAULT_SEARCH_RESET_TIME = 500;\nexport var DEFAULT_SEARCH_OPTIONS = {\n    getItemValue: DEFAULT_GET_ITEM_VALUE,\n    valueKey: DEFAULT_VALUE_KEY,\n    trim: DEFAULT_TRIM,\n    ignoreWhitespace: DEFAULT_IGNORE_WHITESPACE,\n};\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}