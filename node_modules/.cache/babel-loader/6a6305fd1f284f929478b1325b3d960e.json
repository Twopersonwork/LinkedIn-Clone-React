{"ast":null,"code":"/**\n * The default  behavior when pressing the `\"Enter\"` key on a form control\n * (`input`, `textarea`, `select`) is to submit the form that the form control\n * is in. This util will try to polyfill this behavior for custom widgets that\n * use are using a role to act as a form control.\n *\n * The way this works is:\n * - Check if the `event.key` is the `\"Enter\"` key. Do nothing if it is not.\n * - Call `event.preventDefault()` and `event.stopPropagation()` to prevent\n *   other unwanted keyboard behavior\n * - Check the event target to see if it is contained in a `<form>`\n * - Try to find a submit button and click it by:\n *   - First check with `form.querySelector('[type=\"submit\"]')`\n *   - Fallback to `document.querySelector('[type=\"submit\"][form=\"{{FORM_ID}}\"]')`\n *     - submit buttons can be placed outside of the form and link it back using\n *       the `form` attribute pointing to the id of the form\n *\n *\n * The reason the submit button has to be found and clicked is because calling\n * `form.submit()` won't actually fire any attached `form.onsubmit` event\n * handlers. If you click the submit button though, the `form.onsubmit` handlers\n * will be called correctly.\n *\n * @param event - The keyboard event that should attempt to submit the form when\n * the enter key is presssed.\n * @returns `true` if the `event.key` was the `\"Enter\"` key so that other\n * keydown logic can be ignored.\n * @remarks \\@since 2.7.0\n */\nexport function tryToSubmitRelatedForm(event) {\n  var _a, _b;\n\n  if (event.key !== \"Enter\") {\n    return false;\n  }\n\n  event.preventDefault();\n  event.stopPropagation();\n  /* istanbul ignore next */\n\n  var form = (_b = (_a = event.currentTarget) === null || _a === void 0 ? void 0 : _a.closest) === null || _b === void 0 ? void 0 : _b.call(_a, \"form\");\n  var submit = form === null || form === void 0 ? void 0 : form.querySelector('[type=\"submit\"]');\n\n  if (!submit && (form === null || form === void 0 ? void 0 : form.id)) {\n    submit = document.querySelector(\"[type=\\\"submit\\\"][form=\\\"\" + form.id + \"\\\"]\");\n  }\n\n  submit === null || submit === void 0 ? void 0 : submit.click();\n  return true;\n}","map":{"version":3,"sources":["../../src/wia-aria/tryToSubmitRelatedForm.ts"],"names":[],"mappings":"AAUA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BG;AACH,OAAM,SAAU,sBAAV,CACJ,KADI,EAC6B;;;AAEjC,MAAI,KAAK,CAAC,GAAN,KAAc,OAAlB,EAA2B;AACzB,WAAO,KAAP;AACD;;AAED,EAAA,KAAK,CAAC,cAAN;AACA,EAAA,KAAK,CAAC,eAAN;AAEA;;AACA,MAAM,IAAI,GAAG,CAAA,EAAA,GAAA,CAAA,EAAA,GAAC,KAAK,CAAC,aAAP,MAAgC,IAAhC,IAAgC,EAAA,KAAA,KAAA,CAAhC,GAAgC,KAAA,CAAhC,GAAgC,EAAA,CAAE,OAAlC,MAAyC,IAAzC,IAAyC,EAAA,KAAA,KAAA,CAAzC,GAAyC,KAAA,CAAzC,GAAyC,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,MAAH,CAAtD;AACA,MAAI,MAAM,GAAG,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,aAAN,CAAuC,iBAAvC,CAAb;;AACA,MAAI,CAAC,MAAD,KAAW,IAAI,KAAA,IAAJ,IAAA,IAAI,KAAA,KAAA,CAAJ,GAAI,KAAA,CAAJ,GAAA,IAAI,CAAE,EAAjB,CAAJ,EAAyB;AACvB,IAAA,MAAM,GAAG,QAAQ,CAAC,aAAT,CACP,8BAAyB,IAAI,CAAC,EAA9B,GAAgC,KADzB,CAAT;AAGD;;AAED,EAAA,MAAM,KAAA,IAAN,IAAA,MAAM,KAAA,KAAA,CAAN,GAAM,KAAA,CAAN,GAAA,MAAM,CAAE,KAAR,EAAA;AACA,SAAO,IAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * The default  behavior when pressing the `\"Enter\"` key on a form control\n * (`input`, `textarea`, `select`) is to submit the form that the form control\n * is in. This util will try to polyfill this behavior for custom widgets that\n * use are using a role to act as a form control.\n *\n * The way this works is:\n * - Check if the `event.key` is the `\"Enter\"` key. Do nothing if it is not.\n * - Call `event.preventDefault()` and `event.stopPropagation()` to prevent\n *   other unwanted keyboard behavior\n * - Check the event target to see if it is contained in a `<form>`\n * - Try to find a submit button and click it by:\n *   - First check with `form.querySelector('[type=\"submit\"]')`\n *   - Fallback to `document.querySelector('[type=\"submit\"][form=\"{{FORM_ID}}\"]')`\n *     - submit buttons can be placed outside of the form and link it back using\n *       the `form` attribute pointing to the id of the form\n *\n *\n * The reason the submit button has to be found and clicked is because calling\n * `form.submit()` won't actually fire any attached `form.onsubmit` event\n * handlers. If you click the submit button though, the `form.onsubmit` handlers\n * will be called correctly.\n *\n * @param event - The keyboard event that should attempt to submit the form when\n * the enter key is presssed.\n * @returns `true` if the `event.key` was the `\"Enter\"` key so that other\n * keydown logic can be ignored.\n * @remarks \\@since 2.7.0\n */\nexport function tryToSubmitRelatedForm(event) {\n    var _a, _b;\n    if (event.key !== \"Enter\") {\n        return false;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    /* istanbul ignore next */\n    var form = (_b = (_a = event.currentTarget) === null || _a === void 0 ? void 0 : _a.closest) === null || _b === void 0 ? void 0 : _b.call(_a, \"form\");\n    var submit = form === null || form === void 0 ? void 0 : form.querySelector('[type=\"submit\"]');\n    if (!submit && (form === null || form === void 0 ? void 0 : form.id)) {\n        submit = document.querySelector(\"[type=\\\"submit\\\"][form=\\\"\" + form.id + \"\\\"]\");\n    }\n    submit === null || submit === void 0 ? void 0 : submit.click();\n    return true;\n}\n//# sourceMappingURL=tryToSubmitRelatedForm.js.map"]},"metadata":{},"sourceType":"module"}