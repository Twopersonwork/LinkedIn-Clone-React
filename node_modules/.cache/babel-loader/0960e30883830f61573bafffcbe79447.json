{"ast":null,"code":"var delegatedEvents = [];\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n\n/**\n * Creates the delegated event handler that will run all the callbacks once an\n * event happens. The callbacks' invocation can also be throttled for event\n * types that trigger rapidly for additional performance.\n *\n * The `<K extends keyof WindowEventMap` is a nice thing I found while looking\n * through the `lib.d.ts` implementation of `addEventListener` that will allow\n * you to get the \"correct\" event type when using the `add` and `remove`\n * functions once you have created this event handler. Otherwise there'd be ts\n * errors trying to do `MouseEvent` or `KeyboardEvent` in your listeners.\n */\n\nfunction createEventHandler(throttle, callbacks) {\n  var running = false;\n\n  var runCallbacks = function (event) {\n    return function () {\n      for (var i = 0; i < callbacks.length; i += 1) {\n        callbacks[i](event);\n      }\n\n      running = false;\n    };\n  };\n\n  return function eventHandler(event) {\n    if (!throttle) {\n      runCallbacks(event)();\n      return;\n    }\n\n    if (running) {\n      return;\n    }\n\n    running = true;\n    window.requestAnimationFrame(runCallbacks(event));\n  };\n}\n/* eslint-enable @typescript-eslint/explicit-function-return-type */\n\n/**\n * Creates a throttled event handler for the provided event type and event\n * target.\n */\n\n\nfunction createDelegatedEventHandler(eventType, eventTarget, throttle, options) {\n  if (eventTarget === void 0) {\n    eventTarget = window;\n  }\n\n  if (throttle === void 0) {\n    throttle = false;\n  }\n\n  var callbacks = [];\n  var handler = createEventHandler(throttle, callbacks);\n  return {\n    /**\n     * Attempts to add the provided callback to the list of callbacks for the\n     * throttled event. If this is the first callback to be added, the throttled\n     * event will also be started.\n     */\n    add: function (callback) {\n      if (!callbacks.length) {\n        eventTarget.addEventListener(eventType, handler, options);\n      }\n\n      if (callbacks.indexOf(callback) === -1) {\n        callbacks.push(callback);\n      }\n    },\n\n    /**\n     * Attempts to remove the provided callback from the lsit of callbacks for\n     * the throttled event. If this is the last callback that was removed, the\n     * throttled event will also be stopped.\n     */\n    remove: function (callback) {\n      var i = callbacks.indexOf(callback);\n\n      if (i >= 0) {\n        callbacks.splice(i, 1);\n\n        if (!callbacks.length) {\n          eventTarget.removeEventListener(eventType, handler, options);\n        }\n      }\n    }\n  };\n}\n/**\n * Creates a delegated event listener using custom events. Most of this code\n * comes from the MDN about resize listeners.\n *\n * This will return an object for adding or removing event handlers for the\n * provided `eventType` since only one base throttled event listener will be\n * created. Each callback that is added will be called with the event each time\n * the event is triggered. This does mean that you will manually need to remove\n * your callback like normal or else it can be called when no longer in use.\n * This also means that it doesn't \"hurt\" to call this function without\n * immediately calling the `add` function since the event won't start until\n * there is at least 1 callback.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/Events/resize#Examples\n * @param eventType - One of the event types that should be used to create a\n * delegated event for. This should be things like resize, click, scroll, etc.\n * @param eventTarget - The target that should have the delegated event handler\n * attached to. This is normally the window, but can be any element as needed.\n * @param throttle - Boolean if the event should be throttled or not. Normally\n * only event types like resize or scroll should be throttled for performance\n * boosts, but anything can be.\n * @returns The delegated event handler that allows you to add or remove\n * `EventListener`s to that event.\n */\n\n\nexport function delegateEvent(eventType, eventTarget, throttle, options) {\n  if (eventTarget === void 0) {\n    eventTarget = window;\n  }\n\n  if (throttle === void 0) {\n    throttle = eventType === \"resize\" || eventType === \"scroll\";\n  }\n\n  var index = delegatedEvents.findIndex(function (event) {\n    return event.type === eventType && event.target === eventTarget && event.options === options && event.throttle === throttle;\n  });\n\n  if (index === -1) {\n    delegatedEvents.push({\n      type: eventType,\n      target: eventTarget,\n      options: options,\n      throttle: throttle,\n      handler: createDelegatedEventHandler(eventType, eventTarget, throttle, options)\n    });\n    index = delegatedEvents.length - 1;\n  }\n\n  return delegatedEvents[index].handler;\n}","map":{"version":3,"sources":["../../src/events/delegateEvent.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var delegatedEvents = [];\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/**\n * Creates the delegated event handler that will run all the callbacks once an\n * event happens. The callbacks' invocation can also be throttled for event\n * types that trigger rapidly for additional performance.\n *\n * The `<K extends keyof WindowEventMap` is a nice thing I found while looking\n * through the `lib.d.ts` implementation of `addEventListener` that will allow\n * you to get the \"correct\" event type when using the `add` and `remove`\n * functions once you have created this event handler. Otherwise there'd be ts\n * errors trying to do `MouseEvent` or `KeyboardEvent` in your listeners.\n */\nfunction createEventHandler(throttle, callbacks) {\n    var running = false;\n    var runCallbacks = function (event) { return function () {\n        for (var i = 0; i < callbacks.length; i += 1) {\n            callbacks[i](event);\n        }\n        running = false;\n    }; };\n    return function eventHandler(event) {\n        if (!throttle) {\n            runCallbacks(event)();\n            return;\n        }\n        if (running) {\n            return;\n        }\n        running = true;\n        window.requestAnimationFrame(runCallbacks(event));\n    };\n}\n/* eslint-enable @typescript-eslint/explicit-function-return-type */\n/**\n * Creates a throttled event handler for the provided event type and event\n * target.\n */\nfunction createDelegatedEventHandler(eventType, eventTarget, throttle, options) {\n    if (eventTarget === void 0) { eventTarget = window; }\n    if (throttle === void 0) { throttle = false; }\n    var callbacks = [];\n    var handler = createEventHandler(throttle, callbacks);\n    return {\n        /**\n         * Attempts to add the provided callback to the list of callbacks for the\n         * throttled event. If this is the first callback to be added, the throttled\n         * event will also be started.\n         */\n        add: function (callback) {\n            if (!callbacks.length) {\n                eventTarget.addEventListener(eventType, handler, options);\n            }\n            if (callbacks.indexOf(callback) === -1) {\n                callbacks.push(callback);\n            }\n        },\n        /**\n         * Attempts to remove the provided callback from the lsit of callbacks for\n         * the throttled event. If this is the last callback that was removed, the\n         * throttled event will also be stopped.\n         */\n        remove: function (callback) {\n            var i = callbacks.indexOf(callback);\n            if (i >= 0) {\n                callbacks.splice(i, 1);\n                if (!callbacks.length) {\n                    eventTarget.removeEventListener(eventType, handler, options);\n                }\n            }\n        },\n    };\n}\n/**\n * Creates a delegated event listener using custom events. Most of this code\n * comes from the MDN about resize listeners.\n *\n * This will return an object for adding or removing event handlers for the\n * provided `eventType` since only one base throttled event listener will be\n * created. Each callback that is added will be called with the event each time\n * the event is triggered. This does mean that you will manually need to remove\n * your callback like normal or else it can be called when no longer in use.\n * This also means that it doesn't \"hurt\" to call this function without\n * immediately calling the `add` function since the event won't start until\n * there is at least 1 callback.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/Events/resize#Examples\n * @param eventType - One of the event types that should be used to create a\n * delegated event for. This should be things like resize, click, scroll, etc.\n * @param eventTarget - The target that should have the delegated event handler\n * attached to. This is normally the window, but can be any element as needed.\n * @param throttle - Boolean if the event should be throttled or not. Normally\n * only event types like resize or scroll should be throttled for performance\n * boosts, but anything can be.\n * @returns The delegated event handler that allows you to add or remove\n * `EventListener`s to that event.\n */\nexport function delegateEvent(eventType, eventTarget, throttle, options) {\n    if (eventTarget === void 0) { eventTarget = window; }\n    if (throttle === void 0) { throttle = eventType === \"resize\" || eventType === \"scroll\"; }\n    var index = delegatedEvents.findIndex(function (event) {\n        return event.type === eventType &&\n            event.target === eventTarget &&\n            event.options === options &&\n            event.throttle === throttle;\n    });\n    if (index === -1) {\n        delegatedEvents.push({\n            type: eventType,\n            target: eventTarget,\n            options: options,\n            throttle: throttle,\n            handler: createDelegatedEventHandler(eventType, eventTarget, throttle, options),\n        });\n        index = delegatedEvents.length - 1;\n    }\n    return delegatedEvents[index].handler;\n}\n//# sourceMappingURL=delegateEvent.js.map"]},"metadata":{},"sourceType":"module"}