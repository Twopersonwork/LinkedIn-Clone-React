{"ast":null,"code":"/**\n * Typeguard that will check if the provided checkable thing is a\n * MutableRefObject or just an HTMLElement.\n *\n * @internal\n */\nvar isMutableRefObject = function (thing) {\n  return !!thing && typeof thing.current !== \"undefined\";\n};\n/**\n * Gets the HTMLElement or null from the checkable thing.\n *\n * @internal\n */\n\n\nvar getElement = function (thing) {\n  if (isMutableRefObject(thing)) {\n    return thing.current;\n  }\n\n  return thing;\n};\n/**\n * Checks if a container element contains another element as a child while\n * allowing for nulls or a MutableRefObject of HTMLElement or null. Mostly just\n * a convenience function that should be used internally.\n *\n * @param container - The element to use as a container element. This can be an\n * HTMLElement, null, or a MutableRefObject of HTMLElement or null.\n * @param child - The element that might be a child of the container\n * element. This can be an HTMLElement, null, or a MutableRefObject of\n * HTMLElement or null.\n * @returns True if the container contains the child element and both the\n * container and child are valid HTMLElements (not null).\n * @internal\n */\n\n\nexport function containsElement(container, child) {\n  container = getElement(container);\n  child = getElement(child);\n  return !!(container && child && container.contains(child));\n}","map":{"version":3,"sources":["../src/containsElement.ts"],"names":[],"mappings":"AAKA;;;;;AAKG;AACH,IAAM,kBAAkB,GAAG,UACzB,KADyB,EACJ;AAErB,SAAA,CAAC,CAAC,KAAF,IACA,OAAQ,KAA4C,CAAC,OAArD,KAAiE,WADjE;AAC4E,CAJ9E;AAMA;;;;AAIG;;;AACH,IAAM,UAAU,GAAG,UAAC,KAAD,EAAsB;AACvC,MAAI,kBAAkB,CAAC,KAAD,CAAtB,EAA+B;AAC7B,WAAO,KAAK,CAAC,OAAb;AACD;;AAED,SAAO,KAAP;AACD,CAND;AAQA;;;;;;;;;;;;;AAaG;;;AACH,OAAM,SAAU,eAAV,CACJ,SADI,EAEJ,KAFI,EAEiB;AAErB,EAAA,SAAS,GAAG,UAAU,CAAC,SAAD,CAAtB;AACA,EAAA,KAAK,GAAG,UAAU,CAAC,KAAD,CAAlB;AACA,SAAO,CAAC,EAAE,SAAS,IAAI,KAAb,IAAsB,SAAS,CAAC,QAAV,CAAmB,KAAnB,CAAxB,CAAR;AACD","sourceRoot":"","sourcesContent":["/**\n * Typeguard that will check if the provided checkable thing is a\n * MutableRefObject or just an HTMLElement.\n *\n * @internal\n */\nvar isMutableRefObject = function (thing) {\n    return !!thing &&\n        typeof thing.current !== \"undefined\";\n};\n/**\n * Gets the HTMLElement or null from the checkable thing.\n *\n * @internal\n */\nvar getElement = function (thing) {\n    if (isMutableRefObject(thing)) {\n        return thing.current;\n    }\n    return thing;\n};\n/**\n * Checks if a container element contains another element as a child while\n * allowing for nulls or a MutableRefObject of HTMLElement or null. Mostly just\n * a convenience function that should be used internally.\n *\n * @param container - The element to use as a container element. This can be an\n * HTMLElement, null, or a MutableRefObject of HTMLElement or null.\n * @param child - The element that might be a child of the container\n * element. This can be an HTMLElement, null, or a MutableRefObject of\n * HTMLElement or null.\n * @returns True if the container contains the child element and both the\n * container and child are valid HTMLElements (not null).\n * @internal\n */\nexport function containsElement(container, child) {\n    container = getElement(container);\n    child = getElement(child);\n    return !!(container && child && container.contains(child));\n}\n//# sourceMappingURL=containsElement.js.map"]},"metadata":{},"sourceType":"module"}