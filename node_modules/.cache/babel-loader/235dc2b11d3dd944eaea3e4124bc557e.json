{"ast":null,"code":"import { resizeObservers } from '../utils/resizeObservers';\nimport { ResizeObserverEntry } from '../ResizeObserverEntry';\nimport { calculateDepthForNode } from './calculateDepthForNode';\nimport { calculateBoxSize } from './calculateBoxSize';\n\nvar broadcastActiveObservations = function () {\n  var shallowestDepth = Infinity;\n  var callbacks = [];\n  resizeObservers.forEach(function processObserver(ro) {\n    if (ro.activeTargets.length === 0) {\n      return;\n    }\n\n    var entries = [];\n    ro.activeTargets.forEach(function processTarget(ot) {\n      var entry = new ResizeObserverEntry(ot.target);\n      var targetDepth = calculateDepthForNode(ot.target);\n      entries.push(entry);\n      ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);\n\n      if (targetDepth < shallowestDepth) {\n        shallowestDepth = targetDepth;\n      }\n    });\n    callbacks.push(function resizeObserverCallback() {\n      ro.callback.call(ro.observer, entries, ro.observer);\n    });\n    ro.activeTargets.splice(0, ro.activeTargets.length);\n  });\n\n  for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {\n    var callback = callbacks_1[_i];\n    callback();\n  }\n\n  return shallowestDepth;\n};\n\nexport { broadcastActiveObservations };","map":{"version":3,"sources":["/home/malav/workspace/LinkedIn-Clone/LinkedIn-Clone-React/linkedin_react/node_modules/@juggle/resize-observer/lib/algorithms/broadcastActiveObservations.js"],"names":["resizeObservers","ResizeObserverEntry","calculateDepthForNode","calculateBoxSize","broadcastActiveObservations","shallowestDepth","Infinity","callbacks","forEach","processObserver","ro","activeTargets","length","entries","processTarget","ot","entry","target","targetDepth","push","lastReportedSize","observedBox","resizeObserverCallback","callback","call","observer","splice","_i","callbacks_1"],"mappings":"AAAA,SAASA,eAAT,QAAgC,0BAAhC;AACA,SAASC,mBAAT,QAAoC,wBAApC;AACA,SAASC,qBAAT,QAAsC,yBAAtC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;;AACA,IAAIC,2BAA2B,GAAG,YAAY;AAC1C,MAAIC,eAAe,GAAGC,QAAtB;AACA,MAAIC,SAAS,GAAG,EAAhB;AACAP,EAAAA,eAAe,CAACQ,OAAhB,CAAwB,SAASC,eAAT,CAAyBC,EAAzB,EAA6B;AACjD,QAAIA,EAAE,CAACC,aAAH,CAAiBC,MAAjB,KAA4B,CAAhC,EAAmC;AAC/B;AACH;;AACD,QAAIC,OAAO,GAAG,EAAd;AACAH,IAAAA,EAAE,CAACC,aAAH,CAAiBH,OAAjB,CAAyB,SAASM,aAAT,CAAuBC,EAAvB,EAA2B;AAChD,UAAIC,KAAK,GAAG,IAAIf,mBAAJ,CAAwBc,EAAE,CAACE,MAA3B,CAAZ;AACA,UAAIC,WAAW,GAAGhB,qBAAqB,CAACa,EAAE,CAACE,MAAJ,CAAvC;AACAJ,MAAAA,OAAO,CAACM,IAAR,CAAaH,KAAb;AACAD,MAAAA,EAAE,CAACK,gBAAH,GAAsBjB,gBAAgB,CAACY,EAAE,CAACE,MAAJ,EAAYF,EAAE,CAACM,WAAf,CAAtC;;AACA,UAAIH,WAAW,GAAGb,eAAlB,EAAmC;AAC/BA,QAAAA,eAAe,GAAGa,WAAlB;AACH;AACJ,KARD;AASAX,IAAAA,SAAS,CAACY,IAAV,CAAe,SAASG,sBAAT,GAAkC;AAC7CZ,MAAAA,EAAE,CAACa,QAAH,CAAYC,IAAZ,CAAiBd,EAAE,CAACe,QAApB,EAA8BZ,OAA9B,EAAuCH,EAAE,CAACe,QAA1C;AACH,KAFD;AAGAf,IAAAA,EAAE,CAACC,aAAH,CAAiBe,MAAjB,CAAwB,CAAxB,EAA2BhB,EAAE,CAACC,aAAH,CAAiBC,MAA5C;AACH,GAlBD;;AAmBA,OAAK,IAAIe,EAAE,GAAG,CAAT,EAAYC,WAAW,GAAGrB,SAA/B,EAA0CoB,EAAE,GAAGC,WAAW,CAAChB,MAA3D,EAAmEe,EAAE,EAArE,EAAyE;AACrE,QAAIJ,QAAQ,GAAGK,WAAW,CAACD,EAAD,CAA1B;AACAJ,IAAAA,QAAQ;AACX;;AACD,SAAOlB,eAAP;AACH,CA3BD;;AA4BA,SAASD,2BAAT","sourcesContent":["import { resizeObservers } from '../utils/resizeObservers';\nimport { ResizeObserverEntry } from '../ResizeObserverEntry';\nimport { calculateDepthForNode } from './calculateDepthForNode';\nimport { calculateBoxSize } from './calculateBoxSize';\nvar broadcastActiveObservations = function () {\n    var shallowestDepth = Infinity;\n    var callbacks = [];\n    resizeObservers.forEach(function processObserver(ro) {\n        if (ro.activeTargets.length === 0) {\n            return;\n        }\n        var entries = [];\n        ro.activeTargets.forEach(function processTarget(ot) {\n            var entry = new ResizeObserverEntry(ot.target);\n            var targetDepth = calculateDepthForNode(ot.target);\n            entries.push(entry);\n            ot.lastReportedSize = calculateBoxSize(ot.target, ot.observedBox);\n            if (targetDepth < shallowestDepth) {\n                shallowestDepth = targetDepth;\n            }\n        });\n        callbacks.push(function resizeObserverCallback() {\n            ro.callback.call(ro.observer, entries, ro.observer);\n        });\n        ro.activeTargets.splice(0, ro.activeTargets.length);\n    });\n    for (var _i = 0, callbacks_1 = callbacks; _i < callbacks_1.length; _i++) {\n        var callback = callbacks_1[_i];\n        callback();\n    }\n    return shallowestDepth;\n};\nexport { broadcastActiveObservations };\n"]},"metadata":{},"sourceType":"module"}