{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport { DEFAULT_DESKTOP_LARGE_MIN_WIDTH, DEFAULT_DESKTOP_MIN_WIDTH, DEFAULT_PHONE_MAX_WIDTH, DEFAULT_TABLET_MAX_WIDTH, DEFAULT_TABLET_MIN_WIDTH } from \"./constants\";\nimport { useOrientation } from \"./useOrientation\";\nimport { useWidthMediaQuery } from \"./useWidthMediaQuery\";\nexport var DEFAULT_APP_SIZE = {\n  isPhone: false,\n  isTablet: false,\n  isDesktop: true,\n  isLargeDesktop: false,\n  isLandscape: true\n};\n/**\n * This hook is used to determine the current application size based on the\n * provided query sizes. When you want to render your app server side, you will\n * need to provide a custom `defaultSize` that implements your logic to\n * determine the type of device requesting a page. Once the app has been\n * rendered in the DOM, this hook will attach event listeners to automatically\n * update the app size when the page is resized.\n *\n * @internal\n */\n\nexport function useAppSizeMedia(_a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.phoneMaxWidth,\n      phoneMaxWidth = _c === void 0 ? DEFAULT_PHONE_MAX_WIDTH : _c,\n      _d = _b.tabletMinWidth,\n      tabletMinWidth = _d === void 0 ? DEFAULT_TABLET_MIN_WIDTH : _d,\n      _e = _b.tabletMaxWidth,\n      tabletMaxWidth = _e === void 0 ? DEFAULT_TABLET_MAX_WIDTH : _e,\n      _f = _b.desktopMinWidth,\n      desktopMinWidth = _f === void 0 ? DEFAULT_DESKTOP_MIN_WIDTH : _f,\n      _g = _b.desktopLargeMinWidth,\n      desktopLargeMinWidth = _g === void 0 ? DEFAULT_DESKTOP_LARGE_MIN_WIDTH : _g,\n      _h = _b.defaultSize,\n      defaultSize = _h === void 0 ? DEFAULT_APP_SIZE : _h;\n  /* eslint-disable react-hooks/rules-of-hooks */\n  // disabled since this is conditionally applied for SSR\n\n\n  if (typeof window === \"undefined\") {\n    return defaultSize;\n  }\n\n  var matchesDesktop = useWidthMediaQuery({\n    min: desktopMinWidth\n  });\n  var matchesLargeDesktop = useWidthMediaQuery({\n    min: desktopLargeMinWidth\n  });\n  var matchesTablet = useWidthMediaQuery({\n    min: tabletMinWidth,\n    max: tabletMaxWidth\n  });\n  var matchesPhone = useWidthMediaQuery({\n    max: phoneMaxWidth\n  });\n  var isDesktop = matchesDesktop;\n  var isTablet = !matchesDesktop && matchesTablet;\n  var isPhone = !isTablet && !isDesktop && matchesPhone;\n  var isLandscape = useOrientation().includes(\"landscape\");\n  var isLargeDesktop = matchesLargeDesktop;\n\n  var _j = useState(defaultSize),\n      appSize = _j[0],\n      setAppSize = _j[1];\n\n  useEffect(function () {\n    if (appSize.isPhone === isPhone && appSize.isTablet === isTablet && appSize.isDesktop === isDesktop && appSize.isLargeDesktop === isLargeDesktop && appSize.isLandscape === isLandscape) {\n      return;\n    } // for some reason, it's sometimes possible to fail every single matchMedia\n    // value when you are resizing the browser a lot. this is an \"invalid\" event\n    // so skip it. It normally happens between 760px-768px\n\n\n    if (!isPhone && !isTablet && !isDesktop && !isLargeDesktop) {\n      return;\n    }\n\n    setAppSize({\n      isPhone: isPhone,\n      isTablet: isTablet,\n      isDesktop: isDesktop,\n      isLargeDesktop: isLargeDesktop,\n      isLandscape: isLandscape\n    });\n  }, [isPhone, isTablet, isDesktop, isLargeDesktop, isLandscape, appSize]);\n  return appSize;\n}","map":{"version":3,"sources":["../../src/sizing/useAppSizeMedia.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { DEFAULT_DESKTOP_LARGE_MIN_WIDTH, DEFAULT_DESKTOP_MIN_WIDTH, DEFAULT_PHONE_MAX_WIDTH, DEFAULT_TABLET_MAX_WIDTH, DEFAULT_TABLET_MIN_WIDTH, } from \"./constants\";\nimport { useOrientation } from \"./useOrientation\";\nimport { useWidthMediaQuery } from \"./useWidthMediaQuery\";\nexport var DEFAULT_APP_SIZE = {\n    isPhone: false,\n    isTablet: false,\n    isDesktop: true,\n    isLargeDesktop: false,\n    isLandscape: true,\n};\n/**\n * This hook is used to determine the current application size based on the\n * provided query sizes. When you want to render your app server side, you will\n * need to provide a custom `defaultSize` that implements your logic to\n * determine the type of device requesting a page. Once the app has been\n * rendered in the DOM, this hook will attach event listeners to automatically\n * update the app size when the page is resized.\n *\n * @internal\n */\nexport function useAppSizeMedia(_a) {\n    var _b = _a === void 0 ? {} : _a, _c = _b.phoneMaxWidth, phoneMaxWidth = _c === void 0 ? DEFAULT_PHONE_MAX_WIDTH : _c, _d = _b.tabletMinWidth, tabletMinWidth = _d === void 0 ? DEFAULT_TABLET_MIN_WIDTH : _d, _e = _b.tabletMaxWidth, tabletMaxWidth = _e === void 0 ? DEFAULT_TABLET_MAX_WIDTH : _e, _f = _b.desktopMinWidth, desktopMinWidth = _f === void 0 ? DEFAULT_DESKTOP_MIN_WIDTH : _f, _g = _b.desktopLargeMinWidth, desktopLargeMinWidth = _g === void 0 ? DEFAULT_DESKTOP_LARGE_MIN_WIDTH : _g, _h = _b.defaultSize, defaultSize = _h === void 0 ? DEFAULT_APP_SIZE : _h;\n    /* eslint-disable react-hooks/rules-of-hooks */\n    // disabled since this is conditionally applied for SSR\n    if (typeof window === \"undefined\") {\n        return defaultSize;\n    }\n    var matchesDesktop = useWidthMediaQuery({ min: desktopMinWidth });\n    var matchesLargeDesktop = useWidthMediaQuery({ min: desktopLargeMinWidth });\n    var matchesTablet = useWidthMediaQuery({\n        min: tabletMinWidth,\n        max: tabletMaxWidth,\n    });\n    var matchesPhone = useWidthMediaQuery({ max: phoneMaxWidth });\n    var isDesktop = matchesDesktop;\n    var isTablet = !matchesDesktop && matchesTablet;\n    var isPhone = !isTablet && !isDesktop && matchesPhone;\n    var isLandscape = useOrientation().includes(\"landscape\");\n    var isLargeDesktop = matchesLargeDesktop;\n    var _j = useState(defaultSize), appSize = _j[0], setAppSize = _j[1];\n    useEffect(function () {\n        if (appSize.isPhone === isPhone &&\n            appSize.isTablet === isTablet &&\n            appSize.isDesktop === isDesktop &&\n            appSize.isLargeDesktop === isLargeDesktop &&\n            appSize.isLandscape === isLandscape) {\n            return;\n        }\n        // for some reason, it's sometimes possible to fail every single matchMedia\n        // value when you are resizing the browser a lot. this is an \"invalid\" event\n        // so skip it. It normally happens between 760px-768px\n        if (!isPhone && !isTablet && !isDesktop && !isLargeDesktop) {\n            return;\n        }\n        setAppSize({ isPhone: isPhone, isTablet: isTablet, isDesktop: isDesktop, isLargeDesktop: isLargeDesktop, isLandscape: isLandscape });\n    }, [isPhone, isTablet, isDesktop, isLargeDesktop, isLandscape, appSize]);\n    return appSize;\n}\n//# sourceMappingURL=useAppSizeMedia.js.map"]},"metadata":{},"sourceType":"module"}