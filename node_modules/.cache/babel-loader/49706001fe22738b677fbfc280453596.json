{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n/**\n * This is normally used for reusable shareable configs that have multiple\n * shared options with default values that should be used. This basically works\n * just like `defaultProps` in react.\n *\n * @internal\n * @param optional - The original object that has the optional/omitted values\n * @param required - The required default values that should be used to fill the\n * optional object with\n * @returns a new object with both the values of the optional and required\n * objects but use the optional values if they were defined.\n */\n\n\nexport function defaults(optional, required) {\n  var keys = Object.keys(required);\n  return keys.reduce(function (result, key) {\n    if (typeof result[key] === \"undefined\") {\n      result[key] = required[key];\n    }\n\n    return result;\n  }, __assign({}, optional));\n}","map":{"version":3,"sources":["../src/defaults.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;;;;;;;;;;;AAWG;;;AACH,OAAM,SAAU,QAAV,CACJ,QADI,EAEJ,QAFI,EAEO;AAEX,MAAM,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,QAAZ,CAAb;AAEA,SAAO,IAAI,CAAC,MAAL,CACL,UAAC,MAAD,EAAS,GAAT,EAAY;AACV,QAAI,OAAQ,MAAc,CAAC,GAAD,CAAtB,KAAgC,WAApC,EAAiD;AAC9C,MAAA,MAAc,CAAC,GAAD,CAAd,GAAuB,QAAgB,CAAC,GAAD,CAAvC;AACF;;AAED,WAAO,MAAP;AACD,GAPI,EAQL,QAAA,CAAA,EAAA,EAAK,QAAL,CARK,CAAP;AAUD","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\n/**\n * This is normally used for reusable shareable configs that have multiple\n * shared options with default values that should be used. This basically works\n * just like `defaultProps` in react.\n *\n * @internal\n * @param optional - The original object that has the optional/omitted values\n * @param required - The required default values that should be used to fill the\n * optional object with\n * @returns a new object with both the values of the optional and required\n * objects but use the optional values if they were defined.\n */\nexport function defaults(optional, required) {\n    var keys = Object.keys(required);\n    return keys.reduce(function (result, key) {\n        if (typeof result[key] === \"undefined\") {\n            result[key] = required[key];\n        }\n        return result;\n    }, __assign({}, optional));\n}\n//# sourceMappingURL=defaults.js.map"]},"metadata":{},"sourceType":"module"}