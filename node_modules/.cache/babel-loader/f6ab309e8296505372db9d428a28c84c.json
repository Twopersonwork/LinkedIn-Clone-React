{"ast":null,"code":"/**\n * An extremely simple function that is used to generate an id for an item\n * within a list of other items.  This is generally used with list of items that\n * should have custom focus with the `aria-activedescendant` flow instead of\n * native focus.\n *\n * @param id - The base id for the container element of all the items.\n * @param i - The index of the item within the list. This number will be\n * incremented by 1 as an id to start from 1 instead of 0.\n */\nexport function getItemId(id, i) {\n  if (!id) {\n    throw new Error(\"The id must be a string with a length greater than 0\");\n  }\n\n  if (i < 0) {\n    throw new RangeError(\"The provided index must be greater than 0\");\n  }\n\n  return id + \"-item-\" + (i + 1);\n}\n/**\n * A small util function to transform a list of key codes into a list of\n * `KeyConfig` objects. This is useful for how I determine what behavior to\n * implement after a keydown event.\n *\n * @param keys - A list of key mappings to convert to a key object. These should\n * be things like: \"Tab\", \"Alt+Home\", \"A\", \"Shift+Alt+ArrowUp\"\n * @param type - The keyboard focus type this key should be mapped to\n * @internal\n */\n\nexport function transformKeys(keys, type) {\n  return keys.map(function (key) {\n    return {\n      shiftKey: key.includes(\"Shift+\"),\n      metaKey: key.includes(\"Meta+\"),\n      ctrlKey: key.includes(\"Control+\"),\n      altKey: key.includes(\"Alt+\"),\n      key: key.replace(/(Shift|Meta|Alt|Control)\\+/g, \"\"),\n      type: type\n    };\n  });\n}\n/**\n * A small util get the `KeyConfig` based on the provided keys and keyboard\n * event. This ensures that the key, altKey, metaKey, and shiftKey values all\n * match.\n *\n * If a key is not found, `null` will be returned instead.\n *\n * @param event - The event to get a key mapping type for\n * @param keys - A list of key mappings to attempt to find a valid key event\n * type from.\n * @internal\n */\n\nexport function getKeyboardConfig(event, keys) {\n  var key = event.key,\n      altKey = event.altKey,\n      ctrlKey = event.ctrlKey,\n      metaKey = event.metaKey,\n      shiftKey = event.shiftKey;\n  return keys.find(function (k) {\n    return k.key === key && k.altKey === altKey && k.ctrlKey === ctrlKey && k.metaKey === metaKey && k.shiftKey === shiftKey;\n  }) || null;\n}\n/**\n * Creates a stringified representation of the configuration so that the config\n * can be checked in the `onChange` callback for keyboard movement. This is used\n * as the `query` attribute on the change data.\n *\n * @param config - The key config to stringify\n * @internal\n */\n\nexport function getStringifiedKeyConfig(config) {\n  var key = config.key,\n      altKey = config.altKey,\n      ctrlKey = config.ctrlKey,\n      metaKey = config.metaKey,\n      shiftKey = config.shiftKey,\n      type = config.type;\n  var suffix = [metaKey && \"Meta\", ctrlKey && \"Control\", shiftKey && \"Shift\", altKey && \"Alt\", key].filter(Boolean).join(\"+\");\n  return type + \"-\" + suffix;\n}","map":{"version":3,"sources":["../../../src/wia-aria/movement/utils.ts"],"names":[],"mappings":"AAEA;;;;;;;;;AASG;AACH,OAAM,SAAU,SAAV,CAAoB,EAApB,EAAgC,CAAhC,EAAyC;AAC7C,MAAI,CAAC,EAAL,EAAS;AACP,UAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,MAAI,CAAC,GAAG,CAAR,EAAW;AACT,UAAM,IAAI,UAAJ,CAAe,2CAAf,CAAN;AACD;;AAED,SAAU,EAAE,GAAA,QAAF,IAAW,CAAC,GAAG,CAAf,CAAV;AACD;AAED;;;;;;;;;AASG;;AACH,OAAM,SAAU,aAAV,CACJ,IADI,EAEJ,IAFI,EAEW;AAEf,SAAO,IAAI,CAAC,GAAL,CAAoB,UAAC,GAAD,EAAI;AAAK,WAAC;AACnC,MAAA,QAAQ,EAAE,GAAG,CAAC,QAAJ,CAAa,QAAb,CADyB;AAEnC,MAAA,OAAO,EAAE,GAAG,CAAC,QAAJ,CAAa,OAAb,CAF0B;AAGnC,MAAA,OAAO,EAAE,GAAG,CAAC,QAAJ,CAAa,UAAb,CAH0B;AAInC,MAAA,MAAM,EAAE,GAAG,CAAC,QAAJ,CAAa,MAAb,CAJ2B;AAKnC,MAAA,GAAG,EAAE,GAAG,CAAC,OAAJ,CAAY,6BAAZ,EAA2C,EAA3C,CAL8B;AAMnC,MAAA,IAAI,EAAA;AAN+B,KAAD;AAOlC,GAPK,CAAP;AAQD;AAED;;;;;;;;;;;AAWG;;AACH,OAAM,SAAU,iBAAV,CACJ,KADI,EAEJ,IAFI,EAEsB;AAElB,MAAA,GAAG,GAAyC,KAAK,CAA9C,GAAH;AAAA,MAAK,MAAM,GAAiC,KAAK,CAAtC,MAAX;AAAA,MAAa,OAAO,GAAwB,KAAK,CAA7B,OAApB;AAAA,MAAsB,OAAO,GAAe,KAAK,CAApB,OAA7B;AAAA,MAA+B,QAAQ,GAAK,KAAK,CAAV,QAAvC;AACR,SACE,IAAI,CAAC,IAAL,CACE,UAAC,CAAD,EAAE;AACA,WAAA,CAAC,CAAC,GAAF,KAAU,GAAV,IACA,CAAC,CAAC,MAAF,KAAa,MADb,IAEA,CAAC,CAAC,OAAF,KAAc,OAFd,IAGA,CAAC,CAAC,OAAF,KAAc,OAHd,IAIA,CAAC,CAAC,QAAF,KAAe,QAJf;AAIuB,GAN3B,KAOK,IARP;AAUD;AAED;;;;;;;AAOG;;AACH,OAAM,SAAU,uBAAV,CAAkC,MAAlC,EAAmD;AAC/C,MAAA,GAAG,GAA+C,MAAM,CAArD,GAAH;AAAA,MAAK,MAAM,GAAuC,MAAM,CAA7C,MAAX;AAAA,MAAa,OAAO,GAA8B,MAAM,CAApC,OAApB;AAAA,MAAsB,OAAO,GAAqB,MAAM,CAA3B,OAA7B;AAAA,MAA+B,QAAQ,GAAW,MAAM,CAAjB,QAAvC;AAAA,MAAyC,IAAI,GAAK,MAAM,CAAX,IAA7C;AACR,MAAM,MAAM,GAAG,CACb,OAAO,IAAI,MADE,EAEb,OAAO,IAAI,SAFE,EAGb,QAAQ,IAAI,OAHC,EAIb,MAAM,IAAI,KAJG,EAKb,GALa,EAOZ,MAPY,CAOL,OAPK,EAQZ,IARY,CAQP,GARO,CAAf;AAUA,SAAU,IAAI,GAAA,GAAJ,GAAQ,MAAlB;AACD","sourceRoot":"","sourcesContent":["/**\n * An extremely simple function that is used to generate an id for an item\n * within a list of other items.  This is generally used with list of items that\n * should have custom focus with the `aria-activedescendant` flow instead of\n * native focus.\n *\n * @param id - The base id for the container element of all the items.\n * @param i - The index of the item within the list. This number will be\n * incremented by 1 as an id to start from 1 instead of 0.\n */\nexport function getItemId(id, i) {\n    if (!id) {\n        throw new Error(\"The id must be a string with a length greater than 0\");\n    }\n    if (i < 0) {\n        throw new RangeError(\"The provided index must be greater than 0\");\n    }\n    return id + \"-item-\" + (i + 1);\n}\n/**\n * A small util function to transform a list of key codes into a list of\n * `KeyConfig` objects. This is useful for how I determine what behavior to\n * implement after a keydown event.\n *\n * @param keys - A list of key mappings to convert to a key object. These should\n * be things like: \"Tab\", \"Alt+Home\", \"A\", \"Shift+Alt+ArrowUp\"\n * @param type - The keyboard focus type this key should be mapped to\n * @internal\n */\nexport function transformKeys(keys, type) {\n    return keys.map(function (key) { return ({\n        shiftKey: key.includes(\"Shift+\"),\n        metaKey: key.includes(\"Meta+\"),\n        ctrlKey: key.includes(\"Control+\"),\n        altKey: key.includes(\"Alt+\"),\n        key: key.replace(/(Shift|Meta|Alt|Control)\\+/g, \"\"),\n        type: type,\n    }); });\n}\n/**\n * A small util get the `KeyConfig` based on the provided keys and keyboard\n * event. This ensures that the key, altKey, metaKey, and shiftKey values all\n * match.\n *\n * If a key is not found, `null` will be returned instead.\n *\n * @param event - The event to get a key mapping type for\n * @param keys - A list of key mappings to attempt to find a valid key event\n * type from.\n * @internal\n */\nexport function getKeyboardConfig(event, keys) {\n    var key = event.key, altKey = event.altKey, ctrlKey = event.ctrlKey, metaKey = event.metaKey, shiftKey = event.shiftKey;\n    return (keys.find(function (k) {\n        return k.key === key &&\n            k.altKey === altKey &&\n            k.ctrlKey === ctrlKey &&\n            k.metaKey === metaKey &&\n            k.shiftKey === shiftKey;\n    }) || null);\n}\n/**\n * Creates a stringified representation of the configuration so that the config\n * can be checked in the `onChange` callback for keyboard movement. This is used\n * as the `query` attribute on the change data.\n *\n * @param config - The key config to stringify\n * @internal\n */\nexport function getStringifiedKeyConfig(config) {\n    var key = config.key, altKey = config.altKey, ctrlKey = config.ctrlKey, metaKey = config.metaKey, shiftKey = config.shiftKey, type = config.type;\n    var suffix = [\n        metaKey && \"Meta\",\n        ctrlKey && \"Control\",\n        shiftKey && \"Shift\",\n        altKey && \"Alt\",\n        key,\n    ]\n        .filter(Boolean)\n        .join(\"+\");\n    return type + \"-\" + suffix;\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}