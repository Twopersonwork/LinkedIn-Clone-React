{"ast":null,"code":"import { useCallback, useRef } from \"react\";\n/**\n * Creates a temporary value that gets reset every `x`ms back to the provided\n * default value. This is useful when doing keyboard searching or other\n * interactions.\n *\n * NOTE: This does not force a re-render when the value changes and instead uses\n * a ref value instead.\n *\n * @typeParam T - the type for the value\n * @param defaultValue - The default value to use. Each time the reset timeout\n * is triggered, this value will be set again.\n * @param resetTime - The amount of time before the value is reset back to the\n * default value\n */\n\nexport function useTempValue(defaultValue, resetTime) {\n  if (resetTime === void 0) {\n    resetTime = 500;\n  }\n\n  var value = useRef(defaultValue);\n  var timeout = useRef();\n  var resetValue = useCallback(function () {\n    window.clearTimeout(timeout.current);\n    value.current = defaultValue;\n  }, [defaultValue]);\n  var setValue = useCallback(function (nextValue) {\n    value.current = nextValue;\n    window.clearTimeout(timeout.current);\n    timeout.current = window.setTimeout(resetValue, resetTime);\n  }, [resetTime, resetValue]);\n  return [value, setValue, resetValue];\n}","map":{"version":3,"sources":["../src/useTempValue.ts"],"names":[],"mappings":"AAAA,SAA2B,WAA3B,EAAwC,MAAxC,QAAsD,OAAtD;AAQA;;;;;;;;;;;;;AAaG;;AACH,OAAM,SAAU,YAAV,CACJ,YADI,EAEJ,SAFI,EAEW;AAAf,MAAA,SAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,SAAA,GAAA,GAAA;AAAe;;AAEf,MAAM,KAAK,GAAG,MAAM,CAAC,YAAD,CAApB;AACA,MAAM,OAAO,GAAG,MAAM,EAAtB;AACA,MAAM,UAAU,GAAG,WAAW,CAAC,YAAA;AAC7B,IAAA,MAAM,CAAC,YAAP,CAAoB,OAAO,CAAC,OAA5B;AACA,IAAA,KAAK,CAAC,OAAN,GAAgB,YAAhB;AACD,GAH6B,EAG3B,CAAC,YAAD,CAH2B,CAA9B;AAKA,MAAM,QAAQ,GAAG,WAAW,CAC1B,UAAC,SAAD,EAAa;AACX,IAAA,KAAK,CAAC,OAAN,GAAgB,SAAhB;AACA,IAAA,MAAM,CAAC,YAAP,CAAoB,OAAO,CAAC,OAA5B;AACA,IAAA,OAAO,CAAC,OAAR,GAAkB,MAAM,CAAC,UAAP,CAAkB,UAAlB,EAA8B,SAA9B,CAAlB;AACD,GALyB,EAM1B,CAAC,SAAD,EAAY,UAAZ,CAN0B,CAA5B;AASA,SAAO,CAAC,KAAD,EAAQ,QAAR,EAAkB,UAAlB,CAAP;AACD","sourceRoot":"","sourcesContent":["import { useCallback, useRef } from \"react\";\n/**\n * Creates a temporary value that gets reset every `x`ms back to the provided\n * default value. This is useful when doing keyboard searching or other\n * interactions.\n *\n * NOTE: This does not force a re-render when the value changes and instead uses\n * a ref value instead.\n *\n * @typeParam T - the type for the value\n * @param defaultValue - The default value to use. Each time the reset timeout\n * is triggered, this value will be set again.\n * @param resetTime - The amount of time before the value is reset back to the\n * default value\n */\nexport function useTempValue(defaultValue, resetTime) {\n    if (resetTime === void 0) { resetTime = 500; }\n    var value = useRef(defaultValue);\n    var timeout = useRef();\n    var resetValue = useCallback(function () {\n        window.clearTimeout(timeout.current);\n        value.current = defaultValue;\n    }, [defaultValue]);\n    var setValue = useCallback(function (nextValue) {\n        value.current = nextValue;\n        window.clearTimeout(timeout.current);\n        timeout.current = window.setTimeout(resetValue, resetTime);\n    }, [resetTime, resetValue]);\n    return [value, setValue, resetValue];\n}\n//# sourceMappingURL=useTempValue.js.map"]},"metadata":{},"sourceType":"module"}