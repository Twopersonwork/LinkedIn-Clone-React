{"ast":null,"code":"import React, { createContext, useContext } from \"react\";\nimport { useInteractionMode } from \"./useInteractionMode\";\n/**\n * @internal\n */\n\nvar modeContext = createContext(\"mouse\");\n/**\n * @internal\n */\n\nvar parentContext = createContext(false);\n/**\n * @internal\n */\n\nvar UserInteractionModeProvider = modeContext.Provider;\n/**\n * @internal\n */\n\nvar ParentProvider = parentContext.Provider;\n/**\n * Returns the current user interaction mode.\n *\n * @returns {@link UserInteractionMode}\n */\n\nexport function useUserInteractionMode() {\n  return useContext(modeContext);\n}\n/**\n * Example:\n *\n * ```ts\n * const isKeyboard = useIsUserInteractionMode(\"keyboard\");\n * // do stuff if keyboard only\n * ```\n *\n * @param mode - The {@link UserInteractionMode} to check against.\n * @returns `true` if the current user interaction mode matches the provided\n * mode.\n */\n\nexport function useIsUserInteractionMode(mode) {\n  return useInteractionMode() === mode;\n}\n/**\n * This component is used to determine how the user is current interacting with\n * your app as well as modifying the `document.body`'s `className` with the\n * current mode. This is what allows the `rmd-utils-phone-only`,\n * `rmd-utils-keyboard-only`, and `rmd-utils-mouse-only` mixins to work.\n *\n * @remarks \\@since 2.6.0 Renamed from `InteractionModeListener`\n * @throws When this component has been mounted multiple times in your app.\n */\n\nexport function UserInteractionModeListener(_a) {\n  var children = _a.children;\n  var mode = useInteractionMode();\n\n  if (useContext(parentContext)) {\n    throw new Error(\"Mounted multiple `UserInteractionModeListener` components.\");\n  }\n\n  return React.createElement(UserInteractionModeProvider, {\n    value: mode\n  }, React.createElement(ParentProvider, {\n    value: true\n  }, children));\n}\n/**\n * @deprecated Use the `UserInteractionModeListener` component instead.\n * @remarks \\@since 2.6.0\n */\n\nexport var InteractionModeListener = UserInteractionModeListener;\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== \"production\") {\n  modeContext.displayName = \"UserInteractionMode\";\n  parentContext.displayName = \"MultiUserInteractionMode\";\n\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    UserInteractionModeListener.propTypes = {\n      children: PropTypes.node.isRequired\n    };\n  } catch (e) {}\n}","map":{"version":3,"sources":["../../src/mode/UserInteractionModeListener.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,IACE,aADF,EAIE,UAJF,QAKO,OALP;AAQA,SAAS,kBAAT,QAAmC,sBAAnC;AAEA;;AAEG;;AACH,IAAM,WAAW,GAAG,aAAa,CAAsB,OAAtB,CAAjC;AAEA;;AAEG;;AACH,IAAM,aAAa,GAAG,aAAa,CAAC,KAAD,CAAnC;AAEA;;AAEG;;AACK,IAAU,2BAA2B,GAAK,WAAW,CAAhB,QAArC;AAER;;AAEG;;AACK,IAAU,cAAc,GAAK,aAAa,CAAlB,QAAxB;AAER;;;;AAIG;;AACH,OAAM,SAAU,sBAAV,GAAgC;AACpC,SAAO,UAAU,CAAC,WAAD,CAAjB;AACD;AAED;;;;;;;;;;;AAWG;;AACH,OAAM,SAAU,wBAAV,CAAmC,IAAnC,EAA4D;AAChE,SAAO,kBAAkB,OAAO,IAAhC;AACD;AAUD;;;;;;;;AAQG;;AACH,OAAM,SAAU,2BAAV,CAAsC,EAAtC,EAE6B;MADjC,QAAQ,GAAA,EAAA,CAAA,Q;AAER,MAAM,IAAI,GAAG,kBAAkB,EAA/B;;AACA,MAAI,UAAU,CAAC,aAAD,CAAd,EAA+B;AAC7B,UAAM,IAAI,KAAJ,CACJ,4DADI,CAAN;AAGD;;AAED,SACE,KAAA,CAAA,aAAA,CAAC,2BAAD,EAA4B;AAAC,IAAA,KAAK,EAAE;AAAR,GAA5B,EACE,KAAA,CAAA,aAAA,CAAC,cAAD,EAAe;AAAC,IAAA,KAAK,EAAA;AAAN,GAAf,EAAuB,QAAvB,CADF,CADF;AAKD;AAED;;;AAGG;;AACH,OAAO,IAAM,uBAAuB,GAAG,2BAAhC;AAEP;;AACA,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,EAAA,WAAW,CAAC,WAAZ,GAA0B,qBAA1B;AACA,EAAA,aAAa,CAAC,WAAd,GAA4B,0BAA5B;;AAEA,MAAI;AACF,QAAM,SAAS,GAAG,OAAO,CAAC,YAAD,CAAzB;;AAEA,IAAA,2BAA2B,CAAC,SAA5B,GAAwC;AACtC,MAAA,QAAQ,EAAE,SAAS,CAAC,IAAV,CAAe;AADa,KAAxC;AAGD,GAND,CAME,OAAO,CAAP,EAAU,CAAE;AACf","sourceRoot":"","sourcesContent":["import React, { createContext, useContext, } from \"react\";\nimport { useInteractionMode } from \"./useInteractionMode\";\n/**\n * @internal\n */\nvar modeContext = createContext(\"mouse\");\n/**\n * @internal\n */\nvar parentContext = createContext(false);\n/**\n * @internal\n */\nvar UserInteractionModeProvider = modeContext.Provider;\n/**\n * @internal\n */\nvar ParentProvider = parentContext.Provider;\n/**\n * Returns the current user interaction mode.\n *\n * @returns {@link UserInteractionMode}\n */\nexport function useUserInteractionMode() {\n    return useContext(modeContext);\n}\n/**\n * Example:\n *\n * ```ts\n * const isKeyboard = useIsUserInteractionMode(\"keyboard\");\n * // do stuff if keyboard only\n * ```\n *\n * @param mode - The {@link UserInteractionMode} to check against.\n * @returns `true` if the current user interaction mode matches the provided\n * mode.\n */\nexport function useIsUserInteractionMode(mode) {\n    return useInteractionMode() === mode;\n}\n/**\n * This component is used to determine how the user is current interacting with\n * your app as well as modifying the `document.body`'s `className` with the\n * current mode. This is what allows the `rmd-utils-phone-only`,\n * `rmd-utils-keyboard-only`, and `rmd-utils-mouse-only` mixins to work.\n *\n * @remarks \\@since 2.6.0 Renamed from `InteractionModeListener`\n * @throws When this component has been mounted multiple times in your app.\n */\nexport function UserInteractionModeListener(_a) {\n    var children = _a.children;\n    var mode = useInteractionMode();\n    if (useContext(parentContext)) {\n        throw new Error(\"Mounted multiple `UserInteractionModeListener` components.\");\n    }\n    return (React.createElement(UserInteractionModeProvider, { value: mode },\n        React.createElement(ParentProvider, { value: true }, children)));\n}\n/**\n * @deprecated Use the `UserInteractionModeListener` component instead.\n * @remarks \\@since 2.6.0\n */\nexport var InteractionModeListener = UserInteractionModeListener;\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== \"production\") {\n    modeContext.displayName = \"UserInteractionMode\";\n    parentContext.displayName = \"MultiUserInteractionMode\";\n    try {\n        var PropTypes = require(\"prop-types\");\n        UserInteractionModeListener.propTypes = {\n            children: PropTypes.node.isRequired,\n        };\n    }\n    catch (e) { }\n}\n//# sourceMappingURL=UserInteractionModeListener.js.map"]},"metadata":{},"sourceType":"module"}