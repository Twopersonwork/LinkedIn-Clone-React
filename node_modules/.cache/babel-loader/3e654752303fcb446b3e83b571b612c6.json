{"ast":null,"code":"import { findSizingContainer } from \"./positioning/findSizingContainer\";\n/**\n * Attempts to scroll an element into view within another container element if\n * needed.  If either the container or element are `null`, nothing will happen.\n *\n * @param container - The container element that should be scrolled if the child\n * element is not within view.\n * @param element - The element that should be visible within the container\n * element's scroll area.\n */\n\nexport function scrollIntoView(container, element) {\n  element = findSizingContainer(element);\n\n  if (!container || !element) {\n    return;\n  }\n\n  var offsetTop = element.offsetTop;\n\n  if (element.offsetParent !== container) {\n    offsetTop -= container.offsetTop;\n  }\n\n  var elementBottom = offsetTop + element.offsetHeight;\n  var containerBottom = container.offsetHeight + container.scrollTop;\n\n  if (elementBottom > containerBottom) {\n    container.scrollTop = elementBottom - container.offsetHeight;\n  } else if (offsetTop < container.scrollTop) {\n    container.scrollTop = offsetTop;\n  }\n}","map":{"version":3,"sources":["../src/scrollIntoView.ts"],"names":[],"mappings":"AAAA,SAAS,mBAAT,QAAoC,mCAApC;AAEA;;;;;;;;AAQG;;AACH,OAAM,SAAU,cAAV,CACJ,SADI,EAEJ,OAFI,EAEuB;AAE3B,EAAA,OAAO,GAAG,mBAAmB,CAAC,OAAD,CAA7B;;AACA,MAAI,CAAC,SAAD,IAAc,CAAC,OAAnB,EAA4B;AAC1B;AACD;;AAEK,MAAA,SAAS,GAAK,OAAO,CAAZ,SAAT;;AACN,MAAI,OAAO,CAAC,YAAR,KAAyB,SAA7B,EAAwC;AACtC,IAAA,SAAS,IAAI,SAAS,CAAC,SAAvB;AACD;;AAED,MAAM,aAAa,GAAG,SAAS,GAAG,OAAO,CAAC,YAA1C;AACA,MAAM,eAAe,GAAG,SAAS,CAAC,YAAV,GAAyB,SAAS,CAAC,SAA3D;;AACA,MAAI,aAAa,GAAG,eAApB,EAAqC;AACnC,IAAA,SAAS,CAAC,SAAV,GAAsB,aAAa,GAAG,SAAS,CAAC,YAAhD;AACD,GAFD,MAEO,IAAI,SAAS,GAAG,SAAS,CAAC,SAA1B,EAAqC;AAC1C,IAAA,SAAS,CAAC,SAAV,GAAsB,SAAtB;AACD;AACF","sourceRoot":"","sourcesContent":["import { findSizingContainer } from \"./positioning/findSizingContainer\";\n/**\n * Attempts to scroll an element into view within another container element if\n * needed.  If either the container or element are `null`, nothing will happen.\n *\n * @param container - The container element that should be scrolled if the child\n * element is not within view.\n * @param element - The element that should be visible within the container\n * element's scroll area.\n */\nexport function scrollIntoView(container, element) {\n    element = findSizingContainer(element);\n    if (!container || !element) {\n        return;\n    }\n    var offsetTop = element.offsetTop;\n    if (element.offsetParent !== container) {\n        offsetTop -= container.offsetTop;\n    }\n    var elementBottom = offsetTop + element.offsetHeight;\n    var containerBottom = container.offsetHeight + container.scrollTop;\n    if (elementBottom > containerBottom) {\n        container.scrollTop = elementBottom - container.offsetHeight;\n    }\n    else if (offsetTop < container.scrollTop) {\n        container.scrollTop = offsetTop;\n    }\n}\n//# sourceMappingURL=scrollIntoView.js.map"]},"metadata":{},"sourceType":"module"}