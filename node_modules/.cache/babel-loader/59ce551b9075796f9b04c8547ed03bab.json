{"ast":null,"code":"import { useEffect, useRef } from \"react\";\n/**\n * A simple hook that only triggers the callback when a component is unmounted.\n * This will make sure that the callback function does not have a stale closure\n * by the time the component unmounts as well.\n *\n * @example\n * Simple Example\n * ```ts\n * useOnUnmount(() => {\n *   console.log('Component is unmounted.');\n * });\n *\n * const [data, setData] = useState(initialData);\n * useOnUnmount(() => {\n *   API.saveCurrentData(data);\n * });\n *\n * // update data\n * ```\n *\n * @remarks \\@since 2.7.1\n * @param callback - the function to call when the component unmounts.\n */\n\nexport function useOnUnmount(callback) {\n  var ref = useRef(callback);\n  useEffect(function () {\n    ref.current = callback;\n  });\n  return useEffect(function () {\n    return function () {\n      return ref.current();\n    };\n  }, []);\n}","map":{"version":3,"sources":["../src/useOnUnmount.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,EAAoB,MAApB,QAAkC,OAAlC;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBG;;AACH,OAAM,SAAU,YAAV,CAAuB,QAAvB,EAA2C;AAC/C,MAAM,GAAG,GAAG,MAAM,CAAC,QAAD,CAAlB;AACA,EAAA,SAAS,CAAC,YAAA;AACR,IAAA,GAAG,CAAC,OAAJ,GAAc,QAAd;AACD,GAFQ,CAAT;AAIA,SAAO,SAAS,CAAC,YAAA;AAAM,WAAA,YAAA;AAAM,aAAA,GAAG,CAAH,OAAA,EAAA;AAAN,KAAA;AAAmB,GAA1B,EAA4B,EAA5B,CAAhB;AACD","sourceRoot":"","sourcesContent":["import { useEffect, useRef } from \"react\";\n/**\n * A simple hook that only triggers the callback when a component is unmounted.\n * This will make sure that the callback function does not have a stale closure\n * by the time the component unmounts as well.\n *\n * @example\n * Simple Example\n * ```ts\n * useOnUnmount(() => {\n *   console.log('Component is unmounted.');\n * });\n *\n * const [data, setData] = useState(initialData);\n * useOnUnmount(() => {\n *   API.saveCurrentData(data);\n * });\n *\n * // update data\n * ```\n *\n * @remarks \\@since 2.7.1\n * @param callback - the function to call when the component unmounts.\n */\nexport function useOnUnmount(callback) {\n    var ref = useRef(callback);\n    useEffect(function () {\n        ref.current = callback;\n    });\n    return useEffect(function () { return function () { return ref.current(); }; }, []);\n}\n//# sourceMappingURL=useOnUnmount.js.map"]},"metadata":{},"sourceType":"module"}