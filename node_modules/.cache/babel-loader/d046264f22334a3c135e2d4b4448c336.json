{"ast":null,"code":"function applyCoords(coord) {\n  return typeof coord === \"number\" ? coord + \"px\" : \"\";\n}\n/**\n * This util is used to get the \"true\" `element.getBoundingClientRect()` that\n * ensures that transitions using tarnsforms don't mess up the sizing so that\n * position calculations are easier to do.\n *\n * @param element - The element to get a rect for.\n * @param coords - An optional object of coordinates to apply to the positioning\n * styles. This should be used when the coords might resize the element since it\n * needs to try to fit within the viewport.\n * @returns either a DOMRect or ClientRect for the element\n * @internal\n */\n\n\nexport function getElementRect(element, coords) {\n  if (coords === void 0) {\n    coords = {};\n  }\n\n  var cloned = element.cloneNode(true); // remove the id so there won't be two elements with the same id on the page\n\n  cloned.removeAttribute(\"id\"); // remove the role just in case the role would alert screen readers once added\n  // to the dom\n\n  cloned.removeAttribute(\"role\"); // ensure the cloned node won't shift the page or be visible\n\n  cloned.style.position = \"fixed\";\n  cloned.style.visibility = \"hidden\"; // reset positionion to get a \"pure\" calculation. otherwise this will mess up\n  // the height and width if the element is able to line wrap.\n\n  cloned.style.left = applyCoords(coords.left);\n  cloned.style.top = applyCoords(coords.top);\n  cloned.style.right = applyCoords(coords.right);\n  cloned.style.bottom = applyCoords(coords.bottom); // reset transforms so that custom animations don't mess with the sizing\n\n  cloned.style.webkitTransform = \"none\";\n  cloned.style.transform = \"none\";\n  var parent = element.parentElement || document.body;\n  parent.appendChild(cloned);\n  var rect = cloned.getBoundingClientRect();\n  parent.removeChild(cloned);\n  return rect;\n}","map":{"version":3,"sources":["../../src/positioning/getElementRect.ts"],"names":[],"mappings":"AAEA,SAAS,WAAT,CAAqB,KAArB,EAA8C;AAC5C,SAAO,OAAO,KAAP,KAAiB,QAAjB,GAA+B,KAAK,GAAA,IAApC,GAA2C,EAAlD;AACD;AAED;;;;;;;;;;;AAWG;;;AACH,OAAM,SAAU,cAAV,CACJ,OADI,EAEJ,MAFI,EAEe;AAAnB,MAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,MAAA,GAAA,EAAA;AAAmB;;AAEnB,MAAM,MAAM,GAAG,OAAO,CAAC,SAAR,CAAkB,IAAlB,CAAf,CAFmB,CAGnB;;AACA,EAAA,MAAM,CAAC,eAAP,CAAuB,IAAvB,EAJmB,CAMnB;AACA;;AACA,EAAA,MAAM,CAAC,eAAP,CAAuB,MAAvB,EARmB,CAUnB;;AACA,EAAA,MAAM,CAAC,KAAP,CAAa,QAAb,GAAwB,OAAxB;AACA,EAAA,MAAM,CAAC,KAAP,CAAa,UAAb,GAA0B,QAA1B,CAZmB,CAcnB;AACA;;AACA,EAAA,MAAM,CAAC,KAAP,CAAa,IAAb,GAAoB,WAAW,CAAC,MAAM,CAAC,IAAR,CAA/B;AACA,EAAA,MAAM,CAAC,KAAP,CAAa,GAAb,GAAmB,WAAW,CAAC,MAAM,CAAC,GAAR,CAA9B;AACA,EAAA,MAAM,CAAC,KAAP,CAAa,KAAb,GAAqB,WAAW,CAAC,MAAM,CAAC,KAAR,CAAhC;AACA,EAAA,MAAM,CAAC,KAAP,CAAa,MAAb,GAAsB,WAAW,CAAC,MAAM,CAAC,MAAR,CAAjC,CAnBmB,CAqBnB;;AACA,EAAA,MAAM,CAAC,KAAP,CAAa,eAAb,GAA+B,MAA/B;AACA,EAAA,MAAM,CAAC,KAAP,CAAa,SAAb,GAAyB,MAAzB;AAEA,MAAM,MAAM,GAAG,OAAO,CAAC,aAAR,IAAyB,QAAQ,CAAC,IAAjD;AACA,EAAA,MAAM,CAAC,WAAP,CAAmB,MAAnB;AAEA,MAAM,IAAI,GAAG,MAAM,CAAC,qBAAP,EAAb;AACA,EAAA,MAAM,CAAC,WAAP,CAAmB,MAAnB;AAEA,SAAO,IAAP;AACD","sourceRoot":"","sourcesContent":["function applyCoords(coord) {\n    return typeof coord === \"number\" ? coord + \"px\" : \"\";\n}\n/**\n * This util is used to get the \"true\" `element.getBoundingClientRect()` that\n * ensures that transitions using tarnsforms don't mess up the sizing so that\n * position calculations are easier to do.\n *\n * @param element - The element to get a rect for.\n * @param coords - An optional object of coordinates to apply to the positioning\n * styles. This should be used when the coords might resize the element since it\n * needs to try to fit within the viewport.\n * @returns either a DOMRect or ClientRect for the element\n * @internal\n */\nexport function getElementRect(element, coords) {\n    if (coords === void 0) { coords = {}; }\n    var cloned = element.cloneNode(true);\n    // remove the id so there won't be two elements with the same id on the page\n    cloned.removeAttribute(\"id\");\n    // remove the role just in case the role would alert screen readers once added\n    // to the dom\n    cloned.removeAttribute(\"role\");\n    // ensure the cloned node won't shift the page or be visible\n    cloned.style.position = \"fixed\";\n    cloned.style.visibility = \"hidden\";\n    // reset positionion to get a \"pure\" calculation. otherwise this will mess up\n    // the height and width if the element is able to line wrap.\n    cloned.style.left = applyCoords(coords.left);\n    cloned.style.top = applyCoords(coords.top);\n    cloned.style.right = applyCoords(coords.right);\n    cloned.style.bottom = applyCoords(coords.bottom);\n    // reset transforms so that custom animations don't mess with the sizing\n    cloned.style.webkitTransform = \"none\";\n    cloned.style.transform = \"none\";\n    var parent = element.parentElement || document.body;\n    parent.appendChild(cloned);\n    var rect = cloned.getBoundingClientRect();\n    parent.removeChild(cloned);\n    return rect;\n}\n//# sourceMappingURL=getElementRect.js.map"]},"metadata":{},"sourceType":"module"}