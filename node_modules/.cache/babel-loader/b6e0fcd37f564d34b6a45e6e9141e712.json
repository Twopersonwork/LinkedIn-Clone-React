{"ast":null,"code":"import { useEffect, useState } from \"react\";\n/**\n * A helper hook that is used to create a memoized media query tester for\n * `window.matchMedia`.\n *\n * Note: This is a **client side only** hook as it requires the `window` to\n * attach a resize event listener to.\n *\n * @param query - The media query to use\n * @param defaultValue - The default value for if this media query matches. When\n * this is `undefined`, it will default to `false` unless the `window` is\n * defined and the `checkImmediately` param was not set to `false`. Otherwise,\n * it will check the media query matches on mount and use that value.\n * @param disabled - Boolean if the media query checking should be disabled.\n * @param checkImmediately - Boolean if the media query should be checked\n * immediately on mount. When omittied, it will default to checking when the\n * window is defined.\n * @returns true if the media query is a match.\n */\n\nexport function useMediaQuery(query, defaultValue, disabled, checkImmediately) {\n  if (disabled === void 0) {\n    disabled = false;\n  }\n\n  if (checkImmediately === void 0) {\n    checkImmediately = typeof window !== \"undefined\";\n  }\n\n  var _a = useState(function () {\n    if (typeof defaultValue !== \"undefined\") {\n      return defaultValue;\n    }\n\n    if (!disabled && checkImmediately && typeof window !== \"undefined\") {\n      return window.matchMedia(query).matches;\n    }\n\n    return false;\n  }),\n      matches = _a[0],\n      setMatches = _a[1];\n\n  useEffect(function () {\n    if (typeof window === \"undefined\" || disabled) {\n      return;\n    }\n\n    var mq = window.matchMedia(query);\n\n    var updater = function (_a) {\n      var matches = _a.matches;\n      return setMatches(matches);\n    };\n\n    mq.addListener(updater);\n\n    if (mq.matches !== matches) {\n      setMatches(mq.matches);\n    }\n\n    return function () {\n      return mq.removeListener(updater);\n    };\n  }, [disabled, matches, query]);\n  return matches;\n}","map":{"version":3,"sources":["../../src/sizing/useMediaQuery.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,EAAoB,QAApB,QAAoC,OAApC;AAEA;;;;;;;;;;;;;;;;;AAiBG;;AACH,OAAM,SAAU,aAAV,CACJ,KADI,EAEJ,YAFI,EAGJ,QAHI,EAIJ,gBAJI,EAIqD;AADzD,MAAA,QAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,QAAA,GAAA,KAAA;AAAgB;;AAChB,MAAA,gBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,gBAAA,GAA4B,OAAO,MAAP,KAAkB,WAA9C;AAAyD;;AAEnD,MAAA,EAAA,GAAwB,QAAQ,CAAC,YAAA;AACrC,QAAI,OAAO,YAAP,KAAwB,WAA5B,EAAyC;AACvC,aAAO,YAAP;AACD;;AAED,QAAI,CAAC,QAAD,IAAa,gBAAb,IAAiC,OAAO,MAAP,KAAkB,WAAvD,EAAoE;AAClE,aAAO,MAAM,CAAC,UAAP,CAAkB,KAAlB,EAAyB,OAAhC;AACD;;AAED,WAAO,KAAP;AACD,GAVqC,CAAhC;AAAA,MAAC,OAAO,GAAA,EAAA,CAAA,CAAA,CAAR;AAAA,MAAU,UAAU,GAAA,EAAA,CAAA,CAAA,CAApB;;AAYN,EAAA,SAAS,CAAC,YAAA;AACR,QAAI,OAAO,MAAP,KAAkB,WAAlB,IAAiC,QAArC,EAA+C;AAC7C;AACD;;AAED,QAAM,EAAE,GAAG,MAAM,CAAC,UAAP,CAAkB,KAAlB,CAAX;;AACA,QAAM,OAAO,GAAG,UAAC,EAAD,EAAiC;UAA9B,OAAO,GAAA,EAAA,CAAA,O;AACxB,aAAA,UAAU,CAAC,OAAD,CAAV;AAAmB,KADrB;;AAGA,IAAA,EAAE,CAAC,WAAH,CAAe,OAAf;;AAEA,QAAI,EAAE,CAAC,OAAH,KAAe,OAAnB,EAA4B;AAC1B,MAAA,UAAU,CAAC,EAAE,CAAC,OAAJ,CAAV;AACD;;AAED,WAAO,YAAA;AAAM,aAAA,EAAE,CAAC,cAAH,CAAA,OAAA,CAAA;AAA0B,KAAvC;AACD,GAhBQ,EAgBN,CAAC,QAAD,EAAW,OAAX,EAAoB,KAApB,CAhBM,CAAT;AAkBA,SAAO,OAAP;AACD","sourceRoot":"","sourcesContent":["import { useEffect, useState } from \"react\";\n/**\n * A helper hook that is used to create a memoized media query tester for\n * `window.matchMedia`.\n *\n * Note: This is a **client side only** hook as it requires the `window` to\n * attach a resize event listener to.\n *\n * @param query - The media query to use\n * @param defaultValue - The default value for if this media query matches. When\n * this is `undefined`, it will default to `false` unless the `window` is\n * defined and the `checkImmediately` param was not set to `false`. Otherwise,\n * it will check the media query matches on mount and use that value.\n * @param disabled - Boolean if the media query checking should be disabled.\n * @param checkImmediately - Boolean if the media query should be checked\n * immediately on mount. When omittied, it will default to checking when the\n * window is defined.\n * @returns true if the media query is a match.\n */\nexport function useMediaQuery(query, defaultValue, disabled, checkImmediately) {\n    if (disabled === void 0) { disabled = false; }\n    if (checkImmediately === void 0) { checkImmediately = typeof window !== \"undefined\"; }\n    var _a = useState(function () {\n        if (typeof defaultValue !== \"undefined\") {\n            return defaultValue;\n        }\n        if (!disabled && checkImmediately && typeof window !== \"undefined\") {\n            return window.matchMedia(query).matches;\n        }\n        return false;\n    }), matches = _a[0], setMatches = _a[1];\n    useEffect(function () {\n        if (typeof window === \"undefined\" || disabled) {\n            return;\n        }\n        var mq = window.matchMedia(query);\n        var updater = function (_a) {\n            var matches = _a.matches;\n            return setMatches(matches);\n        };\n        mq.addListener(updater);\n        if (mq.matches !== matches) {\n            setMatches(mq.matches);\n        }\n        return function () { return mq.removeListener(updater); };\n    }, [disabled, matches, query]);\n    return matches;\n}\n//# sourceMappingURL=useMediaQuery.js.map"]},"metadata":{},"sourceType":"module"}