{"ast":null,"code":"import { hexToRGB } from \"./hexToRGB\";\nvar RED_MULTIPLIER = 0.2126;\nvar GREEN_MULTIPLIER = 0.7152;\nvar BLUE_MULTIPLIER = 0.0722;\n/**\n * I really couldn't figure out how to name these \"magic\" numbers since the\n * formula doesn't really describe it much:\n *\n * @see https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @internal\n */\n\nfunction get8BitColor(color) {\n  color /= 255;\n\n  if (color <= 0.03928) {\n    return color / 12.92;\n  }\n\n  return Math.pow((color + 0.055) / 1.055, 2.4);\n}\n/**\n * A number closest to 0 should be closest to black while a number closest to 1\n * should be closest to white.\n *\n * @see https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @internal\n */\n\n\nexport function getLuminance(color) {\n  var _a = hexToRGB(color),\n      r = _a[0],\n      g = _a[1],\n      b = _a[2];\n\n  var red = get8BitColor(r) * RED_MULTIPLIER;\n  var green = get8BitColor(g) * GREEN_MULTIPLIER;\n  var blue = get8BitColor(b) * BLUE_MULTIPLIER;\n  return red + green + blue;\n}","map":{"version":3,"sources":["../../src/colors/getLuminance.ts"],"names":[],"mappings":"AAAA,SAAoB,QAApB,QAAoC,YAApC;AAEA,IAAM,cAAc,GAAG,MAAvB;AACA,IAAM,gBAAgB,GAAG,MAAzB;AACA,IAAM,eAAe,GAAG,MAAxB;AAEA;;;;;;AAMG;;AACH,SAAS,YAAT,CAAsB,KAAtB,EAAmC;AACjC,EAAA,KAAK,IAAI,GAAT;;AAEA,MAAI,KAAK,IAAI,OAAb,EAAsB;AACpB,WAAO,KAAK,GAAG,KAAf;AACD;;AAED,SAAO,IAAA,CAAA,GAAA,CAAC,CAAC,KAAK,GAAG,KAAT,IAAkB,KAAnB,EAA6B,GAA7B,CAAP;AACD;AAED;;;;;;AAMG;;;AACH,OAAM,SAAU,YAAV,CAAuB,KAAvB,EAAuC;AACrC,MAAA,EAAA,GAAY,QAAQ,CAAC,KAAD,CAApB;AAAA,MAAC,CAAC,GAAA,EAAA,CAAA,CAAA,CAAF;AAAA,MAAI,CAAC,GAAA,EAAA,CAAA,CAAA,CAAL;AAAA,MAAO,CAAC,GAAA,EAAA,CAAA,CAAA,CAAR;;AAEN,MAAM,GAAG,GAAG,YAAY,CAAC,CAAD,CAAZ,GAAkB,cAA9B;AACA,MAAM,KAAK,GAAG,YAAY,CAAC,CAAD,CAAZ,GAAkB,gBAAhC;AACA,MAAM,IAAI,GAAG,YAAY,CAAC,CAAD,CAAZ,GAAkB,eAA/B;AAEA,SAAO,GAAG,GAAG,KAAN,GAAc,IAArB;AACD","sourceRoot":"","sourcesContent":["import { hexToRGB } from \"./hexToRGB\";\nvar RED_MULTIPLIER = 0.2126;\nvar GREEN_MULTIPLIER = 0.7152;\nvar BLUE_MULTIPLIER = 0.0722;\n/**\n * I really couldn't figure out how to name these \"magic\" numbers since the\n * formula doesn't really describe it much:\n *\n * @see https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @internal\n */\nfunction get8BitColor(color) {\n    color /= 255;\n    if (color <= 0.03928) {\n        return color / 12.92;\n    }\n    return Math.pow(((color + 0.055) / 1.055), 2.4);\n}\n/**\n * A number closest to 0 should be closest to black while a number closest to 1\n * should be closest to white.\n *\n * @see https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\n * @internal\n */\nexport function getLuminance(color) {\n    var _a = hexToRGB(color), r = _a[0], g = _a[1], b = _a[2];\n    var red = get8BitColor(r) * RED_MULTIPLIER;\n    var green = get8BitColor(g) * GREEN_MULTIPLIER;\n    var blue = get8BitColor(b) * BLUE_MULTIPLIER;\n    return red + green + blue;\n}\n//# sourceMappingURL=getLuminance.js.map"]},"metadata":{},"sourceType":"module"}