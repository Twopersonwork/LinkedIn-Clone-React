{"ast":null,"code":"import { useMemo } from \"react\";\nimport { useMediaQuery } from \"./useMediaQuery\";\n/**\n * This is a small helper that will create a media query block based on the\n * provided width value.\n */\n\nexport var toWidthPart = function (v, prefix) {\n  var type = typeof v;\n\n  if (type === \"undefined\") {\n    return \"\";\n  }\n\n  var value = type === \"number\" ? v + \"px\" : v;\n  return \"(\" + prefix + \"-width: \" + value + \")\";\n};\n/**\n * This is a simple hoo that will create a memoized media query string with the\n * provided min anx max values.\n *\n * @param min - An optional min value to use\n * @param max - An optional max value to use\n * @returns a boolean if the current media query is a match.\n */\n\nexport function useWidthMediaQuery(_a) {\n  var min = _a.min,\n      max = _a.max;\n  var query = useMemo(function () {\n    var parts = [toWidthPart(min, \"min\"), toWidthPart(max, \"max\")].filter(Boolean).join(\" and \");\n    return \"screen and \" + parts;\n  }, [min, max]);\n  return useMediaQuery(query);\n}","map":{"version":3,"sources":["../../src/sizing/useWidthMediaQuery.ts"],"names":[],"mappings":"AAAA,SAAS,OAAT,QAAwB,OAAxB;AAGA,SAAS,aAAT,QAA8B,iBAA9B;AAEA;;;AAGG;;AACH,OAAO,IAAM,WAAW,GAAG,UACzB,CADyB,EAEzB,MAFyB,EAEJ;AAErB,MAAM,IAAI,GAAG,OAAO,CAApB;;AACA,MAAI,IAAI,KAAK,WAAb,EAA0B;AACxB,WAAO,EAAP;AACD;;AAED,MAAM,KAAK,GAAG,IAAI,KAAK,QAAT,GAAuB,CAAC,GAAA,IAAxB,GAA+B,CAA7C;AACA,SAAO,MAAI,MAAJ,GAAU,UAAV,GAAqB,KAArB,GAA0B,GAAjC;AACD,CAXM;AAuBP;;;;;;;AAOG;;AACH,OAAM,SAAU,kBAAV,CAA6B,EAA7B,EAG+B;MAFnC,GAAG,GAAA,EAAA,CAAA,G;MACH,GAAG,GAAA,EAAA,CAAA,G;AAEH,MAAM,KAAK,GAAG,OAAO,CAAC,YAAA;AACpB,QAAM,KAAK,GAAG,CAAC,WAAW,CAAC,GAAD,EAAM,KAAN,CAAZ,EAA0B,WAAW,CAAC,GAAD,EAAM,KAAN,CAArC,EACX,MADW,CACJ,OADI,EAEX,IAFW,CAEN,OAFM,CAAd;AAIA,WAAO,gBAAc,KAArB;AACD,GANoB,EAMlB,CAAC,GAAD,EAAM,GAAN,CANkB,CAArB;AAQA,SAAO,aAAa,CAAC,KAAD,CAApB;AACD","sourceRoot":"","sourcesContent":["import { useMemo } from \"react\";\nimport { useMediaQuery } from \"./useMediaQuery\";\n/**\n * This is a small helper that will create a media query block based on the\n * provided width value.\n */\nexport var toWidthPart = function (v, prefix) {\n    var type = typeof v;\n    if (type === \"undefined\") {\n        return \"\";\n    }\n    var value = type === \"number\" ? v + \"px\" : v;\n    return \"(\" + prefix + \"-width: \" + value + \")\";\n};\n/**\n * This is a simple hoo that will create a memoized media query string with the\n * provided min anx max values.\n *\n * @param min - An optional min value to use\n * @param max - An optional max value to use\n * @returns a boolean if the current media query is a match.\n */\nexport function useWidthMediaQuery(_a) {\n    var min = _a.min, max = _a.max;\n    var query = useMemo(function () {\n        var parts = [toWidthPart(min, \"min\"), toWidthPart(max, \"max\")]\n            .filter(Boolean)\n            .join(\" and \");\n        return \"screen and \" + parts;\n    }, [min, max]);\n    return useMediaQuery(query);\n}\n//# sourceMappingURL=useWidthMediaQuery.js.map"]},"metadata":{},"sourceType":"module"}