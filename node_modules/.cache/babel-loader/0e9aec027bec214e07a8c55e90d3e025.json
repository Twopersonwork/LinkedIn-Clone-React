{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport cn from \"classnames\";\nimport { useRipples } from \"./ripples/useRipples\";\nimport { useStatesConfigContext } from \"./StatesConfig\";\nimport { useKeyboardClickPolyfill } from \"./useKeyboardClickPolyfill\";\nimport { usePressedStates } from \"./usePressedStates\";\n/**\n * This is probably one of the most useful hook in react-md. Any functional\n * component component that uses this will gain all the different interaction\n * states based on the states context or any custom overrides.\n *\n * The main interaction state is the \"ripple\" effect when an element has been\n * clicked either via keyboard, mouse, or touch.\n *\n * If the ripple effect is disabled, it will fallback to \"polyfilling\"/fixing\n * the `:pressed` pseudo-selector state for items so that a different\n * background-color opacity is applied instead of the entire ripple effect. This\n * is polyfilled since the `:pressed` state does not work on anything other than\n * buttons and links by default and it is not triggered on \"valid\" keyboard\n * clicks with a spacebar.\n *\n * Finally, the element that uses this hook will gain a focused className\n * whenever it gains keyboard focus only.\n *\n * To get all these interaction states to work correctly, this hook returns an\n * object containing:\n *\n * - `handlers`- an object of event handlers that must be passed down to your\n *   component to get the different interaction states. All the event handlers\n *   are automatically merged with any `handlers` that are provided to this hook\n *   so they can all be called if needed.\n * - `className` - the current class name for the element\n * - `ripples` - a renderable element that displays the ripple effects. This\n *   will be `null` when ripples are disabled.\n *\n * @typeParam E - The element type for the component being wrapped. This is\n * really just used to \"better type\" the event handlers.\n */\n\nexport function useInteractionStates(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var disabled = options.disabled,\n      rippleClassName = options.rippleClassName,\n      rippleContainerClassName = options.rippleContainerClassName,\n      _a = options.disableSpacebarClick,\n      disableSpacebarClick = _a === void 0 ? false : _a,\n      _b = options.disablePressedFallback,\n      disablePressedFallback = _b === void 0 ? false : _b,\n      _c = options.enablePressedAndRipple,\n      enablePressedAndRipple = _c === void 0 ? false : _c,\n      _d = options.disableEnterClick,\n      disableEnterClick = _d === void 0 ? false : _d;\n  var className = options.className,\n      disableRipple = options.disableRipple,\n      disableProgrammaticRipple = options.disableProgrammaticRipple,\n      rippleTimeout = options.rippleTimeout,\n      rippleClassNames = options.rippleClassNames; // populate undefined props from their context values\n\n  var context = useStatesConfigContext();\n\n  if (typeof disableRipple === \"undefined\") {\n    disableRipple = context.disableRipple;\n  }\n\n  if (typeof disableProgrammaticRipple === \"undefined\") {\n    disableProgrammaticRipple = context.disableProgrammaticRipple;\n  }\n\n  if (typeof rippleTimeout === \"undefined\") {\n    rippleTimeout = context.rippleTimeout;\n  }\n\n  if (typeof rippleClassNames === \"undefined\") {\n    rippleClassNames = context.rippleClassNames;\n  }\n\n  var handlers = null;\n  var ripples = null;\n  var ripplesResult = useRipples(__assign(__assign({}, options), {\n    disableSpacebarClick: disableSpacebarClick,\n    disableRipple: disableRipple,\n    disableProgrammaticRipple: disableProgrammaticRipple,\n    rippleTimeout: rippleTimeout,\n    rippleClassName: rippleClassName,\n    rippleContainerClassName: rippleContainerClassName\n  }));\n\n  if (!disableRipple) {\n    ripples = ripplesResult.ripples, handlers = ripplesResult.handlers;\n  }\n\n  var pressedResult = usePressedStates(__assign(__assign({}, options), {\n    handlers: handlers || options.handlers,\n    disableSpacebarClick: disableSpacebarClick\n  }));\n\n  if (enablePressedAndRipple || disableRipple && !disablePressedFallback) {\n    handlers = pressedResult.handlers;\n    className = cn(className, {\n      \"rmd-states--pressed\": pressedResult.pressed\n    });\n  }\n\n  handlers = handlers || options.handlers || {};\n  handlers.onKeyDown = useKeyboardClickPolyfill({\n    disabled: disabled,\n    disableEnterClick: disableEnterClick,\n    disableSpacebarClick: disableSpacebarClick,\n    onKeyDown: handlers.onKeyDown\n  });\n  return {\n    ripples: ripples,\n    className: className,\n    handlers: handlers\n  };\n}","map":{"version":3,"sources":["../src/useInteractionStates.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport cn from \"classnames\";\nimport { useRipples } from \"./ripples/useRipples\";\nimport { useStatesConfigContext, } from \"./StatesConfig\";\nimport { useKeyboardClickPolyfill } from \"./useKeyboardClickPolyfill\";\nimport { usePressedStates } from \"./usePressedStates\";\n/**\n * This is probably one of the most useful hook in react-md. Any functional\n * component component that uses this will gain all the different interaction\n * states based on the states context or any custom overrides.\n *\n * The main interaction state is the \"ripple\" effect when an element has been\n * clicked either via keyboard, mouse, or touch.\n *\n * If the ripple effect is disabled, it will fallback to \"polyfilling\"/fixing\n * the `:pressed` pseudo-selector state for items so that a different\n * background-color opacity is applied instead of the entire ripple effect. This\n * is polyfilled since the `:pressed` state does not work on anything other than\n * buttons and links by default and it is not triggered on \"valid\" keyboard\n * clicks with a spacebar.\n *\n * Finally, the element that uses this hook will gain a focused className\n * whenever it gains keyboard focus only.\n *\n * To get all these interaction states to work correctly, this hook returns an\n * object containing:\n *\n * - `handlers`- an object of event handlers that must be passed down to your\n *   component to get the different interaction states. All the event handlers\n *   are automatically merged with any `handlers` that are provided to this hook\n *   so they can all be called if needed.\n * - `className` - the current class name for the element\n * - `ripples` - a renderable element that displays the ripple effects. This\n *   will be `null` when ripples are disabled.\n *\n * @typeParam E - The element type for the component being wrapped. This is\n * really just used to \"better type\" the event handlers.\n */\nexport function useInteractionStates(options) {\n    if (options === void 0) { options = {}; }\n    var disabled = options.disabled, rippleClassName = options.rippleClassName, rippleContainerClassName = options.rippleContainerClassName, _a = options.disableSpacebarClick, disableSpacebarClick = _a === void 0 ? false : _a, _b = options.disablePressedFallback, disablePressedFallback = _b === void 0 ? false : _b, _c = options.enablePressedAndRipple, enablePressedAndRipple = _c === void 0 ? false : _c, _d = options.disableEnterClick, disableEnterClick = _d === void 0 ? false : _d;\n    var className = options.className, disableRipple = options.disableRipple, disableProgrammaticRipple = options.disableProgrammaticRipple, rippleTimeout = options.rippleTimeout, rippleClassNames = options.rippleClassNames;\n    // populate undefined props from their context values\n    var context = useStatesConfigContext();\n    if (typeof disableRipple === \"undefined\") {\n        (disableRipple = context.disableRipple);\n    }\n    if (typeof disableProgrammaticRipple === \"undefined\") {\n        (disableProgrammaticRipple = context.disableProgrammaticRipple);\n    }\n    if (typeof rippleTimeout === \"undefined\") {\n        (rippleTimeout = context.rippleTimeout);\n    }\n    if (typeof rippleClassNames === \"undefined\") {\n        (rippleClassNames = context.rippleClassNames);\n    }\n    var handlers = null;\n    var ripples = null;\n    var ripplesResult = useRipples(__assign(__assign({}, options), { disableSpacebarClick: disableSpacebarClick,\n        disableRipple: disableRipple,\n        disableProgrammaticRipple: disableProgrammaticRipple,\n        rippleTimeout: rippleTimeout,\n        rippleClassName: rippleClassName,\n        rippleContainerClassName: rippleContainerClassName }));\n    if (!disableRipple) {\n        (ripples = ripplesResult.ripples, handlers = ripplesResult.handlers);\n    }\n    var pressedResult = usePressedStates(__assign(__assign({}, options), { handlers: handlers || options.handlers, disableSpacebarClick: disableSpacebarClick }));\n    if (enablePressedAndRipple || (disableRipple && !disablePressedFallback)) {\n        (handlers = pressedResult.handlers);\n        className = cn(className, { \"rmd-states--pressed\": pressedResult.pressed });\n    }\n    handlers = handlers || options.handlers || {};\n    handlers.onKeyDown = useKeyboardClickPolyfill({\n        disabled: disabled,\n        disableEnterClick: disableEnterClick,\n        disableSpacebarClick: disableSpacebarClick,\n        onKeyDown: handlers.onKeyDown,\n    });\n    return {\n        ripples: ripples,\n        className: className,\n        handlers: handlers,\n    };\n}\n//# sourceMappingURL=useInteractionStates.js.map"]},"metadata":{},"sourceType":"module"}