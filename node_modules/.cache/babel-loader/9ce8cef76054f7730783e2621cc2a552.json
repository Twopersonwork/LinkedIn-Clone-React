{"ast":null,"code":"import { useCallback } from \"react\";\nimport { useRefCache } from \"@react-md/utils\";\n/**\n * This small utility function will create an onKeyDown handler that allows the\n * user to \"click\" an element with the keyboard via Enter or Space.\n */\n\nexport function useKeyboardClickPolyfill(_a) {\n  var _b = _a === void 0 ? {} : _a,\n      onKeyDown = _b.onKeyDown,\n      _c = _b.disabled,\n      disabled = _c === void 0 ? false : _c,\n      _d = _b.disableEnterClick,\n      disableEnterClick = _d === void 0 ? false : _d,\n      _e = _b.disableSpacebarClick,\n      disableSpacebarClick = _e === void 0 ? false : _e;\n\n  var ref = useRefCache({\n    onKeyDown: onKeyDown,\n    disableSpacebarClick: disableSpacebarClick,\n    disableEnterClick: disableEnterClick\n  });\n  var handleKeyDown = useCallback(function (event) {\n    var _a = ref.current,\n        onKeyDown = _a.onKeyDown,\n        disableSpacebarClick = _a.disableSpacebarClick,\n        disableEnterClick = _a.disableEnterClick;\n\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    var isSpace = event.key === \" \";\n    var isEnter = event.key === \"Enter\";\n    var currentTarget = event.currentTarget;\n    var tagName = currentTarget.tagName;\n\n    if (!isSpace && !isEnter || isSpace && disableSpacebarClick || isEnter && disableEnterClick || // buttons and textareas, and inputs shouldn't be polyfilled\n    /BUTTON|TEXTAREA|INPUT/.test(tagName) || // native links don't click on space\n    isSpace && tagName === \"A\") {\n      return;\n    }\n\n    if (isSpace) {\n      // prevent default behavior of page scrolling\n      event.preventDefault();\n    } // don't want parent keydown events to be triggered since this should now\n    // be a \"click\" event instead.\n\n\n    event.stopPropagation();\n    event.currentTarget.click(); // disabled since useRefCache\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return disabled ? onKeyDown : handleKeyDown;\n}","map":{"version":3,"sources":["../src/useKeyboardClickPolyfill.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAA4B,OAA5B;AACA,SAAS,WAAT,QAA4B,iBAA5B;AA6BA;;;AAGG;;AACH,OAAM,SAAU,wBAAV,CAAwE,EAAxE,EAKY;MAL4D,EAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAK9D,EAL8D,GAK5D,E;MAJhB,SAAS,GAAA,EAAA,CAAA,S;MACT,EAAA,GAAA,EAAA,CAAA,Q;MAAA,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,E;MAChB,EAAA,GAAA,EAAA,CAAA,iB;MAAA,iBAAiB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,E;MACzB,EAAA,GAAA,EAAA,CAAA,oB;MAAA,oBAAoB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,E;;AAE5B,MAAM,GAAG,GAAG,WAAW,CAAC;AACtB,IAAA,SAAS,EAAA,SADa;AAEtB,IAAA,oBAAoB,EAAA,oBAFE;AAGtB,IAAA,iBAAiB,EAAA;AAHK,GAAD,CAAvB;AAMA,MAAM,aAAa,GAAG,WAAW,CAAC,UAAC,KAAD,EAA8B;AACxD,QAAA,EAAA,GAAyD,GAAG,CAAC,OAA7D;AAAA,QAAE,SAAS,GAAA,EAAA,CAAA,SAAX;AAAA,QAAa,oBAAoB,GAAA,EAAA,CAAA,oBAAjC;AAAA,QAAmC,iBAAiB,GAAA,EAAA,CAAA,iBAApD;;AACN,QAAI,SAAJ,EAAe;AACb,MAAA,SAAS,CAAC,KAAD,CAAT;AACD;;AAED,QAAM,OAAO,GAAG,KAAK,CAAC,GAAN,KAAc,GAA9B;AACA,QAAM,OAAO,GAAG,KAAK,CAAC,GAAN,KAAc,OAA9B;AACQ,QAAA,aAAa,GAAK,KAAK,CAAV,aAAb;AACA,QAAA,OAAO,GAAK,aAAa,CAAlB,OAAP;;AACR,QACG,CAAC,OAAD,IAAY,CAAC,OAAd,IACC,OAAO,IAAI,oBADZ,IAEC,OAAO,IAAI,iBAFZ,IAGA;AACA,4BAAwB,IAAxB,CAA6B,OAA7B,CAJA,IAKA;AACC,IAAA,OAAO,IAAI,OAAO,KAAK,GAP1B,EAQE;AACA;AACD;;AAED,QAAI,OAAJ,EAAa;AACX;AACA,MAAA,KAAK,CAAC,cAAN;AACD,KAzB6D,CA2B9D;AACA;;;AACA,IAAA,KAAK,CAAC,eAAN;AACA,IAAA,KAAK,CAAC,aAAN,CAAoB,KAApB,GA9B8D,CA+B9D;AACA;AACD,GAjCgC,EAiC9B,EAjC8B,CAAjC;AAmCA,SAAO,QAAQ,GAAG,SAAH,GAAe,aAA9B;AACD","sourceRoot":"","sourcesContent":["import { useCallback } from \"react\";\nimport { useRefCache } from \"@react-md/utils\";\n/**\n * This small utility function will create an onKeyDown handler that allows the\n * user to \"click\" an element with the keyboard via Enter or Space.\n */\nexport function useKeyboardClickPolyfill(_a) {\n    var _b = _a === void 0 ? {} : _a, onKeyDown = _b.onKeyDown, _c = _b.disabled, disabled = _c === void 0 ? false : _c, _d = _b.disableEnterClick, disableEnterClick = _d === void 0 ? false : _d, _e = _b.disableSpacebarClick, disableSpacebarClick = _e === void 0 ? false : _e;\n    var ref = useRefCache({\n        onKeyDown: onKeyDown,\n        disableSpacebarClick: disableSpacebarClick,\n        disableEnterClick: disableEnterClick,\n    });\n    var handleKeyDown = useCallback(function (event) {\n        var _a = ref.current, onKeyDown = _a.onKeyDown, disableSpacebarClick = _a.disableSpacebarClick, disableEnterClick = _a.disableEnterClick;\n        if (onKeyDown) {\n            onKeyDown(event);\n        }\n        var isSpace = event.key === \" \";\n        var isEnter = event.key === \"Enter\";\n        var currentTarget = event.currentTarget;\n        var tagName = currentTarget.tagName;\n        if ((!isSpace && !isEnter) ||\n            (isSpace && disableSpacebarClick) ||\n            (isEnter && disableEnterClick) ||\n            // buttons and textareas, and inputs shouldn't be polyfilled\n            /BUTTON|TEXTAREA|INPUT/.test(tagName) ||\n            // native links don't click on space\n            (isSpace && tagName === \"A\")) {\n            return;\n        }\n        if (isSpace) {\n            // prevent default behavior of page scrolling\n            event.preventDefault();\n        }\n        // don't want parent keydown events to be triggered since this should now\n        // be a \"click\" event instead.\n        event.stopPropagation();\n        event.currentTarget.click();\n        // disabled since useRefCache\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return disabled ? onKeyDown : handleKeyDown;\n}\n//# sourceMappingURL=useKeyboardClickPolyfill.js.map"]},"metadata":{},"sourceType":"module"}