{"ast":null,"code":"/**\n * A simple util to convert a unit that is using `px`, `em`, or `rem` to a\n * number so that calculations can be made on that unit.\n *\n * @param unit - The unit to convert to a number\n * @param element - The element to use to use for calculating `em`\n * @returns the unit as a number\n */\nexport function unitToNumber(unit, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.fontSizeFallback,\n      fontSizeFallback = _a === void 0 ? 16 : _a,\n      element = options.element;\n\n  if (typeof unit === \"number\") {\n    return unit;\n  }\n\n  var parsed = parseFloat(unit);\n\n  if (/px$/.test(unit)) {\n    return parsed;\n  }\n\n  if (typeof document === \"undefined\") {\n    return parsed * fontSizeFallback;\n  }\n\n  var rem = /rem$/.test(unit);\n  var el = document.documentElement;\n\n  if (!rem && element) {\n    el = element.parentElement || element;\n  }\n\n  var fontSize = parseFloat(window.getComputedStyle(el).fontSize || fontSizeFallback + \"px\");\n  return parsed * fontSize;\n}","map":{"version":3,"sources":["../src/unitToNumber.ts"],"names":[],"mappings":"AAIA;;;;;;;AAOG;AACH,OAAM,SAAU,YAAV,CACJ,IADI,EAEJ,OAFI,EAE6B;AAAjC,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAAiC;;AAEzB,MAAA,EAAA,GAAmC,OAAO,CAArB,gBAArB;AAAA,MAAA,gBAAgB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,EAAH,GAAK,EAArB;AAAA,MAAuB,OAAO,GAAK,OAAO,CAAZ,OAA9B;;AACR,MAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC5B,WAAO,IAAP;AACD;;AAED,MAAM,MAAM,GAAG,UAAU,CAAC,IAAD,CAAzB;;AACA,MAAI,MAAM,IAAN,CAAW,IAAX,CAAJ,EAAsB;AACpB,WAAO,MAAP;AACD;;AAED,MAAI,OAAO,QAAP,KAAoB,WAAxB,EAAqC;AACnC,WAAO,MAAM,GAAG,gBAAhB;AACD;;AAED,MAAM,GAAG,GAAG,OAAO,IAAP,CAAY,IAAZ,CAAZ;AACA,MAAI,EAAE,GAA0B,QAAQ,CAAC,eAAzC;;AACA,MAAI,CAAC,GAAD,IAAQ,OAAZ,EAAqB;AACnB,IAAA,EAAE,GAAG,OAAO,CAAC,aAAR,IAAyB,OAA9B;AACD;;AAED,MAAM,QAAQ,GAAG,UAAU,CACzB,MAAM,CAAC,gBAAP,CAAwB,EAAxB,EAA4B,QAA5B,IAA2C,gBAAgB,GAAA,IADlC,CAA3B;AAIA,SAAO,MAAM,GAAG,QAAhB;AACD","sourceRoot":"","sourcesContent":["/**\n * A simple util to convert a unit that is using `px`, `em`, or `rem` to a\n * number so that calculations can be made on that unit.\n *\n * @param unit - The unit to convert to a number\n * @param element - The element to use to use for calculating `em`\n * @returns the unit as a number\n */\nexport function unitToNumber(unit, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.fontSizeFallback, fontSizeFallback = _a === void 0 ? 16 : _a, element = options.element;\n    if (typeof unit === \"number\") {\n        return unit;\n    }\n    var parsed = parseFloat(unit);\n    if (/px$/.test(unit)) {\n        return parsed;\n    }\n    if (typeof document === \"undefined\") {\n        return parsed * fontSizeFallback;\n    }\n    var rem = /rem$/.test(unit);\n    var el = document.documentElement;\n    if (!rem && element) {\n        el = element.parentElement || element;\n    }\n    var fontSize = parseFloat(window.getComputedStyle(el).fontSize || fontSizeFallback + \"px\");\n    return parsed * fontSize;\n}\n//# sourceMappingURL=unitToNumber.js.map"]},"metadata":{},"sourceType":"module"}