{"ast":null,"code":"import { useResizeListener } from \"./useResizeListener\";\n/**\n * This is a simple component that will attach a throttled resize event listener\n * when mounted, and detach when it unmounts.\n *\n * This component only works for entire app resize events. If you are looking\n * for specific element resize events, check out the `ResizeObserver` component\n * instead.\n */\n\nexport function ResizeListener(_a) {\n  var onResize = _a.onResize,\n      options = _a.options,\n      _b = _a.immediate,\n      immediate = _b === void 0 ? typeof window !== \"undefined\" : _b;\n  useResizeListener({\n    onResize: onResize,\n    options: options,\n    immediate: immediate,\n    enabled: true\n  });\n  return null;\n}\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    ResizeListener.propTypes = {\n      onResize: PropTypes.func.isRequired,\n      options: PropTypes.object,\n      immediate: PropTypes.bool\n    };\n  } catch (e) {}\n}","map":{"version":3,"sources":["../../src/sizing/ResizeListener.tsx"],"names":[],"mappings":"AAAA,SAAgC,iBAAhC,QAAyD,qBAAzD;AAIA;;;;;;;AAOG;;AACH,OAAM,SAAU,cAAV,CAAyB,EAAzB,EAIgB;MAHpB,QAAQ,GAAA,EAAA,CAAA,Q;MACR,OAAO,GAAA,EAAA,CAAA,O;MACP,EAAA,GAAA,EAAA,CAAA,S;MAAA,SAAS,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,OAAO,MAAP,KAAkB,WAArB,GAAgC,E;AAEzC,EAAA,iBAAiB,CAAC;AAAE,IAAA,QAAQ,EAAA,QAAV;AAAY,IAAA,OAAO,EAAA,OAAnB;AAAqB,IAAA,SAAS,EAAA,SAA9B;AAAgC,IAAA,OAAO,EAAE;AAAzC,GAAD,CAAjB;AACA,SAAO,IAAP;AACD;AAED;;AACA,IAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,MAAI;AACF,QAAM,SAAS,GAAG,OAAO,CAAC,YAAD,CAAzB;;AAEA,IAAA,cAAc,CAAC,SAAf,GAA2B;AACzB,MAAA,QAAQ,EAAE,SAAS,CAAC,IAAV,CAAe,UADA;AAEzB,MAAA,OAAO,EAAE,SAAS,CAAC,MAFM;AAGzB,MAAA,SAAS,EAAE,SAAS,CAAC;AAHI,KAA3B;AAKD,GARD,CAQE,OAAO,CAAP,EAAU,CAAE;AACf","sourceRoot":"","sourcesContent":["import { useResizeListener } from \"./useResizeListener\";\n/**\n * This is a simple component that will attach a throttled resize event listener\n * when mounted, and detach when it unmounts.\n *\n * This component only works for entire app resize events. If you are looking\n * for specific element resize events, check out the `ResizeObserver` component\n * instead.\n */\nexport function ResizeListener(_a) {\n    var onResize = _a.onResize, options = _a.options, _b = _a.immediate, immediate = _b === void 0 ? typeof window !== \"undefined\" : _b;\n    useResizeListener({ onResize: onResize, options: options, immediate: immediate, enabled: true });\n    return null;\n}\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        ResizeListener.propTypes = {\n            onResize: PropTypes.func.isRequired,\n            options: PropTypes.object,\n            immediate: PropTypes.bool,\n        };\n    }\n    catch (e) { }\n}\n//# sourceMappingURL=ResizeListener.js.map"]},"metadata":{},"sourceType":"module"}