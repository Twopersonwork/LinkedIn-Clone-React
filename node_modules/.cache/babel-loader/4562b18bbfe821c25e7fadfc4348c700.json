{"ast":null,"code":"/**\n * Attempts to find the first match index for a list of values that starts with\n * the provided query string and is within the start and end indexes. If no\n * matches are found, -1 will be returned instead.\n *\n * Since this is normally coming from a keydown event, the query *must* be a\n * string of all capital letters to work as each value will be converted to\n * uppercase before checking.\n *\n * @param value - The current query string to find within the values\n * @param values - The list of values to search within\n * @param startIndex - The start index for the search\n * @param endIndex - The end index for the search\n * @internal\n */\nexport function findMatchInRange(value, values, startIndex, endIndex) {\n  value = value.toUpperCase();\n\n  for (var i = startIndex; i < endIndex; i += 1) {\n    var content = values[i];\n\n    if (content.toUpperCase().indexOf(value) === 0) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n/**\n * A function that is used to find the next match index within a list of values\n * by comparing the start values ignoring case.\n *\n * If a match can not be found from the search string, `-1` will be returned.\n * The search value is self-matchable by default, but it can be omitted by\n * disabling the `isSelfMatchable` argument. This will make a self-match return\n * `-1`.\n *\n * @param value - The current search value\n * @param values - A list of values to search within\n * @param startIndex - The index within the values list to start the search from\n * @param isSelfMatchable - Boolean if the current index can be included in the\n * search\n * @internal\n */\n\nexport function findMatchIndex(value, values, startIndex, isSelfMatchable) {\n  if (isSelfMatchable === void 0) {\n    isSelfMatchable = true;\n  }\n\n  var index = findMatchInRange(value, values, startIndex + 1, values.length);\n\n  if (index === -1) {\n    var endIndex = startIndex + (isSelfMatchable ? 1 : 0);\n    index = findMatchInRange(value, values, 0, endIndex);\n  }\n\n  return index;\n}","map":{"version":3,"sources":["../../src/search/findMatchIndex.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;AACH,OAAM,SAAU,gBAAV,CACJ,KADI,EAEJ,MAFI,EAGJ,UAHI,EAIJ,QAJI,EAIY;AAEhB,EAAA,KAAK,GAAG,KAAK,CAAC,WAAN,EAAR;;AACA,OAAK,IAAI,CAAC,GAAG,UAAb,EAAyB,CAAC,GAAG,QAA7B,EAAuC,CAAC,IAAI,CAA5C,EAA+C;AAC7C,QAAM,OAAO,GAAG,MAAM,CAAC,CAAD,CAAtB;;AACA,QAAI,OAAO,CAAC,WAAR,GAAsB,OAAtB,CAA8B,KAA9B,MAAyC,CAA7C,EAAgD;AAC9C,aAAO,CAAP;AACD;AACF;;AAED,SAAO,CAAC,CAAR;AACD;AAED;;;;;;;;;;;;;;;AAeG;;AACH,OAAM,SAAU,cAAV,CACJ,KADI,EAEJ,MAFI,EAGJ,UAHI,EAIJ,eAJI,EAIkB;AAAtB,MAAA,eAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,eAAA,GAAA,IAAA;AAAsB;;AAEtB,MAAI,KAAK,GAAG,gBAAgB,CAAC,KAAD,EAAQ,MAAR,EAAgB,UAAU,GAAG,CAA7B,EAAgC,MAAM,CAAC,MAAvC,CAA5B;;AACA,MAAI,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChB,QAAM,QAAQ,GAAG,UAAU,IAAI,eAAe,GAAG,CAAH,GAAO,CAA1B,CAA3B;AACA,IAAA,KAAK,GAAG,gBAAgB,CAAC,KAAD,EAAQ,MAAR,EAAgB,CAAhB,EAAmB,QAAnB,CAAxB;AACD;;AAED,SAAO,KAAP;AACD","sourceRoot":"","sourcesContent":["/**\n * Attempts to find the first match index for a list of values that starts with\n * the provided query string and is within the start and end indexes. If no\n * matches are found, -1 will be returned instead.\n *\n * Since this is normally coming from a keydown event, the query *must* be a\n * string of all capital letters to work as each value will be converted to\n * uppercase before checking.\n *\n * @param value - The current query string to find within the values\n * @param values - The list of values to search within\n * @param startIndex - The start index for the search\n * @param endIndex - The end index for the search\n * @internal\n */\nexport function findMatchInRange(value, values, startIndex, endIndex) {\n    value = value.toUpperCase();\n    for (var i = startIndex; i < endIndex; i += 1) {\n        var content = values[i];\n        if (content.toUpperCase().indexOf(value) === 0) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * A function that is used to find the next match index within a list of values\n * by comparing the start values ignoring case.\n *\n * If a match can not be found from the search string, `-1` will be returned.\n * The search value is self-matchable by default, but it can be omitted by\n * disabling the `isSelfMatchable` argument. This will make a self-match return\n * `-1`.\n *\n * @param value - The current search value\n * @param values - A list of values to search within\n * @param startIndex - The index within the values list to start the search from\n * @param isSelfMatchable - Boolean if the current index can be included in the\n * search\n * @internal\n */\nexport function findMatchIndex(value, values, startIndex, isSelfMatchable) {\n    if (isSelfMatchable === void 0) { isSelfMatchable = true; }\n    var index = findMatchInRange(value, values, startIndex + 1, values.length);\n    if (index === -1) {\n        var endIndex = startIndex + (isSelfMatchable ? 1 : 0);\n        index = findMatchInRange(value, values, 0, endIndex);\n    }\n    return index;\n}\n//# sourceMappingURL=findMatchIndex.js.map"]},"metadata":{},"sourceType":"module"}