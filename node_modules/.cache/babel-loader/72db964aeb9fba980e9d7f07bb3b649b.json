{"ast":null,"code":"import { defaults } from \"../defaults\";\nimport { DEFAULT_SEARCH_OPTIONS, getSearchString } from \"./utils\";\n/**\n * This is a simple `array.find` implementation that will work for any\n * searchable item type and return the first item that starts with the current\n * query string ignoring case.\n *\n * @param query - The current query string to use to match with\n * @param searchable - The list of searchable items\n * @param options - The additional search options available.\n * @returns the found item in the searchable list or null\n */\n\nexport function findIgnoreCase(query, searchable, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = defaults(options, DEFAULT_SEARCH_OPTIONS),\n      getItemValue = _a.getItemValue,\n      valueKey = _a.valueKey,\n      trim = _a.trim,\n      ignoreWhitespace = _a.ignoreWhitespace;\n\n  query = getSearchString(query, true, trim, ignoreWhitespace);\n\n  if (!query.length || !searchable.length) {\n    return null;\n  }\n\n  var found = searchable.find(function (item) {\n    var value = getSearchString(getItemValue(item, valueKey), true, trim, ignoreWhitespace);\n    return value.indexOf(query) === 0;\n  });\n  return typeof found === \"number\" ? found : found || null;\n}","map":{"version":3,"sources":["../../src/search/findIgnoreCase.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,QAAyB,aAAzB;AACA,SACE,sBADF,EAEE,eAFF,QAIO,SAJP;AAMA;;;;;;;;;AASG;;AACH,OAAM,SAAU,cAAV,CACJ,KADI,EAEJ,UAFI,EAGJ,OAHI,EAG0B;AAA9B,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAA8B;;AAExB,MAAA,EAAA,GAAqD,QAAQ,CACjE,OADiE,EAEjE,sBAFiE,CAA7D;AAAA,MAAE,YAAY,GAAA,EAAA,CAAA,YAAd;AAAA,MAAgB,QAAQ,GAAA,EAAA,CAAA,QAAxB;AAAA,MAA0B,IAAI,GAAA,EAAA,CAAA,IAA9B;AAAA,MAAgC,gBAAgB,GAAA,EAAA,CAAA,gBAAhD;;AAKN,EAAA,KAAK,GAAG,eAAe,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoB,gBAApB,CAAvB;;AACA,MAAI,CAAC,KAAK,CAAC,MAAP,IAAiB,CAAC,UAAU,CAAC,MAAjC,EAAyC;AACvC,WAAO,IAAP;AACD;;AAED,MAAM,KAAK,GAAG,UAAU,CAAC,IAAX,CAAgB,UAAC,IAAD,EAAK;AACjC,QAAM,KAAK,GAAG,eAAe,CAC3B,YAAY,CAAC,IAAD,EAAO,QAAP,CADe,EAE3B,IAF2B,EAG3B,IAH2B,EAI3B,gBAJ2B,CAA7B;AAOA,WAAO,KAAK,CAAC,OAAN,CAAc,KAAd,MAAyB,CAAhC;AACD,GATa,CAAd;AAWA,SAAO,OAAO,KAAP,KAAiB,QAAjB,GAA4B,KAA5B,GAAoC,KAAK,IAAI,IAApD;AACD","sourceRoot":"","sourcesContent":["import { defaults } from \"../defaults\";\nimport { DEFAULT_SEARCH_OPTIONS, getSearchString, } from \"./utils\";\n/**\n * This is a simple `array.find` implementation that will work for any\n * searchable item type and return the first item that starts with the current\n * query string ignoring case.\n *\n * @param query - The current query string to use to match with\n * @param searchable - The list of searchable items\n * @param options - The additional search options available.\n * @returns the found item in the searchable list or null\n */\nexport function findIgnoreCase(query, searchable, options) {\n    if (options === void 0) { options = {}; }\n    var _a = defaults(options, DEFAULT_SEARCH_OPTIONS), getItemValue = _a.getItemValue, valueKey = _a.valueKey, trim = _a.trim, ignoreWhitespace = _a.ignoreWhitespace;\n    query = getSearchString(query, true, trim, ignoreWhitespace);\n    if (!query.length || !searchable.length) {\n        return null;\n    }\n    var found = searchable.find(function (item) {\n        var value = getSearchString(getItemValue(item, valueKey), true, trim, ignoreWhitespace);\n        return value.indexOf(query) === 0;\n    });\n    return typeof found === \"number\" ? found : found || null;\n}\n//# sourceMappingURL=findIgnoreCase.js.map"]},"metadata":{},"sourceType":"module"}