{"ast":null,"code":"var allowedVariants = ['normal', 'small-caps'];\n/**\n * Gets font CSS shorthand property given element.\n *\n * @param {HTMLElement} element Element to get font CSS shorthand property from\n */\n\nexport function getFontShorthand(element) {\n  var style = window.getComputedStyle(element);\n\n  if (style.font) {\n    return style.font;\n  }\n\n  var isFontDefined = style['font-family'] !== '';\n\n  if (!isFontDefined) {\n    return '';\n  }\n\n  var fontVariant = allowedVariants.includes(style['font-variant']) ? style['font-variant'] : 'normal';\n  return \"\".concat(style['font-style'], \" \").concat(fontVariant, \" \").concat(style['font-weight'], \" \").concat(style['font-size'], \" / \").concat(style['line-height'], \" \").concat(style['font-family']);\n}\n/**\n * Measures text width given text and font CSS shorthand.\n *\n * @param {String} text Text to measure\n * @param {String} font Font to use when measuring the text\n */\n\nexport function measureText(text, font) {\n  var canvas = measureText.canvas || (measureText.canvas = document.createElement('canvas'));\n  var context = canvas.getContext('2d'); // Context type not supported\n\n  if (!context) {\n    return null;\n  }\n\n  context.font = font;\n\n  var _context$measureText = context.measureText(text),\n      width = _context$measureText.width;\n\n  return Math.ceil(width);\n}\n/**\n * Updates input element width to fit its content given input element\n * @param {HTMLInputElement} element\n */\n\nexport function updateInputWidth(element) {\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  var font = getFontShorthand(element);\n  var text = element.value || element.placeholder;\n  var width = measureText(text, font);\n\n  if (width === null) {\n    return null;\n  }\n\n  element.style.width = \"\".concat(width, \"px\");\n  return width;\n}\nexport default updateInputWidth;","map":{"version":3,"sources":["/home/malav/workspace/LinkedIn-Clone/LinkedIn-Clone-React/linkedin_react/node_modules/update-input-width/dist/esm/index.js"],"names":["allowedVariants","getFontShorthand","element","style","window","getComputedStyle","font","isFontDefined","fontVariant","includes","concat","measureText","text","canvas","document","createElement","context","getContext","_context$measureText","width","Math","ceil","updateInputWidth","value","placeholder"],"mappings":"AAAA,IAAIA,eAAe,GAAG,CAAC,QAAD,EAAW,YAAX,CAAtB;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,gBAAT,CAA0BC,OAA1B,EAAmC;AACxC,MAAIC,KAAK,GAAGC,MAAM,CAACC,gBAAP,CAAwBH,OAAxB,CAAZ;;AAEA,MAAIC,KAAK,CAACG,IAAV,EAAgB;AACd,WAAOH,KAAK,CAACG,IAAb;AACD;;AAED,MAAIC,aAAa,GAAGJ,KAAK,CAAC,aAAD,CAAL,KAAyB,EAA7C;;AAEA,MAAI,CAACI,aAAL,EAAoB;AAClB,WAAO,EAAP;AACD;;AAED,MAAIC,WAAW,GAAGR,eAAe,CAACS,QAAhB,CAAyBN,KAAK,CAAC,cAAD,CAA9B,IAAkDA,KAAK,CAAC,cAAD,CAAvD,GAA0E,QAA5F;AACA,SAAO,GAAGO,MAAH,CAAUP,KAAK,CAAC,YAAD,CAAf,EAA+B,GAA/B,EAAoCO,MAApC,CAA2CF,WAA3C,EAAwD,GAAxD,EAA6DE,MAA7D,CAAoEP,KAAK,CAAC,aAAD,CAAzE,EAA0F,GAA1F,EAA+FO,MAA/F,CAAsGP,KAAK,CAAC,WAAD,CAA3G,EAA0H,KAA1H,EAAiIO,MAAjI,CAAwIP,KAAK,CAAC,aAAD,CAA7I,EAA8J,GAA9J,EAAmKO,MAAnK,CAA0KP,KAAK,CAAC,aAAD,CAA/K,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASQ,WAAT,CAAqBC,IAArB,EAA2BN,IAA3B,EAAiC;AACtC,MAAIO,MAAM,GAAGF,WAAW,CAACE,MAAZ,KAAuBF,WAAW,CAACE,MAAZ,GAAqBC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAA5C,CAAb;AACA,MAAIC,OAAO,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAd,CAFsC,CAEC;;AAEvC,MAAI,CAACD,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAEDA,EAAAA,OAAO,CAACV,IAAR,GAAeA,IAAf;;AAEA,MAAIY,oBAAoB,GAAGF,OAAO,CAACL,WAAR,CAAoBC,IAApB,CAA3B;AAAA,MACIO,KAAK,GAAGD,oBAAoB,CAACC,KADjC;;AAGA,SAAOC,IAAI,CAACC,IAAL,CAAUF,KAAV,CAAP;AACD;AACD;AACA;AACA;AACA;;AAEA,OAAO,SAASG,gBAAT,CAA0BpB,OAA1B,EAAmC;AACxC,MAAI,OAAOE,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAO,IAAP;AACD;;AAED,MAAIE,IAAI,GAAGL,gBAAgB,CAACC,OAAD,CAA3B;AACA,MAAIU,IAAI,GAAGV,OAAO,CAACqB,KAAR,IAAiBrB,OAAO,CAACsB,WAApC;AACA,MAAIL,KAAK,GAAGR,WAAW,CAACC,IAAD,EAAON,IAAP,CAAvB;;AAEA,MAAIa,KAAK,KAAK,IAAd,EAAoB;AAClB,WAAO,IAAP;AACD;;AAEDjB,EAAAA,OAAO,CAACC,KAAR,CAAcgB,KAAd,GAAsB,GAAGT,MAAH,CAAUS,KAAV,EAAiB,IAAjB,CAAtB;AACA,SAAOA,KAAP;AACD;AACD,eAAeG,gBAAf","sourcesContent":["var allowedVariants = ['normal', 'small-caps'];\n/**\n * Gets font CSS shorthand property given element.\n *\n * @param {HTMLElement} element Element to get font CSS shorthand property from\n */\n\nexport function getFontShorthand(element) {\n  var style = window.getComputedStyle(element);\n\n  if (style.font) {\n    return style.font;\n  }\n\n  var isFontDefined = style['font-family'] !== '';\n\n  if (!isFontDefined) {\n    return '';\n  }\n\n  var fontVariant = allowedVariants.includes(style['font-variant']) ? style['font-variant'] : 'normal';\n  return \"\".concat(style['font-style'], \" \").concat(fontVariant, \" \").concat(style['font-weight'], \" \").concat(style['font-size'], \" / \").concat(style['line-height'], \" \").concat(style['font-family']);\n}\n/**\n * Measures text width given text and font CSS shorthand.\n *\n * @param {String} text Text to measure\n * @param {String} font Font to use when measuring the text\n */\n\nexport function measureText(text, font) {\n  var canvas = measureText.canvas || (measureText.canvas = document.createElement('canvas'));\n  var context = canvas.getContext('2d'); // Context type not supported\n\n  if (!context) {\n    return null;\n  }\n\n  context.font = font;\n\n  var _context$measureText = context.measureText(text),\n      width = _context$measureText.width;\n\n  return Math.ceil(width);\n}\n/**\n * Updates input element width to fit its content given input element\n * @param {HTMLInputElement} element\n */\n\nexport function updateInputWidth(element) {\n  if (typeof window === 'undefined') {\n    return null;\n  }\n\n  var font = getFontShorthand(element);\n  var text = element.value || element.placeholder;\n  var width = measureText(text, font);\n\n  if (width === null) {\n    return null;\n  }\n\n  element.style.width = \"\".concat(width, \"px\");\n  return width;\n}\nexport default updateInputWidth;"]},"metadata":{},"sourceType":"module"}