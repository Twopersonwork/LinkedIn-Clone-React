{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { isSupported } from \"./passiveEvents\";\n/**\n * A helper function for manually setting touch events on elements when they\n * cannot be directly added with a React event listener. This will attempt to\n * create a passive event if the browser supports passive events so there is\n * better scroll performance.\n */\n\nexport function setTouchEvent(\n/**\n * Boolean if the event should be added or removed.\n */\nadd,\n/**\n * The element to add the touch event to.\n */\nel,\n/**\n * One of the touch types to modify.\n */\neventType,\n/**\n * The touch event callback function to use.\n */\ncallback,\n/**\n * Boolean if the event should be captured if the browser does not support\n * passive events.\n */\ncapture,\n/**\n * Any additional options to provide to the passive event.\n */\noptions) {\n  if (capture === void 0) {\n    capture = false;\n  } // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n\n\n  el[(add ? \"add\" : \"remove\") + \"EventListener\"](\"touch\" + eventType, callback, isSupported ? __assign({\n    passive: true,\n    capture: capture\n  }, options) : capture);\n}\n/**\n * A simple wrapper for the `setTouchEvent` to just always add events.\n */\n\nexport function addTouchEvent(\n/**\n * The element to add the touch event to.\n */\nel,\n/**\n * One of the touch types to modify.\n */\neventType,\n/**\n * The touch event callback function to use.\n */\ncallback,\n/**\n * Boolean if the event should be captured if the browser does not support\n * passive events.\n */\ncapture,\n/**\n * Any additional options to provide to the passive event.\n */\noptions) {\n  if (capture === void 0) {\n    capture = false;\n  }\n\n  setTouchEvent(true, el, eventType, callback, capture, options);\n}\n/**\n * A simple wrapper for the `setTouchEvent` to just always remove events.\n *\n * @param el - The element to add the touch event to.\n * @param eventType - One of the touch types to modify.\n */\n\nexport function removeTouchEvent(el, eventType,\n/**\n * The touch event callback function to use.\n */\ncallback,\n/**\n * Boolean if the event should be captured if the browser does not support\n * passive events.\n */\ncapture,\n/**\n * Any additional options to provide to the passive event.\n */\noptions) {\n  if (capture === void 0) {\n    capture = false;\n  }\n\n  setTouchEvent(false, el, eventType, callback, capture, options);\n}","map":{"version":3,"sources":["../../src/events/touches.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,SAAS,WAAT,QAA4B,iBAA5B;AAIA;;;;;AAKG;;AACH,OAAM,SAAU,aAAV;AACJ;;AAEG;AACH,GAJI;AAKJ;;AAEG;AACH,EARI;AASJ;;AAEG;AACH,SAZI;AAaJ;;AAEG;AACH,QAhBI;AAiBJ;;;AAGG;AACH,OArBI;AAsBJ;;AAEG;AACH,OAzBI,EAyB6B;AAJjC,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,KAAA;AAAe,GAIkB,CAEjC;AACA;;;AACA,EAAA,EAAE,CAAC,CAAG,GAAG,GAAG,KAAH,GAAW,QAAjB,IAAyB,eAA1B,CAAF,CACE,UAAQ,SADV,EAEE,QAFF,EAGE,WAAW,GAAE,QAAA,CAAA;AAAG,IAAA,OAAO,EAAE,IAAZ;AAAkB,IAAA,OAAO,EAAA;AAAzB,GAAA,EAA8B,OAA9B,CAAF,GAA4C,OAHzD;AAKD;AAED;;AAEG;;AACH,OAAM,SAAU,aAAV;AACJ;;AAEG;AACH,EAJI;AAKJ;;AAEG;AACH,SARI;AASJ;;AAEG;AACH,QAZI;AAaJ;;;AAGG;AACH,OAjBI;AAkBJ;;AAEG;AACH,OArBI,EAqB6B;AAJjC,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,KAAA;AAAe;;AAMf,EAAA,aAAa,CAAC,IAAD,EAAO,EAAP,EAAW,SAAX,EAAsB,QAAtB,EAAgC,OAAhC,EAAyC,OAAzC,CAAb;AACD;AAED;;;;;AAKG;;AACH,OAAM,SAAU,gBAAV,CACJ,EADI,EAEJ,SAFI;AAGJ;;AAEG;AACH,QANI;AAOJ;;;AAGG;AACH,OAXI;AAYJ;;AAEG;AACH,OAfI,EAe6B;AAJjC,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,KAAA;AAAe;;AAMf,EAAA,aAAa,CAAC,KAAD,EAAQ,EAAR,EAAY,SAAZ,EAAuB,QAAvB,EAAiC,OAAjC,EAA0C,OAA1C,CAAb;AACD","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { isSupported } from \"./passiveEvents\";\n/**\n * A helper function for manually setting touch events on elements when they\n * cannot be directly added with a React event listener. This will attempt to\n * create a passive event if the browser supports passive events so there is\n * better scroll performance.\n */\nexport function setTouchEvent(\n/**\n * Boolean if the event should be added or removed.\n */\nadd, \n/**\n * The element to add the touch event to.\n */\nel, \n/**\n * One of the touch types to modify.\n */\neventType, \n/**\n * The touch event callback function to use.\n */\ncallback, \n/**\n * Boolean if the event should be captured if the browser does not support\n * passive events.\n */\ncapture, \n/**\n * Any additional options to provide to the passive event.\n */\noptions) {\n    if (capture === void 0) { capture = false; }\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-expect-error\n    el[(add ? \"add\" : \"remove\") + \"EventListener\"](\"touch\" + eventType, callback, isSupported ? __assign({ passive: true, capture: capture }, options) : capture);\n}\n/**\n * A simple wrapper for the `setTouchEvent` to just always add events.\n */\nexport function addTouchEvent(\n/**\n * The element to add the touch event to.\n */\nel, \n/**\n * One of the touch types to modify.\n */\neventType, \n/**\n * The touch event callback function to use.\n */\ncallback, \n/**\n * Boolean if the event should be captured if the browser does not support\n * passive events.\n */\ncapture, \n/**\n * Any additional options to provide to the passive event.\n */\noptions) {\n    if (capture === void 0) { capture = false; }\n    setTouchEvent(true, el, eventType, callback, capture, options);\n}\n/**\n * A simple wrapper for the `setTouchEvent` to just always remove events.\n *\n * @param el - The element to add the touch event to.\n * @param eventType - One of the touch types to modify.\n */\nexport function removeTouchEvent(el, eventType, \n/**\n * The touch event callback function to use.\n */\ncallback, \n/**\n * Boolean if the event should be captured if the browser does not support\n * passive events.\n */\ncapture, \n/**\n * Any additional options to provide to the passive event.\n */\noptions) {\n    if (capture === void 0) { capture = false; }\n    setTouchEvent(false, el, eventType, callback, capture, options);\n}\n//# sourceMappingURL=touches.js.map"]},"metadata":{},"sourceType":"module"}