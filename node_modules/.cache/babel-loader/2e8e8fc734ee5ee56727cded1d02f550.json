{"ast":null,"code":"import { useRef, useState } from \"react\";\nimport { useIsomorphicLayoutEffect } from \"../useIsomorphicLayoutEffect\";\n/**\n * @internal\n */\n\nvar TOUCH_TIMEOUT = 1200;\n/**\n * This hook helps determine the current interaction mode by attaching the\n * required event listeners to the window. The `mode` will always be defaulted\n * to `mouse` at first since it has the least possibilities of causing errors\n * with styles since the mouse-only styles are normally just `:hover` effects.\n *\n * ## Switching between modes:\n *\n * ### While in `mouse` mode:\n *\n * - any `keydown` event will switch to `keyboard` mode\n *   - this does have the side effect of meta keys also causing the switch over,\n *     but it feels fine since it helps show the current focus in the document\n *     as well\n * - any `touchstart` event will switch to `touch` mode\n *\n * ### While in `keyboard` mode:\n *\n * - any `mousedown` event will switch to `mouse` mode\n *   - it is perfectly okay to move the mouse while in keyboard mode, but still\n *     want to keep the keyboard styles until the user actually starts clicking\n * - any `touchstart` event will switch to `touch` mode\n *\n * ### While in `touch` mode:\n *\n * - any `mousemove` event will switch to `mouse` mode, but **only** if there\n *   hasn't been a `contextmenu` event within the last `1.2s`\n *   - you can really only switch back to `mouse` mode if you are using the\n *     devtools to emulate devices OR using a touch-desktop. I don't know how\n *     common this really is though.\n *   - touching the screen will always fire a `mousemove` event (which is why\n *     the `:hover` styles are normally with `rmd-utils-mouse-only`) and even\n *     after the `contextmenu` event. Normally want to go back to `mouse` mode\n *     when the mouse re-enters the `window`\n *\n * Note: It's currently impossible to switch from `touch` to `keyboard`\n * immediately. You'd first need to switch to `mouse` and then to `keyboard`. I\n * don't really know of any use-cases other than the weird touch-desktop stuff\n * and I have no experience using them.\n *\n * @internal\n */\n\nexport function useInteractionMode() {\n  var _a = useState(\"mouse\"),\n      mode = _a[0],\n      setMode = _a[1];\n\n  var lastTouchTime = useRef(0);\n  var isTouchContextMenu = useRef(false);\n  useIsomorphicLayoutEffect(function () {\n    var enableMouseMode = function () {\n      return setMode(\"mouse\");\n    };\n\n    var enableKeyboardMode = function () {\n      return setMode(\"keyboard\");\n    };\n\n    var handleTouchStart = function () {\n      lastTouchTime.current = Date.now();\n      isTouchContextMenu.current = false;\n      setMode(\"touch\");\n    };\n\n    var handleMouseMove = function () {\n      if (isTouchContextMenu.current || Date.now() - lastTouchTime.current < TOUCH_TIMEOUT) {\n        isTouchContextMenu.current = false;\n        return;\n      }\n\n      enableMouseMode();\n    };\n\n    var handleContextMenu = function () {\n      isTouchContextMenu.current = true;\n    };\n\n    var className = \"rmd-utils--\" + mode;\n    document.body.classList.add(className);\n    window.addEventListener(\"touchstart\", handleTouchStart, true);\n\n    if (mode === \"mouse\") {\n      window.addEventListener(\"keydown\", enableKeyboardMode, true);\n    } else if (mode === \"keyboard\") {\n      window.addEventListener(\"mousedown\", enableMouseMode, true);\n    } else {\n      window.addEventListener(\"mousemove\", handleMouseMove, true);\n      window.addEventListener(\"contextmenu\", handleContextMenu, true);\n    }\n\n    return function () {\n      document.body.classList.remove(className);\n      window.removeEventListener(\"touchstart\", handleTouchStart, true);\n\n      if (mode === \"mouse\") {\n        window.removeEventListener(\"keydown\", enableKeyboardMode, true);\n      } else if (mode === \"keyboard\") {\n        window.removeEventListener(\"mousedown\", enableMouseMode, true);\n      } else {\n        window.removeEventListener(\"mousemove\", handleMouseMove, true);\n        window.removeEventListener(\"contextmenu\", handleContextMenu, true);\n      }\n    };\n  }, [mode]);\n  return mode;\n}","map":{"version":3,"sources":["../../src/mode/useInteractionMode.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { useRef, useState } from \"react\";\nimport { useIsomorphicLayoutEffect } from \"../useIsomorphicLayoutEffect\";\n/**\n * @internal\n */\nvar TOUCH_TIMEOUT = 1200;\n/**\n * This hook helps determine the current interaction mode by attaching the\n * required event listeners to the window. The `mode` will always be defaulted\n * to `mouse` at first since it has the least possibilities of causing errors\n * with styles since the mouse-only styles are normally just `:hover` effects.\n *\n * ## Switching between modes:\n *\n * ### While in `mouse` mode:\n *\n * - any `keydown` event will switch to `keyboard` mode\n *   - this does have the side effect of meta keys also causing the switch over,\n *     but it feels fine since it helps show the current focus in the document\n *     as well\n * - any `touchstart` event will switch to `touch` mode\n *\n * ### While in `keyboard` mode:\n *\n * - any `mousedown` event will switch to `mouse` mode\n *   - it is perfectly okay to move the mouse while in keyboard mode, but still\n *     want to keep the keyboard styles until the user actually starts clicking\n * - any `touchstart` event will switch to `touch` mode\n *\n * ### While in `touch` mode:\n *\n * - any `mousemove` event will switch to `mouse` mode, but **only** if there\n *   hasn't been a `contextmenu` event within the last `1.2s`\n *   - you can really only switch back to `mouse` mode if you are using the\n *     devtools to emulate devices OR using a touch-desktop. I don't know how\n *     common this really is though.\n *   - touching the screen will always fire a `mousemove` event (which is why\n *     the `:hover` styles are normally with `rmd-utils-mouse-only`) and even\n *     after the `contextmenu` event. Normally want to go back to `mouse` mode\n *     when the mouse re-enters the `window`\n *\n * Note: It's currently impossible to switch from `touch` to `keyboard`\n * immediately. You'd first need to switch to `mouse` and then to `keyboard`. I\n * don't really know of any use-cases other than the weird touch-desktop stuff\n * and I have no experience using them.\n *\n * @internal\n */\nexport function useInteractionMode() {\n    var _a = useState(\"mouse\"), mode = _a[0], setMode = _a[1];\n    var lastTouchTime = useRef(0);\n    var isTouchContextMenu = useRef(false);\n    useIsomorphicLayoutEffect(function () {\n        var enableMouseMode = function () { return setMode(\"mouse\"); };\n        var enableKeyboardMode = function () { return setMode(\"keyboard\"); };\n        var handleTouchStart = function () {\n            lastTouchTime.current = Date.now();\n            isTouchContextMenu.current = false;\n            setMode(\"touch\");\n        };\n        var handleMouseMove = function () {\n            if (isTouchContextMenu.current ||\n                Date.now() - lastTouchTime.current < TOUCH_TIMEOUT) {\n                isTouchContextMenu.current = false;\n                return;\n            }\n            enableMouseMode();\n        };\n        var handleContextMenu = function () {\n            isTouchContextMenu.current = true;\n        };\n        var className = \"rmd-utils--\" + mode;\n        document.body.classList.add(className);\n        window.addEventListener(\"touchstart\", handleTouchStart, true);\n        if (mode === \"mouse\") {\n            window.addEventListener(\"keydown\", enableKeyboardMode, true);\n        }\n        else if (mode === \"keyboard\") {\n            window.addEventListener(\"mousedown\", enableMouseMode, true);\n        }\n        else {\n            window.addEventListener(\"mousemove\", handleMouseMove, true);\n            window.addEventListener(\"contextmenu\", handleContextMenu, true);\n        }\n        return function () {\n            document.body.classList.remove(className);\n            window.removeEventListener(\"touchstart\", handleTouchStart, true);\n            if (mode === \"mouse\") {\n                window.removeEventListener(\"keydown\", enableKeyboardMode, true);\n            }\n            else if (mode === \"keyboard\") {\n                window.removeEventListener(\"mousedown\", enableMouseMode, true);\n            }\n            else {\n                window.removeEventListener(\"mousemove\", handleMouseMove, true);\n                window.removeEventListener(\"contextmenu\", handleContextMenu, true);\n            }\n        };\n    }, [mode]);\n    return mode;\n}\n//# sourceMappingURL=useInteractionMode.js.map"]},"metadata":{},"sourceType":"module"}