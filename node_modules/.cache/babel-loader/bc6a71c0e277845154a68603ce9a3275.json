{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { createContext, useCallback, useContext, useState } from \"react\";\nimport cn from \"classnames\";\nimport { useResizeObserver } from \"../sizing/useResizeObserver\";\nimport { useEnsuredRef } from \"../useEnsuredRef\";\nimport { scrollbarSize } from \"./scrollbarSize\";\n/**\n * This is the css variable that is used store the current size of each cell.\n */\n\nexport var CELL_SIZE_VAR = \"--rmd-cell-size\";\n/**\n * This is the css variable that is used store the current margin of each cell.\n */\n\nexport var CELL_MARGIN_VAR = \"--rmd-cell-margin\";\n/**\n * @remarks \\@since 2.3.0\n */\n\nexport var DEFAULT_GRID_LIST_MAX_CELL_SIZE = 150;\n/**\n * @remarks \\@since 2.3.0\n */\n\nexport var DEFAULT_GRID_LIST_PADDING = 16;\nvar context = createContext({\n  columns: -1,\n  cellWidth: -1\n});\n/**\n * @remarks \\@since 2.3.0\n */\n\nexport var GridListSizeProvider = context.Provider;\n\nif (process.env.NODE_ENV !== \"production\") {\n  context.displayName = \"GridListSizeProvider\";\n}\n/**\n * Gets the current size of each cell within the `GridList` component. If this\n * is used without a parent `GridList` component, `-1` is returned instead.\n *\n * @remarks \\@since 2.3.0\n */\n\n\nexport function useGridListSize() {\n  return useContext(context);\n}\n/**\n * The `useGridList` hook allows you to get all the grid and sizing\n * functionality of the `GridList` component without needing to wrap your\n * children in a `<div>` element.\n *\n * Example:\n *\n * ```tsx\n * const [gridListProps] = useGridList({\n *   cellMargin: 16,\n *   maxCellSize: 300,\n *   containerPadding: 4,\n * });\n *\n * return <div {...gridListProps}>{children}</div>;\n * ```\n *\n * Note: You must manually provide the `gridSize` to the `GridListSizeProvider`\n * component that was added in 2.3.0 if you want to use the `useGridSize` hook.\n *\n * Example:\n *\n * ```tsx\n * const [gridListProps, gridSize] = useGridList()\n *\n * return (\n *   <GridListSizeProvider value={gridSize}>\n *     <MyComponent {...gridListProps} />\n *   </GridListSizeProvider>\n * );\n * ```\n *\n * @remarks \\@since 2.3.0\n */\n\nexport function useGridList(_a) {\n  var _b;\n\n  var _c = _a === void 0 ? {} : _a,\n      propRef = _c.ref,\n      style = _c.style,\n      className = _c.className,\n      cellMargin = _c.cellMargin,\n      defaultSize = _c.defaultSize,\n      _d = _c.maxCellSize,\n      maxCellSize = _d === void 0 ? DEFAULT_GRID_LIST_MAX_CELL_SIZE : _d,\n      _e = _c.disableHeight,\n      disableHeight = _e === void 0 ? false : _e,\n      _f = _c.disableWidth,\n      disableWidth = _f === void 0 ? false : _f,\n      _g = _c.containerPadding,\n      containerPadding = _g === void 0 ? DEFAULT_GRID_LIST_PADDING : _g;\n\n  var _h = useEnsuredRef(propRef),\n      ref = _h[0],\n      mergedRef = _h[1];\n\n  var _j = useState(defaultSize || {\n    columns: -1,\n    cellWidth: maxCellSize\n  }),\n      gridSize = _j[0],\n      setGridSize = _j[1];\n\n  var recalculate = useCallback(function () {\n    var target = ref.current;\n\n    if (!target) {\n      return;\n    } // need to use rect instead of offsetWidth since we need decimal precision\n    // for the width since offsetWidth is basically Math.ceil(width). the\n    // calculations for max columns will be off on high-pixel-density monitors\n    // or some zoom levels.\n\n\n    var width = target.getBoundingClientRect().width;\n    width -= containerPadding; // just need to see if there is a scrollbar visible and subtract that width.\n    // don't need decimal precision here since both values will be rounded\n\n    if (target.offsetHeight < target.scrollHeight) {\n      width -= scrollbarSize(\"width\");\n    }\n\n    var columns = Math.ceil(width / maxCellSize);\n    setGridSize({\n      cellWidth: width / columns,\n      columns: columns\n    });\n  }, [containerPadding, maxCellSize, ref]);\n\n  var _k = useResizeObserver(recalculate, {\n    ref: mergedRef,\n    disableHeight: disableHeight,\n    disableWidth: disableWidth\n  }),\n      refHandler = _k[1];\n\n  var mergedStyle = __assign(__assign({}, style), (_b = {}, _b[CELL_SIZE_VAR] = gridSize.cellWidth + \"px\", _b));\n\n  if (cellMargin) {\n    mergedStyle[CELL_MARGIN_VAR] = cellMargin;\n  }\n\n  return [{\n    ref: refHandler,\n    style: mergedStyle,\n    className: cn(\"rmd-grid-list\", className)\n  }, gridSize];\n}","map":{"version":3,"sources":["../../src/layout/useGridList.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport { createContext, useCallback, useContext, useState, } from \"react\";\nimport cn from \"classnames\";\nimport { useResizeObserver } from \"../sizing/useResizeObserver\";\nimport { useEnsuredRef } from \"../useEnsuredRef\";\nimport { scrollbarSize } from \"./scrollbarSize\";\n/**\n * This is the css variable that is used store the current size of each cell.\n */\nexport var CELL_SIZE_VAR = \"--rmd-cell-size\";\n/**\n * This is the css variable that is used store the current margin of each cell.\n */\nexport var CELL_MARGIN_VAR = \"--rmd-cell-margin\";\n/**\n * @remarks \\@since 2.3.0\n */\nexport var DEFAULT_GRID_LIST_MAX_CELL_SIZE = 150;\n/**\n * @remarks \\@since 2.3.0\n */\nexport var DEFAULT_GRID_LIST_PADDING = 16;\nvar context = createContext({\n    columns: -1,\n    cellWidth: -1,\n});\n/**\n * @remarks \\@since 2.3.0\n */\nexport var GridListSizeProvider = context.Provider;\nif (process.env.NODE_ENV !== \"production\") {\n    context.displayName = \"GridListSizeProvider\";\n}\n/**\n * Gets the current size of each cell within the `GridList` component. If this\n * is used without a parent `GridList` component, `-1` is returned instead.\n *\n * @remarks \\@since 2.3.0\n */\nexport function useGridListSize() {\n    return useContext(context);\n}\n/**\n * The `useGridList` hook allows you to get all the grid and sizing\n * functionality of the `GridList` component without needing to wrap your\n * children in a `<div>` element.\n *\n * Example:\n *\n * ```tsx\n * const [gridListProps] = useGridList({\n *   cellMargin: 16,\n *   maxCellSize: 300,\n *   containerPadding: 4,\n * });\n *\n * return <div {...gridListProps}>{children}</div>;\n * ```\n *\n * Note: You must manually provide the `gridSize` to the `GridListSizeProvider`\n * component that was added in 2.3.0 if you want to use the `useGridSize` hook.\n *\n * Example:\n *\n * ```tsx\n * const [gridListProps, gridSize] = useGridList()\n *\n * return (\n *   <GridListSizeProvider value={gridSize}>\n *     <MyComponent {...gridListProps} />\n *   </GridListSizeProvider>\n * );\n * ```\n *\n * @remarks \\@since 2.3.0\n */\nexport function useGridList(_a) {\n    var _b;\n    var _c = _a === void 0 ? {} : _a, propRef = _c.ref, style = _c.style, className = _c.className, cellMargin = _c.cellMargin, defaultSize = _c.defaultSize, _d = _c.maxCellSize, maxCellSize = _d === void 0 ? DEFAULT_GRID_LIST_MAX_CELL_SIZE : _d, _e = _c.disableHeight, disableHeight = _e === void 0 ? false : _e, _f = _c.disableWidth, disableWidth = _f === void 0 ? false : _f, _g = _c.containerPadding, containerPadding = _g === void 0 ? DEFAULT_GRID_LIST_PADDING : _g;\n    var _h = useEnsuredRef(propRef), ref = _h[0], mergedRef = _h[1];\n    var _j = useState(defaultSize || { columns: -1, cellWidth: maxCellSize }), gridSize = _j[0], setGridSize = _j[1];\n    var recalculate = useCallback(function () {\n        var target = ref.current;\n        if (!target) {\n            return;\n        }\n        // need to use rect instead of offsetWidth since we need decimal precision\n        // for the width since offsetWidth is basically Math.ceil(width). the\n        // calculations for max columns will be off on high-pixel-density monitors\n        // or some zoom levels.\n        var width = target.getBoundingClientRect().width;\n        width -= containerPadding;\n        // just need to see if there is a scrollbar visible and subtract that width.\n        // don't need decimal precision here since both values will be rounded\n        if (target.offsetHeight < target.scrollHeight) {\n            width -= scrollbarSize(\"width\");\n        }\n        var columns = Math.ceil(width / maxCellSize);\n        setGridSize({ cellWidth: width / columns, columns: columns });\n    }, [containerPadding, maxCellSize, ref]);\n    var _k = useResizeObserver(recalculate, {\n        ref: mergedRef,\n        disableHeight: disableHeight,\n        disableWidth: disableWidth,\n    }), refHandler = _k[1];\n    var mergedStyle = __assign(__assign({}, style), (_b = {}, _b[CELL_SIZE_VAR] = gridSize.cellWidth + \"px\", _b));\n    if (cellMargin) {\n        mergedStyle[CELL_MARGIN_VAR] = cellMargin;\n    }\n    return [\n        {\n            ref: refHandler,\n            style: mergedStyle,\n            className: cn(\"rmd-grid-list\", className),\n        },\n        gridSize,\n    ];\n}\n//# sourceMappingURL=useGridList.js.map"]},"metadata":{},"sourceType":"module"}