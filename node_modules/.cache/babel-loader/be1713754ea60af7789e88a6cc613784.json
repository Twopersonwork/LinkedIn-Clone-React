{"ast":null,"code":"import { defaults } from \"../defaults\";\nimport { getFuzzyRegExp } from \"./getFuzzyRegExp\";\nimport { DEFAULT_SEARCH_OPTIONS, getSearchString } from \"./utils\";\n/**\n * Filters a list by using a fuzzy search \"algorithm\" (huge double quotes on\n * algorithm). The fuzzy search will just ensure that all the letters in the\n * query string appear in-order for all the remaining items. However, the\n * letters *do not need to be consecutive*.\n *\n * @param query - The current query string\n * @param searchable - The list of searchable items that should be filtered\n * @param options - All the search options to use\n * @returns A filtered list of all the searchable items based on the query\n * string.\n */\n\nexport function fuzzyFilter(query, searchable, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = defaults(options, DEFAULT_SEARCH_OPTIONS),\n      getItemValue = _a.getItemValue,\n      valueKey = _a.valueKey,\n      trim = _a.trim,\n      ignoreWhitespace = _a.ignoreWhitespace;\n\n  query = getSearchString(query, false, trim, ignoreWhitespace);\n\n  if (!searchable.length || !query) {\n    return searchable;\n  }\n\n  var queryRegExp = getFuzzyRegExp(query);\n  return searchable.filter(function (item) {\n    var value = getSearchString(getItemValue(item, valueKey), false, trim, ignoreWhitespace);\n    return value.length && value.match(queryRegExp);\n  });\n}","map":{"version":3,"sources":["../../src/search/fuzzyFilter.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,QAAyB,aAAzB;AACA,SAAS,cAAT,QAA+B,kBAA/B;AACA,SACE,sBADF,EAEE,eAFF,QAIO,SAJP;AAMA;;;;;;;;;;;AAWG;;AACH,OAAM,SAAU,WAAV,CACJ,KADI,EAEJ,UAFI,EAGJ,OAHI,EAG0B;AAA9B,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAA8B;;AAExB,MAAA,EAAA,GAAqD,QAAQ,CACjE,OADiE,EAEjE,sBAFiE,CAA7D;AAAA,MAAE,YAAY,GAAA,EAAA,CAAA,YAAd;AAAA,MAAgB,QAAQ,GAAA,EAAA,CAAA,QAAxB;AAAA,MAA0B,IAAI,GAAA,EAAA,CAAA,IAA9B;AAAA,MAAgC,gBAAgB,GAAA,EAAA,CAAA,gBAAhD;;AAKN,EAAA,KAAK,GAAG,eAAe,CAAC,KAAD,EAAQ,KAAR,EAAe,IAAf,EAAqB,gBAArB,CAAvB;;AACA,MAAI,CAAC,UAAU,CAAC,MAAZ,IAAsB,CAAC,KAA3B,EAAkC;AAChC,WAAO,UAAP;AACD;;AAED,MAAM,WAAW,GAAG,cAAc,CAAC,KAAD,CAAlC;AACA,SAAO,UAAU,CAAC,MAAX,CAAkB,UAAC,IAAD,EAAK;AAC5B,QAAM,KAAK,GAAG,eAAe,CAC3B,YAAY,CAAC,IAAD,EAAO,QAAP,CADe,EAE3B,KAF2B,EAG3B,IAH2B,EAI3B,gBAJ2B,CAA7B;AAOA,WAAO,KAAK,CAAC,MAAN,IAAgB,KAAK,CAAC,KAAN,CAAY,WAAZ,CAAvB;AACD,GATM,CAAP;AAUD","sourceRoot":"","sourcesContent":["import { defaults } from \"../defaults\";\nimport { getFuzzyRegExp } from \"./getFuzzyRegExp\";\nimport { DEFAULT_SEARCH_OPTIONS, getSearchString, } from \"./utils\";\n/**\n * Filters a list by using a fuzzy search \"algorithm\" (huge double quotes on\n * algorithm). The fuzzy search will just ensure that all the letters in the\n * query string appear in-order for all the remaining items. However, the\n * letters *do not need to be consecutive*.\n *\n * @param query - The current query string\n * @param searchable - The list of searchable items that should be filtered\n * @param options - All the search options to use\n * @returns A filtered list of all the searchable items based on the query\n * string.\n */\nexport function fuzzyFilter(query, searchable, options) {\n    if (options === void 0) { options = {}; }\n    var _a = defaults(options, DEFAULT_SEARCH_OPTIONS), getItemValue = _a.getItemValue, valueKey = _a.valueKey, trim = _a.trim, ignoreWhitespace = _a.ignoreWhitespace;\n    query = getSearchString(query, false, trim, ignoreWhitespace);\n    if (!searchable.length || !query) {\n        return searchable;\n    }\n    var queryRegExp = getFuzzyRegExp(query);\n    return searchable.filter(function (item) {\n        var value = getSearchString(getItemValue(item, valueKey), false, trim, ignoreWhitespace);\n        return value.length && value.match(queryRegExp);\n    });\n}\n//# sourceMappingURL=fuzzyFilter.js.map"]},"metadata":{},"sourceType":"module"}