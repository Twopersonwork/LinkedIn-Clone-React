{"ast":null,"code":"import { defaults } from \"../defaults\";\nimport { DEFAULT_SEARCH_OPTIONS, getSearchString } from \"./utils\";\n/**\n * Filters a list by ensuring that all items contain the query string in order\n * anywhere in it's own value.\n *\n * @param query - The current query string\n * @param searchable - The list of searchable items that should be filtered\n * @param options - All the search options to use\n * @returns A filtered list of all the searchable items based on the query\n * string.\n */\n\nexport function caseInsensitiveFilter(query, searchable, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = defaults(options, DEFAULT_SEARCH_OPTIONS),\n      getItemValue = _a.getItemValue,\n      valueKey = _a.valueKey,\n      trim = _a.trim,\n      ignoreWhitespace = _a.ignoreWhitespace,\n      _b = _a.startsWith,\n      startsWith = _b === void 0 ? false : _b;\n\n  query = getSearchString(query, true, trim, ignoreWhitespace);\n\n  if (!query || !searchable.length) {\n    return searchable;\n  }\n\n  return searchable.filter(function (item) {\n    var value = getSearchString(getItemValue(item, valueKey), true, trim, ignoreWhitespace);\n\n    if (startsWith) {\n      return value.indexOf(query) === 0;\n    }\n\n    return value.indexOf(query) !== -1;\n  });\n}","map":{"version":3,"sources":["../../src/search/caseInsensitiveFilter.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,QAAyB,aAAzB;AACA,SACE,sBADF,EAEE,eAFF,QAIO,SAJP;AAeA;;;;;;;;;AASG;;AACH,OAAM,SAAU,qBAAV,CACJ,KADI,EAEJ,UAFI,EAGJ,OAHI,EAGmC;AAAvC,MAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,OAAA,GAAA,EAAA;AAAuC;;AAEjC,MAAA,EAAA,GAMF,QAAQ,CAAC,OAAD,EAAU,sBAAV,CANN;AAAA,MACJ,YAAY,GAAA,EAAA,CAAA,YADR;AAAA,MAEJ,QAAQ,GAAA,EAAA,CAAA,QAFJ;AAAA,MAGJ,IAAI,GAAA,EAAA,CAAA,IAHA;AAAA,MAIJ,gBAAgB,GAAA,EAAA,CAAA,gBAJZ;AAAA,MAKJ,EAAA,GAAA,EAAA,CAAA,UALI;AAAA,MAKJ,UAAU,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,EALd;;AAQN,EAAA,KAAK,GAAG,eAAe,CAAC,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoB,gBAApB,CAAvB;;AACA,MAAI,CAAC,KAAD,IAAU,CAAC,UAAU,CAAC,MAA1B,EAAkC;AAChC,WAAO,UAAP;AACD;;AAED,SAAO,UAAU,CAAC,MAAX,CAAkB,UAAC,IAAD,EAAK;AAC5B,QAAM,KAAK,GAAG,eAAe,CAC3B,YAAY,CAAC,IAAD,EAAO,QAAP,CADe,EAE3B,IAF2B,EAG3B,IAH2B,EAI3B,gBAJ2B,CAA7B;;AAOA,QAAI,UAAJ,EAAgB;AACd,aAAO,KAAK,CAAC,OAAN,CAAc,KAAd,MAAyB,CAAhC;AACD;;AAED,WAAO,KAAK,CAAC,OAAN,CAAc,KAAd,MAAyB,CAAC,CAAjC;AACD,GAbM,CAAP;AAcD","sourceRoot":"","sourcesContent":["import { defaults } from \"../defaults\";\nimport { DEFAULT_SEARCH_OPTIONS, getSearchString, } from \"./utils\";\n/**\n * Filters a list by ensuring that all items contain the query string in order\n * anywhere in it's own value.\n *\n * @param query - The current query string\n * @param searchable - The list of searchable items that should be filtered\n * @param options - All the search options to use\n * @returns A filtered list of all the searchable items based on the query\n * string.\n */\nexport function caseInsensitiveFilter(query, searchable, options) {\n    if (options === void 0) { options = {}; }\n    var _a = defaults(options, DEFAULT_SEARCH_OPTIONS), getItemValue = _a.getItemValue, valueKey = _a.valueKey, trim = _a.trim, ignoreWhitespace = _a.ignoreWhitespace, _b = _a.startsWith, startsWith = _b === void 0 ? false : _b;\n    query = getSearchString(query, true, trim, ignoreWhitespace);\n    if (!query || !searchable.length) {\n        return searchable;\n    }\n    return searchable.filter(function (item) {\n        var value = getSearchString(getItemValue(item, valueKey), true, trim, ignoreWhitespace);\n        if (startsWith) {\n            return value.indexOf(query) === 0;\n        }\n        return value.indexOf(query) !== -1;\n    });\n}\n//# sourceMappingURL=caseInsensitiveFilter.js.map"]},"metadata":{},"sourceType":"module"}