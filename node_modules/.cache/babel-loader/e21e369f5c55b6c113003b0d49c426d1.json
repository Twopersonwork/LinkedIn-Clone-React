{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport React, { useEffect, useMemo, useRef } from \"react\";\nimport { DEFAULT_DESKTOP_LARGE_MIN_WIDTH, DEFAULT_DESKTOP_MIN_WIDTH, DEFAULT_PHONE_MAX_WIDTH, DEFAULT_TABLET_MAX_WIDTH, DEFAULT_TABLET_MIN_WIDTH } from \"./constants\";\nimport { AppSizeContext } from \"./useAppSize\";\nimport { DEFAULT_APP_SIZE, useAppSizeMedia } from \"./useAppSizeMedia\";\n/**\n * This component should be mounted near the top of your app as it will keep\n * track of the current app size based on the provided breakpoint widths.\n */\n\nexport function AppSizeListener(_a) {\n  var children = _a.children,\n      onChange = _a.onChange,\n      _b = _a.phoneMaxWidth,\n      phoneMaxWidth = _b === void 0 ? DEFAULT_PHONE_MAX_WIDTH : _b,\n      _c = _a.tabletMinWidth,\n      tabletMinWidth = _c === void 0 ? DEFAULT_TABLET_MIN_WIDTH : _c,\n      _d = _a.tabletMaxWidth,\n      tabletMaxWidth = _d === void 0 ? DEFAULT_TABLET_MAX_WIDTH : _d,\n      _e = _a.desktopMinWidth,\n      desktopMinWidth = _e === void 0 ? DEFAULT_DESKTOP_MIN_WIDTH : _e,\n      _f = _a.desktopLargeMinWidth,\n      desktopLargeMinWidth = _f === void 0 ? DEFAULT_DESKTOP_LARGE_MIN_WIDTH : _f,\n      _g = _a.defaultSize,\n      defaultSize = _g === void 0 ? DEFAULT_APP_SIZE : _g;\n  var appSize = useAppSizeMedia({\n    phoneMaxWidth: phoneMaxWidth,\n    tabletMaxWidth: tabletMaxWidth,\n    tabletMinWidth: tabletMinWidth,\n    desktopMinWidth: desktopMinWidth,\n    desktopLargeMinWidth: desktopLargeMinWidth,\n    defaultSize: defaultSize\n  });\n  var lastValue = useRef(appSize);\n  useEffect(function () {\n    // trigger the onChange prop on mount only if there is a difference between\n    // the defaultSize and the mounted size.\n    if (onChange && (defaultSize.isPhone !== appSize.isPhone || defaultSize.isTablet !== appSize.isTablet || defaultSize.isDesktop !== appSize.isDesktop || defaultSize.isLargeDesktop !== appSize.isLargeDesktop || defaultSize.isLandscape !== appSize.isLandscape)) {\n      onChange(appSize, defaultSize);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  useEffect(function () {\n    if (lastValue.current !== appSize) {\n      if (onChange) {\n        onChange(appSize, lastValue.current);\n      }\n\n      lastValue.current = appSize;\n    }\n  });\n  var value = useMemo(function () {\n    return __assign(__assign({}, appSize), {\n      __initialized: true\n    });\n  }, [appSize]);\n  return React.createElement(AppSizeContext.Provider, {\n    value: value\n  }, children);\n}\n/* istanbul ignore next */\n\nif (process.env.NODE_ENV !== \"production\") {\n  try {\n    var PropTypes = require(\"prop-types\");\n\n    var querySize = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\n    AppSizeListener.propTypes = {\n      children: PropTypes.node.isRequired,\n      onChange: PropTypes.func,\n      phoneMaxWidth: querySize,\n      tabletMinWidth: querySize,\n      tabletMaxWidth: querySize,\n      desktopMinWidth: querySize,\n      desktopLargeMinWidth: querySize,\n      defaultSize: PropTypes.shape({\n        isPhone: PropTypes.bool.isRequired,\n        isTablet: PropTypes.bool.isRequired,\n        isDesktop: PropTypes.bool.isRequired,\n        isLargeDesktop: PropTypes.bool.isRequired,\n        isLandscape: PropTypes.bool.isRequired\n      })\n    };\n  } catch (e) {}\n}","map":{"version":3,"sources":["../../src/sizing/AppSizeListener.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { useEffect, useMemo, useRef, } from \"react\";\nimport { DEFAULT_DESKTOP_LARGE_MIN_WIDTH, DEFAULT_DESKTOP_MIN_WIDTH, DEFAULT_PHONE_MAX_WIDTH, DEFAULT_TABLET_MAX_WIDTH, DEFAULT_TABLET_MIN_WIDTH, } from \"./constants\";\nimport { AppSizeContext } from \"./useAppSize\";\nimport { DEFAULT_APP_SIZE, useAppSizeMedia, } from \"./useAppSizeMedia\";\n/**\n * This component should be mounted near the top of your app as it will keep\n * track of the current app size based on the provided breakpoint widths.\n */\nexport function AppSizeListener(_a) {\n    var children = _a.children, onChange = _a.onChange, _b = _a.phoneMaxWidth, phoneMaxWidth = _b === void 0 ? DEFAULT_PHONE_MAX_WIDTH : _b, _c = _a.tabletMinWidth, tabletMinWidth = _c === void 0 ? DEFAULT_TABLET_MIN_WIDTH : _c, _d = _a.tabletMaxWidth, tabletMaxWidth = _d === void 0 ? DEFAULT_TABLET_MAX_WIDTH : _d, _e = _a.desktopMinWidth, desktopMinWidth = _e === void 0 ? DEFAULT_DESKTOP_MIN_WIDTH : _e, _f = _a.desktopLargeMinWidth, desktopLargeMinWidth = _f === void 0 ? DEFAULT_DESKTOP_LARGE_MIN_WIDTH : _f, _g = _a.defaultSize, defaultSize = _g === void 0 ? DEFAULT_APP_SIZE : _g;\n    var appSize = useAppSizeMedia({\n        phoneMaxWidth: phoneMaxWidth,\n        tabletMaxWidth: tabletMaxWidth,\n        tabletMinWidth: tabletMinWidth,\n        desktopMinWidth: desktopMinWidth,\n        desktopLargeMinWidth: desktopLargeMinWidth,\n        defaultSize: defaultSize,\n    });\n    var lastValue = useRef(appSize);\n    useEffect(function () {\n        // trigger the onChange prop on mount only if there is a difference between\n        // the defaultSize and the mounted size.\n        if (onChange &&\n            (defaultSize.isPhone !== appSize.isPhone ||\n                defaultSize.isTablet !== appSize.isTablet ||\n                defaultSize.isDesktop !== appSize.isDesktop ||\n                defaultSize.isLargeDesktop !== appSize.isLargeDesktop ||\n                defaultSize.isLandscape !== appSize.isLandscape)) {\n            onChange(appSize, defaultSize);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    useEffect(function () {\n        if (lastValue.current !== appSize) {\n            if (onChange) {\n                onChange(appSize, lastValue.current);\n            }\n            lastValue.current = appSize;\n        }\n    });\n    var value = useMemo(function () { return (__assign(__assign({}, appSize), { __initialized: true })); }, [appSize]);\n    return (React.createElement(AppSizeContext.Provider, { value: value }, children));\n}\n/* istanbul ignore next */\nif (process.env.NODE_ENV !== \"production\") {\n    try {\n        var PropTypes = require(\"prop-types\");\n        var querySize = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\n        AppSizeListener.propTypes = {\n            children: PropTypes.node.isRequired,\n            onChange: PropTypes.func,\n            phoneMaxWidth: querySize,\n            tabletMinWidth: querySize,\n            tabletMaxWidth: querySize,\n            desktopMinWidth: querySize,\n            desktopLargeMinWidth: querySize,\n            defaultSize: PropTypes.shape({\n                isPhone: PropTypes.bool.isRequired,\n                isTablet: PropTypes.bool.isRequired,\n                isDesktop: PropTypes.bool.isRequired,\n                isLargeDesktop: PropTypes.bool.isRequired,\n                isLandscape: PropTypes.bool.isRequired,\n            }),\n        };\n    }\n    catch (e) { }\n}\n//# sourceMappingURL=AppSizeListener.js.map"]},"metadata":{},"sourceType":"module"}