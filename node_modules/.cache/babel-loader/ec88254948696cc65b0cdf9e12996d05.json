{"ast":null,"code":"import { useCallback, useRef } from \"react\";\nimport { getFocusableElements } from \"./getFocusableElements\";\n/**\n * Creates an `onKeyDown` event handler to trap keyboard focus within a\n * container element.\n *\n * @typeParam E - The HTMLElement type that has the keydown event listener\n * attached.\n * @param options - All the options for handling tab focus wrapping.\n * @returns The kedown event handler to enforce focus wrapping or the onKeyDown\n * prop if this functionality is disabled.\n */\n\nexport function useTabFocusWrap(_a) {\n  var _b = _a.disabled,\n      disabled = _b === void 0 ? false : _b,\n      _c = _a.disableFocusCache,\n      disableFocusCache = _c === void 0 ? false : _c,\n      onKeyDown = _a.onKeyDown;\n  var focusables = useRef([]);\n  var handleKeyDown = useCallback(function (event) {\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n\n    if (event.key !== \"Tab\") {\n      return;\n    }\n\n    if (disableFocusCache || !focusables.current.length) {\n      focusables.current = getFocusableElements(event.currentTarget);\n    }\n\n    var elements = focusables.current;\n    var l = elements.length;\n\n    if (l === 0) {\n      return;\n    }\n\n    if (l === 1) {\n      event.preventDefault();\n      elements[0].focus();\n    } else if (elements[0] === event.target && event.shiftKey) {\n      event.preventDefault();\n      elements[l - 1].focus();\n    } else if (elements[l - 1] === event.target && !event.shiftKey) {\n      event.preventDefault();\n      elements[0].focus();\n    }\n  }, [onKeyDown, disableFocusCache]);\n  return disabled ? onKeyDown : handleKeyDown;\n}","map":{"version":3,"sources":["../../src/wia-aria/useTabFocusWrap.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,EAAsB,MAAtB,QAAoC,OAApC;AAEA,SAAS,oBAAT,QAAqC,wBAArC;AAqBA;;;;;;;;;AASG;;AACH,OAAM,SAAU,eAAV,CAAiD,EAAjD,EAIO;MAHX,EAAA,GAAA,EAAA,CAAA,Q;MAAA,QAAQ,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,E;MAChB,EAAA,GAAA,EAAA,CAAA,iB;MAAA,iBAAiB,GAAA,EAAA,KAAA,KAAA,CAAA,GAAG,KAAH,GAAQ,E;MACzB,SAAS,GAAA,EAAA,CAAA,S;AAET,MAAM,UAAU,GAAG,MAAM,CAAgB,EAAhB,CAAzB;AAEA,MAAM,aAAa,GAAG,WAAW,CAC/B,UAAC,KAAD,EAAM;AACJ,QAAI,SAAJ,EAAe;AACb,MAAA,SAAS,CAAC,KAAD,CAAT;AACD;;AAED,QAAI,KAAK,CAAC,GAAN,KAAc,KAAlB,EAAyB;AACvB;AACD;;AAED,QAAI,iBAAiB,IAAI,CAAC,UAAU,CAAC,OAAX,CAAmB,MAA7C,EAAqD;AACnD,MAAA,UAAU,CAAC,OAAX,GAAqB,oBAAoB,CAAC,KAAK,CAAC,aAAP,CAAzC;AACD;;AAED,QAAM,QAAQ,GAAG,UAAU,CAAC,OAA5B;AACA,QAAM,CAAC,GAAG,QAAQ,CAAC,MAAnB;;AACA,QAAI,CAAC,KAAK,CAAV,EAAa;AACX;AACD;;AAED,QAAI,CAAC,KAAK,CAAV,EAAa;AACX,MAAA,KAAK,CAAC,cAAN;AACA,MAAA,QAAQ,CAAC,CAAD,CAAR,CAAY,KAAZ;AACD,KAHD,MAGO,IAAI,QAAQ,CAAC,CAAD,CAAR,KAAgB,KAAK,CAAC,MAAtB,IAAgC,KAAK,CAAC,QAA1C,EAAoD;AACzD,MAAA,KAAK,CAAC,cAAN;AACA,MAAA,QAAQ,CAAC,CAAC,GAAG,CAAL,CAAR,CAAgB,KAAhB;AACD,KAHM,MAGA,IAAI,QAAQ,CAAC,CAAC,GAAG,CAAL,CAAR,KAAoB,KAAK,CAAC,MAA1B,IAAoC,CAAC,KAAK,CAAC,QAA/C,EAAyD;AAC9D,MAAA,KAAK,CAAC,cAAN;AACA,MAAA,QAAQ,CAAC,CAAD,CAAR,CAAY,KAAZ;AACD;AACF,GA9B8B,EA+B/B,CAAC,SAAD,EAAY,iBAAZ,CA/B+B,CAAjC;AAkCA,SAAO,QAAQ,GAAG,SAAH,GAAe,aAA9B;AACD","sourceRoot":"","sourcesContent":["import { useCallback, useRef } from \"react\";\nimport { getFocusableElements } from \"./getFocusableElements\";\n/**\n * Creates an `onKeyDown` event handler to trap keyboard focus within a\n * container element.\n *\n * @typeParam E - The HTMLElement type that has the keydown event listener\n * attached.\n * @param options - All the options for handling tab focus wrapping.\n * @returns The kedown event handler to enforce focus wrapping or the onKeyDown\n * prop if this functionality is disabled.\n */\nexport function useTabFocusWrap(_a) {\n    var _b = _a.disabled, disabled = _b === void 0 ? false : _b, _c = _a.disableFocusCache, disableFocusCache = _c === void 0 ? false : _c, onKeyDown = _a.onKeyDown;\n    var focusables = useRef([]);\n    var handleKeyDown = useCallback(function (event) {\n        if (onKeyDown) {\n            onKeyDown(event);\n        }\n        if (event.key !== \"Tab\") {\n            return;\n        }\n        if (disableFocusCache || !focusables.current.length) {\n            focusables.current = getFocusableElements(event.currentTarget);\n        }\n        var elements = focusables.current;\n        var l = elements.length;\n        if (l === 0) {\n            return;\n        }\n        if (l === 1) {\n            event.preventDefault();\n            elements[0].focus();\n        }\n        else if (elements[0] === event.target && event.shiftKey) {\n            event.preventDefault();\n            elements[l - 1].focus();\n        }\n        else if (elements[l - 1] === event.target && !event.shiftKey) {\n            event.preventDefault();\n            elements[0].focus();\n        }\n    }, [onKeyDown, disableFocusCache]);\n    return disabled ? onKeyDown : handleKeyDown;\n}\n//# sourceMappingURL=useTabFocusWrap.js.map"]},"metadata":{},"sourceType":"module"}